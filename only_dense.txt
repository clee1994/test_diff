HloModule xla_computation_unknown.9650

primitive_computation_add.713 {
  parameter.714 = f32[] parameter(0)
  parameter.715 = f32[] parameter(1)
  ROOT add.716 = f32[] add(parameter.714, parameter.715)
}

primitive_computation_add.727 {
  parameter.728 = f32[] parameter(0)
  parameter.729 = f32[] parameter(1)
  ROOT add.730 = f32[] add(parameter.728, parameter.729)
}

primitive_computation_max.792 {
  parameter.793 = bf16[] parameter(0)
  parameter.794 = bf16[] parameter(1)
  ROOT maximum.795 = bf16[] maximum(parameter.793, parameter.794)
}

primitive_computation_add.806 {
  parameter.807 = f32[] parameter(0)
  parameter.808 = f32[] parameter(1)
  ROOT add.809 = f32[] add(parameter.807, parameter.808)
}

primitive_computation_add.820 {
  parameter.821 = f32[] parameter(0)
  parameter.822 = f32[] parameter(1)
  ROOT add.823 = f32[] add(parameter.821, parameter.822)
}

primitive_computation_add.893 {
  parameter.894 = f32[] parameter(0)
  parameter.895 = f32[] parameter(1)
  ROOT add.896 = f32[] add(parameter.894, parameter.895)
}

primitive_computation_add.907 {
  parameter.908 = f32[] parameter(0)
  parameter.909 = f32[] parameter(1)
  ROOT add.910 = f32[] add(parameter.908, parameter.909)
}

primitive_computation_add.980 {
  parameter.981 = f32[] parameter(0)
  parameter.982 = f32[] parameter(1)
  ROOT add.983 = f32[] add(parameter.981, parameter.982)
}

primitive_computation_add.994 {
  parameter.995 = f32[] parameter(0)
  parameter.996 = f32[] parameter(1)
  ROOT add.997 = f32[] add(parameter.995, parameter.996)
}

primitive_computation_add.1056 {
  parameter.1057 = f32[] parameter(0)
  parameter.1058 = f32[] parameter(1)
  ROOT add.1059 = f32[] add(parameter.1057, parameter.1058)
}

primitive_computation_add.1070 {
  parameter.1071 = f32[] parameter(0)
  parameter.1072 = f32[] parameter(1)
  ROOT add.1073 = f32[] add(parameter.1071, parameter.1072)
}

primitive_computation_add.1144 {
  parameter.1145 = f32[] parameter(0)
  parameter.1146 = f32[] parameter(1)
  ROOT add.1147 = f32[] add(parameter.1145, parameter.1146)
}

primitive_computation_add.1158 {
  parameter.1159 = f32[] parameter(0)
  parameter.1160 = f32[] parameter(1)
  ROOT add.1161 = f32[] add(parameter.1159, parameter.1160)
}

primitive_computation_add.1231 {
  parameter.1232 = f32[] parameter(0)
  parameter.1233 = f32[] parameter(1)
  ROOT add.1234 = f32[] add(parameter.1232, parameter.1233)
}

primitive_computation_add.1245 {
  parameter.1246 = f32[] parameter(0)
  parameter.1247 = f32[] parameter(1)
  ROOT add.1248 = f32[] add(parameter.1246, parameter.1247)
}

primitive_computation_add.1318 {
  parameter.1319 = f32[] parameter(0)
  parameter.1320 = f32[] parameter(1)
  ROOT add.1321 = f32[] add(parameter.1319, parameter.1320)
}

primitive_computation_add.1332 {
  parameter.1333 = f32[] parameter(0)
  parameter.1334 = f32[] parameter(1)
  ROOT add.1335 = f32[] add(parameter.1333, parameter.1334)
}

primitive_computation_add.1406 {
  parameter.1407 = f32[] parameter(0)
  parameter.1408 = f32[] parameter(1)
  ROOT add.1409 = f32[] add(parameter.1407, parameter.1408)
}

primitive_computation_add.1420 {
  parameter.1421 = f32[] parameter(0)
  parameter.1422 = f32[] parameter(1)
  ROOT add.1423 = f32[] add(parameter.1421, parameter.1422)
}

primitive_computation_add.1493 {
  parameter.1494 = f32[] parameter(0)
  parameter.1495 = f32[] parameter(1)
  ROOT add.1496 = f32[] add(parameter.1494, parameter.1495)
}

primitive_computation_add.1507 {
  parameter.1508 = f32[] parameter(0)
  parameter.1509 = f32[] parameter(1)
  ROOT add.1510 = f32[] add(parameter.1508, parameter.1509)
}

primitive_computation_add.1580 {
  parameter.1581 = f32[] parameter(0)
  parameter.1582 = f32[] parameter(1)
  ROOT add.1583 = f32[] add(parameter.1581, parameter.1582)
}

primitive_computation_add.1594 {
  parameter.1595 = f32[] parameter(0)
  parameter.1596 = f32[] parameter(1)
  ROOT add.1597 = f32[] add(parameter.1595, parameter.1596)
}

primitive_computation_add.1668 {
  parameter.1669 = f32[] parameter(0)
  parameter.1670 = f32[] parameter(1)
  ROOT add.1671 = f32[] add(parameter.1669, parameter.1670)
}

primitive_computation_add.1682 {
  parameter.1683 = f32[] parameter(0)
  parameter.1684 = f32[] parameter(1)
  ROOT add.1685 = f32[] add(parameter.1683, parameter.1684)
}

primitive_computation_add.1755 {
  parameter.1756 = f32[] parameter(0)
  parameter.1757 = f32[] parameter(1)
  ROOT add.1758 = f32[] add(parameter.1756, parameter.1757)
}

primitive_computation_add.1769 {
  parameter.1770 = f32[] parameter(0)
  parameter.1771 = f32[] parameter(1)
  ROOT add.1772 = f32[] add(parameter.1770, parameter.1771)
}

primitive_computation_add.1842 {
  parameter.1843 = f32[] parameter(0)
  parameter.1844 = f32[] parameter(1)
  ROOT add.1845 = f32[] add(parameter.1843, parameter.1844)
}

primitive_computation_add.1856 {
  parameter.1857 = f32[] parameter(0)
  parameter.1858 = f32[] parameter(1)
  ROOT add.1859 = f32[] add(parameter.1857, parameter.1858)
}

primitive_computation_add.1918 {
  parameter.1919 = f32[] parameter(0)
  parameter.1920 = f32[] parameter(1)
  ROOT add.1921 = f32[] add(parameter.1919, parameter.1920)
}

primitive_computation_add.1932 {
  parameter.1933 = f32[] parameter(0)
  parameter.1934 = f32[] parameter(1)
  ROOT add.1935 = f32[] add(parameter.1933, parameter.1934)
}

primitive_computation_add.2006 {
  parameter.2007 = f32[] parameter(0)
  parameter.2008 = f32[] parameter(1)
  ROOT add.2009 = f32[] add(parameter.2007, parameter.2008)
}

primitive_computation_add.2020 {
  parameter.2021 = f32[] parameter(0)
  parameter.2022 = f32[] parameter(1)
  ROOT add.2023 = f32[] add(parameter.2021, parameter.2022)
}

primitive_computation_add.2093 {
  parameter.2094 = f32[] parameter(0)
  parameter.2095 = f32[] parameter(1)
  ROOT add.2096 = f32[] add(parameter.2094, parameter.2095)
}

primitive_computation_add.2107 {
  parameter.2108 = f32[] parameter(0)
  parameter.2109 = f32[] parameter(1)
  ROOT add.2110 = f32[] add(parameter.2108, parameter.2109)
}

primitive_computation_add.2180 {
  parameter.2181 = f32[] parameter(0)
  parameter.2182 = f32[] parameter(1)
  ROOT add.2183 = f32[] add(parameter.2181, parameter.2182)
}

primitive_computation_add.2194 {
  parameter.2195 = f32[] parameter(0)
  parameter.2196 = f32[] parameter(1)
  ROOT add.2197 = f32[] add(parameter.2195, parameter.2196)
}

primitive_computation_add.2268 {
  parameter.2269 = f32[] parameter(0)
  parameter.2270 = f32[] parameter(1)
  ROOT add.2271 = f32[] add(parameter.2269, parameter.2270)
}

primitive_computation_add.2282 {
  parameter.2283 = f32[] parameter(0)
  parameter.2284 = f32[] parameter(1)
  ROOT add.2285 = f32[] add(parameter.2283, parameter.2284)
}

primitive_computation_add.2355 {
  parameter.2356 = f32[] parameter(0)
  parameter.2357 = f32[] parameter(1)
  ROOT add.2358 = f32[] add(parameter.2356, parameter.2357)
}

primitive_computation_add.2369 {
  parameter.2370 = f32[] parameter(0)
  parameter.2371 = f32[] parameter(1)
  ROOT add.2372 = f32[] add(parameter.2370, parameter.2371)
}

primitive_computation_add.2442 {
  parameter.2443 = f32[] parameter(0)
  parameter.2444 = f32[] parameter(1)
  ROOT add.2445 = f32[] add(parameter.2443, parameter.2444)
}

primitive_computation_add.2456 {
  parameter.2457 = f32[] parameter(0)
  parameter.2458 = f32[] parameter(1)
  ROOT add.2459 = f32[] add(parameter.2457, parameter.2458)
}

primitive_computation_add.2530 {
  parameter.2531 = f32[] parameter(0)
  parameter.2532 = f32[] parameter(1)
  ROOT add.2533 = f32[] add(parameter.2531, parameter.2532)
}

primitive_computation_add.2544 {
  parameter.2545 = f32[] parameter(0)
  parameter.2546 = f32[] parameter(1)
  ROOT add.2547 = f32[] add(parameter.2545, parameter.2546)
}

primitive_computation_add.2617 {
  parameter.2618 = f32[] parameter(0)
  parameter.2619 = f32[] parameter(1)
  ROOT add.2620 = f32[] add(parameter.2618, parameter.2619)
}

primitive_computation_add.2631 {
  parameter.2632 = f32[] parameter(0)
  parameter.2633 = f32[] parameter(1)
  ROOT add.2634 = f32[] add(parameter.2632, parameter.2633)
}

primitive_computation_add.2704 {
  parameter.2705 = f32[] parameter(0)
  parameter.2706 = f32[] parameter(1)
  ROOT add.2707 = f32[] add(parameter.2705, parameter.2706)
}

primitive_computation_add.2718 {
  parameter.2719 = f32[] parameter(0)
  parameter.2720 = f32[] parameter(1)
  ROOT add.2721 = f32[] add(parameter.2719, parameter.2720)
}

primitive_computation_add.2792 {
  parameter.2793 = f32[] parameter(0)
  parameter.2794 = f32[] parameter(1)
  ROOT add.2795 = f32[] add(parameter.2793, parameter.2794)
}

primitive_computation_add.2806 {
  parameter.2807 = f32[] parameter(0)
  parameter.2808 = f32[] parameter(1)
  ROOT add.2809 = f32[] add(parameter.2807, parameter.2808)
}

primitive_computation_add.2879 {
  parameter.2880 = f32[] parameter(0)
  parameter.2881 = f32[] parameter(1)
  ROOT add.2882 = f32[] add(parameter.2880, parameter.2881)
}

primitive_computation_add.2893 {
  parameter.2894 = f32[] parameter(0)
  parameter.2895 = f32[] parameter(1)
  ROOT add.2896 = f32[] add(parameter.2894, parameter.2895)
}

primitive_computation_add.2966 {
  parameter.2967 = f32[] parameter(0)
  parameter.2968 = f32[] parameter(1)
  ROOT add.2969 = f32[] add(parameter.2967, parameter.2968)
}

primitive_computation_add.2980 {
  parameter.2981 = f32[] parameter(0)
  parameter.2982 = f32[] parameter(1)
  ROOT add.2983 = f32[] add(parameter.2981, parameter.2982)
}

primitive_computation_add.3042 {
  parameter.3043 = f32[] parameter(0)
  parameter.3044 = f32[] parameter(1)
  ROOT add.3045 = f32[] add(parameter.3043, parameter.3044)
}

primitive_computation_add.3056 {
  parameter.3057 = f32[] parameter(0)
  parameter.3058 = f32[] parameter(1)
  ROOT add.3059 = f32[] add(parameter.3057, parameter.3058)
}

primitive_computation_add.3130 {
  parameter.3131 = f32[] parameter(0)
  parameter.3132 = f32[] parameter(1)
  ROOT add.3133 = f32[] add(parameter.3131, parameter.3132)
}

primitive_computation_add.3144 {
  parameter.3145 = f32[] parameter(0)
  parameter.3146 = f32[] parameter(1)
  ROOT add.3147 = f32[] add(parameter.3145, parameter.3146)
}

primitive_computation_add.3217 {
  parameter.3218 = f32[] parameter(0)
  parameter.3219 = f32[] parameter(1)
  ROOT add.3220 = f32[] add(parameter.3218, parameter.3219)
}

primitive_computation_add.3231 {
  parameter.3232 = f32[] parameter(0)
  parameter.3233 = f32[] parameter(1)
  ROOT add.3234 = f32[] add(parameter.3232, parameter.3233)
}

primitive_computation_add.3304 {
  parameter.3305 = f32[] parameter(0)
  parameter.3306 = f32[] parameter(1)
  ROOT add.3307 = f32[] add(parameter.3305, parameter.3306)
}

primitive_computation_add.3318 {
  parameter.3319 = f32[] parameter(0)
  parameter.3320 = f32[] parameter(1)
  ROOT add.3321 = f32[] add(parameter.3319, parameter.3320)
}

primitive_computation_add.3392 {
  parameter.3393 = f32[] parameter(0)
  parameter.3394 = f32[] parameter(1)
  ROOT add.3395 = f32[] add(parameter.3393, parameter.3394)
}

primitive_computation_add.3406 {
  parameter.3407 = f32[] parameter(0)
  parameter.3408 = f32[] parameter(1)
  ROOT add.3409 = f32[] add(parameter.3407, parameter.3408)
}

primitive_computation_add.3479 {
  parameter.3480 = f32[] parameter(0)
  parameter.3481 = f32[] parameter(1)
  ROOT add.3482 = f32[] add(parameter.3480, parameter.3481)
}

primitive_computation_add.3493 {
  parameter.3494 = f32[] parameter(0)
  parameter.3495 = f32[] parameter(1)
  ROOT add.3496 = f32[] add(parameter.3494, parameter.3495)
}

primitive_computation_add.3566 {
  parameter.3567 = f32[] parameter(0)
  parameter.3568 = f32[] parameter(1)
  ROOT add.3569 = f32[] add(parameter.3567, parameter.3568)
}

primitive_computation_add.3580 {
  parameter.3581 = f32[] parameter(0)
  parameter.3582 = f32[] parameter(1)
  ROOT add.3583 = f32[] add(parameter.3581, parameter.3582)
}

primitive_computation_add.3654 {
  parameter.3655 = f32[] parameter(0)
  parameter.3656 = f32[] parameter(1)
  ROOT add.3657 = f32[] add(parameter.3655, parameter.3656)
}

primitive_computation_add.3668 {
  parameter.3669 = f32[] parameter(0)
  parameter.3670 = f32[] parameter(1)
  ROOT add.3671 = f32[] add(parameter.3669, parameter.3670)
}

primitive_computation_add.3741 {
  parameter.3742 = f32[] parameter(0)
  parameter.3743 = f32[] parameter(1)
  ROOT add.3744 = f32[] add(parameter.3742, parameter.3743)
}

primitive_computation_add.3755 {
  parameter.3756 = f32[] parameter(0)
  parameter.3757 = f32[] parameter(1)
  ROOT add.3758 = f32[] add(parameter.3756, parameter.3757)
}

primitive_computation_add.3828 {
  parameter.3829 = f32[] parameter(0)
  parameter.3830 = f32[] parameter(1)
  ROOT add.3831 = f32[] add(parameter.3829, parameter.3830)
}

primitive_computation_add.3842 {
  parameter.3843 = f32[] parameter(0)
  parameter.3844 = f32[] parameter(1)
  ROOT add.3845 = f32[] add(parameter.3843, parameter.3844)
}

primitive_computation_add.3916 {
  parameter.3917 = f32[] parameter(0)
  parameter.3918 = f32[] parameter(1)
  ROOT add.3919 = f32[] add(parameter.3917, parameter.3918)
}

primitive_computation_add.3930 {
  parameter.3931 = f32[] parameter(0)
  parameter.3932 = f32[] parameter(1)
  ROOT add.3933 = f32[] add(parameter.3931, parameter.3932)
}

primitive_computation_add.4003 {
  parameter.4004 = f32[] parameter(0)
  parameter.4005 = f32[] parameter(1)
  ROOT add.4006 = f32[] add(parameter.4004, parameter.4005)
}

primitive_computation_add.4017 {
  parameter.4018 = f32[] parameter(0)
  parameter.4019 = f32[] parameter(1)
  ROOT add.4020 = f32[] add(parameter.4018, parameter.4019)
}

primitive_computation_add.4090 {
  parameter.4091 = f32[] parameter(0)
  parameter.4092 = f32[] parameter(1)
  ROOT add.4093 = f32[] add(parameter.4091, parameter.4092)
}

primitive_computation_add.4104 {
  parameter.4105 = f32[] parameter(0)
  parameter.4106 = f32[] parameter(1)
  ROOT add.4107 = f32[] add(parameter.4105, parameter.4106)
}

primitive_computation_add.4178 {
  parameter.4179 = f32[] parameter(0)
  parameter.4180 = f32[] parameter(1)
  ROOT add.4181 = f32[] add(parameter.4179, parameter.4180)
}

primitive_computation_add.4192 {
  parameter.4193 = f32[] parameter(0)
  parameter.4194 = f32[] parameter(1)
  ROOT add.4195 = f32[] add(parameter.4193, parameter.4194)
}

primitive_computation_add.4265 {
  parameter.4266 = f32[] parameter(0)
  parameter.4267 = f32[] parameter(1)
  ROOT add.4268 = f32[] add(parameter.4266, parameter.4267)
}

primitive_computation_add.4279 {
  parameter.4280 = f32[] parameter(0)
  parameter.4281 = f32[] parameter(1)
  ROOT add.4282 = f32[] add(parameter.4280, parameter.4281)
}

primitive_computation_add.4352 {
  parameter.4353 = f32[] parameter(0)
  parameter.4354 = f32[] parameter(1)
  ROOT add.4355 = f32[] add(parameter.4353, parameter.4354)
}

primitive_computation_add.4366 {
  parameter.4367 = f32[] parameter(0)
  parameter.4368 = f32[] parameter(1)
  ROOT add.4369 = f32[] add(parameter.4367, parameter.4368)
}

primitive_computation_add.4440 {
  parameter.4441 = f32[] parameter(0)
  parameter.4442 = f32[] parameter(1)
  ROOT add.4443 = f32[] add(parameter.4441, parameter.4442)
}

primitive_computation_add.4454 {
  parameter.4455 = f32[] parameter(0)
  parameter.4456 = f32[] parameter(1)
  ROOT add.4457 = f32[] add(parameter.4455, parameter.4456)
}

primitive_computation_add.4527 {
  parameter.4528 = f32[] parameter(0)
  parameter.4529 = f32[] parameter(1)
  ROOT add.4530 = f32[] add(parameter.4528, parameter.4529)
}

primitive_computation_add.4541 {
  parameter.4542 = f32[] parameter(0)
  parameter.4543 = f32[] parameter(1)
  ROOT add.4544 = f32[] add(parameter.4542, parameter.4543)
}

primitive_computation_add.4614 {
  parameter.4615 = f32[] parameter(0)
  parameter.4616 = f32[] parameter(1)
  ROOT add.4617 = f32[] add(parameter.4615, parameter.4616)
}

primitive_computation_add.4628 {
  parameter.4629 = f32[] parameter(0)
  parameter.4630 = f32[] parameter(1)
  ROOT add.4631 = f32[] add(parameter.4629, parameter.4630)
}

primitive_computation_add.4690 {
  parameter.4691 = f32[] parameter(0)
  parameter.4692 = f32[] parameter(1)
  ROOT add.4693 = f32[] add(parameter.4691, parameter.4692)
}

primitive_computation_add.4704 {
  parameter.4705 = f32[] parameter(0)
  parameter.4706 = f32[] parameter(1)
  ROOT add.4707 = f32[] add(parameter.4705, parameter.4706)
}

primitive_computation_add.4778 {
  parameter.4779 = f32[] parameter(0)
  parameter.4780 = f32[] parameter(1)
  ROOT add.4781 = f32[] add(parameter.4779, parameter.4780)
}

primitive_computation_add.4792 {
  parameter.4793 = f32[] parameter(0)
  parameter.4794 = f32[] parameter(1)
  ROOT add.4795 = f32[] add(parameter.4793, parameter.4794)
}

primitive_computation_add.4865 {
  parameter.4866 = f32[] parameter(0)
  parameter.4867 = f32[] parameter(1)
  ROOT add.4868 = f32[] add(parameter.4866, parameter.4867)
}

primitive_computation_add.4879 {
  parameter.4880 = f32[] parameter(0)
  parameter.4881 = f32[] parameter(1)
  ROOT add.4882 = f32[] add(parameter.4880, parameter.4881)
}

primitive_computation_add.4952 {
  parameter.4953 = f32[] parameter(0)
  parameter.4954 = f32[] parameter(1)
  ROOT add.4955 = f32[] add(parameter.4953, parameter.4954)
}

primitive_computation_add.4966 {
  parameter.4967 = f32[] parameter(0)
  parameter.4968 = f32[] parameter(1)
  ROOT add.4969 = f32[] add(parameter.4967, parameter.4968)
}

primitive_computation_add.5040 {
  parameter.5041 = f32[] parameter(0)
  parameter.5042 = f32[] parameter(1)
  ROOT add.5043 = f32[] add(parameter.5041, parameter.5042)
}

primitive_computation_add.5054 {
  parameter.5055 = f32[] parameter(0)
  parameter.5056 = f32[] parameter(1)
  ROOT add.5057 = f32[] add(parameter.5055, parameter.5056)
}

primitive_computation_add.5127 {
  parameter.5128 = f32[] parameter(0)
  parameter.5129 = f32[] parameter(1)
  ROOT add.5130 = f32[] add(parameter.5128, parameter.5129)
}

primitive_computation_add.5141 {
  parameter.5142 = f32[] parameter(0)
  parameter.5143 = f32[] parameter(1)
  ROOT add.5144 = f32[] add(parameter.5142, parameter.5143)
}

primitive_computation_add.5214 {
  parameter.5215 = f32[] parameter(0)
  parameter.5216 = f32[] parameter(1)
  ROOT add.5217 = f32[] add(parameter.5215, parameter.5216)
}

primitive_computation_add.5228 {
  parameter.5229 = f32[] parameter(0)
  parameter.5230 = f32[] parameter(1)
  ROOT add.5231 = f32[] add(parameter.5229, parameter.5230)
}

primitive_computation_add.5295 {
  parameter.5296 = f32[] parameter(0)
  parameter.5297 = f32[] parameter(1)
  ROOT add.5298 = f32[] add(parameter.5296, parameter.5297)
}

primitive_computation_max__1.5322 {
  parameter.5323 = f32[] parameter(0)
  parameter.5324 = f32[] parameter(1)
  ROOT maximum.5325 = f32[] maximum(parameter.5323, parameter.5324)
}

primitive_computation_add.5333 {
  parameter.5334 = f32[] parameter(0)
  parameter.5335 = f32[] parameter(1)
  ROOT add.5336 = f32[] add(parameter.5334, parameter.5335)
}

primitive_computation_add.5344 {
  parameter.5345 = f32[] parameter(0)
  parameter.5346 = f32[] parameter(1)
  ROOT add.5347 = f32[] add(parameter.5345, parameter.5346)
}

primitive_computation_add.5369 {
  parameter.5370 = f32[] parameter(0)
  parameter.5371 = f32[] parameter(1)
  ROOT add.5372 = f32[] add(parameter.5370, parameter.5371)
}

primitive_computation_add.5382 {
  parameter.5383 = f32[] parameter(0)
  parameter.5384 = f32[] parameter(1)
  ROOT add.5385 = f32[] add(parameter.5383, parameter.5384)
}

primitive_computation_add.5392 {
  parameter.5393 = f32[] parameter(0)
  parameter.5394 = f32[] parameter(1)
  ROOT add.5395 = f32[] add(parameter.5393, parameter.5394)
}

primitive_computation_add.5402 {
  parameter.5403 = f32[] parameter(0)
  parameter.5404 = f32[] parameter(1)
  ROOT add.5405 = f32[] add(parameter.5403, parameter.5404)
}

primitive_computation_add.5412 {
  parameter.5413 = f32[] parameter(0)
  parameter.5414 = f32[] parameter(1)
  ROOT add.5415 = f32[] add(parameter.5413, parameter.5414)
}

primitive_computation_add.5422 {
  parameter.5423 = f32[] parameter(0)
  parameter.5424 = f32[] parameter(1)
  ROOT add.5425 = f32[] add(parameter.5423, parameter.5424)
}

primitive_computation_add.5432 {
  parameter.5433 = f32[] parameter(0)
  parameter.5434 = f32[] parameter(1)
  ROOT add.5435 = f32[] add(parameter.5433, parameter.5434)
}

primitive_computation_add.5442 {
  parameter.5443 = f32[] parameter(0)
  parameter.5444 = f32[] parameter(1)
  ROOT add.5445 = f32[] add(parameter.5443, parameter.5444)
}

primitive_computation_add.5452 {
  parameter.5453 = f32[] parameter(0)
  parameter.5454 = f32[] parameter(1)
  ROOT add.5455 = f32[] add(parameter.5453, parameter.5454)
}

primitive_computation_add.5462 {
  parameter.5463 = f32[] parameter(0)
  parameter.5464 = f32[] parameter(1)
  ROOT add.5465 = f32[] add(parameter.5463, parameter.5464)
}

primitive_computation_add.5472 {
  parameter.5473 = f32[] parameter(0)
  parameter.5474 = f32[] parameter(1)
  ROOT add.5475 = f32[] add(parameter.5473, parameter.5474)
}

primitive_computation_add.5482 {
  parameter.5483 = f32[] parameter(0)
  parameter.5484 = f32[] parameter(1)
  ROOT add.5485 = f32[] add(parameter.5483, parameter.5484)
}

primitive_computation_add.5492 {
  parameter.5493 = f32[] parameter(0)
  parameter.5494 = f32[] parameter(1)
  ROOT add.5495 = f32[] add(parameter.5493, parameter.5494)
}

primitive_computation_add.5502 {
  parameter.5503 = f32[] parameter(0)
  parameter.5504 = f32[] parameter(1)
  ROOT add.5505 = f32[] add(parameter.5503, parameter.5504)
}

primitive_computation_add.5512 {
  parameter.5513 = f32[] parameter(0)
  parameter.5514 = f32[] parameter(1)
  ROOT add.5515 = f32[] add(parameter.5513, parameter.5514)
}

primitive_computation_add.5522 {
  parameter.5523 = f32[] parameter(0)
  parameter.5524 = f32[] parameter(1)
  ROOT add.5525 = f32[] add(parameter.5523, parameter.5524)
}

primitive_computation_add.5532 {
  parameter.5533 = f32[] parameter(0)
  parameter.5534 = f32[] parameter(1)
  ROOT add.5535 = f32[] add(parameter.5533, parameter.5534)
}

primitive_computation_add.5542 {
  parameter.5543 = f32[] parameter(0)
  parameter.5544 = f32[] parameter(1)
  ROOT add.5545 = f32[] add(parameter.5543, parameter.5544)
}

primitive_computation_add.5552 {
  parameter.5553 = f32[] parameter(0)
  parameter.5554 = f32[] parameter(1)
  ROOT add.5555 = f32[] add(parameter.5553, parameter.5554)
}

primitive_computation_add.5562 {
  parameter.5563 = f32[] parameter(0)
  parameter.5564 = f32[] parameter(1)
  ROOT add.5565 = f32[] add(parameter.5563, parameter.5564)
}

primitive_computation_add.5572 {
  parameter.5573 = f32[] parameter(0)
  parameter.5574 = f32[] parameter(1)
  ROOT add.5575 = f32[] add(parameter.5573, parameter.5574)
}

primitive_computation_add.5582 {
  parameter.5583 = f32[] parameter(0)
  parameter.5584 = f32[] parameter(1)
  ROOT add.5585 = f32[] add(parameter.5583, parameter.5584)
}

primitive_computation_add.5592 {
  parameter.5593 = f32[] parameter(0)
  parameter.5594 = f32[] parameter(1)
  ROOT add.5595 = f32[] add(parameter.5593, parameter.5594)
}

primitive_computation_add.5602 {
  parameter.5603 = f32[] parameter(0)
  parameter.5604 = f32[] parameter(1)
  ROOT add.5605 = f32[] add(parameter.5603, parameter.5604)
}

primitive_computation_add.5612 {
  parameter.5613 = f32[] parameter(0)
  parameter.5614 = f32[] parameter(1)
  ROOT add.5615 = f32[] add(parameter.5613, parameter.5614)
}

primitive_computation_add.5622 {
  parameter.5623 = f32[] parameter(0)
  parameter.5624 = f32[] parameter(1)
  ROOT add.5625 = f32[] add(parameter.5623, parameter.5624)
}

primitive_computation_add.5632 {
  parameter.5633 = f32[] parameter(0)
  parameter.5634 = f32[] parameter(1)
  ROOT add.5635 = f32[] add(parameter.5633, parameter.5634)
}

primitive_computation_add.5642 {
  parameter.5643 = f32[] parameter(0)
  parameter.5644 = f32[] parameter(1)
  ROOT add.5645 = f32[] add(parameter.5643, parameter.5644)
}

primitive_computation_add.5652 {
  parameter.5653 = f32[] parameter(0)
  parameter.5654 = f32[] parameter(1)
  ROOT add.5655 = f32[] add(parameter.5653, parameter.5654)
}

primitive_computation_add.5662 {
  parameter.5663 = f32[] parameter(0)
  parameter.5664 = f32[] parameter(1)
  ROOT add.5665 = f32[] add(parameter.5663, parameter.5664)
}

primitive_computation_add.5672 {
  parameter.5673 = f32[] parameter(0)
  parameter.5674 = f32[] parameter(1)
  ROOT add.5675 = f32[] add(parameter.5673, parameter.5674)
}

primitive_computation_add.5682 {
  parameter.5683 = f32[] parameter(0)
  parameter.5684 = f32[] parameter(1)
  ROOT add.5685 = f32[] add(parameter.5683, parameter.5684)
}

primitive_computation_add.5692 {
  parameter.5693 = f32[] parameter(0)
  parameter.5694 = f32[] parameter(1)
  ROOT add.5695 = f32[] add(parameter.5693, parameter.5694)
}

primitive_computation_add.5702 {
  parameter.5703 = f32[] parameter(0)
  parameter.5704 = f32[] parameter(1)
  ROOT add.5705 = f32[] add(parameter.5703, parameter.5704)
}

primitive_computation_add.5712 {
  parameter.5713 = f32[] parameter(0)
  parameter.5714 = f32[] parameter(1)
  ROOT add.5715 = f32[] add(parameter.5713, parameter.5714)
}

primitive_computation_add.5722 {
  parameter.5723 = f32[] parameter(0)
  parameter.5724 = f32[] parameter(1)
  ROOT add.5725 = f32[] add(parameter.5723, parameter.5724)
}

primitive_computation_add.5732 {
  parameter.5733 = f32[] parameter(0)
  parameter.5734 = f32[] parameter(1)
  ROOT add.5735 = f32[] add(parameter.5733, parameter.5734)
}

primitive_computation_add.5742 {
  parameter.5743 = f32[] parameter(0)
  parameter.5744 = f32[] parameter(1)
  ROOT add.5745 = f32[] add(parameter.5743, parameter.5744)
}

primitive_computation_add.5752 {
  parameter.5753 = f32[] parameter(0)
  parameter.5754 = f32[] parameter(1)
  ROOT add.5755 = f32[] add(parameter.5753, parameter.5754)
}

primitive_computation_add.5762 {
  parameter.5763 = f32[] parameter(0)
  parameter.5764 = f32[] parameter(1)
  ROOT add.5765 = f32[] add(parameter.5763, parameter.5764)
}

primitive_computation_add.5772 {
  parameter.5773 = f32[] parameter(0)
  parameter.5774 = f32[] parameter(1)
  ROOT add.5775 = f32[] add(parameter.5773, parameter.5774)
}

primitive_computation_add.5782 {
  parameter.5783 = f32[] parameter(0)
  parameter.5784 = f32[] parameter(1)
  ROOT add.5785 = f32[] add(parameter.5783, parameter.5784)
}

primitive_computation_add.5792 {
  parameter.5793 = f32[] parameter(0)
  parameter.5794 = f32[] parameter(1)
  ROOT add.5795 = f32[] add(parameter.5793, parameter.5794)
}

primitive_computation_add.5802 {
  parameter.5803 = f32[] parameter(0)
  parameter.5804 = f32[] parameter(1)
  ROOT add.5805 = f32[] add(parameter.5803, parameter.5804)
}

primitive_computation_add.5812 {
  parameter.5813 = f32[] parameter(0)
  parameter.5814 = f32[] parameter(1)
  ROOT add.5815 = f32[] add(parameter.5813, parameter.5814)
}

primitive_computation_add.5822 {
  parameter.5823 = f32[] parameter(0)
  parameter.5824 = f32[] parameter(1)
  ROOT add.5825 = f32[] add(parameter.5823, parameter.5824)
}

primitive_computation_add.5832 {
  parameter.5833 = f32[] parameter(0)
  parameter.5834 = f32[] parameter(1)
  ROOT add.5835 = f32[] add(parameter.5833, parameter.5834)
}

primitive_computation_add.5842 {
  parameter.5843 = f32[] parameter(0)
  parameter.5844 = f32[] parameter(1)
  ROOT add.5845 = f32[] add(parameter.5843, parameter.5844)
}

primitive_computation_add.5852 {
  parameter.5853 = f32[] parameter(0)
  parameter.5854 = f32[] parameter(1)
  ROOT add.5855 = f32[] add(parameter.5853, parameter.5854)
}

primitive_computation_add.5862 {
  parameter.5863 = f32[] parameter(0)
  parameter.5864 = f32[] parameter(1)
  ROOT add.5865 = f32[] add(parameter.5863, parameter.5864)
}

primitive_computation_add.5872 {
  parameter.5873 = f32[] parameter(0)
  parameter.5874 = f32[] parameter(1)
  ROOT add.5875 = f32[] add(parameter.5873, parameter.5874)
}

primitive_computation_add.5882 {
  parameter.5883 = f32[] parameter(0)
  parameter.5884 = f32[] parameter(1)
  ROOT add.5885 = f32[] add(parameter.5883, parameter.5884)
}

primitive_computation_add.5892 {
  parameter.5893 = f32[] parameter(0)
  parameter.5894 = f32[] parameter(1)
  ROOT add.5895 = f32[] add(parameter.5893, parameter.5894)
}

primitive_computation_add.5902 {
  parameter.5903 = f32[] parameter(0)
  parameter.5904 = f32[] parameter(1)
  ROOT add.5905 = f32[] add(parameter.5903, parameter.5904)
}

primitive_computation_add.5912 {
  parameter.5913 = f32[] parameter(0)
  parameter.5914 = f32[] parameter(1)
  ROOT add.5915 = f32[] add(parameter.5913, parameter.5914)
}

primitive_computation_add.6093 {
  parameter.6094 = f32[] parameter(0)
  parameter.6095 = f32[] parameter(1)
  ROOT add.6096 = f32[] add(parameter.6094, parameter.6095)
}

primitive_computation_add.6103 {
  parameter.6104 = f32[] parameter(0)
  parameter.6105 = f32[] parameter(1)
  ROOT add.6106 = f32[] add(parameter.6104, parameter.6105)
}

primitive_computation_add__1.6114 {
  parameter.6115 = bf16[] parameter(0)
  parameter.6116 = bf16[] parameter(1)
  ROOT add.6117 = bf16[] add(parameter.6115, parameter.6116)
}

primitive_computation_add__1.6122 {
  parameter.6123 = bf16[] parameter(0)
  parameter.6124 = bf16[] parameter(1)
  ROOT add.6125 = bf16[] add(parameter.6123, parameter.6124)
}

primitive_computation_add.6146 {
  parameter.6147 = f32[] parameter(0)
  parameter.6148 = f32[] parameter(1)
  ROOT add.6149 = f32[] add(parameter.6147, parameter.6148)
}

primitive_computation_add.6156 {
  parameter.6157 = f32[] parameter(0)
  parameter.6158 = f32[] parameter(1)
  ROOT add.6159 = f32[] add(parameter.6157, parameter.6158)
}

primitive_computation_add.6167 {
  parameter.6168 = f32[] parameter(0)
  parameter.6169 = f32[] parameter(1)
  ROOT add.6170 = f32[] add(parameter.6168, parameter.6169)
}

primitive_computation_add.6185 {
  parameter.6186 = f32[] parameter(0)
  parameter.6187 = f32[] parameter(1)
  ROOT add.6188 = f32[] add(parameter.6186, parameter.6187)
}

primitive_computation_add.6212 {
  parameter.6213 = f32[] parameter(0)
  parameter.6214 = f32[] parameter(1)
  ROOT add.6215 = f32[] add(parameter.6213, parameter.6214)
}

primitive_computation_add.6222 {
  parameter.6223 = f32[] parameter(0)
  parameter.6224 = f32[] parameter(1)
  ROOT add.6225 = f32[] add(parameter.6223, parameter.6224)
}

primitive_computation_add.6233 {
  parameter.6234 = f32[] parameter(0)
  parameter.6235 = f32[] parameter(1)
  ROOT add.6236 = f32[] add(parameter.6234, parameter.6235)
}

primitive_computation_add.6251 {
  parameter.6252 = f32[] parameter(0)
  parameter.6253 = f32[] parameter(1)
  ROOT add.6254 = f32[] add(parameter.6252, parameter.6253)
}

primitive_computation_add.6278 {
  parameter.6279 = f32[] parameter(0)
  parameter.6280 = f32[] parameter(1)
  ROOT add.6281 = f32[] add(parameter.6279, parameter.6280)
}

primitive_computation_add.6288 {
  parameter.6289 = f32[] parameter(0)
  parameter.6290 = f32[] parameter(1)
  ROOT add.6291 = f32[] add(parameter.6289, parameter.6290)
}

primitive_computation_add.6299 {
  parameter.6300 = f32[] parameter(0)
  parameter.6301 = f32[] parameter(1)
  ROOT add.6302 = f32[] add(parameter.6300, parameter.6301)
}

primitive_computation_add.6317 {
  parameter.6318 = f32[] parameter(0)
  parameter.6319 = f32[] parameter(1)
  ROOT add.6320 = f32[] add(parameter.6318, parameter.6319)
}

primitive_computation_add.6345 {
  parameter.6346 = f32[] parameter(0)
  parameter.6347 = f32[] parameter(1)
  ROOT add.6348 = f32[] add(parameter.6346, parameter.6347)
}

primitive_computation_add.6355 {
  parameter.6356 = f32[] parameter(0)
  parameter.6357 = f32[] parameter(1)
  ROOT add.6358 = f32[] add(parameter.6356, parameter.6357)
}

primitive_computation_add.6366 {
  parameter.6367 = f32[] parameter(0)
  parameter.6368 = f32[] parameter(1)
  ROOT add.6369 = f32[] add(parameter.6367, parameter.6368)
}

primitive_computation_add.6384 {
  parameter.6385 = f32[] parameter(0)
  parameter.6386 = f32[] parameter(1)
  ROOT add.6387 = f32[] add(parameter.6385, parameter.6386)
}

primitive_computation_add.6411 {
  parameter.6412 = f32[] parameter(0)
  parameter.6413 = f32[] parameter(1)
  ROOT add.6414 = f32[] add(parameter.6412, parameter.6413)
}

primitive_computation_add.6421 {
  parameter.6422 = f32[] parameter(0)
  parameter.6423 = f32[] parameter(1)
  ROOT add.6424 = f32[] add(parameter.6422, parameter.6423)
}

primitive_computation_add.6432 {
  parameter.6433 = f32[] parameter(0)
  parameter.6434 = f32[] parameter(1)
  ROOT add.6435 = f32[] add(parameter.6433, parameter.6434)
}

primitive_computation_add.6450 {
  parameter.6451 = f32[] parameter(0)
  parameter.6452 = f32[] parameter(1)
  ROOT add.6453 = f32[] add(parameter.6451, parameter.6452)
}

primitive_computation_add.6477 {
  parameter.6478 = f32[] parameter(0)
  parameter.6479 = f32[] parameter(1)
  ROOT add.6480 = f32[] add(parameter.6478, parameter.6479)
}

primitive_computation_add.6487 {
  parameter.6488 = f32[] parameter(0)
  parameter.6489 = f32[] parameter(1)
  ROOT add.6490 = f32[] add(parameter.6488, parameter.6489)
}

primitive_computation_add.6498 {
  parameter.6499 = f32[] parameter(0)
  parameter.6500 = f32[] parameter(1)
  ROOT add.6501 = f32[] add(parameter.6499, parameter.6500)
}

primitive_computation_add.6516 {
  parameter.6517 = f32[] parameter(0)
  parameter.6518 = f32[] parameter(1)
  ROOT add.6519 = f32[] add(parameter.6517, parameter.6518)
}

primitive_computation_add.6544 {
  parameter.6545 = f32[] parameter(0)
  parameter.6546 = f32[] parameter(1)
  ROOT add.6547 = f32[] add(parameter.6545, parameter.6546)
}

primitive_computation_add.6554 {
  parameter.6555 = f32[] parameter(0)
  parameter.6556 = f32[] parameter(1)
  ROOT add.6557 = f32[] add(parameter.6555, parameter.6556)
}

primitive_computation_add.6565 {
  parameter.6566 = f32[] parameter(0)
  parameter.6567 = f32[] parameter(1)
  ROOT add.6568 = f32[] add(parameter.6566, parameter.6567)
}

primitive_computation_add.6583 {
  parameter.6584 = f32[] parameter(0)
  parameter.6585 = f32[] parameter(1)
  ROOT add.6586 = f32[] add(parameter.6584, parameter.6585)
}

primitive_computation_add.6610 {
  parameter.6611 = f32[] parameter(0)
  parameter.6612 = f32[] parameter(1)
  ROOT add.6613 = f32[] add(parameter.6611, parameter.6612)
}

primitive_computation_add.6620 {
  parameter.6621 = f32[] parameter(0)
  parameter.6622 = f32[] parameter(1)
  ROOT add.6623 = f32[] add(parameter.6621, parameter.6622)
}

primitive_computation_add.6631 {
  parameter.6632 = f32[] parameter(0)
  parameter.6633 = f32[] parameter(1)
  ROOT add.6634 = f32[] add(parameter.6632, parameter.6633)
}

primitive_computation_add.6649 {
  parameter.6650 = f32[] parameter(0)
  parameter.6651 = f32[] parameter(1)
  ROOT add.6652 = f32[] add(parameter.6650, parameter.6651)
}

primitive_computation_add.6676 {
  parameter.6677 = f32[] parameter(0)
  parameter.6678 = f32[] parameter(1)
  ROOT add.6679 = f32[] add(parameter.6677, parameter.6678)
}

primitive_computation_add.6686 {
  parameter.6687 = f32[] parameter(0)
  parameter.6688 = f32[] parameter(1)
  ROOT add.6689 = f32[] add(parameter.6687, parameter.6688)
}

primitive_computation_add.6697 {
  parameter.6698 = f32[] parameter(0)
  parameter.6699 = f32[] parameter(1)
  ROOT add.6700 = f32[] add(parameter.6698, parameter.6699)
}

primitive_computation_add.6715 {
  parameter.6716 = f32[] parameter(0)
  parameter.6717 = f32[] parameter(1)
  ROOT add.6718 = f32[] add(parameter.6716, parameter.6717)
}

primitive_computation_add.6739 {
  parameter.6740 = f32[] parameter(0)
  parameter.6741 = f32[] parameter(1)
  ROOT add.6742 = f32[] add(parameter.6740, parameter.6741)
}

primitive_computation_add.6749 {
  parameter.6750 = f32[] parameter(0)
  parameter.6751 = f32[] parameter(1)
  ROOT add.6752 = f32[] add(parameter.6750, parameter.6751)
}

primitive_computation_add.6760 {
  parameter.6761 = f32[] parameter(0)
  parameter.6762 = f32[] parameter(1)
  ROOT add.6763 = f32[] add(parameter.6761, parameter.6762)
}

primitive_computation_add.6778 {
  parameter.6779 = f32[] parameter(0)
  parameter.6780 = f32[] parameter(1)
  ROOT add.6781 = f32[] add(parameter.6779, parameter.6780)
}

primitive_computation_add.6806 {
  parameter.6807 = f32[] parameter(0)
  parameter.6808 = f32[] parameter(1)
  ROOT add.6809 = f32[] add(parameter.6807, parameter.6808)
}

primitive_computation_add.6816 {
  parameter.6817 = f32[] parameter(0)
  parameter.6818 = f32[] parameter(1)
  ROOT add.6819 = f32[] add(parameter.6817, parameter.6818)
}

primitive_computation_add.6827 {
  parameter.6828 = f32[] parameter(0)
  parameter.6829 = f32[] parameter(1)
  ROOT add.6830 = f32[] add(parameter.6828, parameter.6829)
}

primitive_computation_add.6845 {
  parameter.6846 = f32[] parameter(0)
  parameter.6847 = f32[] parameter(1)
  ROOT add.6848 = f32[] add(parameter.6846, parameter.6847)
}

primitive_computation_add.6872 {
  parameter.6873 = f32[] parameter(0)
  parameter.6874 = f32[] parameter(1)
  ROOT add.6875 = f32[] add(parameter.6873, parameter.6874)
}

primitive_computation_add.6882 {
  parameter.6883 = f32[] parameter(0)
  parameter.6884 = f32[] parameter(1)
  ROOT add.6885 = f32[] add(parameter.6883, parameter.6884)
}

primitive_computation_add.6893 {
  parameter.6894 = f32[] parameter(0)
  parameter.6895 = f32[] parameter(1)
  ROOT add.6896 = f32[] add(parameter.6894, parameter.6895)
}

primitive_computation_add.6911 {
  parameter.6912 = f32[] parameter(0)
  parameter.6913 = f32[] parameter(1)
  ROOT add.6914 = f32[] add(parameter.6912, parameter.6913)
}

primitive_computation_add.6938 {
  parameter.6939 = f32[] parameter(0)
  parameter.6940 = f32[] parameter(1)
  ROOT add.6941 = f32[] add(parameter.6939, parameter.6940)
}

primitive_computation_add.6948 {
  parameter.6949 = f32[] parameter(0)
  parameter.6950 = f32[] parameter(1)
  ROOT add.6951 = f32[] add(parameter.6949, parameter.6950)
}

primitive_computation_add.6959 {
  parameter.6960 = f32[] parameter(0)
  parameter.6961 = f32[] parameter(1)
  ROOT add.6962 = f32[] add(parameter.6960, parameter.6961)
}

primitive_computation_add.6977 {
  parameter.6978 = f32[] parameter(0)
  parameter.6979 = f32[] parameter(1)
  ROOT add.6980 = f32[] add(parameter.6978, parameter.6979)
}

primitive_computation_add.7005 {
  parameter.7006 = f32[] parameter(0)
  parameter.7007 = f32[] parameter(1)
  ROOT add.7008 = f32[] add(parameter.7006, parameter.7007)
}

primitive_computation_add.7015 {
  parameter.7016 = f32[] parameter(0)
  parameter.7017 = f32[] parameter(1)
  ROOT add.7018 = f32[] add(parameter.7016, parameter.7017)
}

primitive_computation_add.7026 {
  parameter.7027 = f32[] parameter(0)
  parameter.7028 = f32[] parameter(1)
  ROOT add.7029 = f32[] add(parameter.7027, parameter.7028)
}

primitive_computation_add.7044 {
  parameter.7045 = f32[] parameter(0)
  parameter.7046 = f32[] parameter(1)
  ROOT add.7047 = f32[] add(parameter.7045, parameter.7046)
}

primitive_computation_add.7071 {
  parameter.7072 = f32[] parameter(0)
  parameter.7073 = f32[] parameter(1)
  ROOT add.7074 = f32[] add(parameter.7072, parameter.7073)
}

primitive_computation_add.7081 {
  parameter.7082 = f32[] parameter(0)
  parameter.7083 = f32[] parameter(1)
  ROOT add.7084 = f32[] add(parameter.7082, parameter.7083)
}

primitive_computation_add.7092 {
  parameter.7093 = f32[] parameter(0)
  parameter.7094 = f32[] parameter(1)
  ROOT add.7095 = f32[] add(parameter.7093, parameter.7094)
}

primitive_computation_add.7110 {
  parameter.7111 = f32[] parameter(0)
  parameter.7112 = f32[] parameter(1)
  ROOT add.7113 = f32[] add(parameter.7111, parameter.7112)
}

primitive_computation_add.7137 {
  parameter.7138 = f32[] parameter(0)
  parameter.7139 = f32[] parameter(1)
  ROOT add.7140 = f32[] add(parameter.7138, parameter.7139)
}

primitive_computation_add.7147 {
  parameter.7148 = f32[] parameter(0)
  parameter.7149 = f32[] parameter(1)
  ROOT add.7150 = f32[] add(parameter.7148, parameter.7149)
}

primitive_computation_add.7158 {
  parameter.7159 = f32[] parameter(0)
  parameter.7160 = f32[] parameter(1)
  ROOT add.7161 = f32[] add(parameter.7159, parameter.7160)
}

primitive_computation_add.7176 {
  parameter.7177 = f32[] parameter(0)
  parameter.7178 = f32[] parameter(1)
  ROOT add.7179 = f32[] add(parameter.7177, parameter.7178)
}

primitive_computation_add.7204 {
  parameter.7205 = f32[] parameter(0)
  parameter.7206 = f32[] parameter(1)
  ROOT add.7207 = f32[] add(parameter.7205, parameter.7206)
}

primitive_computation_add.7214 {
  parameter.7215 = f32[] parameter(0)
  parameter.7216 = f32[] parameter(1)
  ROOT add.7217 = f32[] add(parameter.7215, parameter.7216)
}

primitive_computation_add.7225 {
  parameter.7226 = f32[] parameter(0)
  parameter.7227 = f32[] parameter(1)
  ROOT add.7228 = f32[] add(parameter.7226, parameter.7227)
}

primitive_computation_add.7243 {
  parameter.7244 = f32[] parameter(0)
  parameter.7245 = f32[] parameter(1)
  ROOT add.7246 = f32[] add(parameter.7244, parameter.7245)
}

primitive_computation_add.7270 {
  parameter.7271 = f32[] parameter(0)
  parameter.7272 = f32[] parameter(1)
  ROOT add.7273 = f32[] add(parameter.7271, parameter.7272)
}

primitive_computation_add.7280 {
  parameter.7281 = f32[] parameter(0)
  parameter.7282 = f32[] parameter(1)
  ROOT add.7283 = f32[] add(parameter.7281, parameter.7282)
}

primitive_computation_add.7291 {
  parameter.7292 = f32[] parameter(0)
  parameter.7293 = f32[] parameter(1)
  ROOT add.7294 = f32[] add(parameter.7292, parameter.7293)
}

primitive_computation_add.7309 {
  parameter.7310 = f32[] parameter(0)
  parameter.7311 = f32[] parameter(1)
  ROOT add.7312 = f32[] add(parameter.7310, parameter.7311)
}

primitive_computation_add.7336 {
  parameter.7337 = f32[] parameter(0)
  parameter.7338 = f32[] parameter(1)
  ROOT add.7339 = f32[] add(parameter.7337, parameter.7338)
}

primitive_computation_add.7346 {
  parameter.7347 = f32[] parameter(0)
  parameter.7348 = f32[] parameter(1)
  ROOT add.7349 = f32[] add(parameter.7347, parameter.7348)
}

primitive_computation_add.7357 {
  parameter.7358 = f32[] parameter(0)
  parameter.7359 = f32[] parameter(1)
  ROOT add.7360 = f32[] add(parameter.7358, parameter.7359)
}

primitive_computation_add.7375 {
  parameter.7376 = f32[] parameter(0)
  parameter.7377 = f32[] parameter(1)
  ROOT add.7378 = f32[] add(parameter.7376, parameter.7377)
}

primitive_computation_add.7403 {
  parameter.7404 = f32[] parameter(0)
  parameter.7405 = f32[] parameter(1)
  ROOT add.7406 = f32[] add(parameter.7404, parameter.7405)
}

primitive_computation_add.7413 {
  parameter.7414 = f32[] parameter(0)
  parameter.7415 = f32[] parameter(1)
  ROOT add.7416 = f32[] add(parameter.7414, parameter.7415)
}

primitive_computation_add.7424 {
  parameter.7425 = f32[] parameter(0)
  parameter.7426 = f32[] parameter(1)
  ROOT add.7427 = f32[] add(parameter.7425, parameter.7426)
}

primitive_computation_add.7442 {
  parameter.7443 = f32[] parameter(0)
  parameter.7444 = f32[] parameter(1)
  ROOT add.7445 = f32[] add(parameter.7443, parameter.7444)
}

primitive_computation_add.7469 {
  parameter.7470 = f32[] parameter(0)
  parameter.7471 = f32[] parameter(1)
  ROOT add.7472 = f32[] add(parameter.7470, parameter.7471)
}

primitive_computation_add.7479 {
  parameter.7480 = f32[] parameter(0)
  parameter.7481 = f32[] parameter(1)
  ROOT add.7482 = f32[] add(parameter.7480, parameter.7481)
}

primitive_computation_add.7490 {
  parameter.7491 = f32[] parameter(0)
  parameter.7492 = f32[] parameter(1)
  ROOT add.7493 = f32[] add(parameter.7491, parameter.7492)
}

primitive_computation_add.7508 {
  parameter.7509 = f32[] parameter(0)
  parameter.7510 = f32[] parameter(1)
  ROOT add.7511 = f32[] add(parameter.7509, parameter.7510)
}

primitive_computation_add.7535 {
  parameter.7536 = f32[] parameter(0)
  parameter.7537 = f32[] parameter(1)
  ROOT add.7538 = f32[] add(parameter.7536, parameter.7537)
}

primitive_computation_add.7545 {
  parameter.7546 = f32[] parameter(0)
  parameter.7547 = f32[] parameter(1)
  ROOT add.7548 = f32[] add(parameter.7546, parameter.7547)
}

primitive_computation_add.7556 {
  parameter.7557 = f32[] parameter(0)
  parameter.7558 = f32[] parameter(1)
  ROOT add.7559 = f32[] add(parameter.7557, parameter.7558)
}

primitive_computation_add.7574 {
  parameter.7575 = f32[] parameter(0)
  parameter.7576 = f32[] parameter(1)
  ROOT add.7577 = f32[] add(parameter.7575, parameter.7576)
}

primitive_computation_add.7602 {
  parameter.7603 = f32[] parameter(0)
  parameter.7604 = f32[] parameter(1)
  ROOT add.7605 = f32[] add(parameter.7603, parameter.7604)
}

primitive_computation_add.7612 {
  parameter.7613 = f32[] parameter(0)
  parameter.7614 = f32[] parameter(1)
  ROOT add.7615 = f32[] add(parameter.7613, parameter.7614)
}

primitive_computation_add.7623 {
  parameter.7624 = f32[] parameter(0)
  parameter.7625 = f32[] parameter(1)
  ROOT add.7626 = f32[] add(parameter.7624, parameter.7625)
}

primitive_computation_add.7641 {
  parameter.7642 = f32[] parameter(0)
  parameter.7643 = f32[] parameter(1)
  ROOT add.7644 = f32[] add(parameter.7642, parameter.7643)
}

primitive_computation_add.7668 {
  parameter.7669 = f32[] parameter(0)
  parameter.7670 = f32[] parameter(1)
  ROOT add.7671 = f32[] add(parameter.7669, parameter.7670)
}

primitive_computation_add.7678 {
  parameter.7679 = f32[] parameter(0)
  parameter.7680 = f32[] parameter(1)
  ROOT add.7681 = f32[] add(parameter.7679, parameter.7680)
}

primitive_computation_add.7689 {
  parameter.7690 = f32[] parameter(0)
  parameter.7691 = f32[] parameter(1)
  ROOT add.7692 = f32[] add(parameter.7690, parameter.7691)
}

primitive_computation_add.7707 {
  parameter.7708 = f32[] parameter(0)
  parameter.7709 = f32[] parameter(1)
  ROOT add.7710 = f32[] add(parameter.7708, parameter.7709)
}

primitive_computation_add.7734 {
  parameter.7735 = f32[] parameter(0)
  parameter.7736 = f32[] parameter(1)
  ROOT add.7737 = f32[] add(parameter.7735, parameter.7736)
}

primitive_computation_add.7744 {
  parameter.7745 = f32[] parameter(0)
  parameter.7746 = f32[] parameter(1)
  ROOT add.7747 = f32[] add(parameter.7745, parameter.7746)
}

primitive_computation_add.7755 {
  parameter.7756 = f32[] parameter(0)
  parameter.7757 = f32[] parameter(1)
  ROOT add.7758 = f32[] add(parameter.7756, parameter.7757)
}

primitive_computation_add.7773 {
  parameter.7774 = f32[] parameter(0)
  parameter.7775 = f32[] parameter(1)
  ROOT add.7776 = f32[] add(parameter.7774, parameter.7775)
}

primitive_computation_add.7801 {
  parameter.7802 = f32[] parameter(0)
  parameter.7803 = f32[] parameter(1)
  ROOT add.7804 = f32[] add(parameter.7802, parameter.7803)
}

primitive_computation_add.7811 {
  parameter.7812 = f32[] parameter(0)
  parameter.7813 = f32[] parameter(1)
  ROOT add.7814 = f32[] add(parameter.7812, parameter.7813)
}

primitive_computation_add.7822 {
  parameter.7823 = f32[] parameter(0)
  parameter.7824 = f32[] parameter(1)
  ROOT add.7825 = f32[] add(parameter.7823, parameter.7824)
}

primitive_computation_add.7840 {
  parameter.7841 = f32[] parameter(0)
  parameter.7842 = f32[] parameter(1)
  ROOT add.7843 = f32[] add(parameter.7841, parameter.7842)
}

primitive_computation_add.7867 {
  parameter.7868 = f32[] parameter(0)
  parameter.7869 = f32[] parameter(1)
  ROOT add.7870 = f32[] add(parameter.7868, parameter.7869)
}

primitive_computation_add.7877 {
  parameter.7878 = f32[] parameter(0)
  parameter.7879 = f32[] parameter(1)
  ROOT add.7880 = f32[] add(parameter.7878, parameter.7879)
}

primitive_computation_add.7888 {
  parameter.7889 = f32[] parameter(0)
  parameter.7890 = f32[] parameter(1)
  ROOT add.7891 = f32[] add(parameter.7889, parameter.7890)
}

primitive_computation_add.7906 {
  parameter.7907 = f32[] parameter(0)
  parameter.7908 = f32[] parameter(1)
  ROOT add.7909 = f32[] add(parameter.7907, parameter.7908)
}

primitive_computation_add.7933 {
  parameter.7934 = f32[] parameter(0)
  parameter.7935 = f32[] parameter(1)
  ROOT add.7936 = f32[] add(parameter.7934, parameter.7935)
}

primitive_computation_add.7943 {
  parameter.7944 = f32[] parameter(0)
  parameter.7945 = f32[] parameter(1)
  ROOT add.7946 = f32[] add(parameter.7944, parameter.7945)
}

primitive_computation_add.7954 {
  parameter.7955 = f32[] parameter(0)
  parameter.7956 = f32[] parameter(1)
  ROOT add.7957 = f32[] add(parameter.7955, parameter.7956)
}

primitive_computation_add.7972 {
  parameter.7973 = f32[] parameter(0)
  parameter.7974 = f32[] parameter(1)
  ROOT add.7975 = f32[] add(parameter.7973, parameter.7974)
}

primitive_computation_add.7996 {
  parameter.7997 = f32[] parameter(0)
  parameter.7998 = f32[] parameter(1)
  ROOT add.7999 = f32[] add(parameter.7997, parameter.7998)
}

primitive_computation_add.8006 {
  parameter.8007 = f32[] parameter(0)
  parameter.8008 = f32[] parameter(1)
  ROOT add.8009 = f32[] add(parameter.8007, parameter.8008)
}

primitive_computation_add.8017 {
  parameter.8018 = f32[] parameter(0)
  parameter.8019 = f32[] parameter(1)
  ROOT add.8020 = f32[] add(parameter.8018, parameter.8019)
}

primitive_computation_add.8035 {
  parameter.8036 = f32[] parameter(0)
  parameter.8037 = f32[] parameter(1)
  ROOT add.8038 = f32[] add(parameter.8036, parameter.8037)
}

primitive_computation_add.8063 {
  parameter.8064 = f32[] parameter(0)
  parameter.8065 = f32[] parameter(1)
  ROOT add.8066 = f32[] add(parameter.8064, parameter.8065)
}

primitive_computation_add.8073 {
  parameter.8074 = f32[] parameter(0)
  parameter.8075 = f32[] parameter(1)
  ROOT add.8076 = f32[] add(parameter.8074, parameter.8075)
}

primitive_computation_add.8084 {
  parameter.8085 = f32[] parameter(0)
  parameter.8086 = f32[] parameter(1)
  ROOT add.8087 = f32[] add(parameter.8085, parameter.8086)
}

primitive_computation_add.8102 {
  parameter.8103 = f32[] parameter(0)
  parameter.8104 = f32[] parameter(1)
  ROOT add.8105 = f32[] add(parameter.8103, parameter.8104)
}

primitive_computation_add.8129 {
  parameter.8130 = f32[] parameter(0)
  parameter.8131 = f32[] parameter(1)
  ROOT add.8132 = f32[] add(parameter.8130, parameter.8131)
}

primitive_computation_add.8139 {
  parameter.8140 = f32[] parameter(0)
  parameter.8141 = f32[] parameter(1)
  ROOT add.8142 = f32[] add(parameter.8140, parameter.8141)
}

primitive_computation_add.8150 {
  parameter.8151 = f32[] parameter(0)
  parameter.8152 = f32[] parameter(1)
  ROOT add.8153 = f32[] add(parameter.8151, parameter.8152)
}

primitive_computation_add.8168 {
  parameter.8169 = f32[] parameter(0)
  parameter.8170 = f32[] parameter(1)
  ROOT add.8171 = f32[] add(parameter.8169, parameter.8170)
}

primitive_computation_add.8195 {
  parameter.8196 = f32[] parameter(0)
  parameter.8197 = f32[] parameter(1)
  ROOT add.8198 = f32[] add(parameter.8196, parameter.8197)
}

primitive_computation_add.8205 {
  parameter.8206 = f32[] parameter(0)
  parameter.8207 = f32[] parameter(1)
  ROOT add.8208 = f32[] add(parameter.8206, parameter.8207)
}

primitive_computation_add.8216 {
  parameter.8217 = f32[] parameter(0)
  parameter.8218 = f32[] parameter(1)
  ROOT add.8219 = f32[] add(parameter.8217, parameter.8218)
}

primitive_computation_add.8234 {
  parameter.8235 = f32[] parameter(0)
  parameter.8236 = f32[] parameter(1)
  ROOT add.8237 = f32[] add(parameter.8235, parameter.8236)
}

primitive_computation_add.8262 {
  parameter.8263 = f32[] parameter(0)
  parameter.8264 = f32[] parameter(1)
  ROOT add.8265 = f32[] add(parameter.8263, parameter.8264)
}

primitive_computation_add.8272 {
  parameter.8273 = f32[] parameter(0)
  parameter.8274 = f32[] parameter(1)
  ROOT add.8275 = f32[] add(parameter.8273, parameter.8274)
}

primitive_computation_add.8283 {
  parameter.8284 = f32[] parameter(0)
  parameter.8285 = f32[] parameter(1)
  ROOT add.8286 = f32[] add(parameter.8284, parameter.8285)
}

primitive_computation_add.8301 {
  parameter.8302 = f32[] parameter(0)
  parameter.8303 = f32[] parameter(1)
  ROOT add.8304 = f32[] add(parameter.8302, parameter.8303)
}

primitive_computation_add.8328 {
  parameter.8329 = f32[] parameter(0)
  parameter.8330 = f32[] parameter(1)
  ROOT add.8331 = f32[] add(parameter.8329, parameter.8330)
}

primitive_computation_add.8338 {
  parameter.8339 = f32[] parameter(0)
  parameter.8340 = f32[] parameter(1)
  ROOT add.8341 = f32[] add(parameter.8339, parameter.8340)
}

primitive_computation_add.8349 {
  parameter.8350 = f32[] parameter(0)
  parameter.8351 = f32[] parameter(1)
  ROOT add.8352 = f32[] add(parameter.8350, parameter.8351)
}

primitive_computation_add.8367 {
  parameter.8368 = f32[] parameter(0)
  parameter.8369 = f32[] parameter(1)
  ROOT add.8370 = f32[] add(parameter.8368, parameter.8369)
}

primitive_computation_add.8394 {
  parameter.8395 = f32[] parameter(0)
  parameter.8396 = f32[] parameter(1)
  ROOT add.8397 = f32[] add(parameter.8395, parameter.8396)
}

primitive_computation_add.8404 {
  parameter.8405 = f32[] parameter(0)
  parameter.8406 = f32[] parameter(1)
  ROOT add.8407 = f32[] add(parameter.8405, parameter.8406)
}

primitive_computation_add.8415 {
  parameter.8416 = f32[] parameter(0)
  parameter.8417 = f32[] parameter(1)
  ROOT add.8418 = f32[] add(parameter.8416, parameter.8417)
}

primitive_computation_add.8433 {
  parameter.8434 = f32[] parameter(0)
  parameter.8435 = f32[] parameter(1)
  ROOT add.8436 = f32[] add(parameter.8434, parameter.8435)
}

primitive_computation_add.8461 {
  parameter.8462 = f32[] parameter(0)
  parameter.8463 = f32[] parameter(1)
  ROOT add.8464 = f32[] add(parameter.8462, parameter.8463)
}

primitive_computation_add.8471 {
  parameter.8472 = f32[] parameter(0)
  parameter.8473 = f32[] parameter(1)
  ROOT add.8474 = f32[] add(parameter.8472, parameter.8473)
}

primitive_computation_add.8482 {
  parameter.8483 = f32[] parameter(0)
  parameter.8484 = f32[] parameter(1)
  ROOT add.8485 = f32[] add(parameter.8483, parameter.8484)
}

primitive_computation_add.8500 {
  parameter.8501 = f32[] parameter(0)
  parameter.8502 = f32[] parameter(1)
  ROOT add.8503 = f32[] add(parameter.8501, parameter.8502)
}

primitive_computation_add.8527 {
  parameter.8528 = f32[] parameter(0)
  parameter.8529 = f32[] parameter(1)
  ROOT add.8530 = f32[] add(parameter.8528, parameter.8529)
}

primitive_computation_add.8537 {
  parameter.8538 = f32[] parameter(0)
  parameter.8539 = f32[] parameter(1)
  ROOT add.8540 = f32[] add(parameter.8538, parameter.8539)
}

primitive_computation_add.8548 {
  parameter.8549 = f32[] parameter(0)
  parameter.8550 = f32[] parameter(1)
  ROOT add.8551 = f32[] add(parameter.8549, parameter.8550)
}

primitive_computation_add.8566 {
  parameter.8567 = f32[] parameter(0)
  parameter.8568 = f32[] parameter(1)
  ROOT add.8569 = f32[] add(parameter.8567, parameter.8568)
}

primitive_computation_add.8593 {
  parameter.8594 = f32[] parameter(0)
  parameter.8595 = f32[] parameter(1)
  ROOT add.8596 = f32[] add(parameter.8594, parameter.8595)
}

primitive_computation_add.8603 {
  parameter.8604 = f32[] parameter(0)
  parameter.8605 = f32[] parameter(1)
  ROOT add.8606 = f32[] add(parameter.8604, parameter.8605)
}

primitive_computation_add.8614 {
  parameter.8615 = f32[] parameter(0)
  parameter.8616 = f32[] parameter(1)
  ROOT add.8617 = f32[] add(parameter.8615, parameter.8616)
}

primitive_computation_add.8632 {
  parameter.8633 = f32[] parameter(0)
  parameter.8634 = f32[] parameter(1)
  ROOT add.8635 = f32[] add(parameter.8633, parameter.8634)
}

primitive_computation_add.8660 {
  parameter.8661 = f32[] parameter(0)
  parameter.8662 = f32[] parameter(1)
  ROOT add.8663 = f32[] add(parameter.8661, parameter.8662)
}

primitive_computation_add.8670 {
  parameter.8671 = f32[] parameter(0)
  parameter.8672 = f32[] parameter(1)
  ROOT add.8673 = f32[] add(parameter.8671, parameter.8672)
}

primitive_computation_add.8681 {
  parameter.8682 = f32[] parameter(0)
  parameter.8683 = f32[] parameter(1)
  ROOT add.8684 = f32[] add(parameter.8682, parameter.8683)
}

primitive_computation_add.8699 {
  parameter.8700 = f32[] parameter(0)
  parameter.8701 = f32[] parameter(1)
  ROOT add.8702 = f32[] add(parameter.8700, parameter.8701)
}

primitive_computation_add.8726 {
  parameter.8727 = f32[] parameter(0)
  parameter.8728 = f32[] parameter(1)
  ROOT add.8729 = f32[] add(parameter.8727, parameter.8728)
}

primitive_computation_add.8736 {
  parameter.8737 = f32[] parameter(0)
  parameter.8738 = f32[] parameter(1)
  ROOT add.8739 = f32[] add(parameter.8737, parameter.8738)
}

primitive_computation_add.8747 {
  parameter.8748 = f32[] parameter(0)
  parameter.8749 = f32[] parameter(1)
  ROOT add.8750 = f32[] add(parameter.8748, parameter.8749)
}

primitive_computation_add.8765 {
  parameter.8766 = f32[] parameter(0)
  parameter.8767 = f32[] parameter(1)
  ROOT add.8768 = f32[] add(parameter.8766, parameter.8767)
}

primitive_computation_add.8792 {
  parameter.8793 = f32[] parameter(0)
  parameter.8794 = f32[] parameter(1)
  ROOT add.8795 = f32[] add(parameter.8793, parameter.8794)
}

primitive_computation_add.8802 {
  parameter.8803 = f32[] parameter(0)
  parameter.8804 = f32[] parameter(1)
  ROOT add.8805 = f32[] add(parameter.8803, parameter.8804)
}

primitive_computation_add.8813 {
  parameter.8814 = f32[] parameter(0)
  parameter.8815 = f32[] parameter(1)
  ROOT add.8816 = f32[] add(parameter.8814, parameter.8815)
}

primitive_computation_add.8831 {
  parameter.8832 = f32[] parameter(0)
  parameter.8833 = f32[] parameter(1)
  ROOT add.8834 = f32[] add(parameter.8832, parameter.8833)
}

primitive_computation_add.8855 {
  parameter.8856 = f32[] parameter(0)
  parameter.8857 = f32[] parameter(1)
  ROOT add.8858 = f32[] add(parameter.8856, parameter.8857)
}

primitive_computation_add.8865 {
  parameter.8866 = f32[] parameter(0)
  parameter.8867 = f32[] parameter(1)
  ROOT add.8868 = f32[] add(parameter.8866, parameter.8867)
}

primitive_computation_add.8876 {
  parameter.8877 = f32[] parameter(0)
  parameter.8878 = f32[] parameter(1)
  ROOT add.8879 = f32[] add(parameter.8877, parameter.8878)
}

primitive_computation_add.8894 {
  parameter.8895 = f32[] parameter(0)
  parameter.8896 = f32[] parameter(1)
  ROOT add.8897 = f32[] add(parameter.8895, parameter.8896)
}

primitive_computation_add.8922 {
  parameter.8923 = f32[] parameter(0)
  parameter.8924 = f32[] parameter(1)
  ROOT add.8925 = f32[] add(parameter.8923, parameter.8924)
}

primitive_computation_add.8932 {
  parameter.8933 = f32[] parameter(0)
  parameter.8934 = f32[] parameter(1)
  ROOT add.8935 = f32[] add(parameter.8933, parameter.8934)
}

primitive_computation_add.8943 {
  parameter.8944 = f32[] parameter(0)
  parameter.8945 = f32[] parameter(1)
  ROOT add.8946 = f32[] add(parameter.8944, parameter.8945)
}

primitive_computation_add.8961 {
  parameter.8962 = f32[] parameter(0)
  parameter.8963 = f32[] parameter(1)
  ROOT add.8964 = f32[] add(parameter.8962, parameter.8963)
}

primitive_computation_add.8988 {
  parameter.8989 = f32[] parameter(0)
  parameter.8990 = f32[] parameter(1)
  ROOT add.8991 = f32[] add(parameter.8989, parameter.8990)
}

primitive_computation_add.8998 {
  parameter.8999 = f32[] parameter(0)
  parameter.9000 = f32[] parameter(1)
  ROOT add.9001 = f32[] add(parameter.8999, parameter.9000)
}

primitive_computation_add.9009 {
  parameter.9010 = f32[] parameter(0)
  parameter.9011 = f32[] parameter(1)
  ROOT add.9012 = f32[] add(parameter.9010, parameter.9011)
}

primitive_computation_add.9027 {
  parameter.9028 = f32[] parameter(0)
  parameter.9029 = f32[] parameter(1)
  ROOT add.9030 = f32[] add(parameter.9028, parameter.9029)
}

primitive_computation_add.9054 {
  parameter.9055 = f32[] parameter(0)
  parameter.9056 = f32[] parameter(1)
  ROOT add.9057 = f32[] add(parameter.9055, parameter.9056)
}

primitive_computation_add.9064 {
  parameter.9065 = f32[] parameter(0)
  parameter.9066 = f32[] parameter(1)
  ROOT add.9067 = f32[] add(parameter.9065, parameter.9066)
}

primitive_computation_add.9075 {
  parameter.9076 = f32[] parameter(0)
  parameter.9077 = f32[] parameter(1)
  ROOT add.9078 = f32[] add(parameter.9076, parameter.9077)
}

primitive_computation_add.9093 {
  parameter.9094 = f32[] parameter(0)
  parameter.9095 = f32[] parameter(1)
  ROOT add.9096 = f32[] add(parameter.9094, parameter.9095)
}

primitive_computation_add.9121 {
  parameter.9122 = f32[] parameter(0)
  parameter.9123 = f32[] parameter(1)
  ROOT add.9124 = f32[] add(parameter.9122, parameter.9123)
}

primitive_computation_add.9131 {
  parameter.9132 = f32[] parameter(0)
  parameter.9133 = f32[] parameter(1)
  ROOT add.9134 = f32[] add(parameter.9132, parameter.9133)
}

primitive_computation_add.9142 {
  parameter.9143 = f32[] parameter(0)
  parameter.9144 = f32[] parameter(1)
  ROOT add.9145 = f32[] add(parameter.9143, parameter.9144)
}

primitive_computation_add.9160 {
  parameter.9161 = f32[] parameter(0)
  parameter.9162 = f32[] parameter(1)
  ROOT add.9163 = f32[] add(parameter.9161, parameter.9162)
}

primitive_computation_add.9187 {
  parameter.9188 = f32[] parameter(0)
  parameter.9189 = f32[] parameter(1)
  ROOT add.9190 = f32[] add(parameter.9188, parameter.9189)
}

primitive_computation_add.9197 {
  parameter.9198 = f32[] parameter(0)
  parameter.9199 = f32[] parameter(1)
  ROOT add.9200 = f32[] add(parameter.9198, parameter.9199)
}

primitive_computation_add.9208 {
  parameter.9209 = f32[] parameter(0)
  parameter.9210 = f32[] parameter(1)
  ROOT add.9211 = f32[] add(parameter.9209, parameter.9210)
}

primitive_computation_add.9226 {
  parameter.9227 = f32[] parameter(0)
  parameter.9228 = f32[] parameter(1)
  ROOT add.9229 = f32[] add(parameter.9227, parameter.9228)
}

primitive_computation_add.9253 {
  parameter.9254 = f32[] parameter(0)
  parameter.9255 = f32[] parameter(1)
  ROOT add.9256 = f32[] add(parameter.9254, parameter.9255)
}

primitive_computation_add.9263 {
  parameter.9264 = f32[] parameter(0)
  parameter.9265 = f32[] parameter(1)
  ROOT add.9266 = f32[] add(parameter.9264, parameter.9265)
}

primitive_computation_add.9274 {
  parameter.9275 = f32[] parameter(0)
  parameter.9276 = f32[] parameter(1)
  ROOT add.9277 = f32[] add(parameter.9275, parameter.9276)
}

primitive_computation_add.9292 {
  parameter.9293 = f32[] parameter(0)
  parameter.9294 = f32[] parameter(1)
  ROOT add.9295 = f32[] add(parameter.9293, parameter.9294)
}

primitive_computation_add.9320 {
  parameter.9321 = f32[] parameter(0)
  parameter.9322 = f32[] parameter(1)
  ROOT add.9323 = f32[] add(parameter.9321, parameter.9322)
}

primitive_computation_add.9330 {
  parameter.9331 = f32[] parameter(0)
  parameter.9332 = f32[] parameter(1)
  ROOT add.9333 = f32[] add(parameter.9331, parameter.9332)
}

primitive_computation_add.9341 {
  parameter.9342 = f32[] parameter(0)
  parameter.9343 = f32[] parameter(1)
  ROOT add.9344 = f32[] add(parameter.9342, parameter.9343)
}

primitive_computation_add.9359 {
  parameter.9360 = f32[] parameter(0)
  parameter.9361 = f32[] parameter(1)
  ROOT add.9362 = f32[] add(parameter.9360, parameter.9361)
}

primitive_computation_add.9386 {
  parameter.9387 = f32[] parameter(0)
  parameter.9388 = f32[] parameter(1)
  ROOT add.9389 = f32[] add(parameter.9387, parameter.9388)
}

primitive_computation_add.9396 {
  parameter.9397 = f32[] parameter(0)
  parameter.9398 = f32[] parameter(1)
  ROOT add.9399 = f32[] add(parameter.9397, parameter.9398)
}

primitive_computation_add.9407 {
  parameter.9408 = f32[] parameter(0)
  parameter.9409 = f32[] parameter(1)
  ROOT add.9410 = f32[] add(parameter.9408, parameter.9409)
}

primitive_computation_add.9425 {
  parameter.9426 = f32[] parameter(0)
  parameter.9427 = f32[] parameter(1)
  ROOT add.9428 = f32[] add(parameter.9426, parameter.9427)
}

primitive_computation_add.9452 {
  parameter.9453 = f32[] parameter(0)
  parameter.9454 = f32[] parameter(1)
  ROOT add.9455 = f32[] add(parameter.9453, parameter.9454)
}

primitive_computation_add.9462 {
  parameter.9463 = f32[] parameter(0)
  parameter.9464 = f32[] parameter(1)
  ROOT add.9465 = f32[] add(parameter.9463, parameter.9464)
}

primitive_computation_add.9473 {
  parameter.9474 = f32[] parameter(0)
  parameter.9475 = f32[] parameter(1)
  ROOT add.9476 = f32[] add(parameter.9474, parameter.9475)
}

primitive_computation_add.9491 {
  parameter.9492 = f32[] parameter(0)
  parameter.9493 = f32[] parameter(1)
  ROOT add.9494 = f32[] add(parameter.9492, parameter.9493)
}

primitive_computation_add.9515 {
  parameter.9516 = f32[] parameter(0)
  parameter.9517 = f32[] parameter(1)
  ROOT add.9518 = f32[] add(parameter.9516, parameter.9517)
}

primitive_computation_add.9525 {
  parameter.9526 = f32[] parameter(0)
  parameter.9527 = f32[] parameter(1)
  ROOT add.9528 = f32[] add(parameter.9526, parameter.9527)
}

primitive_computation_add.9536 {
  parameter.9537 = f32[] parameter(0)
  parameter.9538 = f32[] parameter(1)
  ROOT add.9539 = f32[] add(parameter.9537, parameter.9538)
}

primitive_computation_add.9554 {
  parameter.9555 = f32[] parameter(0)
  parameter.9556 = f32[] parameter(1)
  ROOT add.9557 = f32[] add(parameter.9555, parameter.9556)
}

primitive_computation_ge.9578 {
  parameter.9579 = bf16[] parameter(0)
  parameter.9580 = bf16[] parameter(1)
  ROOT compare.9581 = pred[] compare(parameter.9579, parameter.9580), direction=GE
}

primitive_computation_add__1.9582 {
  parameter.9583 = bf16[] parameter(0)
  parameter.9584 = bf16[] parameter(1)
  ROOT add.9585 = bf16[] add(parameter.9583, parameter.9584)
}

primitive_computation_add.9592 {
  parameter.9593 = f32[] parameter(0)
  parameter.9594 = f32[] parameter(1)
  ROOT add.9595 = f32[] add(parameter.9593, parameter.9594)
}

primitive_computation_add.9602 {
  parameter.9603 = f32[] parameter(0)
  parameter.9604 = f32[] parameter(1)
  ROOT add.9605 = f32[] add(parameter.9603, parameter.9604)
}

primitive_computation_add.9613 {
  parameter.9614 = f32[] parameter(0)
  parameter.9615 = f32[] parameter(1)
  ROOT add.9616 = f32[] add(parameter.9614, parameter.9615)
}

primitive_computation_add.9631 {
  parameter.9632 = f32[] parameter(0)
  parameter.9633 = f32[] parameter(1)
  ROOT add.9634 = f32[] add(parameter.9632, parameter.9633)
}

ENTRY xla_computation_unknown.9650 {
  parameter.219 = s32[] parameter(218)
  parameter.220 = s32[] parameter(219)
  parameter.221 = f32[64]{0} parameter(220)
  parameter.222 = f32[64]{0} parameter(221)
  parameter.223 = f32[64]{0} parameter(222)
  parameter.224 = f32[64]{0} parameter(223)
  parameter.225 = f32[256]{0} parameter(224)
  parameter.226 = f32[256]{0} parameter(225)
  parameter.227 = f32[1,1,64,64]{3,2,1,0} parameter(226)
  parameter.228 = f32[3,3,64,64]{3,2,1,0} parameter(227)
  parameter.229 = f32[1,1,64,256]{3,2,1,0} parameter(228)
  parameter.230 = f32[1,1,64,256]{3,2,1,0} parameter(229)
  parameter.231 = f32[256]{0} parameter(230)
  parameter.232 = f32[256]{0} parameter(231)
  parameter.233 = f32[64]{0} parameter(232)
  parameter.234 = f32[64]{0} parameter(233)
  parameter.235 = f32[64]{0} parameter(234)
  parameter.236 = f32[64]{0} parameter(235)
  parameter.237 = f32[256]{0} parameter(236)
  parameter.238 = f32[256]{0} parameter(237)
  parameter.239 = f32[1,1,256,64]{3,2,1,0} parameter(238)
  parameter.240 = f32[3,3,64,64]{3,2,1,0} parameter(239)
  parameter.241 = f32[1,1,64,256]{3,2,1,0} parameter(240)
  parameter.242 = f32[256]{0} parameter(241)
  parameter.243 = f32[256]{0} parameter(242)
  parameter.244 = f32[256]{0} parameter(243)
  parameter.245 = f32[256]{0} parameter(244)
  parameter.246 = f32[1024]{0} parameter(245)
  parameter.247 = f32[1024]{0} parameter(246)
  parameter.248 = f32[1,1,1024,256]{3,2,1,0} parameter(247)
  parameter.249 = f32[3,3,256,256]{3,2,1,0} parameter(248)
  parameter.250 = f32[1,1,256,1024]{3,2,1,0} parameter(249)
  parameter.251 = f32[256]{0} parameter(250)
  parameter.252 = f32[256]{0} parameter(251)
  parameter.253 = f32[256]{0} parameter(252)
  parameter.254 = f32[256]{0} parameter(253)
  parameter.255 = f32[1024]{0} parameter(254)
  parameter.256 = f32[1024]{0} parameter(255)
  parameter.257 = f32[1,1,1024,256]{3,2,1,0} parameter(256)
  parameter.258 = f32[3,3,256,256]{3,2,1,0} parameter(257)
  parameter.259 = f32[1,1,256,1024]{3,2,1,0} parameter(258)
  parameter.260 = f32[256]{0} parameter(259)
  parameter.261 = f32[256]{0} parameter(260)
  parameter.262 = f32[256]{0} parameter(261)
  parameter.263 = f32[256]{0} parameter(262)
  parameter.264 = f32[1024]{0} parameter(263)
  parameter.265 = f32[1024]{0} parameter(264)
  parameter.266 = f32[1,1,1024,256]{3,2,1,0} parameter(265)
  parameter.267 = f32[3,3,256,256]{3,2,1,0} parameter(266)
  parameter.268 = f32[1,1,256,1024]{3,2,1,0} parameter(267)
  parameter.269 = f32[512]{0} parameter(268)
  parameter.270 = f32[512]{0} parameter(269)
  parameter.271 = f32[512]{0} parameter(270)
  parameter.272 = f32[512]{0} parameter(271)
  parameter.273 = f32[2048]{0} parameter(272)
  parameter.274 = f32[2048]{0} parameter(273)
  parameter.275 = f32[1,1,1024,512]{3,2,1,0} parameter(274)
  parameter.276 = f32[3,3,512,512]{3,2,1,0} parameter(275)
  parameter.277 = f32[1,1,512,2048]{3,2,1,0} parameter(276)
  parameter.278 = f32[1,1,1024,2048]{3,2,1,0} parameter(277)
  parameter.279 = f32[2048]{0} parameter(278)
  parameter.280 = f32[2048]{0} parameter(279)
  parameter.281 = f32[512]{0} parameter(280)
  parameter.282 = f32[512]{0} parameter(281)
  parameter.283 = f32[512]{0} parameter(282)
  parameter.284 = f32[512]{0} parameter(283)
  parameter.285 = f32[2048]{0} parameter(284)
  parameter.286 = f32[2048]{0} parameter(285)
  parameter.287 = f32[1,1,2048,512]{3,2,1,0} parameter(286)
  parameter.288 = f32[3,3,512,512]{3,2,1,0} parameter(287)
  parameter.289 = f32[1,1,512,2048]{3,2,1,0} parameter(288)
  parameter.290 = f32[512]{0} parameter(289)
  parameter.291 = f32[512]{0} parameter(290)
  parameter.292 = f32[512]{0} parameter(291)
  parameter.293 = f32[512]{0} parameter(292)
  parameter.294 = f32[2048]{0} parameter(293)
  parameter.295 = f32[2048]{0} parameter(294)
  parameter.296 = f32[1,1,2048,512]{3,2,1,0} parameter(295)
  parameter.297 = f32[3,3,512,512]{3,2,1,0} parameter(296)
  parameter.298 = f32[1,1,512,2048]{3,2,1,0} parameter(297)
  parameter.299 = f32[64]{0} parameter(298)
  parameter.300 = f32[64]{0} parameter(299)
  parameter.301 = f32[64]{0} parameter(300)
  parameter.302 = f32[64]{0} parameter(301)
  parameter.303 = f32[256]{0} parameter(302)
  parameter.304 = f32[256]{0} parameter(303)
  parameter.305 = f32[1,1,256,64]{3,2,1,0} parameter(304)
  parameter.306 = f32[3,3,64,64]{3,2,1,0} parameter(305)
  parameter.307 = f32[1,1,64,256]{3,2,1,0} parameter(306)
  parameter.308 = f32[128]{0} parameter(307)
  parameter.309 = f32[128]{0} parameter(308)
  parameter.310 = f32[128]{0} parameter(309)
  parameter.311 = f32[128]{0} parameter(310)
  parameter.312 = f32[512]{0} parameter(311)
  parameter.313 = f32[512]{0} parameter(312)
  parameter.314 = f32[1,1,256,128]{3,2,1,0} parameter(313)
  parameter.315 = f32[3,3,128,128]{3,2,1,0} parameter(314)
  parameter.316 = f32[1,1,128,512]{3,2,1,0} parameter(315)
  parameter.317 = f32[1,1,256,512]{3,2,1,0} parameter(316)
  parameter.318 = f32[512]{0} parameter(317)
  parameter.319 = f32[512]{0} parameter(318)
  parameter.320 = f32[128]{0} parameter(319)
  parameter.321 = f32[128]{0} parameter(320)
  parameter.322 = f32[128]{0} parameter(321)
  parameter.323 = f32[128]{0} parameter(322)
  parameter.324 = f32[512]{0} parameter(323)
  parameter.325 = f32[512]{0} parameter(324)
  parameter.326 = f32[1,1,512,128]{3,2,1,0} parameter(325)
  parameter.327 = f32[3,3,128,128]{3,2,1,0} parameter(326)
  parameter.328 = f32[1,1,128,512]{3,2,1,0} parameter(327)
  parameter.329 = f32[128]{0} parameter(328)
  parameter.330 = f32[128]{0} parameter(329)
  parameter.331 = f32[128]{0} parameter(330)
  parameter.332 = f32[128]{0} parameter(331)
  parameter.333 = f32[512]{0} parameter(332)
  parameter.334 = f32[512]{0} parameter(333)
  parameter.335 = f32[1,1,512,128]{3,2,1,0} parameter(334)
  parameter.336 = f32[3,3,128,128]{3,2,1,0} parameter(335)
  parameter.337 = f32[1,1,128,512]{3,2,1,0} parameter(336)
  parameter.338 = f32[128]{0} parameter(337)
  parameter.339 = f32[128]{0} parameter(338)
  parameter.340 = f32[128]{0} parameter(339)
  parameter.341 = f32[128]{0} parameter(340)
  parameter.342 = f32[512]{0} parameter(341)
  parameter.343 = f32[512]{0} parameter(342)
  parameter.344 = f32[1,1,512,128]{3,2,1,0} parameter(343)
  parameter.345 = f32[3,3,128,128]{3,2,1,0} parameter(344)
  parameter.346 = f32[1,1,128,512]{3,2,1,0} parameter(345)
  parameter.347 = f32[256]{0} parameter(346)
  parameter.348 = f32[256]{0} parameter(347)
  parameter.349 = f32[256]{0} parameter(348)
  parameter.350 = f32[256]{0} parameter(349)
  parameter.351 = f32[1024]{0} parameter(350)
  parameter.352 = f32[1024]{0} parameter(351)
  parameter.353 = f32[1,1,512,256]{3,2,1,0} parameter(352)
  parameter.354 = f32[3,3,256,256]{3,2,1,0} parameter(353)
  parameter.355 = f32[1,1,256,1024]{3,2,1,0} parameter(354)
  parameter.356 = f32[1,1,512,1024]{3,2,1,0} parameter(355)
  parameter.357 = f32[1024]{0} parameter(356)
  parameter.358 = f32[1024]{0} parameter(357)
  parameter.359 = f32[256]{0} parameter(358)
  parameter.360 = f32[256]{0} parameter(359)
  parameter.361 = f32[256]{0} parameter(360)
  parameter.362 = f32[256]{0} parameter(361)
  parameter.363 = f32[1024]{0} parameter(362)
  parameter.364 = f32[1024]{0} parameter(363)
  parameter.365 = f32[1,1,1024,256]{3,2,1,0} parameter(364)
  parameter.366 = f32[3,3,256,256]{3,2,1,0} parameter(365)
  parameter.367 = f32[1,1,256,1024]{3,2,1,0} parameter(366)
  parameter.368 = f32[256]{0} parameter(367)
  parameter.369 = f32[256]{0} parameter(368)
  parameter.370 = f32[256]{0} parameter(369)
  parameter.371 = f32[256]{0} parameter(370)
  parameter.372 = f32[1024]{0} parameter(371)
  parameter.373 = f32[1024]{0} parameter(372)
  parameter.374 = f32[1,1,1024,256]{3,2,1,0} parameter(373)
  parameter.375 = f32[3,3,256,256]{3,2,1,0} parameter(374)
  parameter.376 = f32[1,1,256,1024]{3,2,1,0} parameter(375)
  parameter.377 = f32[1000]{0} parameter(376)
  parameter.378 = f32[2048,1000]{1,0} parameter(377)
  parameter.379 = f32[64]{0} parameter(378)
  parameter.380 = f32[64]{0} parameter(379)
  parameter.381 = f32[7,7,3,64]{3,2,1,0} parameter(380)
  parameter.382 = f32[64]{0} parameter(381)
  parameter.383 = f32[64]{0} parameter(382)
  parameter.384 = f32[64]{0} parameter(383)
  parameter.385 = f32[64]{0} parameter(384)
  parameter.386 = f32[256]{0} parameter(385)
  parameter.387 = f32[256]{0} parameter(386)
  parameter.388 = f32[1,1,64,64]{3,2,1,0} parameter(387)
  parameter.389 = f32[3,3,64,64]{3,2,1,0} parameter(388)
  parameter.390 = f32[1,1,64,256]{3,2,1,0} parameter(389)
  parameter.391 = f32[1,1,64,256]{3,2,1,0} parameter(390)
  parameter.392 = f32[256]{0} parameter(391)
  parameter.393 = f32[256]{0} parameter(392)
  parameter.394 = f32[64]{0} parameter(393)
  parameter.395 = f32[64]{0} parameter(394)
  parameter.396 = f32[64]{0} parameter(395)
  parameter.397 = f32[64]{0} parameter(396)
  parameter.398 = f32[256]{0} parameter(397)
  parameter.399 = f32[256]{0} parameter(398)
  parameter.400 = f32[1,1,256,64]{3,2,1,0} parameter(399)
  parameter.401 = f32[3,3,64,64]{3,2,1,0} parameter(400)
  parameter.402 = f32[1,1,64,256]{3,2,1,0} parameter(401)
  parameter.403 = f32[256]{0} parameter(402)
  parameter.404 = f32[256]{0} parameter(403)
  parameter.405 = f32[256]{0} parameter(404)
  parameter.406 = f32[256]{0} parameter(405)
  parameter.407 = f32[1024]{0} parameter(406)
  parameter.408 = f32[1024]{0} parameter(407)
  parameter.409 = f32[1,1,1024,256]{3,2,1,0} parameter(408)
  parameter.410 = f32[3,3,256,256]{3,2,1,0} parameter(409)
  parameter.411 = f32[1,1,256,1024]{3,2,1,0} parameter(410)
  parameter.412 = f32[256]{0} parameter(411)
  parameter.413 = f32[256]{0} parameter(412)
  parameter.414 = f32[256]{0} parameter(413)
  parameter.415 = f32[256]{0} parameter(414)
  parameter.416 = f32[1024]{0} parameter(415)
  parameter.417 = f32[1024]{0} parameter(416)
  parameter.418 = f32[1,1,1024,256]{3,2,1,0} parameter(417)
  parameter.419 = f32[3,3,256,256]{3,2,1,0} parameter(418)
  parameter.420 = f32[1,1,256,1024]{3,2,1,0} parameter(419)
  parameter.421 = f32[256]{0} parameter(420)
  parameter.422 = f32[256]{0} parameter(421)
  parameter.423 = f32[256]{0} parameter(422)
  parameter.424 = f32[256]{0} parameter(423)
  parameter.425 = f32[1024]{0} parameter(424)
  parameter.426 = f32[1024]{0} parameter(425)
  parameter.427 = f32[1,1,1024,256]{3,2,1,0} parameter(426)
  parameter.428 = f32[3,3,256,256]{3,2,1,0} parameter(427)
  parameter.429 = f32[1,1,256,1024]{3,2,1,0} parameter(428)
  parameter.430 = f32[512]{0} parameter(429)
  parameter.431 = f32[512]{0} parameter(430)
  parameter.432 = f32[512]{0} parameter(431)
  parameter.433 = f32[512]{0} parameter(432)
  parameter.434 = f32[2048]{0} parameter(433)
  parameter.435 = f32[2048]{0} parameter(434)
  parameter.436 = f32[1,1,1024,512]{3,2,1,0} parameter(435)
  parameter.437 = f32[3,3,512,512]{3,2,1,0} parameter(436)
  parameter.438 = f32[1,1,512,2048]{3,2,1,0} parameter(437)
  parameter.439 = f32[1,1,1024,2048]{3,2,1,0} parameter(438)
  parameter.440 = f32[2048]{0} parameter(439)
  parameter.441 = f32[2048]{0} parameter(440)
  parameter.442 = f32[512]{0} parameter(441)
  parameter.443 = f32[512]{0} parameter(442)
  parameter.444 = f32[512]{0} parameter(443)
  parameter.445 = f32[512]{0} parameter(444)
  parameter.446 = f32[2048]{0} parameter(445)
  parameter.447 = f32[2048]{0} parameter(446)
  parameter.448 = f32[1,1,2048,512]{3,2,1,0} parameter(447)
  parameter.449 = f32[3,3,512,512]{3,2,1,0} parameter(448)
  parameter.450 = f32[1,1,512,2048]{3,2,1,0} parameter(449)
  parameter.451 = f32[512]{0} parameter(450)
  parameter.452 = f32[512]{0} parameter(451)
  parameter.453 = f32[512]{0} parameter(452)
  parameter.454 = f32[512]{0} parameter(453)
  parameter.455 = f32[2048]{0} parameter(454)
  parameter.456 = f32[2048]{0} parameter(455)
  parameter.457 = f32[1,1,2048,512]{3,2,1,0} parameter(456)
  parameter.458 = f32[3,3,512,512]{3,2,1,0} parameter(457)
  parameter.459 = f32[1,1,512,2048]{3,2,1,0} parameter(458)
  parameter.460 = f32[64]{0} parameter(459)
  parameter.461 = f32[64]{0} parameter(460)
  parameter.462 = f32[64]{0} parameter(461)
  parameter.463 = f32[64]{0} parameter(462)
  parameter.464 = f32[256]{0} parameter(463)
  parameter.465 = f32[256]{0} parameter(464)
  parameter.466 = f32[1,1,256,64]{3,2,1,0} parameter(465)
  parameter.467 = f32[3,3,64,64]{3,2,1,0} parameter(466)
  parameter.468 = f32[1,1,64,256]{3,2,1,0} parameter(467)
  parameter.469 = f32[128]{0} parameter(468)
  parameter.470 = f32[128]{0} parameter(469)
  parameter.471 = f32[128]{0} parameter(470)
  parameter.472 = f32[128]{0} parameter(471)
  parameter.473 = f32[512]{0} parameter(472)
  parameter.474 = f32[512]{0} parameter(473)
  parameter.475 = f32[1,1,256,128]{3,2,1,0} parameter(474)
  parameter.476 = f32[3,3,128,128]{3,2,1,0} parameter(475)
  parameter.477 = f32[1,1,128,512]{3,2,1,0} parameter(476)
  parameter.478 = f32[1,1,256,512]{3,2,1,0} parameter(477)
  parameter.479 = f32[512]{0} parameter(478)
  parameter.480 = f32[512]{0} parameter(479)
  parameter.481 = f32[128]{0} parameter(480)
  parameter.482 = f32[128]{0} parameter(481)
  parameter.483 = f32[128]{0} parameter(482)
  parameter.484 = f32[128]{0} parameter(483)
  parameter.485 = f32[512]{0} parameter(484)
  parameter.486 = f32[512]{0} parameter(485)
  parameter.487 = f32[1,1,512,128]{3,2,1,0} parameter(486)
  parameter.488 = f32[3,3,128,128]{3,2,1,0} parameter(487)
  parameter.489 = f32[1,1,128,512]{3,2,1,0} parameter(488)
  parameter.490 = f32[128]{0} parameter(489)
  parameter.491 = f32[128]{0} parameter(490)
  parameter.492 = f32[128]{0} parameter(491)
  parameter.493 = f32[128]{0} parameter(492)
  parameter.494 = f32[512]{0} parameter(493)
  parameter.495 = f32[512]{0} parameter(494)
  parameter.496 = f32[1,1,512,128]{3,2,1,0} parameter(495)
  parameter.497 = f32[3,3,128,128]{3,2,1,0} parameter(496)
  parameter.498 = f32[1,1,128,512]{3,2,1,0} parameter(497)
  parameter.499 = f32[128]{0} parameter(498)
  parameter.500 = f32[128]{0} parameter(499)
  parameter.501 = f32[128]{0} parameter(500)
  parameter.502 = f32[128]{0} parameter(501)
  parameter.503 = f32[512]{0} parameter(502)
  parameter.504 = f32[512]{0} parameter(503)
  parameter.505 = f32[1,1,512,128]{3,2,1,0} parameter(504)
  parameter.506 = f32[3,3,128,128]{3,2,1,0} parameter(505)
  parameter.507 = f32[1,1,128,512]{3,2,1,0} parameter(506)
  parameter.508 = f32[256]{0} parameter(507)
  parameter.509 = f32[256]{0} parameter(508)
  parameter.510 = f32[256]{0} parameter(509)
  parameter.511 = f32[256]{0} parameter(510)
  parameter.512 = f32[1024]{0} parameter(511)
  parameter.513 = f32[1024]{0} parameter(512)
  parameter.514 = f32[1,1,512,256]{3,2,1,0} parameter(513)
  parameter.515 = f32[3,3,256,256]{3,2,1,0} parameter(514)
  parameter.516 = f32[1,1,256,1024]{3,2,1,0} parameter(515)
  parameter.517 = f32[1,1,512,1024]{3,2,1,0} parameter(516)
  parameter.518 = f32[1024]{0} parameter(517)
  parameter.519 = f32[1024]{0} parameter(518)
  parameter.520 = f32[256]{0} parameter(519)
  parameter.521 = f32[256]{0} parameter(520)
  parameter.522 = f32[256]{0} parameter(521)
  parameter.523 = f32[256]{0} parameter(522)
  parameter.524 = f32[1024]{0} parameter(523)
  parameter.525 = f32[1024]{0} parameter(524)
  parameter.526 = f32[1,1,1024,256]{3,2,1,0} parameter(525)
  parameter.527 = f32[3,3,256,256]{3,2,1,0} parameter(526)
  parameter.528 = f32[1,1,256,1024]{3,2,1,0} parameter(527)
  parameter.529 = f32[256]{0} parameter(528)
  parameter.530 = f32[256]{0} parameter(529)
  parameter.531 = f32[256]{0} parameter(530)
  parameter.532 = f32[256]{0} parameter(531)
  parameter.533 = f32[1024]{0} parameter(532)
  parameter.534 = f32[1024]{0} parameter(533)
  parameter.535 = f32[1,1,1024,256]{3,2,1,0} parameter(534)
  parameter.536 = f32[3,3,256,256]{3,2,1,0} parameter(535)
  parameter.537 = f32[1,1,256,1024]{3,2,1,0} parameter(536)
  parameter.538 = f32[1000]{0} parameter(537)
  parameter.539 = f32[2048,1000]{1,0} parameter(538)
  parameter.540 = f32[64]{0} parameter(539)
  parameter.541 = f32[64]{0} parameter(540)
  parameter.542 = f32[7,7,3,64]{3,2,1,0} parameter(541)
  parameter.649 = f32[1,56,56,64]{3,2,1,0} parameter(648)
  parameter.650 = f32[1,56,56,64]{3,2,1,0} parameter(649)
  parameter.651 = f32[1,56,56,64]{3,2,1,0} parameter(650)
  parameter.652 = f32[1,56,56,64]{3,2,1,0} parameter(651)
  parameter.653 = f32[1,56,56,256]{3,2,1,0} parameter(652)
  parameter.654 = f32[1,56,56,64]{3,2,1,0} parameter(653)
  parameter.655 = f32[1,56,56,64]{3,2,1,0} parameter(654)
  parameter.656 = f32[1,14,14,1024]{3,2,1,0} parameter(655)
  parameter.657 = f32[1,14,14,256]{3,2,1,0} parameter(656)
  parameter.658 = f32[1,14,14,256]{3,2,1,0} parameter(657)
  parameter.659 = f32[1,14,14,1024]{3,2,1,0} parameter(658)
  parameter.660 = f32[1,14,14,256]{3,2,1,0} parameter(659)
  parameter.661 = f32[1,14,14,256]{3,2,1,0} parameter(660)
  parameter.662 = f32[1,14,14,1024]{3,2,1,0} parameter(661)
  parameter.663 = f32[1,14,14,256]{3,2,1,0} parameter(662)
  parameter.664 = f32[1,14,14,256]{3,2,1,0} parameter(663)
  parameter.665 = f32[1,14,14,1024]{3,2,1,0} parameter(664)
  parameter.666 = f32[1,14,14,512]{3,2,1,0} parameter(665)
  parameter.667 = f32[1,7,7,512]{3,2,1,0} parameter(666)
  parameter.668 = f32[1,14,14,1024]{3,2,1,0} parameter(667)
  parameter.669 = f32[1,7,7,2048]{3,2,1,0} parameter(668)
  parameter.670 = f32[1,7,7,512]{3,2,1,0} parameter(669)
  parameter.671 = f32[1,7,7,512]{3,2,1,0} parameter(670)
  parameter.672 = f32[1,7,7,2048]{3,2,1,0} parameter(671)
  parameter.673 = f32[1,7,7,512]{3,2,1,0} parameter(672)
  parameter.674 = f32[1,7,7,512]{3,2,1,0} parameter(673)
  parameter.675 = f32[1,56,56,256]{3,2,1,0} parameter(674)
  parameter.676 = f32[1,56,56,64]{3,2,1,0} parameter(675)
  parameter.677 = f32[1,56,56,64]{3,2,1,0} parameter(676)
  parameter.678 = f32[1,56,56,256]{3,2,1,0} parameter(677)
  parameter.679 = f32[1,56,56,128]{3,2,1,0} parameter(678)
  parameter.680 = f32[1,28,28,128]{3,2,1,0} parameter(679)
  parameter.681 = f32[1,56,56,256]{3,2,1,0} parameter(680)
  parameter.682 = f32[1,28,28,512]{3,2,1,0} parameter(681)
  parameter.683 = f32[1,28,28,128]{3,2,1,0} parameter(682)
  parameter.684 = f32[1,28,28,128]{3,2,1,0} parameter(683)
  parameter.685 = f32[1,28,28,512]{3,2,1,0} parameter(684)
  parameter.686 = f32[1,28,28,128]{3,2,1,0} parameter(685)
  parameter.687 = f32[1,28,28,128]{3,2,1,0} parameter(686)
  parameter.688 = f32[1,28,28,512]{3,2,1,0} parameter(687)
  parameter.689 = f32[1,28,28,128]{3,2,1,0} parameter(688)
  parameter.690 = f32[1,28,28,128]{3,2,1,0} parameter(689)
  parameter.691 = f32[1,28,28,512]{3,2,1,0} parameter(690)
  parameter.692 = f32[1,28,28,256]{3,2,1,0} parameter(691)
  parameter.693 = f32[1,14,14,256]{3,2,1,0} parameter(692)
  parameter.694 = f32[1,28,28,512]{3,2,1,0} parameter(693)
  parameter.695 = f32[1,14,14,1024]{3,2,1,0} parameter(694)
  parameter.696 = f32[1,14,14,256]{3,2,1,0} parameter(695)
  parameter.697 = f32[1,14,14,256]{3,2,1,0} parameter(696)
  parameter.698 = f32[1,14,14,1024]{3,2,1,0} parameter(697)
  parameter.699 = f32[1,14,14,256]{3,2,1,0} parameter(698)
  parameter.700 = f32[1,14,14,256]{3,2,1,0} parameter(699)
  parameter.701 = f32[1,224,224,3]{3,2,1,0} parameter(700)
  parameter.702 = f32[1,2048]{1,0} parameter(701)
  parameter.703 = f32[1,1000]{1,0} parameter(702)
  constant.704 = pred[] constant(false)
  constant.780 = pred[] constant(false)
  constant.789 = bf16[] constant(0)
  broadcast.790 = bf16[128,112,112,64]{3,2,1,0} broadcast(constant.789), dimensions={}
  constant.873 = pred[] constant(false)
  constant.882 = bf16[] constant(0)
  broadcast.883 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.882), dimensions={}
  constant.960 = pred[] constant(false)
  constant.969 = bf16[] constant(0)
  broadcast.970 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.969), dimensions={}
  constant.1124 = pred[] constant(false)
  constant.1133 = bf16[] constant(0)
  broadcast.1134 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1133), dimensions={}
  constant.1211 = pred[] constant(false)
  constant.1220 = bf16[] constant(0)
  broadcast.1221 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1220), dimensions={}
  constant.1298 = pred[] constant(false)
  constant.1307 = bf16[] constant(0)
  broadcast.1308 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1307), dimensions={}
  constant.1386 = pred[] constant(false)
  constant.1395 = bf16[] constant(0)
  broadcast.1396 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1395), dimensions={}
  constant.1473 = pred[] constant(false)
  constant.1482 = bf16[] constant(0)
  broadcast.1483 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1482), dimensions={}
  constant.1560 = pred[] constant(false)
  constant.1569 = bf16[] constant(0)
  broadcast.1570 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1569), dimensions={}
  constant.1648 = pred[] constant(false)
  constant.1657 = bf16[] constant(0)
  broadcast.1658 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1657), dimensions={}
  constant.1735 = pred[] constant(false)
  constant.1744 = bf16[] constant(0)
  broadcast.1745 = bf16[128,56,56,128]{3,2,1,0} broadcast(constant.1744), dimensions={}
  constant.1822 = pred[] constant(false)
  constant.1831 = bf16[] constant(0)
  broadcast.1832 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1831), dimensions={}
  constant.1986 = pred[] constant(false)
  constant.1995 = bf16[] constant(0)
  broadcast.1996 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.1995), dimensions={}
  constant.2073 = pred[] constant(false)
  constant.2082 = bf16[] constant(0)
  broadcast.2083 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2082), dimensions={}
  constant.2160 = pred[] constant(false)
  constant.2169 = bf16[] constant(0)
  broadcast.2170 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2169), dimensions={}
  constant.2248 = pred[] constant(false)
  constant.2257 = bf16[] constant(0)
  broadcast.2258 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2257), dimensions={}
  constant.2335 = pred[] constant(false)
  constant.2344 = bf16[] constant(0)
  broadcast.2345 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2344), dimensions={}
  constant.2422 = pred[] constant(false)
  constant.2431 = bf16[] constant(0)
  broadcast.2432 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2431), dimensions={}
  constant.2510 = pred[] constant(false)
  constant.2519 = bf16[] constant(0)
  broadcast.2520 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2519), dimensions={}
  constant.2597 = pred[] constant(false)
  constant.2606 = bf16[] constant(0)
  broadcast.2607 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2606), dimensions={}
  constant.2684 = pred[] constant(false)
  constant.2693 = bf16[] constant(0)
  broadcast.2694 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2693), dimensions={}
  constant.2772 = pred[] constant(false)
  constant.2781 = bf16[] constant(0)
  broadcast.2782 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2781), dimensions={}
  constant.2859 = pred[] constant(false)
  constant.2868 = bf16[] constant(0)
  broadcast.2869 = bf16[128,28,28,256]{3,2,1,0} broadcast(constant.2868), dimensions={}
  constant.2946 = pred[] constant(false)
  constant.2955 = bf16[] constant(0)
  broadcast.2956 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.2955), dimensions={}
  constant.3110 = pred[] constant(false)
  constant.3119 = bf16[] constant(0)
  broadcast.3120 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3119), dimensions={}
  constant.3197 = pred[] constant(false)
  constant.3206 = bf16[] constant(0)
  broadcast.3207 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3206), dimensions={}
  constant.3284 = pred[] constant(false)
  constant.3293 = bf16[] constant(0)
  broadcast.3294 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3293), dimensions={}
  constant.3372 = pred[] constant(false)
  constant.3381 = bf16[] constant(0)
  broadcast.3382 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3381), dimensions={}
  constant.3459 = pred[] constant(false)
  constant.3468 = bf16[] constant(0)
  broadcast.3469 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3468), dimensions={}
  constant.3546 = pred[] constant(false)
  constant.3555 = bf16[] constant(0)
  broadcast.3556 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3555), dimensions={}
  constant.3634 = pred[] constant(false)
  constant.3643 = bf16[] constant(0)
  broadcast.3644 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3643), dimensions={}
  constant.3721 = pred[] constant(false)
  constant.3730 = bf16[] constant(0)
  broadcast.3731 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3730), dimensions={}
  constant.3808 = pred[] constant(false)
  constant.3817 = bf16[] constant(0)
  broadcast.3818 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3817), dimensions={}
  constant.3896 = pred[] constant(false)
  constant.3905 = bf16[] constant(0)
  broadcast.3906 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3905), dimensions={}
  constant.3983 = pred[] constant(false)
  constant.3992 = bf16[] constant(0)
  broadcast.3993 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3992), dimensions={}
  constant.4070 = pred[] constant(false)
  constant.4079 = bf16[] constant(0)
  broadcast.4080 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4079), dimensions={}
  constant.4158 = pred[] constant(false)
  constant.4167 = bf16[] constant(0)
  broadcast.4168 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.4167), dimensions={}
  constant.4245 = pred[] constant(false)
  constant.4254 = bf16[] constant(0)
  broadcast.4255 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4254), dimensions={}
  constant.4332 = pred[] constant(false)
  constant.4341 = bf16[] constant(0)
  broadcast.4342 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4341), dimensions={}
  constant.4420 = pred[] constant(false)
  constant.4429 = bf16[] constant(0)
  broadcast.4430 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.4429), dimensions={}
  constant.4507 = pred[] constant(false)
  constant.4516 = bf16[] constant(0)
  broadcast.4517 = bf16[128,14,14,512]{3,2,1,0} broadcast(constant.4516), dimensions={}
  constant.4594 = pred[] constant(false)
  constant.4603 = bf16[] constant(0)
  broadcast.4604 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4603), dimensions={}
  constant.4758 = pred[] constant(false)
  constant.4767 = bf16[] constant(0)
  broadcast.4768 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4767), dimensions={}
  constant.4845 = pred[] constant(false)
  constant.4854 = bf16[] constant(0)
  broadcast.4855 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4854), dimensions={}
  constant.4932 = pred[] constant(false)
  constant.4941 = bf16[] constant(0)
  broadcast.4942 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4941), dimensions={}
  constant.5020 = pred[] constant(false)
  constant.5029 = bf16[] constant(0)
  broadcast.5030 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.5029), dimensions={}
  constant.5107 = pred[] constant(false)
  constant.5116 = bf16[] constant(0)
  broadcast.5117 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.5116), dimensions={}
  constant.5194 = pred[] constant(false)
  constant.5203 = bf16[] constant(0)
  broadcast.5204 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.5203), dimensions={}
  constant.5282 = pred[] constant(false)
  constant.5291 = bf16[] constant(0)
  broadcast.5292 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.5291), dimensions={}
  parameter.217 = f32[128,224,224,3]{3,2,1,0} parameter(216)
  parameter.214 = f32[1,224,224,3]{3,2,1,0} parameter(213)
  reshape.705 = f32[224,224,3]{2,1,0} reshape(parameter.214)
  broadcast.706 = f32[128,224,224,3]{3,2,1,0} broadcast(reshape.705), dimensions={1,2,3}
  add.707 = f32[128,224,224,3]{3,2,1,0} add(parameter.217, broadcast.706)
  convert.708 = bf16[128,224,224,3]{3,2,1,0} convert(add.707)
  parameter.161 = f32[7,7,3,64]{3,2,1,0} parameter(160)
  convert.709 = bf16[7,7,3,64]{3,2,1,0} convert(parameter.161)
  convolution.710 = bf16[128,112,112,64]{3,2,1,0} convolution(convert.708, convert.709), window={size=7x7 stride=2x2 pad=3_3x3_3}, dim_labels=b01f_01io->b01f
  convert.711 = f32[128,112,112,64]{3,2,1,0} convert(convolution.710)
  constant.712 = f32[] constant(0)
  reduce.717 = f32[64]{0} reduce(convert.711, constant.712), dimensions={0,1,2}, to_apply=primitive_computation_add.713
  constant.718 = s32[] constant(1605632)
  convert.719 = f32[] convert(constant.718)
  broadcast.720 = f32[64]{0} broadcast(convert.719), dimensions={}
  divide.721 = f32[64]{0} divide(reduce.717, broadcast.720)
  reshape.755 = f32[1,1,1,64]{3,2,1,0} reshape(divide.721)
  reshape.756 = f32[64]{0} reshape(reshape.755)
  broadcast.757 = f32[128,112,112,64]{3,2,1,0} broadcast(reshape.756), dimensions={3}
  subtract.758 = f32[128,112,112,64]{3,2,1,0} subtract(convert.711, broadcast.757)
  multiply.722 = f32[128,112,112,64]{3,2,1,0} multiply(convert.711, convert.711)
  constant.726 = f32[] constant(0)
  reduce.731 = f32[64]{0} reduce(multiply.722, constant.726), dimensions={0,1,2}, to_apply=primitive_computation_add.727
  constant.732 = s32[] constant(1605632)
  convert.733 = f32[] convert(constant.732)
  broadcast.734 = f32[64]{0} broadcast(convert.733), dimensions={}
  divide.735 = f32[64]{0} divide(reduce.731, broadcast.734)
  multiply.736 = f32[64]{0} multiply(divide.721, divide.721)
  subtract.740 = f32[64]{0} subtract(divide.735, multiply.736)
  constant.759 = f32[] constant(1e-05)
  broadcast.760 = f32[64]{0} broadcast(constant.759), dimensions={}
  add.761 = f32[64]{0} add(subtract.740, broadcast.760)
  rsqrt.762 = f32[64]{0} rsqrt(add.761)
  broadcast.770 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.762), dimensions={3}
  parameter.160 = f32[64]{0} parameter(159)
  reshape.769 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.160)
  multiply.771 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.770, reshape.769)
  reshape.772 = f32[64]{0} reshape(multiply.771)
  broadcast.773 = f32[128,112,112,64]{3,2,1,0} broadcast(reshape.772), dimensions={3}
  multiply.774 = f32[128,112,112,64]{3,2,1,0} multiply(subtract.758, broadcast.773)
  parameter.159 = f32[64]{0} parameter(158)
  reshape.775 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.159)
  reshape.776 = f32[64]{0} reshape(reshape.775)
  broadcast.777 = f32[128,112,112,64]{3,2,1,0} broadcast(reshape.776), dimensions={3}
  add.778 = f32[128,112,112,64]{3,2,1,0} add(multiply.774, broadcast.777)
  convert.779 = bf16[128,112,112,64]{3,2,1,0} convert(add.778)
  constant.781 = bf16[] constant(0)
  broadcast.782 = bf16[128,112,112,64]{3,2,1,0} broadcast(constant.781), dimensions={}
  maximum.783 = bf16[128,112,112,64]{3,2,1,0} maximum(convert.779, broadcast.782)
  tuple.784 = (bf16[128,112,112,64]{3,2,1,0}) tuple(maximum.783)
  get-tuple-element.785 = bf16[128,112,112,64]{3,2,1,0} get-tuple-element(tuple.784), index=0
  constant.791 = bf16[] constant(-inf)
  reduce-window.796 = bf16[128,56,56,64]{3,2,1,0} reduce-window(get-tuple-element.785, constant.791), window={size=1x3x3x1 stride=1x2x2x1 pad=0_0x0_1x0_1x0_0}, to_apply=primitive_computation_max.792
  convert.1047 = f32[128,56,56,64]{3,2,1,0} convert(reduce-window.796)
  parameter.165 = f32[1,56,56,64]{3,2,1,0} parameter(164)
  reshape.1048 = f32[56,56,64]{2,1,0} reshape(parameter.165)
  broadcast.1049 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1048), dimensions={1,2,3}
  add.1050 = f32[128,56,56,64]{3,2,1,0} add(convert.1047, broadcast.1049)
  convert.1051 = bf16[128,56,56,64]{3,2,1,0} convert(add.1050)
  parameter.10 = f32[1,1,64,256]{3,2,1,0} parameter(9)
  convert.1052 = bf16[1,1,64,256]{3,2,1,0} convert(parameter.10)
  convolution.1053 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.1051, convert.1052), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1054 = f32[128,56,56,256]{3,2,1,0} convert(convolution.1053)
  constant.1055 = f32[] constant(0)
  reduce.1060 = f32[256]{0} reduce(convert.1054, constant.1055), dimensions={0,1,2}, to_apply=primitive_computation_add.1056
  constant.1061 = s32[] constant(401408)
  convert.1062 = f32[] convert(constant.1061)
  broadcast.1063 = f32[256]{0} broadcast(convert.1062), dimensions={}
  divide.1064 = f32[256]{0} divide(reduce.1060, broadcast.1063)
  reshape.1098 = f32[1,1,1,256]{3,2,1,0} reshape(divide.1064)
  reshape.1099 = f32[256]{0} reshape(reshape.1098)
  broadcast.1100 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1099), dimensions={3}
  subtract.1101 = f32[128,56,56,256]{3,2,1,0} subtract(convert.1054, broadcast.1100)
  multiply.1065 = f32[128,56,56,256]{3,2,1,0} multiply(convert.1054, convert.1054)
  constant.1069 = f32[] constant(0)
  reduce.1074 = f32[256]{0} reduce(multiply.1065, constant.1069), dimensions={0,1,2}, to_apply=primitive_computation_add.1070
  constant.1075 = s32[] constant(401408)
  convert.1076 = f32[] convert(constant.1075)
  broadcast.1077 = f32[256]{0} broadcast(convert.1076), dimensions={}
  divide.1078 = f32[256]{0} divide(reduce.1074, broadcast.1077)
  multiply.1079 = f32[256]{0} multiply(divide.1064, divide.1064)
  subtract.1083 = f32[256]{0} subtract(divide.1078, multiply.1079)
  constant.1102 = f32[] constant(1e-05)
  broadcast.1103 = f32[256]{0} broadcast(constant.1102), dimensions={}
  add.1104 = f32[256]{0} add(subtract.1083, broadcast.1103)
  rsqrt.1105 = f32[256]{0} rsqrt(add.1104)
  broadcast.1113 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.1105), dimensions={3}
  parameter.12 = f32[256]{0} parameter(11)
  reshape.1112 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.12)
  multiply.1114 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.1113, reshape.1112)
  reshape.1115 = f32[256]{0} reshape(multiply.1114)
  broadcast.1116 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1115), dimensions={3}
  multiply.1117 = f32[128,56,56,256]{3,2,1,0} multiply(subtract.1101, broadcast.1116)
  parameter.11 = f32[256]{0} parameter(10)
  reshape.1118 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.11)
  reshape.1119 = f32[256]{0} reshape(reshape.1118)
  broadcast.1120 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1119), dimensions={3}
  add.1121 = f32[128,56,56,256]{3,2,1,0} add(multiply.1117, broadcast.1120)
  convert.1122 = bf16[128,56,56,256]{3,2,1,0} convert(add.1121)
  convert.797 = f32[128,56,56,64]{3,2,1,0} convert(reduce-window.796)
  parameter.162 = f32[1,56,56,64]{3,2,1,0} parameter(161)
  reshape.798 = f32[56,56,64]{2,1,0} reshape(parameter.162)
  broadcast.799 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.798), dimensions={1,2,3}
  add.800 = f32[128,56,56,64]{3,2,1,0} add(convert.797, broadcast.799)
  convert.801 = bf16[128,56,56,64]{3,2,1,0} convert(add.800)
  parameter.7 = f32[1,1,64,64]{3,2,1,0} parameter(6)
  convert.802 = bf16[1,1,64,64]{3,2,1,0} convert(parameter.7)
  convolution.803 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.801, convert.802), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.804 = f32[128,56,56,64]{3,2,1,0} convert(convolution.803)
  constant.805 = f32[] constant(0)
  reduce.810 = f32[64]{0} reduce(convert.804, constant.805), dimensions={0,1,2}, to_apply=primitive_computation_add.806
  constant.811 = s32[] constant(401408)
  convert.812 = f32[] convert(constant.811)
  broadcast.813 = f32[64]{0} broadcast(convert.812), dimensions={}
  divide.814 = f32[64]{0} divide(reduce.810, broadcast.813)
  reshape.848 = f32[1,1,1,64]{3,2,1,0} reshape(divide.814)
  reshape.849 = f32[64]{0} reshape(reshape.848)
  broadcast.850 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.849), dimensions={3}
  subtract.851 = f32[128,56,56,64]{3,2,1,0} subtract(convert.804, broadcast.850)
  multiply.815 = f32[128,56,56,64]{3,2,1,0} multiply(convert.804, convert.804)
  constant.819 = f32[] constant(0)
  reduce.824 = f32[64]{0} reduce(multiply.815, constant.819), dimensions={0,1,2}, to_apply=primitive_computation_add.820
  constant.825 = s32[] constant(401408)
  convert.826 = f32[] convert(constant.825)
  broadcast.827 = f32[64]{0} broadcast(convert.826), dimensions={}
  divide.828 = f32[64]{0} divide(reduce.824, broadcast.827)
  multiply.829 = f32[64]{0} multiply(divide.814, divide.814)
  subtract.833 = f32[64]{0} subtract(divide.828, multiply.829)
  constant.852 = f32[] constant(1e-05)
  broadcast.853 = f32[64]{0} broadcast(constant.852), dimensions={}
  add.854 = f32[64]{0} add(subtract.833, broadcast.853)
  rsqrt.855 = f32[64]{0} rsqrt(add.854)
  broadcast.863 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.855), dimensions={3}
  parameter.2 = f32[64]{0} parameter(1)
  reshape.862 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.2)
  multiply.864 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.863, reshape.862)
  reshape.865 = f32[64]{0} reshape(multiply.864)
  broadcast.866 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.865), dimensions={3}
  multiply.867 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.851, broadcast.866)
  parameter.1 = f32[64]{0} parameter(0)
  reshape.868 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.1)
  reshape.869 = f32[64]{0} reshape(reshape.868)
  broadcast.870 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.869), dimensions={3}
  add.871 = f32[128,56,56,64]{3,2,1,0} add(multiply.867, broadcast.870)
  convert.872 = bf16[128,56,56,64]{3,2,1,0} convert(add.871)
  constant.874 = bf16[] constant(0)
  broadcast.875 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.874), dimensions={}
  maximum.876 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.872, broadcast.875)
  tuple.877 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.876)
  get-tuple-element.878 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.877), index=0
  convert.884 = f32[128,56,56,64]{3,2,1,0} convert(get-tuple-element.878)
  parameter.163 = f32[1,56,56,64]{3,2,1,0} parameter(162)
  reshape.885 = f32[56,56,64]{2,1,0} reshape(parameter.163)
  broadcast.886 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.885), dimensions={1,2,3}
  add.887 = f32[128,56,56,64]{3,2,1,0} add(convert.884, broadcast.886)
  convert.888 = bf16[128,56,56,64]{3,2,1,0} convert(add.887)
  parameter.8 = f32[3,3,64,64]{3,2,1,0} parameter(7)
  convert.889 = bf16[3,3,64,64]{3,2,1,0} convert(parameter.8)
  convolution.890 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.888, convert.889), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.891 = f32[128,56,56,64]{3,2,1,0} convert(convolution.890)
  constant.892 = f32[] constant(0)
  reduce.897 = f32[64]{0} reduce(convert.891, constant.892), dimensions={0,1,2}, to_apply=primitive_computation_add.893
  constant.898 = s32[] constant(401408)
  convert.899 = f32[] convert(constant.898)
  broadcast.900 = f32[64]{0} broadcast(convert.899), dimensions={}
  divide.901 = f32[64]{0} divide(reduce.897, broadcast.900)
  reshape.935 = f32[1,1,1,64]{3,2,1,0} reshape(divide.901)
  reshape.936 = f32[64]{0} reshape(reshape.935)
  broadcast.937 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.936), dimensions={3}
  subtract.938 = f32[128,56,56,64]{3,2,1,0} subtract(convert.891, broadcast.937)
  multiply.902 = f32[128,56,56,64]{3,2,1,0} multiply(convert.891, convert.891)
  constant.906 = f32[] constant(0)
  reduce.911 = f32[64]{0} reduce(multiply.902, constant.906), dimensions={0,1,2}, to_apply=primitive_computation_add.907
  constant.912 = s32[] constant(401408)
  convert.913 = f32[] convert(constant.912)
  broadcast.914 = f32[64]{0} broadcast(convert.913), dimensions={}
  divide.915 = f32[64]{0} divide(reduce.911, broadcast.914)
  multiply.916 = f32[64]{0} multiply(divide.901, divide.901)
  subtract.920 = f32[64]{0} subtract(divide.915, multiply.916)
  constant.939 = f32[] constant(1e-05)
  broadcast.940 = f32[64]{0} broadcast(constant.939), dimensions={}
  add.941 = f32[64]{0} add(subtract.920, broadcast.940)
  rsqrt.942 = f32[64]{0} rsqrt(add.941)
  broadcast.950 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.942), dimensions={3}
  parameter.4 = f32[64]{0} parameter(3)
  reshape.949 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.4)
  multiply.951 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.950, reshape.949)
  reshape.952 = f32[64]{0} reshape(multiply.951)
  broadcast.953 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.952), dimensions={3}
  multiply.954 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.938, broadcast.953)
  parameter.3 = f32[64]{0} parameter(2)
  reshape.955 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.3)
  reshape.956 = f32[64]{0} reshape(reshape.955)
  broadcast.957 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.956), dimensions={3}
  add.958 = f32[128,56,56,64]{3,2,1,0} add(multiply.954, broadcast.957)
  convert.959 = bf16[128,56,56,64]{3,2,1,0} convert(add.958)
  constant.961 = bf16[] constant(0)
  broadcast.962 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.961), dimensions={}
  maximum.963 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.959, broadcast.962)
  tuple.964 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.963)
  get-tuple-element.965 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.964), index=0
  convert.971 = f32[128,56,56,64]{3,2,1,0} convert(get-tuple-element.965)
  parameter.164 = f32[1,56,56,64]{3,2,1,0} parameter(163)
  reshape.972 = f32[56,56,64]{2,1,0} reshape(parameter.164)
  broadcast.973 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.972), dimensions={1,2,3}
  add.974 = f32[128,56,56,64]{3,2,1,0} add(convert.971, broadcast.973)
  convert.975 = bf16[128,56,56,64]{3,2,1,0} convert(add.974)
  parameter.9 = f32[1,1,64,256]{3,2,1,0} parameter(8)
  convert.976 = bf16[1,1,64,256]{3,2,1,0} convert(parameter.9)
  convolution.977 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.975, convert.976), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.978 = f32[128,56,56,256]{3,2,1,0} convert(convolution.977)
  constant.979 = f32[] constant(0)
  reduce.984 = f32[256]{0} reduce(convert.978, constant.979), dimensions={0,1,2}, to_apply=primitive_computation_add.980
  constant.985 = s32[] constant(401408)
  convert.986 = f32[] convert(constant.985)
  broadcast.987 = f32[256]{0} broadcast(convert.986), dimensions={}
  divide.988 = f32[256]{0} divide(reduce.984, broadcast.987)
  reshape.1022 = f32[1,1,1,256]{3,2,1,0} reshape(divide.988)
  reshape.1023 = f32[256]{0} reshape(reshape.1022)
  broadcast.1024 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1023), dimensions={3}
  subtract.1025 = f32[128,56,56,256]{3,2,1,0} subtract(convert.978, broadcast.1024)
  multiply.989 = f32[128,56,56,256]{3,2,1,0} multiply(convert.978, convert.978)
  constant.993 = f32[] constant(0)
  reduce.998 = f32[256]{0} reduce(multiply.989, constant.993), dimensions={0,1,2}, to_apply=primitive_computation_add.994
  constant.999 = s32[] constant(401408)
  convert.1000 = f32[] convert(constant.999)
  broadcast.1001 = f32[256]{0} broadcast(convert.1000), dimensions={}
  divide.1002 = f32[256]{0} divide(reduce.998, broadcast.1001)
  multiply.1003 = f32[256]{0} multiply(divide.988, divide.988)
  subtract.1007 = f32[256]{0} subtract(divide.1002, multiply.1003)
  constant.1026 = f32[] constant(1e-05)
  broadcast.1027 = f32[256]{0} broadcast(constant.1026), dimensions={}
  add.1028 = f32[256]{0} add(subtract.1007, broadcast.1027)
  rsqrt.1029 = f32[256]{0} rsqrt(add.1028)
  broadcast.1037 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.1029), dimensions={3}
  parameter.6 = f32[256]{0} parameter(5)
  reshape.1036 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.6)
  multiply.1038 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.1037, reshape.1036)
  reshape.1039 = f32[256]{0} reshape(multiply.1038)
  broadcast.1040 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1039), dimensions={3}
  multiply.1041 = f32[128,56,56,256]{3,2,1,0} multiply(subtract.1025, broadcast.1040)
  parameter.5 = f32[256]{0} parameter(4)
  reshape.1042 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.5)
  reshape.1043 = f32[256]{0} reshape(reshape.1042)
  broadcast.1044 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1043), dimensions={3}
  add.1045 = f32[128,56,56,256]{3,2,1,0} add(multiply.1041, broadcast.1044)
  convert.1046 = bf16[128,56,56,256]{3,2,1,0} convert(add.1045)
  add.1123 = bf16[128,56,56,256]{3,2,1,0} add(convert.1122, convert.1046)
  constant.1125 = bf16[] constant(0)
  broadcast.1126 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1125), dimensions={}
  maximum.1127 = bf16[128,56,56,256]{3,2,1,0} maximum(add.1123, broadcast.1126)
  tuple.1128 = (bf16[128,56,56,256]{3,2,1,0}) tuple(maximum.1127)
  get-tuple-element.1129 = bf16[128,56,56,256]{3,2,1,0} get-tuple-element(tuple.1128), index=0
  convert.1135 = f32[128,56,56,256]{3,2,1,0} convert(get-tuple-element.1129)
  parameter.166 = f32[1,56,56,256]{3,2,1,0} parameter(165)
  reshape.1136 = f32[56,56,256]{2,1,0} reshape(parameter.166)
  broadcast.1137 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1136), dimensions={1,2,3}
  add.1138 = f32[128,56,56,256]{3,2,1,0} add(convert.1135, broadcast.1137)
  convert.1139 = bf16[128,56,56,256]{3,2,1,0} convert(add.1138)
  parameter.19 = f32[1,1,256,64]{3,2,1,0} parameter(18)
  convert.1140 = bf16[1,1,256,64]{3,2,1,0} convert(parameter.19)
  convolution.1141 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.1139, convert.1140), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1142 = f32[128,56,56,64]{3,2,1,0} convert(convolution.1141)
  constant.1143 = f32[] constant(0)
  reduce.1148 = f32[64]{0} reduce(convert.1142, constant.1143), dimensions={0,1,2}, to_apply=primitive_computation_add.1144
  constant.1149 = s32[] constant(401408)
  convert.1150 = f32[] convert(constant.1149)
  broadcast.1151 = f32[64]{0} broadcast(convert.1150), dimensions={}
  divide.1152 = f32[64]{0} divide(reduce.1148, broadcast.1151)
  reshape.1186 = f32[1,1,1,64]{3,2,1,0} reshape(divide.1152)
  reshape.1187 = f32[64]{0} reshape(reshape.1186)
  broadcast.1188 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1187), dimensions={3}
  subtract.1189 = f32[128,56,56,64]{3,2,1,0} subtract(convert.1142, broadcast.1188)
  multiply.1153 = f32[128,56,56,64]{3,2,1,0} multiply(convert.1142, convert.1142)
  constant.1157 = f32[] constant(0)
  reduce.1162 = f32[64]{0} reduce(multiply.1153, constant.1157), dimensions={0,1,2}, to_apply=primitive_computation_add.1158
  constant.1163 = s32[] constant(401408)
  convert.1164 = f32[] convert(constant.1163)
  broadcast.1165 = f32[64]{0} broadcast(convert.1164), dimensions={}
  divide.1166 = f32[64]{0} divide(reduce.1162, broadcast.1165)
  multiply.1167 = f32[64]{0} multiply(divide.1152, divide.1152)
  subtract.1171 = f32[64]{0} subtract(divide.1166, multiply.1167)
  constant.1190 = f32[] constant(1e-05)
  broadcast.1191 = f32[64]{0} broadcast(constant.1190), dimensions={}
  add.1192 = f32[64]{0} add(subtract.1171, broadcast.1191)
  rsqrt.1193 = f32[64]{0} rsqrt(add.1192)
  broadcast.1201 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.1193), dimensions={3}
  parameter.14 = f32[64]{0} parameter(13)
  reshape.1200 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.14)
  multiply.1202 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.1201, reshape.1200)
  reshape.1203 = f32[64]{0} reshape(multiply.1202)
  broadcast.1204 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1203), dimensions={3}
  multiply.1205 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.1189, broadcast.1204)
  parameter.13 = f32[64]{0} parameter(12)
  reshape.1206 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.13)
  reshape.1207 = f32[64]{0} reshape(reshape.1206)
  broadcast.1208 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1207), dimensions={3}
  add.1209 = f32[128,56,56,64]{3,2,1,0} add(multiply.1205, broadcast.1208)
  convert.1210 = bf16[128,56,56,64]{3,2,1,0} convert(add.1209)
  constant.1212 = bf16[] constant(0)
  broadcast.1213 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1212), dimensions={}
  maximum.1214 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.1210, broadcast.1213)
  tuple.1215 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.1214)
  get-tuple-element.1216 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.1215), index=0
  convert.1222 = f32[128,56,56,64]{3,2,1,0} convert(get-tuple-element.1216)
  parameter.167 = f32[1,56,56,64]{3,2,1,0} parameter(166)
  reshape.1223 = f32[56,56,64]{2,1,0} reshape(parameter.167)
  broadcast.1224 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1223), dimensions={1,2,3}
  add.1225 = f32[128,56,56,64]{3,2,1,0} add(convert.1222, broadcast.1224)
  convert.1226 = bf16[128,56,56,64]{3,2,1,0} convert(add.1225)
  parameter.20 = f32[3,3,64,64]{3,2,1,0} parameter(19)
  convert.1227 = bf16[3,3,64,64]{3,2,1,0} convert(parameter.20)
  convolution.1228 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.1226, convert.1227), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.1229 = f32[128,56,56,64]{3,2,1,0} convert(convolution.1228)
  constant.1230 = f32[] constant(0)
  reduce.1235 = f32[64]{0} reduce(convert.1229, constant.1230), dimensions={0,1,2}, to_apply=primitive_computation_add.1231
  constant.1236 = s32[] constant(401408)
  convert.1237 = f32[] convert(constant.1236)
  broadcast.1238 = f32[64]{0} broadcast(convert.1237), dimensions={}
  divide.1239 = f32[64]{0} divide(reduce.1235, broadcast.1238)
  reshape.1273 = f32[1,1,1,64]{3,2,1,0} reshape(divide.1239)
  reshape.1274 = f32[64]{0} reshape(reshape.1273)
  broadcast.1275 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1274), dimensions={3}
  subtract.1276 = f32[128,56,56,64]{3,2,1,0} subtract(convert.1229, broadcast.1275)
  multiply.1240 = f32[128,56,56,64]{3,2,1,0} multiply(convert.1229, convert.1229)
  constant.1244 = f32[] constant(0)
  reduce.1249 = f32[64]{0} reduce(multiply.1240, constant.1244), dimensions={0,1,2}, to_apply=primitive_computation_add.1245
  constant.1250 = s32[] constant(401408)
  convert.1251 = f32[] convert(constant.1250)
  broadcast.1252 = f32[64]{0} broadcast(convert.1251), dimensions={}
  divide.1253 = f32[64]{0} divide(reduce.1249, broadcast.1252)
  multiply.1254 = f32[64]{0} multiply(divide.1239, divide.1239)
  subtract.1258 = f32[64]{0} subtract(divide.1253, multiply.1254)
  constant.1277 = f32[] constant(1e-05)
  broadcast.1278 = f32[64]{0} broadcast(constant.1277), dimensions={}
  add.1279 = f32[64]{0} add(subtract.1258, broadcast.1278)
  rsqrt.1280 = f32[64]{0} rsqrt(add.1279)
  broadcast.1288 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.1280), dimensions={3}
  parameter.16 = f32[64]{0} parameter(15)
  reshape.1287 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.16)
  multiply.1289 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.1288, reshape.1287)
  reshape.1290 = f32[64]{0} reshape(multiply.1289)
  broadcast.1291 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1290), dimensions={3}
  multiply.1292 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.1276, broadcast.1291)
  parameter.15 = f32[64]{0} parameter(14)
  reshape.1293 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.15)
  reshape.1294 = f32[64]{0} reshape(reshape.1293)
  broadcast.1295 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1294), dimensions={3}
  add.1296 = f32[128,56,56,64]{3,2,1,0} add(multiply.1292, broadcast.1295)
  convert.1297 = bf16[128,56,56,64]{3,2,1,0} convert(add.1296)
  constant.1299 = bf16[] constant(0)
  broadcast.1300 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1299), dimensions={}
  maximum.1301 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.1297, broadcast.1300)
  tuple.1302 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.1301)
  get-tuple-element.1303 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.1302), index=0
  convert.1309 = f32[128,56,56,64]{3,2,1,0} convert(get-tuple-element.1303)
  parameter.168 = f32[1,56,56,64]{3,2,1,0} parameter(167)
  reshape.1310 = f32[56,56,64]{2,1,0} reshape(parameter.168)
  broadcast.1311 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1310), dimensions={1,2,3}
  add.1312 = f32[128,56,56,64]{3,2,1,0} add(convert.1309, broadcast.1311)
  convert.1313 = bf16[128,56,56,64]{3,2,1,0} convert(add.1312)
  parameter.21 = f32[1,1,64,256]{3,2,1,0} parameter(20)
  convert.1314 = bf16[1,1,64,256]{3,2,1,0} convert(parameter.21)
  convolution.1315 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.1313, convert.1314), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1316 = f32[128,56,56,256]{3,2,1,0} convert(convolution.1315)
  constant.1317 = f32[] constant(0)
  reduce.1322 = f32[256]{0} reduce(convert.1316, constant.1317), dimensions={0,1,2}, to_apply=primitive_computation_add.1318
  constant.1323 = s32[] constant(401408)
  convert.1324 = f32[] convert(constant.1323)
  broadcast.1325 = f32[256]{0} broadcast(convert.1324), dimensions={}
  divide.1326 = f32[256]{0} divide(reduce.1322, broadcast.1325)
  reshape.1360 = f32[1,1,1,256]{3,2,1,0} reshape(divide.1326)
  reshape.1361 = f32[256]{0} reshape(reshape.1360)
  broadcast.1362 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1361), dimensions={3}
  subtract.1363 = f32[128,56,56,256]{3,2,1,0} subtract(convert.1316, broadcast.1362)
  multiply.1327 = f32[128,56,56,256]{3,2,1,0} multiply(convert.1316, convert.1316)
  constant.1331 = f32[] constant(0)
  reduce.1336 = f32[256]{0} reduce(multiply.1327, constant.1331), dimensions={0,1,2}, to_apply=primitive_computation_add.1332
  constant.1337 = s32[] constant(401408)
  convert.1338 = f32[] convert(constant.1337)
  broadcast.1339 = f32[256]{0} broadcast(convert.1338), dimensions={}
  divide.1340 = f32[256]{0} divide(reduce.1336, broadcast.1339)
  multiply.1341 = f32[256]{0} multiply(divide.1326, divide.1326)
  subtract.1345 = f32[256]{0} subtract(divide.1340, multiply.1341)
  constant.1364 = f32[] constant(1e-05)
  broadcast.1365 = f32[256]{0} broadcast(constant.1364), dimensions={}
  add.1366 = f32[256]{0} add(subtract.1345, broadcast.1365)
  rsqrt.1367 = f32[256]{0} rsqrt(add.1366)
  broadcast.1375 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.1367), dimensions={3}
  parameter.18 = f32[256]{0} parameter(17)
  reshape.1374 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.18)
  multiply.1376 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.1375, reshape.1374)
  reshape.1377 = f32[256]{0} reshape(multiply.1376)
  broadcast.1378 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1377), dimensions={3}
  multiply.1379 = f32[128,56,56,256]{3,2,1,0} multiply(subtract.1363, broadcast.1378)
  parameter.17 = f32[256]{0} parameter(16)
  reshape.1380 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.17)
  reshape.1381 = f32[256]{0} reshape(reshape.1380)
  broadcast.1382 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1381), dimensions={3}
  add.1383 = f32[128,56,56,256]{3,2,1,0} add(multiply.1379, broadcast.1382)
  convert.1384 = bf16[128,56,56,256]{3,2,1,0} convert(add.1383)
  add.1385 = bf16[128,56,56,256]{3,2,1,0} add(get-tuple-element.1129, convert.1384)
  constant.1387 = bf16[] constant(0)
  broadcast.1388 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1387), dimensions={}
  maximum.1389 = bf16[128,56,56,256]{3,2,1,0} maximum(add.1385, broadcast.1388)
  tuple.1390 = (bf16[128,56,56,256]{3,2,1,0}) tuple(maximum.1389)
  get-tuple-element.1391 = bf16[128,56,56,256]{3,2,1,0} get-tuple-element(tuple.1390), index=0
  convert.1397 = f32[128,56,56,256]{3,2,1,0} convert(get-tuple-element.1391)
  parameter.188 = f32[1,56,56,256]{3,2,1,0} parameter(187)
  reshape.1398 = f32[56,56,256]{2,1,0} reshape(parameter.188)
  broadcast.1399 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1398), dimensions={1,2,3}
  add.1400 = f32[128,56,56,256]{3,2,1,0} add(convert.1397, broadcast.1399)
  convert.1401 = bf16[128,56,56,256]{3,2,1,0} convert(add.1400)
  parameter.85 = f32[1,1,256,64]{3,2,1,0} parameter(84)
  convert.1402 = bf16[1,1,256,64]{3,2,1,0} convert(parameter.85)
  convolution.1403 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.1401, convert.1402), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1404 = f32[128,56,56,64]{3,2,1,0} convert(convolution.1403)
  constant.1405 = f32[] constant(0)
  reduce.1410 = f32[64]{0} reduce(convert.1404, constant.1405), dimensions={0,1,2}, to_apply=primitive_computation_add.1406
  constant.1411 = s32[] constant(401408)
  convert.1412 = f32[] convert(constant.1411)
  broadcast.1413 = f32[64]{0} broadcast(convert.1412), dimensions={}
  divide.1414 = f32[64]{0} divide(reduce.1410, broadcast.1413)
  reshape.1448 = f32[1,1,1,64]{3,2,1,0} reshape(divide.1414)
  reshape.1449 = f32[64]{0} reshape(reshape.1448)
  broadcast.1450 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1449), dimensions={3}
  subtract.1451 = f32[128,56,56,64]{3,2,1,0} subtract(convert.1404, broadcast.1450)
  multiply.1415 = f32[128,56,56,64]{3,2,1,0} multiply(convert.1404, convert.1404)
  constant.1419 = f32[] constant(0)
  reduce.1424 = f32[64]{0} reduce(multiply.1415, constant.1419), dimensions={0,1,2}, to_apply=primitive_computation_add.1420
  constant.1425 = s32[] constant(401408)
  convert.1426 = f32[] convert(constant.1425)
  broadcast.1427 = f32[64]{0} broadcast(convert.1426), dimensions={}
  divide.1428 = f32[64]{0} divide(reduce.1424, broadcast.1427)
  multiply.1429 = f32[64]{0} multiply(divide.1414, divide.1414)
  subtract.1433 = f32[64]{0} subtract(divide.1428, multiply.1429)
  constant.1452 = f32[] constant(1e-05)
  broadcast.1453 = f32[64]{0} broadcast(constant.1452), dimensions={}
  add.1454 = f32[64]{0} add(subtract.1433, broadcast.1453)
  rsqrt.1455 = f32[64]{0} rsqrt(add.1454)
  broadcast.1463 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.1455), dimensions={3}
  parameter.80 = f32[64]{0} parameter(79)
  reshape.1462 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.80)
  multiply.1464 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.1463, reshape.1462)
  reshape.1465 = f32[64]{0} reshape(multiply.1464)
  broadcast.1466 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1465), dimensions={3}
  multiply.1467 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.1451, broadcast.1466)
  parameter.79 = f32[64]{0} parameter(78)
  reshape.1468 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.79)
  reshape.1469 = f32[64]{0} reshape(reshape.1468)
  broadcast.1470 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1469), dimensions={3}
  add.1471 = f32[128,56,56,64]{3,2,1,0} add(multiply.1467, broadcast.1470)
  convert.1472 = bf16[128,56,56,64]{3,2,1,0} convert(add.1471)
  constant.1474 = bf16[] constant(0)
  broadcast.1475 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1474), dimensions={}
  maximum.1476 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.1472, broadcast.1475)
  tuple.1477 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.1476)
  get-tuple-element.1478 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.1477), index=0
  convert.1484 = f32[128,56,56,64]{3,2,1,0} convert(get-tuple-element.1478)
  parameter.189 = f32[1,56,56,64]{3,2,1,0} parameter(188)
  reshape.1485 = f32[56,56,64]{2,1,0} reshape(parameter.189)
  broadcast.1486 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1485), dimensions={1,2,3}
  add.1487 = f32[128,56,56,64]{3,2,1,0} add(convert.1484, broadcast.1486)
  convert.1488 = bf16[128,56,56,64]{3,2,1,0} convert(add.1487)
  parameter.86 = f32[3,3,64,64]{3,2,1,0} parameter(85)
  convert.1489 = bf16[3,3,64,64]{3,2,1,0} convert(parameter.86)
  convolution.1490 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.1488, convert.1489), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.1491 = f32[128,56,56,64]{3,2,1,0} convert(convolution.1490)
  constant.1492 = f32[] constant(0)
  reduce.1497 = f32[64]{0} reduce(convert.1491, constant.1492), dimensions={0,1,2}, to_apply=primitive_computation_add.1493
  constant.1498 = s32[] constant(401408)
  convert.1499 = f32[] convert(constant.1498)
  broadcast.1500 = f32[64]{0} broadcast(convert.1499), dimensions={}
  divide.1501 = f32[64]{0} divide(reduce.1497, broadcast.1500)
  reshape.1535 = f32[1,1,1,64]{3,2,1,0} reshape(divide.1501)
  reshape.1536 = f32[64]{0} reshape(reshape.1535)
  broadcast.1537 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1536), dimensions={3}
  subtract.1538 = f32[128,56,56,64]{3,2,1,0} subtract(convert.1491, broadcast.1537)
  multiply.1502 = f32[128,56,56,64]{3,2,1,0} multiply(convert.1491, convert.1491)
  constant.1506 = f32[] constant(0)
  reduce.1511 = f32[64]{0} reduce(multiply.1502, constant.1506), dimensions={0,1,2}, to_apply=primitive_computation_add.1507
  constant.1512 = s32[] constant(401408)
  convert.1513 = f32[] convert(constant.1512)
  broadcast.1514 = f32[64]{0} broadcast(convert.1513), dimensions={}
  divide.1515 = f32[64]{0} divide(reduce.1511, broadcast.1514)
  multiply.1516 = f32[64]{0} multiply(divide.1501, divide.1501)
  subtract.1520 = f32[64]{0} subtract(divide.1515, multiply.1516)
  constant.1539 = f32[] constant(1e-05)
  broadcast.1540 = f32[64]{0} broadcast(constant.1539), dimensions={}
  add.1541 = f32[64]{0} add(subtract.1520, broadcast.1540)
  rsqrt.1542 = f32[64]{0} rsqrt(add.1541)
  broadcast.1550 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.1542), dimensions={3}
  parameter.82 = f32[64]{0} parameter(81)
  reshape.1549 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.82)
  multiply.1551 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.1550, reshape.1549)
  reshape.1552 = f32[64]{0} reshape(multiply.1551)
  broadcast.1553 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1552), dimensions={3}
  multiply.1554 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.1538, broadcast.1553)
  parameter.81 = f32[64]{0} parameter(80)
  reshape.1555 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.81)
  reshape.1556 = f32[64]{0} reshape(reshape.1555)
  broadcast.1557 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1556), dimensions={3}
  add.1558 = f32[128,56,56,64]{3,2,1,0} add(multiply.1554, broadcast.1557)
  convert.1559 = bf16[128,56,56,64]{3,2,1,0} convert(add.1558)
  constant.1561 = bf16[] constant(0)
  broadcast.1562 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1561), dimensions={}
  maximum.1563 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.1559, broadcast.1562)
  tuple.1564 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.1563)
  get-tuple-element.1565 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.1564), index=0
  convert.1571 = f32[128,56,56,64]{3,2,1,0} convert(get-tuple-element.1565)
  parameter.190 = f32[1,56,56,64]{3,2,1,0} parameter(189)
  reshape.1572 = f32[56,56,64]{2,1,0} reshape(parameter.190)
  broadcast.1573 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1572), dimensions={1,2,3}
  add.1574 = f32[128,56,56,64]{3,2,1,0} add(convert.1571, broadcast.1573)
  convert.1575 = bf16[128,56,56,64]{3,2,1,0} convert(add.1574)
  parameter.87 = f32[1,1,64,256]{3,2,1,0} parameter(86)
  convert.1576 = bf16[1,1,64,256]{3,2,1,0} convert(parameter.87)
  convolution.1577 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.1575, convert.1576), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1578 = f32[128,56,56,256]{3,2,1,0} convert(convolution.1577)
  constant.1579 = f32[] constant(0)
  reduce.1584 = f32[256]{0} reduce(convert.1578, constant.1579), dimensions={0,1,2}, to_apply=primitive_computation_add.1580
  constant.1585 = s32[] constant(401408)
  convert.1586 = f32[] convert(constant.1585)
  broadcast.1587 = f32[256]{0} broadcast(convert.1586), dimensions={}
  divide.1588 = f32[256]{0} divide(reduce.1584, broadcast.1587)
  reshape.1622 = f32[1,1,1,256]{3,2,1,0} reshape(divide.1588)
  reshape.1623 = f32[256]{0} reshape(reshape.1622)
  broadcast.1624 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1623), dimensions={3}
  subtract.1625 = f32[128,56,56,256]{3,2,1,0} subtract(convert.1578, broadcast.1624)
  multiply.1589 = f32[128,56,56,256]{3,2,1,0} multiply(convert.1578, convert.1578)
  constant.1593 = f32[] constant(0)
  reduce.1598 = f32[256]{0} reduce(multiply.1589, constant.1593), dimensions={0,1,2}, to_apply=primitive_computation_add.1594
  constant.1599 = s32[] constant(401408)
  convert.1600 = f32[] convert(constant.1599)
  broadcast.1601 = f32[256]{0} broadcast(convert.1600), dimensions={}
  divide.1602 = f32[256]{0} divide(reduce.1598, broadcast.1601)
  multiply.1603 = f32[256]{0} multiply(divide.1588, divide.1588)
  subtract.1607 = f32[256]{0} subtract(divide.1602, multiply.1603)
  constant.1626 = f32[] constant(1e-05)
  broadcast.1627 = f32[256]{0} broadcast(constant.1626), dimensions={}
  add.1628 = f32[256]{0} add(subtract.1607, broadcast.1627)
  rsqrt.1629 = f32[256]{0} rsqrt(add.1628)
  broadcast.1637 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.1629), dimensions={3}
  parameter.84 = f32[256]{0} parameter(83)
  reshape.1636 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.84)
  multiply.1638 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.1637, reshape.1636)
  reshape.1639 = f32[256]{0} reshape(multiply.1638)
  broadcast.1640 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1639), dimensions={3}
  multiply.1641 = f32[128,56,56,256]{3,2,1,0} multiply(subtract.1625, broadcast.1640)
  parameter.83 = f32[256]{0} parameter(82)
  reshape.1642 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.83)
  reshape.1643 = f32[256]{0} reshape(reshape.1642)
  broadcast.1644 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1643), dimensions={3}
  add.1645 = f32[128,56,56,256]{3,2,1,0} add(multiply.1641, broadcast.1644)
  convert.1646 = bf16[128,56,56,256]{3,2,1,0} convert(add.1645)
  add.1647 = bf16[128,56,56,256]{3,2,1,0} add(get-tuple-element.1391, convert.1646)
  constant.1649 = bf16[] constant(0)
  broadcast.1650 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1649), dimensions={}
  maximum.1651 = bf16[128,56,56,256]{3,2,1,0} maximum(add.1647, broadcast.1650)
  tuple.1652 = (bf16[128,56,56,256]{3,2,1,0}) tuple(maximum.1651)
  get-tuple-element.1653 = bf16[128,56,56,256]{3,2,1,0} get-tuple-element(tuple.1652), index=0
  convert.1909 = f32[128,56,56,256]{3,2,1,0} convert(get-tuple-element.1653)
  parameter.194 = f32[1,56,56,256]{3,2,1,0} parameter(193)
  reshape.1910 = f32[56,56,256]{2,1,0} reshape(parameter.194)
  broadcast.1911 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1910), dimensions={1,2,3}
  add.1912 = f32[128,56,56,256]{3,2,1,0} add(convert.1909, broadcast.1911)
  convert.1913 = bf16[128,56,56,256]{3,2,1,0} convert(add.1912)
  parameter.97 = f32[1,1,256,512]{3,2,1,0} parameter(96)
  convert.1914 = bf16[1,1,256,512]{3,2,1,0} convert(parameter.97)
  convolution.1915 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.1913, convert.1914), window={size=1x1 stride=2x2}, dim_labels=b01f_01io->b01f
  convert.1916 = f32[128,28,28,512]{3,2,1,0} convert(convolution.1915)
  constant.1917 = f32[] constant(0)
  reduce.1922 = f32[512]{0} reduce(convert.1916, constant.1917), dimensions={0,1,2}, to_apply=primitive_computation_add.1918
  constant.1923 = s32[] constant(100352)
  convert.1924 = f32[] convert(constant.1923)
  broadcast.1925 = f32[512]{0} broadcast(convert.1924), dimensions={}
  divide.1926 = f32[512]{0} divide(reduce.1922, broadcast.1925)
  reshape.1960 = f32[1,1,1,512]{3,2,1,0} reshape(divide.1926)
  reshape.1961 = f32[512]{0} reshape(reshape.1960)
  broadcast.1962 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1961), dimensions={3}
  subtract.1963 = f32[128,28,28,512]{3,2,1,0} subtract(convert.1916, broadcast.1962)
  multiply.1927 = f32[128,28,28,512]{3,2,1,0} multiply(convert.1916, convert.1916)
  constant.1931 = f32[] constant(0)
  reduce.1936 = f32[512]{0} reduce(multiply.1927, constant.1931), dimensions={0,1,2}, to_apply=primitive_computation_add.1932
  constant.1937 = s32[] constant(100352)
  convert.1938 = f32[] convert(constant.1937)
  broadcast.1939 = f32[512]{0} broadcast(convert.1938), dimensions={}
  divide.1940 = f32[512]{0} divide(reduce.1936, broadcast.1939)
  multiply.1941 = f32[512]{0} multiply(divide.1926, divide.1926)
  subtract.1945 = f32[512]{0} subtract(divide.1940, multiply.1941)
  constant.1964 = f32[] constant(1e-05)
  broadcast.1965 = f32[512]{0} broadcast(constant.1964), dimensions={}
  add.1966 = f32[512]{0} add(subtract.1945, broadcast.1965)
  rsqrt.1967 = f32[512]{0} rsqrt(add.1966)
  broadcast.1975 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.1967), dimensions={3}
  parameter.99 = f32[512]{0} parameter(98)
  reshape.1974 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.99)
  multiply.1976 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.1975, reshape.1974)
  reshape.1977 = f32[512]{0} reshape(multiply.1976)
  broadcast.1978 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1977), dimensions={3}
  multiply.1979 = f32[128,28,28,512]{3,2,1,0} multiply(subtract.1963, broadcast.1978)
  parameter.98 = f32[512]{0} parameter(97)
  reshape.1980 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.98)
  reshape.1981 = f32[512]{0} reshape(reshape.1980)
  broadcast.1982 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1981), dimensions={3}
  add.1983 = f32[128,28,28,512]{3,2,1,0} add(multiply.1979, broadcast.1982)
  convert.1984 = bf16[128,28,28,512]{3,2,1,0} convert(add.1983)
  convert.1659 = f32[128,56,56,256]{3,2,1,0} convert(get-tuple-element.1653)
  parameter.191 = f32[1,56,56,256]{3,2,1,0} parameter(190)
  reshape.1660 = f32[56,56,256]{2,1,0} reshape(parameter.191)
  broadcast.1661 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1660), dimensions={1,2,3}
  add.1662 = f32[128,56,56,256]{3,2,1,0} add(convert.1659, broadcast.1661)
  convert.1663 = bf16[128,56,56,256]{3,2,1,0} convert(add.1662)
  parameter.94 = f32[1,1,256,128]{3,2,1,0} parameter(93)
  convert.1664 = bf16[1,1,256,128]{3,2,1,0} convert(parameter.94)
  convolution.1665 = bf16[128,56,56,128]{3,2,1,0} convolution(convert.1663, convert.1664), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1666 = f32[128,56,56,128]{3,2,1,0} convert(convolution.1665)
  constant.1667 = f32[] constant(0)
  reduce.1672 = f32[128]{0} reduce(convert.1666, constant.1667), dimensions={0,1,2}, to_apply=primitive_computation_add.1668
  constant.1673 = s32[] constant(401408)
  convert.1674 = f32[] convert(constant.1673)
  broadcast.1675 = f32[128]{0} broadcast(convert.1674), dimensions={}
  divide.1676 = f32[128]{0} divide(reduce.1672, broadcast.1675)
  reshape.1710 = f32[1,1,1,128]{3,2,1,0} reshape(divide.1676)
  reshape.1711 = f32[128]{0} reshape(reshape.1710)
  broadcast.1712 = f32[128,56,56,128]{3,2,1,0} broadcast(reshape.1711), dimensions={3}
  subtract.1713 = f32[128,56,56,128]{3,2,1,0} subtract(convert.1666, broadcast.1712)
  multiply.1677 = f32[128,56,56,128]{3,2,1,0} multiply(convert.1666, convert.1666)
  constant.1681 = f32[] constant(0)
  reduce.1686 = f32[128]{0} reduce(multiply.1677, constant.1681), dimensions={0,1,2}, to_apply=primitive_computation_add.1682
  constant.1687 = s32[] constant(401408)
  convert.1688 = f32[] convert(constant.1687)
  broadcast.1689 = f32[128]{0} broadcast(convert.1688), dimensions={}
  divide.1690 = f32[128]{0} divide(reduce.1686, broadcast.1689)
  multiply.1691 = f32[128]{0} multiply(divide.1676, divide.1676)
  subtract.1695 = f32[128]{0} subtract(divide.1690, multiply.1691)
  constant.1714 = f32[] constant(1e-05)
  broadcast.1715 = f32[128]{0} broadcast(constant.1714), dimensions={}
  add.1716 = f32[128]{0} add(subtract.1695, broadcast.1715)
  rsqrt.1717 = f32[128]{0} rsqrt(add.1716)
  broadcast.1725 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.1717), dimensions={3}
  parameter.89 = f32[128]{0} parameter(88)
  reshape.1724 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.89)
  multiply.1726 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.1725, reshape.1724)
  reshape.1727 = f32[128]{0} reshape(multiply.1726)
  broadcast.1728 = f32[128,56,56,128]{3,2,1,0} broadcast(reshape.1727), dimensions={3}
  multiply.1729 = f32[128,56,56,128]{3,2,1,0} multiply(subtract.1713, broadcast.1728)
  parameter.88 = f32[128]{0} parameter(87)
  reshape.1730 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.88)
  reshape.1731 = f32[128]{0} reshape(reshape.1730)
  broadcast.1732 = f32[128,56,56,128]{3,2,1,0} broadcast(reshape.1731), dimensions={3}
  add.1733 = f32[128,56,56,128]{3,2,1,0} add(multiply.1729, broadcast.1732)
  convert.1734 = bf16[128,56,56,128]{3,2,1,0} convert(add.1733)
  constant.1736 = bf16[] constant(0)
  broadcast.1737 = bf16[128,56,56,128]{3,2,1,0} broadcast(constant.1736), dimensions={}
  maximum.1738 = bf16[128,56,56,128]{3,2,1,0} maximum(convert.1734, broadcast.1737)
  tuple.1739 = (bf16[128,56,56,128]{3,2,1,0}) tuple(maximum.1738)
  get-tuple-element.1740 = bf16[128,56,56,128]{3,2,1,0} get-tuple-element(tuple.1739), index=0
  convert.1746 = f32[128,56,56,128]{3,2,1,0} convert(get-tuple-element.1740)
  parameter.192 = f32[1,56,56,128]{3,2,1,0} parameter(191)
  reshape.1747 = f32[56,56,128]{2,1,0} reshape(parameter.192)
  broadcast.1748 = f32[128,56,56,128]{3,2,1,0} broadcast(reshape.1747), dimensions={1,2,3}
  add.1749 = f32[128,56,56,128]{3,2,1,0} add(convert.1746, broadcast.1748)
  convert.1750 = bf16[128,56,56,128]{3,2,1,0} convert(add.1749)
  parameter.95 = f32[3,3,128,128]{3,2,1,0} parameter(94)
  convert.1751 = bf16[3,3,128,128]{3,2,1,0} convert(parameter.95)
  convolution.1752 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.1750, convert.1751), window={size=3x3 stride=2x2 pad=0_1x0_1}, dim_labels=b01f_01io->b01f
  convert.1753 = f32[128,28,28,128]{3,2,1,0} convert(convolution.1752)
  constant.1754 = f32[] constant(0)
  reduce.1759 = f32[128]{0} reduce(convert.1753, constant.1754), dimensions={0,1,2}, to_apply=primitive_computation_add.1755
  constant.1760 = s32[] constant(100352)
  convert.1761 = f32[] convert(constant.1760)
  broadcast.1762 = f32[128]{0} broadcast(convert.1761), dimensions={}
  divide.1763 = f32[128]{0} divide(reduce.1759, broadcast.1762)
  reshape.1797 = f32[1,1,1,128]{3,2,1,0} reshape(divide.1763)
  reshape.1798 = f32[128]{0} reshape(reshape.1797)
  broadcast.1799 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1798), dimensions={3}
  subtract.1800 = f32[128,28,28,128]{3,2,1,0} subtract(convert.1753, broadcast.1799)
  multiply.1764 = f32[128,28,28,128]{3,2,1,0} multiply(convert.1753, convert.1753)
  constant.1768 = f32[] constant(0)
  reduce.1773 = f32[128]{0} reduce(multiply.1764, constant.1768), dimensions={0,1,2}, to_apply=primitive_computation_add.1769
  constant.1774 = s32[] constant(100352)
  convert.1775 = f32[] convert(constant.1774)
  broadcast.1776 = f32[128]{0} broadcast(convert.1775), dimensions={}
  divide.1777 = f32[128]{0} divide(reduce.1773, broadcast.1776)
  multiply.1778 = f32[128]{0} multiply(divide.1763, divide.1763)
  subtract.1782 = f32[128]{0} subtract(divide.1777, multiply.1778)
  constant.1801 = f32[] constant(1e-05)
  broadcast.1802 = f32[128]{0} broadcast(constant.1801), dimensions={}
  add.1803 = f32[128]{0} add(subtract.1782, broadcast.1802)
  rsqrt.1804 = f32[128]{0} rsqrt(add.1803)
  broadcast.1812 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.1804), dimensions={3}
  parameter.91 = f32[128]{0} parameter(90)
  reshape.1811 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.91)
  multiply.1813 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.1812, reshape.1811)
  reshape.1814 = f32[128]{0} reshape(multiply.1813)
  broadcast.1815 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1814), dimensions={3}
  multiply.1816 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.1800, broadcast.1815)
  parameter.90 = f32[128]{0} parameter(89)
  reshape.1817 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.90)
  reshape.1818 = f32[128]{0} reshape(reshape.1817)
  broadcast.1819 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1818), dimensions={3}
  add.1820 = f32[128,28,28,128]{3,2,1,0} add(multiply.1816, broadcast.1819)
  convert.1821 = bf16[128,28,28,128]{3,2,1,0} convert(add.1820)
  constant.1823 = bf16[] constant(0)
  broadcast.1824 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1823), dimensions={}
  maximum.1825 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.1821, broadcast.1824)
  tuple.1826 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.1825)
  get-tuple-element.1827 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.1826), index=0
  convert.1833 = f32[128,28,28,128]{3,2,1,0} convert(get-tuple-element.1827)
  parameter.193 = f32[1,28,28,128]{3,2,1,0} parameter(192)
  reshape.1834 = f32[28,28,128]{2,1,0} reshape(parameter.193)
  broadcast.1835 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1834), dimensions={1,2,3}
  add.1836 = f32[128,28,28,128]{3,2,1,0} add(convert.1833, broadcast.1835)
  convert.1837 = bf16[128,28,28,128]{3,2,1,0} convert(add.1836)
  parameter.96 = f32[1,1,128,512]{3,2,1,0} parameter(95)
  convert.1838 = bf16[1,1,128,512]{3,2,1,0} convert(parameter.96)
  convolution.1839 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.1837, convert.1838), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1840 = f32[128,28,28,512]{3,2,1,0} convert(convolution.1839)
  constant.1841 = f32[] constant(0)
  reduce.1846 = f32[512]{0} reduce(convert.1840, constant.1841), dimensions={0,1,2}, to_apply=primitive_computation_add.1842
  constant.1847 = s32[] constant(100352)
  convert.1848 = f32[] convert(constant.1847)
  broadcast.1849 = f32[512]{0} broadcast(convert.1848), dimensions={}
  divide.1850 = f32[512]{0} divide(reduce.1846, broadcast.1849)
  reshape.1884 = f32[1,1,1,512]{3,2,1,0} reshape(divide.1850)
  reshape.1885 = f32[512]{0} reshape(reshape.1884)
  broadcast.1886 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1885), dimensions={3}
  subtract.1887 = f32[128,28,28,512]{3,2,1,0} subtract(convert.1840, broadcast.1886)
  multiply.1851 = f32[128,28,28,512]{3,2,1,0} multiply(convert.1840, convert.1840)
  constant.1855 = f32[] constant(0)
  reduce.1860 = f32[512]{0} reduce(multiply.1851, constant.1855), dimensions={0,1,2}, to_apply=primitive_computation_add.1856
  constant.1861 = s32[] constant(100352)
  convert.1862 = f32[] convert(constant.1861)
  broadcast.1863 = f32[512]{0} broadcast(convert.1862), dimensions={}
  divide.1864 = f32[512]{0} divide(reduce.1860, broadcast.1863)
  multiply.1865 = f32[512]{0} multiply(divide.1850, divide.1850)
  subtract.1869 = f32[512]{0} subtract(divide.1864, multiply.1865)
  constant.1888 = f32[] constant(1e-05)
  broadcast.1889 = f32[512]{0} broadcast(constant.1888), dimensions={}
  add.1890 = f32[512]{0} add(subtract.1869, broadcast.1889)
  rsqrt.1891 = f32[512]{0} rsqrt(add.1890)
  broadcast.1899 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.1891), dimensions={3}
  parameter.93 = f32[512]{0} parameter(92)
  reshape.1898 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.93)
  multiply.1900 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.1899, reshape.1898)
  reshape.1901 = f32[512]{0} reshape(multiply.1900)
  broadcast.1902 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1901), dimensions={3}
  multiply.1903 = f32[128,28,28,512]{3,2,1,0} multiply(subtract.1887, broadcast.1902)
  parameter.92 = f32[512]{0} parameter(91)
  reshape.1904 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.92)
  reshape.1905 = f32[512]{0} reshape(reshape.1904)
  broadcast.1906 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1905), dimensions={3}
  add.1907 = f32[128,28,28,512]{3,2,1,0} add(multiply.1903, broadcast.1906)
  convert.1908 = bf16[128,28,28,512]{3,2,1,0} convert(add.1907)
  add.1985 = bf16[128,28,28,512]{3,2,1,0} add(convert.1984, convert.1908)
  constant.1987 = bf16[] constant(0)
  broadcast.1988 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.1987), dimensions={}
  maximum.1989 = bf16[128,28,28,512]{3,2,1,0} maximum(add.1985, broadcast.1988)
  tuple.1990 = (bf16[128,28,28,512]{3,2,1,0}) tuple(maximum.1989)
  get-tuple-element.1991 = bf16[128,28,28,512]{3,2,1,0} get-tuple-element(tuple.1990), index=0
  convert.1997 = f32[128,28,28,512]{3,2,1,0} convert(get-tuple-element.1991)
  parameter.195 = f32[1,28,28,512]{3,2,1,0} parameter(194)
  reshape.1998 = f32[28,28,512]{2,1,0} reshape(parameter.195)
  broadcast.1999 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1998), dimensions={1,2,3}
  add.2000 = f32[128,28,28,512]{3,2,1,0} add(convert.1997, broadcast.1999)
  convert.2001 = bf16[128,28,28,512]{3,2,1,0} convert(add.2000)
  parameter.106 = f32[1,1,512,128]{3,2,1,0} parameter(105)
  convert.2002 = bf16[1,1,512,128]{3,2,1,0} convert(parameter.106)
  convolution.2003 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.2001, convert.2002), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2004 = f32[128,28,28,128]{3,2,1,0} convert(convolution.2003)
  constant.2005 = f32[] constant(0)
  reduce.2010 = f32[128]{0} reduce(convert.2004, constant.2005), dimensions={0,1,2}, to_apply=primitive_computation_add.2006
  constant.2011 = s32[] constant(100352)
  convert.2012 = f32[] convert(constant.2011)
  broadcast.2013 = f32[128]{0} broadcast(convert.2012), dimensions={}
  divide.2014 = f32[128]{0} divide(reduce.2010, broadcast.2013)
  reshape.2048 = f32[1,1,1,128]{3,2,1,0} reshape(divide.2014)
  reshape.2049 = f32[128]{0} reshape(reshape.2048)
  broadcast.2050 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2049), dimensions={3}
  subtract.2051 = f32[128,28,28,128]{3,2,1,0} subtract(convert.2004, broadcast.2050)
  multiply.2015 = f32[128,28,28,128]{3,2,1,0} multiply(convert.2004, convert.2004)
  constant.2019 = f32[] constant(0)
  reduce.2024 = f32[128]{0} reduce(multiply.2015, constant.2019), dimensions={0,1,2}, to_apply=primitive_computation_add.2020
  constant.2025 = s32[] constant(100352)
  convert.2026 = f32[] convert(constant.2025)
  broadcast.2027 = f32[128]{0} broadcast(convert.2026), dimensions={}
  divide.2028 = f32[128]{0} divide(reduce.2024, broadcast.2027)
  multiply.2029 = f32[128]{0} multiply(divide.2014, divide.2014)
  subtract.2033 = f32[128]{0} subtract(divide.2028, multiply.2029)
  constant.2052 = f32[] constant(1e-05)
  broadcast.2053 = f32[128]{0} broadcast(constant.2052), dimensions={}
  add.2054 = f32[128]{0} add(subtract.2033, broadcast.2053)
  rsqrt.2055 = f32[128]{0} rsqrt(add.2054)
  broadcast.2063 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.2055), dimensions={3}
  parameter.101 = f32[128]{0} parameter(100)
  reshape.2062 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.101)
  multiply.2064 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.2063, reshape.2062)
  reshape.2065 = f32[128]{0} reshape(multiply.2064)
  broadcast.2066 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2065), dimensions={3}
  multiply.2067 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.2051, broadcast.2066)
  parameter.100 = f32[128]{0} parameter(99)
  reshape.2068 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.100)
  reshape.2069 = f32[128]{0} reshape(reshape.2068)
  broadcast.2070 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2069), dimensions={3}
  add.2071 = f32[128,28,28,128]{3,2,1,0} add(multiply.2067, broadcast.2070)
  convert.2072 = bf16[128,28,28,128]{3,2,1,0} convert(add.2071)
  constant.2074 = bf16[] constant(0)
  broadcast.2075 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2074), dimensions={}
  maximum.2076 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.2072, broadcast.2075)
  tuple.2077 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.2076)
  get-tuple-element.2078 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.2077), index=0
  convert.2084 = f32[128,28,28,128]{3,2,1,0} convert(get-tuple-element.2078)
  parameter.196 = f32[1,28,28,128]{3,2,1,0} parameter(195)
  reshape.2085 = f32[28,28,128]{2,1,0} reshape(parameter.196)
  broadcast.2086 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2085), dimensions={1,2,3}
  add.2087 = f32[128,28,28,128]{3,2,1,0} add(convert.2084, broadcast.2086)
  convert.2088 = bf16[128,28,28,128]{3,2,1,0} convert(add.2087)
  parameter.107 = f32[3,3,128,128]{3,2,1,0} parameter(106)
  convert.2089 = bf16[3,3,128,128]{3,2,1,0} convert(parameter.107)
  convolution.2090 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.2088, convert.2089), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.2091 = f32[128,28,28,128]{3,2,1,0} convert(convolution.2090)
  constant.2092 = f32[] constant(0)
  reduce.2097 = f32[128]{0} reduce(convert.2091, constant.2092), dimensions={0,1,2}, to_apply=primitive_computation_add.2093
  constant.2098 = s32[] constant(100352)
  convert.2099 = f32[] convert(constant.2098)
  broadcast.2100 = f32[128]{0} broadcast(convert.2099), dimensions={}
  divide.2101 = f32[128]{0} divide(reduce.2097, broadcast.2100)
  reshape.2135 = f32[1,1,1,128]{3,2,1,0} reshape(divide.2101)
  reshape.2136 = f32[128]{0} reshape(reshape.2135)
  broadcast.2137 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2136), dimensions={3}
  subtract.2138 = f32[128,28,28,128]{3,2,1,0} subtract(convert.2091, broadcast.2137)
  multiply.2102 = f32[128,28,28,128]{3,2,1,0} multiply(convert.2091, convert.2091)
  constant.2106 = f32[] constant(0)
  reduce.2111 = f32[128]{0} reduce(multiply.2102, constant.2106), dimensions={0,1,2}, to_apply=primitive_computation_add.2107
  constant.2112 = s32[] constant(100352)
  convert.2113 = f32[] convert(constant.2112)
  broadcast.2114 = f32[128]{0} broadcast(convert.2113), dimensions={}
  divide.2115 = f32[128]{0} divide(reduce.2111, broadcast.2114)
  multiply.2116 = f32[128]{0} multiply(divide.2101, divide.2101)
  subtract.2120 = f32[128]{0} subtract(divide.2115, multiply.2116)
  constant.2139 = f32[] constant(1e-05)
  broadcast.2140 = f32[128]{0} broadcast(constant.2139), dimensions={}
  add.2141 = f32[128]{0} add(subtract.2120, broadcast.2140)
  rsqrt.2142 = f32[128]{0} rsqrt(add.2141)
  broadcast.2150 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.2142), dimensions={3}
  parameter.103 = f32[128]{0} parameter(102)
  reshape.2149 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.103)
  multiply.2151 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.2150, reshape.2149)
  reshape.2152 = f32[128]{0} reshape(multiply.2151)
  broadcast.2153 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2152), dimensions={3}
  multiply.2154 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.2138, broadcast.2153)
  parameter.102 = f32[128]{0} parameter(101)
  reshape.2155 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.102)
  reshape.2156 = f32[128]{0} reshape(reshape.2155)
  broadcast.2157 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2156), dimensions={3}
  add.2158 = f32[128,28,28,128]{3,2,1,0} add(multiply.2154, broadcast.2157)
  convert.2159 = bf16[128,28,28,128]{3,2,1,0} convert(add.2158)
  constant.2161 = bf16[] constant(0)
  broadcast.2162 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2161), dimensions={}
  maximum.2163 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.2159, broadcast.2162)
  tuple.2164 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.2163)
  get-tuple-element.2165 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.2164), index=0
  convert.2171 = f32[128,28,28,128]{3,2,1,0} convert(get-tuple-element.2165)
  parameter.197 = f32[1,28,28,128]{3,2,1,0} parameter(196)
  reshape.2172 = f32[28,28,128]{2,1,0} reshape(parameter.197)
  broadcast.2173 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2172), dimensions={1,2,3}
  add.2174 = f32[128,28,28,128]{3,2,1,0} add(convert.2171, broadcast.2173)
  convert.2175 = bf16[128,28,28,128]{3,2,1,0} convert(add.2174)
  parameter.108 = f32[1,1,128,512]{3,2,1,0} parameter(107)
  convert.2176 = bf16[1,1,128,512]{3,2,1,0} convert(parameter.108)
  convolution.2177 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.2175, convert.2176), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2178 = f32[128,28,28,512]{3,2,1,0} convert(convolution.2177)
  constant.2179 = f32[] constant(0)
  reduce.2184 = f32[512]{0} reduce(convert.2178, constant.2179), dimensions={0,1,2}, to_apply=primitive_computation_add.2180
  constant.2185 = s32[] constant(100352)
  convert.2186 = f32[] convert(constant.2185)
  broadcast.2187 = f32[512]{0} broadcast(convert.2186), dimensions={}
  divide.2188 = f32[512]{0} divide(reduce.2184, broadcast.2187)
  reshape.2222 = f32[1,1,1,512]{3,2,1,0} reshape(divide.2188)
  reshape.2223 = f32[512]{0} reshape(reshape.2222)
  broadcast.2224 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2223), dimensions={3}
  subtract.2225 = f32[128,28,28,512]{3,2,1,0} subtract(convert.2178, broadcast.2224)
  multiply.2189 = f32[128,28,28,512]{3,2,1,0} multiply(convert.2178, convert.2178)
  constant.2193 = f32[] constant(0)
  reduce.2198 = f32[512]{0} reduce(multiply.2189, constant.2193), dimensions={0,1,2}, to_apply=primitive_computation_add.2194
  constant.2199 = s32[] constant(100352)
  convert.2200 = f32[] convert(constant.2199)
  broadcast.2201 = f32[512]{0} broadcast(convert.2200), dimensions={}
  divide.2202 = f32[512]{0} divide(reduce.2198, broadcast.2201)
  multiply.2203 = f32[512]{0} multiply(divide.2188, divide.2188)
  subtract.2207 = f32[512]{0} subtract(divide.2202, multiply.2203)
  constant.2226 = f32[] constant(1e-05)
  broadcast.2227 = f32[512]{0} broadcast(constant.2226), dimensions={}
  add.2228 = f32[512]{0} add(subtract.2207, broadcast.2227)
  rsqrt.2229 = f32[512]{0} rsqrt(add.2228)
  broadcast.2237 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.2229), dimensions={3}
  parameter.105 = f32[512]{0} parameter(104)
  reshape.2236 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.105)
  multiply.2238 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.2237, reshape.2236)
  reshape.2239 = f32[512]{0} reshape(multiply.2238)
  broadcast.2240 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2239), dimensions={3}
  multiply.2241 = f32[128,28,28,512]{3,2,1,0} multiply(subtract.2225, broadcast.2240)
  parameter.104 = f32[512]{0} parameter(103)
  reshape.2242 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.104)
  reshape.2243 = f32[512]{0} reshape(reshape.2242)
  broadcast.2244 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2243), dimensions={3}
  add.2245 = f32[128,28,28,512]{3,2,1,0} add(multiply.2241, broadcast.2244)
  convert.2246 = bf16[128,28,28,512]{3,2,1,0} convert(add.2245)
  add.2247 = bf16[128,28,28,512]{3,2,1,0} add(get-tuple-element.1991, convert.2246)
  constant.2249 = bf16[] constant(0)
  broadcast.2250 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2249), dimensions={}
  maximum.2251 = bf16[128,28,28,512]{3,2,1,0} maximum(add.2247, broadcast.2250)
  tuple.2252 = (bf16[128,28,28,512]{3,2,1,0}) tuple(maximum.2251)
  get-tuple-element.2253 = bf16[128,28,28,512]{3,2,1,0} get-tuple-element(tuple.2252), index=0
  convert.2259 = f32[128,28,28,512]{3,2,1,0} convert(get-tuple-element.2253)
  parameter.198 = f32[1,28,28,512]{3,2,1,0} parameter(197)
  reshape.2260 = f32[28,28,512]{2,1,0} reshape(parameter.198)
  broadcast.2261 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2260), dimensions={1,2,3}
  add.2262 = f32[128,28,28,512]{3,2,1,0} add(convert.2259, broadcast.2261)
  convert.2263 = bf16[128,28,28,512]{3,2,1,0} convert(add.2262)
  parameter.115 = f32[1,1,512,128]{3,2,1,0} parameter(114)
  convert.2264 = bf16[1,1,512,128]{3,2,1,0} convert(parameter.115)
  convolution.2265 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.2263, convert.2264), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2266 = f32[128,28,28,128]{3,2,1,0} convert(convolution.2265)
  constant.2267 = f32[] constant(0)
  reduce.2272 = f32[128]{0} reduce(convert.2266, constant.2267), dimensions={0,1,2}, to_apply=primitive_computation_add.2268
  constant.2273 = s32[] constant(100352)
  convert.2274 = f32[] convert(constant.2273)
  broadcast.2275 = f32[128]{0} broadcast(convert.2274), dimensions={}
  divide.2276 = f32[128]{0} divide(reduce.2272, broadcast.2275)
  reshape.2310 = f32[1,1,1,128]{3,2,1,0} reshape(divide.2276)
  reshape.2311 = f32[128]{0} reshape(reshape.2310)
  broadcast.2312 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2311), dimensions={3}
  subtract.2313 = f32[128,28,28,128]{3,2,1,0} subtract(convert.2266, broadcast.2312)
  multiply.2277 = f32[128,28,28,128]{3,2,1,0} multiply(convert.2266, convert.2266)
  constant.2281 = f32[] constant(0)
  reduce.2286 = f32[128]{0} reduce(multiply.2277, constant.2281), dimensions={0,1,2}, to_apply=primitive_computation_add.2282
  constant.2287 = s32[] constant(100352)
  convert.2288 = f32[] convert(constant.2287)
  broadcast.2289 = f32[128]{0} broadcast(convert.2288), dimensions={}
  divide.2290 = f32[128]{0} divide(reduce.2286, broadcast.2289)
  multiply.2291 = f32[128]{0} multiply(divide.2276, divide.2276)
  subtract.2295 = f32[128]{0} subtract(divide.2290, multiply.2291)
  constant.2314 = f32[] constant(1e-05)
  broadcast.2315 = f32[128]{0} broadcast(constant.2314), dimensions={}
  add.2316 = f32[128]{0} add(subtract.2295, broadcast.2315)
  rsqrt.2317 = f32[128]{0} rsqrt(add.2316)
  broadcast.2325 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.2317), dimensions={3}
  parameter.110 = f32[128]{0} parameter(109)
  reshape.2324 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.110)
  multiply.2326 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.2325, reshape.2324)
  reshape.2327 = f32[128]{0} reshape(multiply.2326)
  broadcast.2328 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2327), dimensions={3}
  multiply.2329 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.2313, broadcast.2328)
  parameter.109 = f32[128]{0} parameter(108)
  reshape.2330 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.109)
  reshape.2331 = f32[128]{0} reshape(reshape.2330)
  broadcast.2332 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2331), dimensions={3}
  add.2333 = f32[128,28,28,128]{3,2,1,0} add(multiply.2329, broadcast.2332)
  convert.2334 = bf16[128,28,28,128]{3,2,1,0} convert(add.2333)
  constant.2336 = bf16[] constant(0)
  broadcast.2337 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2336), dimensions={}
  maximum.2338 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.2334, broadcast.2337)
  tuple.2339 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.2338)
  get-tuple-element.2340 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.2339), index=0
  convert.2346 = f32[128,28,28,128]{3,2,1,0} convert(get-tuple-element.2340)
  parameter.199 = f32[1,28,28,128]{3,2,1,0} parameter(198)
  reshape.2347 = f32[28,28,128]{2,1,0} reshape(parameter.199)
  broadcast.2348 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2347), dimensions={1,2,3}
  add.2349 = f32[128,28,28,128]{3,2,1,0} add(convert.2346, broadcast.2348)
  convert.2350 = bf16[128,28,28,128]{3,2,1,0} convert(add.2349)
  parameter.116 = f32[3,3,128,128]{3,2,1,0} parameter(115)
  convert.2351 = bf16[3,3,128,128]{3,2,1,0} convert(parameter.116)
  convolution.2352 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.2350, convert.2351), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.2353 = f32[128,28,28,128]{3,2,1,0} convert(convolution.2352)
  constant.2354 = f32[] constant(0)
  reduce.2359 = f32[128]{0} reduce(convert.2353, constant.2354), dimensions={0,1,2}, to_apply=primitive_computation_add.2355
  constant.2360 = s32[] constant(100352)
  convert.2361 = f32[] convert(constant.2360)
  broadcast.2362 = f32[128]{0} broadcast(convert.2361), dimensions={}
  divide.2363 = f32[128]{0} divide(reduce.2359, broadcast.2362)
  reshape.2397 = f32[1,1,1,128]{3,2,1,0} reshape(divide.2363)
  reshape.2398 = f32[128]{0} reshape(reshape.2397)
  broadcast.2399 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2398), dimensions={3}
  subtract.2400 = f32[128,28,28,128]{3,2,1,0} subtract(convert.2353, broadcast.2399)
  multiply.2364 = f32[128,28,28,128]{3,2,1,0} multiply(convert.2353, convert.2353)
  constant.2368 = f32[] constant(0)
  reduce.2373 = f32[128]{0} reduce(multiply.2364, constant.2368), dimensions={0,1,2}, to_apply=primitive_computation_add.2369
  constant.2374 = s32[] constant(100352)
  convert.2375 = f32[] convert(constant.2374)
  broadcast.2376 = f32[128]{0} broadcast(convert.2375), dimensions={}
  divide.2377 = f32[128]{0} divide(reduce.2373, broadcast.2376)
  multiply.2378 = f32[128]{0} multiply(divide.2363, divide.2363)
  subtract.2382 = f32[128]{0} subtract(divide.2377, multiply.2378)
  constant.2401 = f32[] constant(1e-05)
  broadcast.2402 = f32[128]{0} broadcast(constant.2401), dimensions={}
  add.2403 = f32[128]{0} add(subtract.2382, broadcast.2402)
  rsqrt.2404 = f32[128]{0} rsqrt(add.2403)
  broadcast.2412 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.2404), dimensions={3}
  parameter.112 = f32[128]{0} parameter(111)
  reshape.2411 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.112)
  multiply.2413 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.2412, reshape.2411)
  reshape.2414 = f32[128]{0} reshape(multiply.2413)
  broadcast.2415 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2414), dimensions={3}
  multiply.2416 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.2400, broadcast.2415)
  parameter.111 = f32[128]{0} parameter(110)
  reshape.2417 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.111)
  reshape.2418 = f32[128]{0} reshape(reshape.2417)
  broadcast.2419 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2418), dimensions={3}
  add.2420 = f32[128,28,28,128]{3,2,1,0} add(multiply.2416, broadcast.2419)
  convert.2421 = bf16[128,28,28,128]{3,2,1,0} convert(add.2420)
  constant.2423 = bf16[] constant(0)
  broadcast.2424 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2423), dimensions={}
  maximum.2425 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.2421, broadcast.2424)
  tuple.2426 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.2425)
  get-tuple-element.2427 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.2426), index=0
  convert.2433 = f32[128,28,28,128]{3,2,1,0} convert(get-tuple-element.2427)
  parameter.200 = f32[1,28,28,128]{3,2,1,0} parameter(199)
  reshape.2434 = f32[28,28,128]{2,1,0} reshape(parameter.200)
  broadcast.2435 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2434), dimensions={1,2,3}
  add.2436 = f32[128,28,28,128]{3,2,1,0} add(convert.2433, broadcast.2435)
  convert.2437 = bf16[128,28,28,128]{3,2,1,0} convert(add.2436)
  parameter.117 = f32[1,1,128,512]{3,2,1,0} parameter(116)
  convert.2438 = bf16[1,1,128,512]{3,2,1,0} convert(parameter.117)
  convolution.2439 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.2437, convert.2438), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2440 = f32[128,28,28,512]{3,2,1,0} convert(convolution.2439)
  constant.2441 = f32[] constant(0)
  reduce.2446 = f32[512]{0} reduce(convert.2440, constant.2441), dimensions={0,1,2}, to_apply=primitive_computation_add.2442
  constant.2447 = s32[] constant(100352)
  convert.2448 = f32[] convert(constant.2447)
  broadcast.2449 = f32[512]{0} broadcast(convert.2448), dimensions={}
  divide.2450 = f32[512]{0} divide(reduce.2446, broadcast.2449)
  reshape.2484 = f32[1,1,1,512]{3,2,1,0} reshape(divide.2450)
  reshape.2485 = f32[512]{0} reshape(reshape.2484)
  broadcast.2486 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2485), dimensions={3}
  subtract.2487 = f32[128,28,28,512]{3,2,1,0} subtract(convert.2440, broadcast.2486)
  multiply.2451 = f32[128,28,28,512]{3,2,1,0} multiply(convert.2440, convert.2440)
  constant.2455 = f32[] constant(0)
  reduce.2460 = f32[512]{0} reduce(multiply.2451, constant.2455), dimensions={0,1,2}, to_apply=primitive_computation_add.2456
  constant.2461 = s32[] constant(100352)
  convert.2462 = f32[] convert(constant.2461)
  broadcast.2463 = f32[512]{0} broadcast(convert.2462), dimensions={}
  divide.2464 = f32[512]{0} divide(reduce.2460, broadcast.2463)
  multiply.2465 = f32[512]{0} multiply(divide.2450, divide.2450)
  subtract.2469 = f32[512]{0} subtract(divide.2464, multiply.2465)
  constant.2488 = f32[] constant(1e-05)
  broadcast.2489 = f32[512]{0} broadcast(constant.2488), dimensions={}
  add.2490 = f32[512]{0} add(subtract.2469, broadcast.2489)
  rsqrt.2491 = f32[512]{0} rsqrt(add.2490)
  broadcast.2499 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.2491), dimensions={3}
  parameter.114 = f32[512]{0} parameter(113)
  reshape.2498 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.114)
  multiply.2500 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.2499, reshape.2498)
  reshape.2501 = f32[512]{0} reshape(multiply.2500)
  broadcast.2502 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2501), dimensions={3}
  multiply.2503 = f32[128,28,28,512]{3,2,1,0} multiply(subtract.2487, broadcast.2502)
  parameter.113 = f32[512]{0} parameter(112)
  reshape.2504 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.113)
  reshape.2505 = f32[512]{0} reshape(reshape.2504)
  broadcast.2506 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2505), dimensions={3}
  add.2507 = f32[128,28,28,512]{3,2,1,0} add(multiply.2503, broadcast.2506)
  convert.2508 = bf16[128,28,28,512]{3,2,1,0} convert(add.2507)
  add.2509 = bf16[128,28,28,512]{3,2,1,0} add(get-tuple-element.2253, convert.2508)
  constant.2511 = bf16[] constant(0)
  broadcast.2512 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2511), dimensions={}
  maximum.2513 = bf16[128,28,28,512]{3,2,1,0} maximum(add.2509, broadcast.2512)
  tuple.2514 = (bf16[128,28,28,512]{3,2,1,0}) tuple(maximum.2513)
  get-tuple-element.2515 = bf16[128,28,28,512]{3,2,1,0} get-tuple-element(tuple.2514), index=0
  convert.2521 = f32[128,28,28,512]{3,2,1,0} convert(get-tuple-element.2515)
  parameter.201 = f32[1,28,28,512]{3,2,1,0} parameter(200)
  reshape.2522 = f32[28,28,512]{2,1,0} reshape(parameter.201)
  broadcast.2523 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2522), dimensions={1,2,3}
  add.2524 = f32[128,28,28,512]{3,2,1,0} add(convert.2521, broadcast.2523)
  convert.2525 = bf16[128,28,28,512]{3,2,1,0} convert(add.2524)
  parameter.124 = f32[1,1,512,128]{3,2,1,0} parameter(123)
  convert.2526 = bf16[1,1,512,128]{3,2,1,0} convert(parameter.124)
  convolution.2527 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.2525, convert.2526), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2528 = f32[128,28,28,128]{3,2,1,0} convert(convolution.2527)
  constant.2529 = f32[] constant(0)
  reduce.2534 = f32[128]{0} reduce(convert.2528, constant.2529), dimensions={0,1,2}, to_apply=primitive_computation_add.2530
  constant.2535 = s32[] constant(100352)
  convert.2536 = f32[] convert(constant.2535)
  broadcast.2537 = f32[128]{0} broadcast(convert.2536), dimensions={}
  divide.2538 = f32[128]{0} divide(reduce.2534, broadcast.2537)
  reshape.2572 = f32[1,1,1,128]{3,2,1,0} reshape(divide.2538)
  reshape.2573 = f32[128]{0} reshape(reshape.2572)
  broadcast.2574 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2573), dimensions={3}
  subtract.2575 = f32[128,28,28,128]{3,2,1,0} subtract(convert.2528, broadcast.2574)
  multiply.2539 = f32[128,28,28,128]{3,2,1,0} multiply(convert.2528, convert.2528)
  constant.2543 = f32[] constant(0)
  reduce.2548 = f32[128]{0} reduce(multiply.2539, constant.2543), dimensions={0,1,2}, to_apply=primitive_computation_add.2544
  constant.2549 = s32[] constant(100352)
  convert.2550 = f32[] convert(constant.2549)
  broadcast.2551 = f32[128]{0} broadcast(convert.2550), dimensions={}
  divide.2552 = f32[128]{0} divide(reduce.2548, broadcast.2551)
  multiply.2553 = f32[128]{0} multiply(divide.2538, divide.2538)
  subtract.2557 = f32[128]{0} subtract(divide.2552, multiply.2553)
  constant.2576 = f32[] constant(1e-05)
  broadcast.2577 = f32[128]{0} broadcast(constant.2576), dimensions={}
  add.2578 = f32[128]{0} add(subtract.2557, broadcast.2577)
  rsqrt.2579 = f32[128]{0} rsqrt(add.2578)
  broadcast.2587 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.2579), dimensions={3}
  parameter.119 = f32[128]{0} parameter(118)
  reshape.2586 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.119)
  multiply.2588 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.2587, reshape.2586)
  reshape.2589 = f32[128]{0} reshape(multiply.2588)
  broadcast.2590 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2589), dimensions={3}
  multiply.2591 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.2575, broadcast.2590)
  parameter.118 = f32[128]{0} parameter(117)
  reshape.2592 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.118)
  reshape.2593 = f32[128]{0} reshape(reshape.2592)
  broadcast.2594 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2593), dimensions={3}
  add.2595 = f32[128,28,28,128]{3,2,1,0} add(multiply.2591, broadcast.2594)
  convert.2596 = bf16[128,28,28,128]{3,2,1,0} convert(add.2595)
  constant.2598 = bf16[] constant(0)
  broadcast.2599 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2598), dimensions={}
  maximum.2600 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.2596, broadcast.2599)
  tuple.2601 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.2600)
  get-tuple-element.2602 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.2601), index=0
  convert.2608 = f32[128,28,28,128]{3,2,1,0} convert(get-tuple-element.2602)
  parameter.202 = f32[1,28,28,128]{3,2,1,0} parameter(201)
  reshape.2609 = f32[28,28,128]{2,1,0} reshape(parameter.202)
  broadcast.2610 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2609), dimensions={1,2,3}
  add.2611 = f32[128,28,28,128]{3,2,1,0} add(convert.2608, broadcast.2610)
  convert.2612 = bf16[128,28,28,128]{3,2,1,0} convert(add.2611)
  parameter.125 = f32[3,3,128,128]{3,2,1,0} parameter(124)
  convert.2613 = bf16[3,3,128,128]{3,2,1,0} convert(parameter.125)
  convolution.2614 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.2612, convert.2613), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.2615 = f32[128,28,28,128]{3,2,1,0} convert(convolution.2614)
  constant.2616 = f32[] constant(0)
  reduce.2621 = f32[128]{0} reduce(convert.2615, constant.2616), dimensions={0,1,2}, to_apply=primitive_computation_add.2617
  constant.2622 = s32[] constant(100352)
  convert.2623 = f32[] convert(constant.2622)
  broadcast.2624 = f32[128]{0} broadcast(convert.2623), dimensions={}
  divide.2625 = f32[128]{0} divide(reduce.2621, broadcast.2624)
  reshape.2659 = f32[1,1,1,128]{3,2,1,0} reshape(divide.2625)
  reshape.2660 = f32[128]{0} reshape(reshape.2659)
  broadcast.2661 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2660), dimensions={3}
  subtract.2662 = f32[128,28,28,128]{3,2,1,0} subtract(convert.2615, broadcast.2661)
  multiply.2626 = f32[128,28,28,128]{3,2,1,0} multiply(convert.2615, convert.2615)
  constant.2630 = f32[] constant(0)
  reduce.2635 = f32[128]{0} reduce(multiply.2626, constant.2630), dimensions={0,1,2}, to_apply=primitive_computation_add.2631
  constant.2636 = s32[] constant(100352)
  convert.2637 = f32[] convert(constant.2636)
  broadcast.2638 = f32[128]{0} broadcast(convert.2637), dimensions={}
  divide.2639 = f32[128]{0} divide(reduce.2635, broadcast.2638)
  multiply.2640 = f32[128]{0} multiply(divide.2625, divide.2625)
  subtract.2644 = f32[128]{0} subtract(divide.2639, multiply.2640)
  constant.2663 = f32[] constant(1e-05)
  broadcast.2664 = f32[128]{0} broadcast(constant.2663), dimensions={}
  add.2665 = f32[128]{0} add(subtract.2644, broadcast.2664)
  rsqrt.2666 = f32[128]{0} rsqrt(add.2665)
  broadcast.2674 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.2666), dimensions={3}
  parameter.121 = f32[128]{0} parameter(120)
  reshape.2673 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.121)
  multiply.2675 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.2674, reshape.2673)
  reshape.2676 = f32[128]{0} reshape(multiply.2675)
  broadcast.2677 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2676), dimensions={3}
  multiply.2678 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.2662, broadcast.2677)
  parameter.120 = f32[128]{0} parameter(119)
  reshape.2679 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.120)
  reshape.2680 = f32[128]{0} reshape(reshape.2679)
  broadcast.2681 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2680), dimensions={3}
  add.2682 = f32[128,28,28,128]{3,2,1,0} add(multiply.2678, broadcast.2681)
  convert.2683 = bf16[128,28,28,128]{3,2,1,0} convert(add.2682)
  constant.2685 = bf16[] constant(0)
  broadcast.2686 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2685), dimensions={}
  maximum.2687 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.2683, broadcast.2686)
  tuple.2688 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.2687)
  get-tuple-element.2689 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.2688), index=0
  convert.2695 = f32[128,28,28,128]{3,2,1,0} convert(get-tuple-element.2689)
  parameter.203 = f32[1,28,28,128]{3,2,1,0} parameter(202)
  reshape.2696 = f32[28,28,128]{2,1,0} reshape(parameter.203)
  broadcast.2697 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2696), dimensions={1,2,3}
  add.2698 = f32[128,28,28,128]{3,2,1,0} add(convert.2695, broadcast.2697)
  convert.2699 = bf16[128,28,28,128]{3,2,1,0} convert(add.2698)
  parameter.126 = f32[1,1,128,512]{3,2,1,0} parameter(125)
  convert.2700 = bf16[1,1,128,512]{3,2,1,0} convert(parameter.126)
  convolution.2701 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.2699, convert.2700), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2702 = f32[128,28,28,512]{3,2,1,0} convert(convolution.2701)
  constant.2703 = f32[] constant(0)
  reduce.2708 = f32[512]{0} reduce(convert.2702, constant.2703), dimensions={0,1,2}, to_apply=primitive_computation_add.2704
  constant.2709 = s32[] constant(100352)
  convert.2710 = f32[] convert(constant.2709)
  broadcast.2711 = f32[512]{0} broadcast(convert.2710), dimensions={}
  divide.2712 = f32[512]{0} divide(reduce.2708, broadcast.2711)
  reshape.2746 = f32[1,1,1,512]{3,2,1,0} reshape(divide.2712)
  reshape.2747 = f32[512]{0} reshape(reshape.2746)
  broadcast.2748 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2747), dimensions={3}
  subtract.2749 = f32[128,28,28,512]{3,2,1,0} subtract(convert.2702, broadcast.2748)
  multiply.2713 = f32[128,28,28,512]{3,2,1,0} multiply(convert.2702, convert.2702)
  constant.2717 = f32[] constant(0)
  reduce.2722 = f32[512]{0} reduce(multiply.2713, constant.2717), dimensions={0,1,2}, to_apply=primitive_computation_add.2718
  constant.2723 = s32[] constant(100352)
  convert.2724 = f32[] convert(constant.2723)
  broadcast.2725 = f32[512]{0} broadcast(convert.2724), dimensions={}
  divide.2726 = f32[512]{0} divide(reduce.2722, broadcast.2725)
  multiply.2727 = f32[512]{0} multiply(divide.2712, divide.2712)
  subtract.2731 = f32[512]{0} subtract(divide.2726, multiply.2727)
  constant.2750 = f32[] constant(1e-05)
  broadcast.2751 = f32[512]{0} broadcast(constant.2750), dimensions={}
  add.2752 = f32[512]{0} add(subtract.2731, broadcast.2751)
  rsqrt.2753 = f32[512]{0} rsqrt(add.2752)
  broadcast.2761 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.2753), dimensions={3}
  parameter.123 = f32[512]{0} parameter(122)
  reshape.2760 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.123)
  multiply.2762 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.2761, reshape.2760)
  reshape.2763 = f32[512]{0} reshape(multiply.2762)
  broadcast.2764 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2763), dimensions={3}
  multiply.2765 = f32[128,28,28,512]{3,2,1,0} multiply(subtract.2749, broadcast.2764)
  parameter.122 = f32[512]{0} parameter(121)
  reshape.2766 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.122)
  reshape.2767 = f32[512]{0} reshape(reshape.2766)
  broadcast.2768 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2767), dimensions={3}
  add.2769 = f32[128,28,28,512]{3,2,1,0} add(multiply.2765, broadcast.2768)
  convert.2770 = bf16[128,28,28,512]{3,2,1,0} convert(add.2769)
  add.2771 = bf16[128,28,28,512]{3,2,1,0} add(get-tuple-element.2515, convert.2770)
  constant.2773 = bf16[] constant(0)
  broadcast.2774 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2773), dimensions={}
  maximum.2775 = bf16[128,28,28,512]{3,2,1,0} maximum(add.2771, broadcast.2774)
  tuple.2776 = (bf16[128,28,28,512]{3,2,1,0}) tuple(maximum.2775)
  get-tuple-element.2777 = bf16[128,28,28,512]{3,2,1,0} get-tuple-element(tuple.2776), index=0
  convert.3033 = f32[128,28,28,512]{3,2,1,0} convert(get-tuple-element.2777)
  parameter.207 = f32[1,28,28,512]{3,2,1,0} parameter(206)
  reshape.3034 = f32[28,28,512]{2,1,0} reshape(parameter.207)
  broadcast.3035 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.3034), dimensions={1,2,3}
  add.3036 = f32[128,28,28,512]{3,2,1,0} add(convert.3033, broadcast.3035)
  convert.3037 = bf16[128,28,28,512]{3,2,1,0} convert(add.3036)
  parameter.136 = f32[1,1,512,1024]{3,2,1,0} parameter(135)
  convert.3038 = bf16[1,1,512,1024]{3,2,1,0} convert(parameter.136)
  convolution.3039 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.3037, convert.3038), window={size=1x1 stride=2x2}, dim_labels=b01f_01io->b01f
  convert.3040 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.3039)
  constant.3041 = f32[] constant(0)
  reduce.3046 = f32[1024]{0} reduce(convert.3040, constant.3041), dimensions={0,1,2}, to_apply=primitive_computation_add.3042
  constant.3047 = s32[] constant(25088)
  convert.3048 = f32[] convert(constant.3047)
  broadcast.3049 = f32[1024]{0} broadcast(convert.3048), dimensions={}
  divide.3050 = f32[1024]{0} divide(reduce.3046, broadcast.3049)
  reshape.3084 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.3050)
  reshape.3085 = f32[1024]{0} reshape(reshape.3084)
  broadcast.3086 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3085), dimensions={3}
  subtract.3087 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.3040, broadcast.3086)
  multiply.3051 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.3040, convert.3040)
  constant.3055 = f32[] constant(0)
  reduce.3060 = f32[1024]{0} reduce(multiply.3051, constant.3055), dimensions={0,1,2}, to_apply=primitive_computation_add.3056
  constant.3061 = s32[] constant(25088)
  convert.3062 = f32[] convert(constant.3061)
  broadcast.3063 = f32[1024]{0} broadcast(convert.3062), dimensions={}
  divide.3064 = f32[1024]{0} divide(reduce.3060, broadcast.3063)
  multiply.3065 = f32[1024]{0} multiply(divide.3050, divide.3050)
  subtract.3069 = f32[1024]{0} subtract(divide.3064, multiply.3065)
  constant.3088 = f32[] constant(1e-05)
  broadcast.3089 = f32[1024]{0} broadcast(constant.3088), dimensions={}
  add.3090 = f32[1024]{0} add(subtract.3069, broadcast.3089)
  rsqrt.3091 = f32[1024]{0} rsqrt(add.3090)
  broadcast.3099 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.3091), dimensions={3}
  parameter.138 = f32[1024]{0} parameter(137)
  reshape.3098 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.138)
  multiply.3100 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.3099, reshape.3098)
  reshape.3101 = f32[1024]{0} reshape(multiply.3100)
  broadcast.3102 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3101), dimensions={3}
  multiply.3103 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.3087, broadcast.3102)
  parameter.137 = f32[1024]{0} parameter(136)
  reshape.3104 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.137)
  reshape.3105 = f32[1024]{0} reshape(reshape.3104)
  broadcast.3106 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3105), dimensions={3}
  add.3107 = f32[128,14,14,1024]{3,2,1,0} add(multiply.3103, broadcast.3106)
  convert.3108 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3107)
  convert.2783 = f32[128,28,28,512]{3,2,1,0} convert(get-tuple-element.2777)
  parameter.204 = f32[1,28,28,512]{3,2,1,0} parameter(203)
  reshape.2784 = f32[28,28,512]{2,1,0} reshape(parameter.204)
  broadcast.2785 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2784), dimensions={1,2,3}
  add.2786 = f32[128,28,28,512]{3,2,1,0} add(convert.2783, broadcast.2785)
  convert.2787 = bf16[128,28,28,512]{3,2,1,0} convert(add.2786)
  parameter.133 = f32[1,1,512,256]{3,2,1,0} parameter(132)
  convert.2788 = bf16[1,1,512,256]{3,2,1,0} convert(parameter.133)
  convolution.2789 = bf16[128,28,28,256]{3,2,1,0} convolution(convert.2787, convert.2788), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2790 = f32[128,28,28,256]{3,2,1,0} convert(convolution.2789)
  constant.2791 = f32[] constant(0)
  reduce.2796 = f32[256]{0} reduce(convert.2790, constant.2791), dimensions={0,1,2}, to_apply=primitive_computation_add.2792
  constant.2797 = s32[] constant(100352)
  convert.2798 = f32[] convert(constant.2797)
  broadcast.2799 = f32[256]{0} broadcast(convert.2798), dimensions={}
  divide.2800 = f32[256]{0} divide(reduce.2796, broadcast.2799)
  reshape.2834 = f32[1,1,1,256]{3,2,1,0} reshape(divide.2800)
  reshape.2835 = f32[256]{0} reshape(reshape.2834)
  broadcast.2836 = f32[128,28,28,256]{3,2,1,0} broadcast(reshape.2835), dimensions={3}
  subtract.2837 = f32[128,28,28,256]{3,2,1,0} subtract(convert.2790, broadcast.2836)
  multiply.2801 = f32[128,28,28,256]{3,2,1,0} multiply(convert.2790, convert.2790)
  constant.2805 = f32[] constant(0)
  reduce.2810 = f32[256]{0} reduce(multiply.2801, constant.2805), dimensions={0,1,2}, to_apply=primitive_computation_add.2806
  constant.2811 = s32[] constant(100352)
  convert.2812 = f32[] convert(constant.2811)
  broadcast.2813 = f32[256]{0} broadcast(convert.2812), dimensions={}
  divide.2814 = f32[256]{0} divide(reduce.2810, broadcast.2813)
  multiply.2815 = f32[256]{0} multiply(divide.2800, divide.2800)
  subtract.2819 = f32[256]{0} subtract(divide.2814, multiply.2815)
  constant.2838 = f32[] constant(1e-05)
  broadcast.2839 = f32[256]{0} broadcast(constant.2838), dimensions={}
  add.2840 = f32[256]{0} add(subtract.2819, broadcast.2839)
  rsqrt.2841 = f32[256]{0} rsqrt(add.2840)
  broadcast.2849 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.2841), dimensions={3}
  parameter.128 = f32[256]{0} parameter(127)
  reshape.2848 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.128)
  multiply.2850 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.2849, reshape.2848)
  reshape.2851 = f32[256]{0} reshape(multiply.2850)
  broadcast.2852 = f32[128,28,28,256]{3,2,1,0} broadcast(reshape.2851), dimensions={3}
  multiply.2853 = f32[128,28,28,256]{3,2,1,0} multiply(subtract.2837, broadcast.2852)
  parameter.127 = f32[256]{0} parameter(126)
  reshape.2854 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.127)
  reshape.2855 = f32[256]{0} reshape(reshape.2854)
  broadcast.2856 = f32[128,28,28,256]{3,2,1,0} broadcast(reshape.2855), dimensions={3}
  add.2857 = f32[128,28,28,256]{3,2,1,0} add(multiply.2853, broadcast.2856)
  convert.2858 = bf16[128,28,28,256]{3,2,1,0} convert(add.2857)
  constant.2860 = bf16[] constant(0)
  broadcast.2861 = bf16[128,28,28,256]{3,2,1,0} broadcast(constant.2860), dimensions={}
  maximum.2862 = bf16[128,28,28,256]{3,2,1,0} maximum(convert.2858, broadcast.2861)
  tuple.2863 = (bf16[128,28,28,256]{3,2,1,0}) tuple(maximum.2862)
  get-tuple-element.2864 = bf16[128,28,28,256]{3,2,1,0} get-tuple-element(tuple.2863), index=0
  convert.2870 = f32[128,28,28,256]{3,2,1,0} convert(get-tuple-element.2864)
  parameter.205 = f32[1,28,28,256]{3,2,1,0} parameter(204)
  reshape.2871 = f32[28,28,256]{2,1,0} reshape(parameter.205)
  broadcast.2872 = f32[128,28,28,256]{3,2,1,0} broadcast(reshape.2871), dimensions={1,2,3}
  add.2873 = f32[128,28,28,256]{3,2,1,0} add(convert.2870, broadcast.2872)
  convert.2874 = bf16[128,28,28,256]{3,2,1,0} convert(add.2873)
  parameter.134 = f32[3,3,256,256]{3,2,1,0} parameter(133)
  convert.2875 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.134)
  convolution.2876 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.2874, convert.2875), window={size=3x3 stride=2x2 pad=0_1x0_1}, dim_labels=b01f_01io->b01f
  convert.2877 = f32[128,14,14,256]{3,2,1,0} convert(convolution.2876)
  constant.2878 = f32[] constant(0)
  reduce.2883 = f32[256]{0} reduce(convert.2877, constant.2878), dimensions={0,1,2}, to_apply=primitive_computation_add.2879
  constant.2884 = s32[] constant(25088)
  convert.2885 = f32[] convert(constant.2884)
  broadcast.2886 = f32[256]{0} broadcast(convert.2885), dimensions={}
  divide.2887 = f32[256]{0} divide(reduce.2883, broadcast.2886)
  reshape.2921 = f32[1,1,1,256]{3,2,1,0} reshape(divide.2887)
  reshape.2922 = f32[256]{0} reshape(reshape.2921)
  broadcast.2923 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.2922), dimensions={3}
  subtract.2924 = f32[128,14,14,256]{3,2,1,0} subtract(convert.2877, broadcast.2923)
  multiply.2888 = f32[128,14,14,256]{3,2,1,0} multiply(convert.2877, convert.2877)
  constant.2892 = f32[] constant(0)
  reduce.2897 = f32[256]{0} reduce(multiply.2888, constant.2892), dimensions={0,1,2}, to_apply=primitive_computation_add.2893
  constant.2898 = s32[] constant(25088)
  convert.2899 = f32[] convert(constant.2898)
  broadcast.2900 = f32[256]{0} broadcast(convert.2899), dimensions={}
  divide.2901 = f32[256]{0} divide(reduce.2897, broadcast.2900)
  multiply.2902 = f32[256]{0} multiply(divide.2887, divide.2887)
  subtract.2906 = f32[256]{0} subtract(divide.2901, multiply.2902)
  constant.2925 = f32[] constant(1e-05)
  broadcast.2926 = f32[256]{0} broadcast(constant.2925), dimensions={}
  add.2927 = f32[256]{0} add(subtract.2906, broadcast.2926)
  rsqrt.2928 = f32[256]{0} rsqrt(add.2927)
  broadcast.2936 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.2928), dimensions={3}
  parameter.130 = f32[256]{0} parameter(129)
  reshape.2935 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.130)
  multiply.2937 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.2936, reshape.2935)
  reshape.2938 = f32[256]{0} reshape(multiply.2937)
  broadcast.2939 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.2938), dimensions={3}
  multiply.2940 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.2924, broadcast.2939)
  parameter.129 = f32[256]{0} parameter(128)
  reshape.2941 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.129)
  reshape.2942 = f32[256]{0} reshape(reshape.2941)
  broadcast.2943 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.2942), dimensions={3}
  add.2944 = f32[128,14,14,256]{3,2,1,0} add(multiply.2940, broadcast.2943)
  convert.2945 = bf16[128,14,14,256]{3,2,1,0} convert(add.2944)
  constant.2947 = bf16[] constant(0)
  broadcast.2948 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.2947), dimensions={}
  maximum.2949 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.2945, broadcast.2948)
  tuple.2950 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.2949)
  get-tuple-element.2951 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.2950), index=0
  convert.2957 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.2951)
  parameter.206 = f32[1,14,14,256]{3,2,1,0} parameter(205)
  reshape.2958 = f32[14,14,256]{2,1,0} reshape(parameter.206)
  broadcast.2959 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.2958), dimensions={1,2,3}
  add.2960 = f32[128,14,14,256]{3,2,1,0} add(convert.2957, broadcast.2959)
  convert.2961 = bf16[128,14,14,256]{3,2,1,0} convert(add.2960)
  parameter.135 = f32[1,1,256,1024]{3,2,1,0} parameter(134)
  convert.2962 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.135)
  convolution.2963 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.2961, convert.2962), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2964 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.2963)
  constant.2965 = f32[] constant(0)
  reduce.2970 = f32[1024]{0} reduce(convert.2964, constant.2965), dimensions={0,1,2}, to_apply=primitive_computation_add.2966
  constant.2971 = s32[] constant(25088)
  convert.2972 = f32[] convert(constant.2971)
  broadcast.2973 = f32[1024]{0} broadcast(convert.2972), dimensions={}
  divide.2974 = f32[1024]{0} divide(reduce.2970, broadcast.2973)
  reshape.3008 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.2974)
  reshape.3009 = f32[1024]{0} reshape(reshape.3008)
  broadcast.3010 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3009), dimensions={3}
  subtract.3011 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.2964, broadcast.3010)
  multiply.2975 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.2964, convert.2964)
  constant.2979 = f32[] constant(0)
  reduce.2984 = f32[1024]{0} reduce(multiply.2975, constant.2979), dimensions={0,1,2}, to_apply=primitive_computation_add.2980
  constant.2985 = s32[] constant(25088)
  convert.2986 = f32[] convert(constant.2985)
  broadcast.2987 = f32[1024]{0} broadcast(convert.2986), dimensions={}
  divide.2988 = f32[1024]{0} divide(reduce.2984, broadcast.2987)
  multiply.2989 = f32[1024]{0} multiply(divide.2974, divide.2974)
  subtract.2993 = f32[1024]{0} subtract(divide.2988, multiply.2989)
  constant.3012 = f32[] constant(1e-05)
  broadcast.3013 = f32[1024]{0} broadcast(constant.3012), dimensions={}
  add.3014 = f32[1024]{0} add(subtract.2993, broadcast.3013)
  rsqrt.3015 = f32[1024]{0} rsqrt(add.3014)
  broadcast.3023 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.3015), dimensions={3}
  parameter.132 = f32[1024]{0} parameter(131)
  reshape.3022 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.132)
  multiply.3024 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.3023, reshape.3022)
  reshape.3025 = f32[1024]{0} reshape(multiply.3024)
  broadcast.3026 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3025), dimensions={3}
  multiply.3027 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.3011, broadcast.3026)
  parameter.131 = f32[1024]{0} parameter(130)
  reshape.3028 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.131)
  reshape.3029 = f32[1024]{0} reshape(reshape.3028)
  broadcast.3030 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3029), dimensions={3}
  add.3031 = f32[128,14,14,1024]{3,2,1,0} add(multiply.3027, broadcast.3030)
  convert.3032 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3031)
  add.3109 = bf16[128,14,14,1024]{3,2,1,0} add(convert.3108, convert.3032)
  constant.3111 = bf16[] constant(0)
  broadcast.3112 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3111), dimensions={}
  maximum.3113 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.3109, broadcast.3112)
  tuple.3114 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.3113)
  get-tuple-element.3115 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.3114), index=0
  convert.3121 = f32[128,14,14,1024]{3,2,1,0} convert(get-tuple-element.3115)
  parameter.208 = f32[1,14,14,1024]{3,2,1,0} parameter(207)
  reshape.3122 = f32[14,14,1024]{2,1,0} reshape(parameter.208)
  broadcast.3123 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3122), dimensions={1,2,3}
  add.3124 = f32[128,14,14,1024]{3,2,1,0} add(convert.3121, broadcast.3123)
  convert.3125 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3124)
  parameter.145 = f32[1,1,1024,256]{3,2,1,0} parameter(144)
  convert.3126 = bf16[1,1,1024,256]{3,2,1,0} convert(parameter.145)
  convolution.3127 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.3125, convert.3126), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3128 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3127)
  constant.3129 = f32[] constant(0)
  reduce.3134 = f32[256]{0} reduce(convert.3128, constant.3129), dimensions={0,1,2}, to_apply=primitive_computation_add.3130
  constant.3135 = s32[] constant(25088)
  convert.3136 = f32[] convert(constant.3135)
  broadcast.3137 = f32[256]{0} broadcast(convert.3136), dimensions={}
  divide.3138 = f32[256]{0} divide(reduce.3134, broadcast.3137)
  reshape.3172 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3138)
  reshape.3173 = f32[256]{0} reshape(reshape.3172)
  broadcast.3174 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3173), dimensions={3}
  subtract.3175 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3128, broadcast.3174)
  multiply.3139 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3128, convert.3128)
  constant.3143 = f32[] constant(0)
  reduce.3148 = f32[256]{0} reduce(multiply.3139, constant.3143), dimensions={0,1,2}, to_apply=primitive_computation_add.3144
  constant.3149 = s32[] constant(25088)
  convert.3150 = f32[] convert(constant.3149)
  broadcast.3151 = f32[256]{0} broadcast(convert.3150), dimensions={}
  divide.3152 = f32[256]{0} divide(reduce.3148, broadcast.3151)
  multiply.3153 = f32[256]{0} multiply(divide.3138, divide.3138)
  subtract.3157 = f32[256]{0} subtract(divide.3152, multiply.3153)
  constant.3176 = f32[] constant(1e-05)
  broadcast.3177 = f32[256]{0} broadcast(constant.3176), dimensions={}
  add.3178 = f32[256]{0} add(subtract.3157, broadcast.3177)
  rsqrt.3179 = f32[256]{0} rsqrt(add.3178)
  broadcast.3187 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3179), dimensions={3}
  parameter.140 = f32[256]{0} parameter(139)
  reshape.3186 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.140)
  multiply.3188 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3187, reshape.3186)
  reshape.3189 = f32[256]{0} reshape(multiply.3188)
  broadcast.3190 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3189), dimensions={3}
  multiply.3191 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3175, broadcast.3190)
  parameter.139 = f32[256]{0} parameter(138)
  reshape.3192 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.139)
  reshape.3193 = f32[256]{0} reshape(reshape.3192)
  broadcast.3194 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3193), dimensions={3}
  add.3195 = f32[128,14,14,256]{3,2,1,0} add(multiply.3191, broadcast.3194)
  convert.3196 = bf16[128,14,14,256]{3,2,1,0} convert(add.3195)
  constant.3198 = bf16[] constant(0)
  broadcast.3199 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3198), dimensions={}
  maximum.3200 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3196, broadcast.3199)
  tuple.3201 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3200)
  get-tuple-element.3202 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3201), index=0
  convert.3208 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.3202)
  parameter.209 = f32[1,14,14,256]{3,2,1,0} parameter(208)
  reshape.3209 = f32[14,14,256]{2,1,0} reshape(parameter.209)
  broadcast.3210 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3209), dimensions={1,2,3}
  add.3211 = f32[128,14,14,256]{3,2,1,0} add(convert.3208, broadcast.3210)
  convert.3212 = bf16[128,14,14,256]{3,2,1,0} convert(add.3211)
  parameter.146 = f32[3,3,256,256]{3,2,1,0} parameter(145)
  convert.3213 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.146)
  convolution.3214 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.3212, convert.3213), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.3215 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3214)
  constant.3216 = f32[] constant(0)
  reduce.3221 = f32[256]{0} reduce(convert.3215, constant.3216), dimensions={0,1,2}, to_apply=primitive_computation_add.3217
  constant.3222 = s32[] constant(25088)
  convert.3223 = f32[] convert(constant.3222)
  broadcast.3224 = f32[256]{0} broadcast(convert.3223), dimensions={}
  divide.3225 = f32[256]{0} divide(reduce.3221, broadcast.3224)
  reshape.3259 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3225)
  reshape.3260 = f32[256]{0} reshape(reshape.3259)
  broadcast.3261 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3260), dimensions={3}
  subtract.3262 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3215, broadcast.3261)
  multiply.3226 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3215, convert.3215)
  constant.3230 = f32[] constant(0)
  reduce.3235 = f32[256]{0} reduce(multiply.3226, constant.3230), dimensions={0,1,2}, to_apply=primitive_computation_add.3231
  constant.3236 = s32[] constant(25088)
  convert.3237 = f32[] convert(constant.3236)
  broadcast.3238 = f32[256]{0} broadcast(convert.3237), dimensions={}
  divide.3239 = f32[256]{0} divide(reduce.3235, broadcast.3238)
  multiply.3240 = f32[256]{0} multiply(divide.3225, divide.3225)
  subtract.3244 = f32[256]{0} subtract(divide.3239, multiply.3240)
  constant.3263 = f32[] constant(1e-05)
  broadcast.3264 = f32[256]{0} broadcast(constant.3263), dimensions={}
  add.3265 = f32[256]{0} add(subtract.3244, broadcast.3264)
  rsqrt.3266 = f32[256]{0} rsqrt(add.3265)
  broadcast.3274 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3266), dimensions={3}
  parameter.142 = f32[256]{0} parameter(141)
  reshape.3273 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.142)
  multiply.3275 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3274, reshape.3273)
  reshape.3276 = f32[256]{0} reshape(multiply.3275)
  broadcast.3277 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3276), dimensions={3}
  multiply.3278 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3262, broadcast.3277)
  parameter.141 = f32[256]{0} parameter(140)
  reshape.3279 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.141)
  reshape.3280 = f32[256]{0} reshape(reshape.3279)
  broadcast.3281 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3280), dimensions={3}
  add.3282 = f32[128,14,14,256]{3,2,1,0} add(multiply.3278, broadcast.3281)
  convert.3283 = bf16[128,14,14,256]{3,2,1,0} convert(add.3282)
  constant.3285 = bf16[] constant(0)
  broadcast.3286 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3285), dimensions={}
  maximum.3287 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3283, broadcast.3286)
  tuple.3288 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3287)
  get-tuple-element.3289 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3288), index=0
  convert.3295 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.3289)
  parameter.210 = f32[1,14,14,256]{3,2,1,0} parameter(209)
  reshape.3296 = f32[14,14,256]{2,1,0} reshape(parameter.210)
  broadcast.3297 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3296), dimensions={1,2,3}
  add.3298 = f32[128,14,14,256]{3,2,1,0} add(convert.3295, broadcast.3297)
  convert.3299 = bf16[128,14,14,256]{3,2,1,0} convert(add.3298)
  parameter.147 = f32[1,1,256,1024]{3,2,1,0} parameter(146)
  convert.3300 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.147)
  convolution.3301 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.3299, convert.3300), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3302 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.3301)
  constant.3303 = f32[] constant(0)
  reduce.3308 = f32[1024]{0} reduce(convert.3302, constant.3303), dimensions={0,1,2}, to_apply=primitive_computation_add.3304
  constant.3309 = s32[] constant(25088)
  convert.3310 = f32[] convert(constant.3309)
  broadcast.3311 = f32[1024]{0} broadcast(convert.3310), dimensions={}
  divide.3312 = f32[1024]{0} divide(reduce.3308, broadcast.3311)
  reshape.3346 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.3312)
  reshape.3347 = f32[1024]{0} reshape(reshape.3346)
  broadcast.3348 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3347), dimensions={3}
  subtract.3349 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.3302, broadcast.3348)
  multiply.3313 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.3302, convert.3302)
  constant.3317 = f32[] constant(0)
  reduce.3322 = f32[1024]{0} reduce(multiply.3313, constant.3317), dimensions={0,1,2}, to_apply=primitive_computation_add.3318
  constant.3323 = s32[] constant(25088)
  convert.3324 = f32[] convert(constant.3323)
  broadcast.3325 = f32[1024]{0} broadcast(convert.3324), dimensions={}
  divide.3326 = f32[1024]{0} divide(reduce.3322, broadcast.3325)
  multiply.3327 = f32[1024]{0} multiply(divide.3312, divide.3312)
  subtract.3331 = f32[1024]{0} subtract(divide.3326, multiply.3327)
  constant.3350 = f32[] constant(1e-05)
  broadcast.3351 = f32[1024]{0} broadcast(constant.3350), dimensions={}
  add.3352 = f32[1024]{0} add(subtract.3331, broadcast.3351)
  rsqrt.3353 = f32[1024]{0} rsqrt(add.3352)
  broadcast.3361 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.3353), dimensions={3}
  parameter.144 = f32[1024]{0} parameter(143)
  reshape.3360 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.144)
  multiply.3362 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.3361, reshape.3360)
  reshape.3363 = f32[1024]{0} reshape(multiply.3362)
  broadcast.3364 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3363), dimensions={3}
  multiply.3365 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.3349, broadcast.3364)
  parameter.143 = f32[1024]{0} parameter(142)
  reshape.3366 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.143)
  reshape.3367 = f32[1024]{0} reshape(reshape.3366)
  broadcast.3368 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3367), dimensions={3}
  add.3369 = f32[128,14,14,1024]{3,2,1,0} add(multiply.3365, broadcast.3368)
  convert.3370 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3369)
  add.3371 = bf16[128,14,14,1024]{3,2,1,0} add(get-tuple-element.3115, convert.3370)
  constant.3373 = bf16[] constant(0)
  broadcast.3374 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3373), dimensions={}
  maximum.3375 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.3371, broadcast.3374)
  tuple.3376 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.3375)
  get-tuple-element.3377 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.3376), index=0
  convert.3383 = f32[128,14,14,1024]{3,2,1,0} convert(get-tuple-element.3377)
  parameter.211 = f32[1,14,14,1024]{3,2,1,0} parameter(210)
  reshape.3384 = f32[14,14,1024]{2,1,0} reshape(parameter.211)
  broadcast.3385 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3384), dimensions={1,2,3}
  add.3386 = f32[128,14,14,1024]{3,2,1,0} add(convert.3383, broadcast.3385)
  convert.3387 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3386)
  parameter.154 = f32[1,1,1024,256]{3,2,1,0} parameter(153)
  convert.3388 = bf16[1,1,1024,256]{3,2,1,0} convert(parameter.154)
  convolution.3389 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.3387, convert.3388), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3390 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3389)
  constant.3391 = f32[] constant(0)
  reduce.3396 = f32[256]{0} reduce(convert.3390, constant.3391), dimensions={0,1,2}, to_apply=primitive_computation_add.3392
  constant.3397 = s32[] constant(25088)
  convert.3398 = f32[] convert(constant.3397)
  broadcast.3399 = f32[256]{0} broadcast(convert.3398), dimensions={}
  divide.3400 = f32[256]{0} divide(reduce.3396, broadcast.3399)
  reshape.3434 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3400)
  reshape.3435 = f32[256]{0} reshape(reshape.3434)
  broadcast.3436 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3435), dimensions={3}
  subtract.3437 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3390, broadcast.3436)
  multiply.3401 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3390, convert.3390)
  constant.3405 = f32[] constant(0)
  reduce.3410 = f32[256]{0} reduce(multiply.3401, constant.3405), dimensions={0,1,2}, to_apply=primitive_computation_add.3406
  constant.3411 = s32[] constant(25088)
  convert.3412 = f32[] convert(constant.3411)
  broadcast.3413 = f32[256]{0} broadcast(convert.3412), dimensions={}
  divide.3414 = f32[256]{0} divide(reduce.3410, broadcast.3413)
  multiply.3415 = f32[256]{0} multiply(divide.3400, divide.3400)
  subtract.3419 = f32[256]{0} subtract(divide.3414, multiply.3415)
  constant.3438 = f32[] constant(1e-05)
  broadcast.3439 = f32[256]{0} broadcast(constant.3438), dimensions={}
  add.3440 = f32[256]{0} add(subtract.3419, broadcast.3439)
  rsqrt.3441 = f32[256]{0} rsqrt(add.3440)
  broadcast.3449 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3441), dimensions={3}
  parameter.149 = f32[256]{0} parameter(148)
  reshape.3448 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.149)
  multiply.3450 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3449, reshape.3448)
  reshape.3451 = f32[256]{0} reshape(multiply.3450)
  broadcast.3452 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3451), dimensions={3}
  multiply.3453 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3437, broadcast.3452)
  parameter.148 = f32[256]{0} parameter(147)
  reshape.3454 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.148)
  reshape.3455 = f32[256]{0} reshape(reshape.3454)
  broadcast.3456 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3455), dimensions={3}
  add.3457 = f32[128,14,14,256]{3,2,1,0} add(multiply.3453, broadcast.3456)
  convert.3458 = bf16[128,14,14,256]{3,2,1,0} convert(add.3457)
  constant.3460 = bf16[] constant(0)
  broadcast.3461 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3460), dimensions={}
  maximum.3462 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3458, broadcast.3461)
  tuple.3463 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3462)
  get-tuple-element.3464 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3463), index=0
  convert.3470 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.3464)
  parameter.212 = f32[1,14,14,256]{3,2,1,0} parameter(211)
  reshape.3471 = f32[14,14,256]{2,1,0} reshape(parameter.212)
  broadcast.3472 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3471), dimensions={1,2,3}
  add.3473 = f32[128,14,14,256]{3,2,1,0} add(convert.3470, broadcast.3472)
  convert.3474 = bf16[128,14,14,256]{3,2,1,0} convert(add.3473)
  parameter.155 = f32[3,3,256,256]{3,2,1,0} parameter(154)
  convert.3475 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.155)
  convolution.3476 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.3474, convert.3475), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.3477 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3476)
  constant.3478 = f32[] constant(0)
  reduce.3483 = f32[256]{0} reduce(convert.3477, constant.3478), dimensions={0,1,2}, to_apply=primitive_computation_add.3479
  constant.3484 = s32[] constant(25088)
  convert.3485 = f32[] convert(constant.3484)
  broadcast.3486 = f32[256]{0} broadcast(convert.3485), dimensions={}
  divide.3487 = f32[256]{0} divide(reduce.3483, broadcast.3486)
  reshape.3521 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3487)
  reshape.3522 = f32[256]{0} reshape(reshape.3521)
  broadcast.3523 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3522), dimensions={3}
  subtract.3524 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3477, broadcast.3523)
  multiply.3488 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3477, convert.3477)
  constant.3492 = f32[] constant(0)
  reduce.3497 = f32[256]{0} reduce(multiply.3488, constant.3492), dimensions={0,1,2}, to_apply=primitive_computation_add.3493
  constant.3498 = s32[] constant(25088)
  convert.3499 = f32[] convert(constant.3498)
  broadcast.3500 = f32[256]{0} broadcast(convert.3499), dimensions={}
  divide.3501 = f32[256]{0} divide(reduce.3497, broadcast.3500)
  multiply.3502 = f32[256]{0} multiply(divide.3487, divide.3487)
  subtract.3506 = f32[256]{0} subtract(divide.3501, multiply.3502)
  constant.3525 = f32[] constant(1e-05)
  broadcast.3526 = f32[256]{0} broadcast(constant.3525), dimensions={}
  add.3527 = f32[256]{0} add(subtract.3506, broadcast.3526)
  rsqrt.3528 = f32[256]{0} rsqrt(add.3527)
  broadcast.3536 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3528), dimensions={3}
  parameter.151 = f32[256]{0} parameter(150)
  reshape.3535 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.151)
  multiply.3537 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3536, reshape.3535)
  reshape.3538 = f32[256]{0} reshape(multiply.3537)
  broadcast.3539 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3538), dimensions={3}
  multiply.3540 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3524, broadcast.3539)
  parameter.150 = f32[256]{0} parameter(149)
  reshape.3541 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.150)
  reshape.3542 = f32[256]{0} reshape(reshape.3541)
  broadcast.3543 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3542), dimensions={3}
  add.3544 = f32[128,14,14,256]{3,2,1,0} add(multiply.3540, broadcast.3543)
  convert.3545 = bf16[128,14,14,256]{3,2,1,0} convert(add.3544)
  constant.3547 = bf16[] constant(0)
  broadcast.3548 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3547), dimensions={}
  maximum.3549 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3545, broadcast.3548)
  tuple.3550 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3549)
  get-tuple-element.3551 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3550), index=0
  convert.3557 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.3551)
  parameter.213 = f32[1,14,14,256]{3,2,1,0} parameter(212)
  reshape.3558 = f32[14,14,256]{2,1,0} reshape(parameter.213)
  broadcast.3559 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3558), dimensions={1,2,3}
  add.3560 = f32[128,14,14,256]{3,2,1,0} add(convert.3557, broadcast.3559)
  convert.3561 = bf16[128,14,14,256]{3,2,1,0} convert(add.3560)
  parameter.156 = f32[1,1,256,1024]{3,2,1,0} parameter(155)
  convert.3562 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.156)
  convolution.3563 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.3561, convert.3562), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3564 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.3563)
  constant.3565 = f32[] constant(0)
  reduce.3570 = f32[1024]{0} reduce(convert.3564, constant.3565), dimensions={0,1,2}, to_apply=primitive_computation_add.3566
  constant.3571 = s32[] constant(25088)
  convert.3572 = f32[] convert(constant.3571)
  broadcast.3573 = f32[1024]{0} broadcast(convert.3572), dimensions={}
  divide.3574 = f32[1024]{0} divide(reduce.3570, broadcast.3573)
  reshape.3608 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.3574)
  reshape.3609 = f32[1024]{0} reshape(reshape.3608)
  broadcast.3610 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3609), dimensions={3}
  subtract.3611 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.3564, broadcast.3610)
  multiply.3575 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.3564, convert.3564)
  constant.3579 = f32[] constant(0)
  reduce.3584 = f32[1024]{0} reduce(multiply.3575, constant.3579), dimensions={0,1,2}, to_apply=primitive_computation_add.3580
  constant.3585 = s32[] constant(25088)
  convert.3586 = f32[] convert(constant.3585)
  broadcast.3587 = f32[1024]{0} broadcast(convert.3586), dimensions={}
  divide.3588 = f32[1024]{0} divide(reduce.3584, broadcast.3587)
  multiply.3589 = f32[1024]{0} multiply(divide.3574, divide.3574)
  subtract.3593 = f32[1024]{0} subtract(divide.3588, multiply.3589)
  constant.3612 = f32[] constant(1e-05)
  broadcast.3613 = f32[1024]{0} broadcast(constant.3612), dimensions={}
  add.3614 = f32[1024]{0} add(subtract.3593, broadcast.3613)
  rsqrt.3615 = f32[1024]{0} rsqrt(add.3614)
  broadcast.3623 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.3615), dimensions={3}
  parameter.153 = f32[1024]{0} parameter(152)
  reshape.3622 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.153)
  multiply.3624 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.3623, reshape.3622)
  reshape.3625 = f32[1024]{0} reshape(multiply.3624)
  broadcast.3626 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3625), dimensions={3}
  multiply.3627 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.3611, broadcast.3626)
  parameter.152 = f32[1024]{0} parameter(151)
  reshape.3628 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.152)
  reshape.3629 = f32[1024]{0} reshape(reshape.3628)
  broadcast.3630 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3629), dimensions={3}
  add.3631 = f32[128,14,14,1024]{3,2,1,0} add(multiply.3627, broadcast.3630)
  convert.3632 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3631)
  add.3633 = bf16[128,14,14,1024]{3,2,1,0} add(get-tuple-element.3377, convert.3632)
  constant.3635 = bf16[] constant(0)
  broadcast.3636 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3635), dimensions={}
  maximum.3637 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.3633, broadcast.3636)
  tuple.3638 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.3637)
  get-tuple-element.3639 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.3638), index=0
  convert.3645 = f32[128,14,14,1024]{3,2,1,0} convert(get-tuple-element.3639)
  parameter.169 = f32[1,14,14,1024]{3,2,1,0} parameter(168)
  reshape.3646 = f32[14,14,1024]{2,1,0} reshape(parameter.169)
  broadcast.3647 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3646), dimensions={1,2,3}
  add.3648 = f32[128,14,14,1024]{3,2,1,0} add(convert.3645, broadcast.3647)
  convert.3649 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3648)
  parameter.28 = f32[1,1,1024,256]{3,2,1,0} parameter(27)
  convert.3650 = bf16[1,1,1024,256]{3,2,1,0} convert(parameter.28)
  convolution.3651 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.3649, convert.3650), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3652 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3651)
  constant.3653 = f32[] constant(0)
  reduce.3658 = f32[256]{0} reduce(convert.3652, constant.3653), dimensions={0,1,2}, to_apply=primitive_computation_add.3654
  constant.3659 = s32[] constant(25088)
  convert.3660 = f32[] convert(constant.3659)
  broadcast.3661 = f32[256]{0} broadcast(convert.3660), dimensions={}
  divide.3662 = f32[256]{0} divide(reduce.3658, broadcast.3661)
  reshape.3696 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3662)
  reshape.3697 = f32[256]{0} reshape(reshape.3696)
  broadcast.3698 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3697), dimensions={3}
  subtract.3699 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3652, broadcast.3698)
  multiply.3663 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3652, convert.3652)
  constant.3667 = f32[] constant(0)
  reduce.3672 = f32[256]{0} reduce(multiply.3663, constant.3667), dimensions={0,1,2}, to_apply=primitive_computation_add.3668
  constant.3673 = s32[] constant(25088)
  convert.3674 = f32[] convert(constant.3673)
  broadcast.3675 = f32[256]{0} broadcast(convert.3674), dimensions={}
  divide.3676 = f32[256]{0} divide(reduce.3672, broadcast.3675)
  multiply.3677 = f32[256]{0} multiply(divide.3662, divide.3662)
  subtract.3681 = f32[256]{0} subtract(divide.3676, multiply.3677)
  constant.3700 = f32[] constant(1e-05)
  broadcast.3701 = f32[256]{0} broadcast(constant.3700), dimensions={}
  add.3702 = f32[256]{0} add(subtract.3681, broadcast.3701)
  rsqrt.3703 = f32[256]{0} rsqrt(add.3702)
  broadcast.3711 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3703), dimensions={3}
  parameter.23 = f32[256]{0} parameter(22)
  reshape.3710 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.23)
  multiply.3712 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3711, reshape.3710)
  reshape.3713 = f32[256]{0} reshape(multiply.3712)
  broadcast.3714 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3713), dimensions={3}
  multiply.3715 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3699, broadcast.3714)
  parameter.22 = f32[256]{0} parameter(21)
  reshape.3716 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.22)
  reshape.3717 = f32[256]{0} reshape(reshape.3716)
  broadcast.3718 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3717), dimensions={3}
  add.3719 = f32[128,14,14,256]{3,2,1,0} add(multiply.3715, broadcast.3718)
  convert.3720 = bf16[128,14,14,256]{3,2,1,0} convert(add.3719)
  constant.3722 = bf16[] constant(0)
  broadcast.3723 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3722), dimensions={}
  maximum.3724 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3720, broadcast.3723)
  tuple.3725 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3724)
  get-tuple-element.3726 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3725), index=0
  convert.3732 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.3726)
  parameter.170 = f32[1,14,14,256]{3,2,1,0} parameter(169)
  reshape.3733 = f32[14,14,256]{2,1,0} reshape(parameter.170)
  broadcast.3734 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3733), dimensions={1,2,3}
  add.3735 = f32[128,14,14,256]{3,2,1,0} add(convert.3732, broadcast.3734)
  convert.3736 = bf16[128,14,14,256]{3,2,1,0} convert(add.3735)
  parameter.29 = f32[3,3,256,256]{3,2,1,0} parameter(28)
  convert.3737 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.29)
  convolution.3738 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.3736, convert.3737), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.3739 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3738)
  constant.3740 = f32[] constant(0)
  reduce.3745 = f32[256]{0} reduce(convert.3739, constant.3740), dimensions={0,1,2}, to_apply=primitive_computation_add.3741
  constant.3746 = s32[] constant(25088)
  convert.3747 = f32[] convert(constant.3746)
  broadcast.3748 = f32[256]{0} broadcast(convert.3747), dimensions={}
  divide.3749 = f32[256]{0} divide(reduce.3745, broadcast.3748)
  reshape.3783 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3749)
  reshape.3784 = f32[256]{0} reshape(reshape.3783)
  broadcast.3785 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3784), dimensions={3}
  subtract.3786 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3739, broadcast.3785)
  multiply.3750 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3739, convert.3739)
  constant.3754 = f32[] constant(0)
  reduce.3759 = f32[256]{0} reduce(multiply.3750, constant.3754), dimensions={0,1,2}, to_apply=primitive_computation_add.3755
  constant.3760 = s32[] constant(25088)
  convert.3761 = f32[] convert(constant.3760)
  broadcast.3762 = f32[256]{0} broadcast(convert.3761), dimensions={}
  divide.3763 = f32[256]{0} divide(reduce.3759, broadcast.3762)
  multiply.3764 = f32[256]{0} multiply(divide.3749, divide.3749)
  subtract.3768 = f32[256]{0} subtract(divide.3763, multiply.3764)
  constant.3787 = f32[] constant(1e-05)
  broadcast.3788 = f32[256]{0} broadcast(constant.3787), dimensions={}
  add.3789 = f32[256]{0} add(subtract.3768, broadcast.3788)
  rsqrt.3790 = f32[256]{0} rsqrt(add.3789)
  broadcast.3798 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3790), dimensions={3}
  parameter.25 = f32[256]{0} parameter(24)
  reshape.3797 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.25)
  multiply.3799 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3798, reshape.3797)
  reshape.3800 = f32[256]{0} reshape(multiply.3799)
  broadcast.3801 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3800), dimensions={3}
  multiply.3802 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3786, broadcast.3801)
  parameter.24 = f32[256]{0} parameter(23)
  reshape.3803 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.24)
  reshape.3804 = f32[256]{0} reshape(reshape.3803)
  broadcast.3805 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3804), dimensions={3}
  add.3806 = f32[128,14,14,256]{3,2,1,0} add(multiply.3802, broadcast.3805)
  convert.3807 = bf16[128,14,14,256]{3,2,1,0} convert(add.3806)
  constant.3809 = bf16[] constant(0)
  broadcast.3810 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3809), dimensions={}
  maximum.3811 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3807, broadcast.3810)
  tuple.3812 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3811)
  get-tuple-element.3813 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3812), index=0
  convert.3819 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.3813)
  parameter.171 = f32[1,14,14,256]{3,2,1,0} parameter(170)
  reshape.3820 = f32[14,14,256]{2,1,0} reshape(parameter.171)
  broadcast.3821 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3820), dimensions={1,2,3}
  add.3822 = f32[128,14,14,256]{3,2,1,0} add(convert.3819, broadcast.3821)
  convert.3823 = bf16[128,14,14,256]{3,2,1,0} convert(add.3822)
  parameter.30 = f32[1,1,256,1024]{3,2,1,0} parameter(29)
  convert.3824 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.30)
  convolution.3825 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.3823, convert.3824), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3826 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.3825)
  constant.3827 = f32[] constant(0)
  reduce.3832 = f32[1024]{0} reduce(convert.3826, constant.3827), dimensions={0,1,2}, to_apply=primitive_computation_add.3828
  constant.3833 = s32[] constant(25088)
  convert.3834 = f32[] convert(constant.3833)
  broadcast.3835 = f32[1024]{0} broadcast(convert.3834), dimensions={}
  divide.3836 = f32[1024]{0} divide(reduce.3832, broadcast.3835)
  reshape.3870 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.3836)
  reshape.3871 = f32[1024]{0} reshape(reshape.3870)
  broadcast.3872 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3871), dimensions={3}
  subtract.3873 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.3826, broadcast.3872)
  multiply.3837 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.3826, convert.3826)
  constant.3841 = f32[] constant(0)
  reduce.3846 = f32[1024]{0} reduce(multiply.3837, constant.3841), dimensions={0,1,2}, to_apply=primitive_computation_add.3842
  constant.3847 = s32[] constant(25088)
  convert.3848 = f32[] convert(constant.3847)
  broadcast.3849 = f32[1024]{0} broadcast(convert.3848), dimensions={}
  divide.3850 = f32[1024]{0} divide(reduce.3846, broadcast.3849)
  multiply.3851 = f32[1024]{0} multiply(divide.3836, divide.3836)
  subtract.3855 = f32[1024]{0} subtract(divide.3850, multiply.3851)
  constant.3874 = f32[] constant(1e-05)
  broadcast.3875 = f32[1024]{0} broadcast(constant.3874), dimensions={}
  add.3876 = f32[1024]{0} add(subtract.3855, broadcast.3875)
  rsqrt.3877 = f32[1024]{0} rsqrt(add.3876)
  broadcast.3885 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.3877), dimensions={3}
  parameter.27 = f32[1024]{0} parameter(26)
  reshape.3884 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.27)
  multiply.3886 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.3885, reshape.3884)
  reshape.3887 = f32[1024]{0} reshape(multiply.3886)
  broadcast.3888 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3887), dimensions={3}
  multiply.3889 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.3873, broadcast.3888)
  parameter.26 = f32[1024]{0} parameter(25)
  reshape.3890 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.26)
  reshape.3891 = f32[1024]{0} reshape(reshape.3890)
  broadcast.3892 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3891), dimensions={3}
  add.3893 = f32[128,14,14,1024]{3,2,1,0} add(multiply.3889, broadcast.3892)
  convert.3894 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3893)
  add.3895 = bf16[128,14,14,1024]{3,2,1,0} add(get-tuple-element.3639, convert.3894)
  constant.3897 = bf16[] constant(0)
  broadcast.3898 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3897), dimensions={}
  maximum.3899 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.3895, broadcast.3898)
  tuple.3900 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.3899)
  get-tuple-element.3901 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.3900), index=0
  convert.3907 = f32[128,14,14,1024]{3,2,1,0} convert(get-tuple-element.3901)
  parameter.172 = f32[1,14,14,1024]{3,2,1,0} parameter(171)
  reshape.3908 = f32[14,14,1024]{2,1,0} reshape(parameter.172)
  broadcast.3909 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3908), dimensions={1,2,3}
  add.3910 = f32[128,14,14,1024]{3,2,1,0} add(convert.3907, broadcast.3909)
  convert.3911 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3910)
  parameter.37 = f32[1,1,1024,256]{3,2,1,0} parameter(36)
  convert.3912 = bf16[1,1,1024,256]{3,2,1,0} convert(parameter.37)
  convolution.3913 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.3911, convert.3912), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3914 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3913)
  constant.3915 = f32[] constant(0)
  reduce.3920 = f32[256]{0} reduce(convert.3914, constant.3915), dimensions={0,1,2}, to_apply=primitive_computation_add.3916
  constant.3921 = s32[] constant(25088)
  convert.3922 = f32[] convert(constant.3921)
  broadcast.3923 = f32[256]{0} broadcast(convert.3922), dimensions={}
  divide.3924 = f32[256]{0} divide(reduce.3920, broadcast.3923)
  reshape.3958 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3924)
  reshape.3959 = f32[256]{0} reshape(reshape.3958)
  broadcast.3960 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3959), dimensions={3}
  subtract.3961 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3914, broadcast.3960)
  multiply.3925 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3914, convert.3914)
  constant.3929 = f32[] constant(0)
  reduce.3934 = f32[256]{0} reduce(multiply.3925, constant.3929), dimensions={0,1,2}, to_apply=primitive_computation_add.3930
  constant.3935 = s32[] constant(25088)
  convert.3936 = f32[] convert(constant.3935)
  broadcast.3937 = f32[256]{0} broadcast(convert.3936), dimensions={}
  divide.3938 = f32[256]{0} divide(reduce.3934, broadcast.3937)
  multiply.3939 = f32[256]{0} multiply(divide.3924, divide.3924)
  subtract.3943 = f32[256]{0} subtract(divide.3938, multiply.3939)
  constant.3962 = f32[] constant(1e-05)
  broadcast.3963 = f32[256]{0} broadcast(constant.3962), dimensions={}
  add.3964 = f32[256]{0} add(subtract.3943, broadcast.3963)
  rsqrt.3965 = f32[256]{0} rsqrt(add.3964)
  broadcast.3973 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3965), dimensions={3}
  parameter.32 = f32[256]{0} parameter(31)
  reshape.3972 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.32)
  multiply.3974 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3973, reshape.3972)
  reshape.3975 = f32[256]{0} reshape(multiply.3974)
  broadcast.3976 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3975), dimensions={3}
  multiply.3977 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3961, broadcast.3976)
  parameter.31 = f32[256]{0} parameter(30)
  reshape.3978 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.31)
  reshape.3979 = f32[256]{0} reshape(reshape.3978)
  broadcast.3980 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3979), dimensions={3}
  add.3981 = f32[128,14,14,256]{3,2,1,0} add(multiply.3977, broadcast.3980)
  convert.3982 = bf16[128,14,14,256]{3,2,1,0} convert(add.3981)
  constant.3984 = bf16[] constant(0)
  broadcast.3985 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3984), dimensions={}
  maximum.3986 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3982, broadcast.3985)
  tuple.3987 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3986)
  get-tuple-element.3988 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3987), index=0
  convert.3994 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.3988)
  parameter.173 = f32[1,14,14,256]{3,2,1,0} parameter(172)
  reshape.3995 = f32[14,14,256]{2,1,0} reshape(parameter.173)
  broadcast.3996 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3995), dimensions={1,2,3}
  add.3997 = f32[128,14,14,256]{3,2,1,0} add(convert.3994, broadcast.3996)
  convert.3998 = bf16[128,14,14,256]{3,2,1,0} convert(add.3997)
  parameter.38 = f32[3,3,256,256]{3,2,1,0} parameter(37)
  convert.3999 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.38)
  convolution.4000 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.3998, convert.3999), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.4001 = f32[128,14,14,256]{3,2,1,0} convert(convolution.4000)
  constant.4002 = f32[] constant(0)
  reduce.4007 = f32[256]{0} reduce(convert.4001, constant.4002), dimensions={0,1,2}, to_apply=primitive_computation_add.4003
  constant.4008 = s32[] constant(25088)
  convert.4009 = f32[] convert(constant.4008)
  broadcast.4010 = f32[256]{0} broadcast(convert.4009), dimensions={}
  divide.4011 = f32[256]{0} divide(reduce.4007, broadcast.4010)
  reshape.4045 = f32[1,1,1,256]{3,2,1,0} reshape(divide.4011)
  reshape.4046 = f32[256]{0} reshape(reshape.4045)
  broadcast.4047 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4046), dimensions={3}
  subtract.4048 = f32[128,14,14,256]{3,2,1,0} subtract(convert.4001, broadcast.4047)
  multiply.4012 = f32[128,14,14,256]{3,2,1,0} multiply(convert.4001, convert.4001)
  constant.4016 = f32[] constant(0)
  reduce.4021 = f32[256]{0} reduce(multiply.4012, constant.4016), dimensions={0,1,2}, to_apply=primitive_computation_add.4017
  constant.4022 = s32[] constant(25088)
  convert.4023 = f32[] convert(constant.4022)
  broadcast.4024 = f32[256]{0} broadcast(convert.4023), dimensions={}
  divide.4025 = f32[256]{0} divide(reduce.4021, broadcast.4024)
  multiply.4026 = f32[256]{0} multiply(divide.4011, divide.4011)
  subtract.4030 = f32[256]{0} subtract(divide.4025, multiply.4026)
  constant.4049 = f32[] constant(1e-05)
  broadcast.4050 = f32[256]{0} broadcast(constant.4049), dimensions={}
  add.4051 = f32[256]{0} add(subtract.4030, broadcast.4050)
  rsqrt.4052 = f32[256]{0} rsqrt(add.4051)
  broadcast.4060 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.4052), dimensions={3}
  parameter.34 = f32[256]{0} parameter(33)
  reshape.4059 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.34)
  multiply.4061 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.4060, reshape.4059)
  reshape.4062 = f32[256]{0} reshape(multiply.4061)
  broadcast.4063 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4062), dimensions={3}
  multiply.4064 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.4048, broadcast.4063)
  parameter.33 = f32[256]{0} parameter(32)
  reshape.4065 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.33)
  reshape.4066 = f32[256]{0} reshape(reshape.4065)
  broadcast.4067 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4066), dimensions={3}
  add.4068 = f32[128,14,14,256]{3,2,1,0} add(multiply.4064, broadcast.4067)
  convert.4069 = bf16[128,14,14,256]{3,2,1,0} convert(add.4068)
  constant.4071 = bf16[] constant(0)
  broadcast.4072 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4071), dimensions={}
  maximum.4073 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.4069, broadcast.4072)
  tuple.4074 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.4073)
  get-tuple-element.4075 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.4074), index=0
  convert.4081 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.4075)
  parameter.174 = f32[1,14,14,256]{3,2,1,0} parameter(173)
  reshape.4082 = f32[14,14,256]{2,1,0} reshape(parameter.174)
  broadcast.4083 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4082), dimensions={1,2,3}
  add.4084 = f32[128,14,14,256]{3,2,1,0} add(convert.4081, broadcast.4083)
  convert.4085 = bf16[128,14,14,256]{3,2,1,0} convert(add.4084)
  parameter.39 = f32[1,1,256,1024]{3,2,1,0} parameter(38)
  convert.4086 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.39)
  convolution.4087 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.4085, convert.4086), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4088 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.4087)
  constant.4089 = f32[] constant(0)
  reduce.4094 = f32[1024]{0} reduce(convert.4088, constant.4089), dimensions={0,1,2}, to_apply=primitive_computation_add.4090
  constant.4095 = s32[] constant(25088)
  convert.4096 = f32[] convert(constant.4095)
  broadcast.4097 = f32[1024]{0} broadcast(convert.4096), dimensions={}
  divide.4098 = f32[1024]{0} divide(reduce.4094, broadcast.4097)
  reshape.4132 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.4098)
  reshape.4133 = f32[1024]{0} reshape(reshape.4132)
  broadcast.4134 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4133), dimensions={3}
  subtract.4135 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.4088, broadcast.4134)
  multiply.4099 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.4088, convert.4088)
  constant.4103 = f32[] constant(0)
  reduce.4108 = f32[1024]{0} reduce(multiply.4099, constant.4103), dimensions={0,1,2}, to_apply=primitive_computation_add.4104
  constant.4109 = s32[] constant(25088)
  convert.4110 = f32[] convert(constant.4109)
  broadcast.4111 = f32[1024]{0} broadcast(convert.4110), dimensions={}
  divide.4112 = f32[1024]{0} divide(reduce.4108, broadcast.4111)
  multiply.4113 = f32[1024]{0} multiply(divide.4098, divide.4098)
  subtract.4117 = f32[1024]{0} subtract(divide.4112, multiply.4113)
  constant.4136 = f32[] constant(1e-05)
  broadcast.4137 = f32[1024]{0} broadcast(constant.4136), dimensions={}
  add.4138 = f32[1024]{0} add(subtract.4117, broadcast.4137)
  rsqrt.4139 = f32[1024]{0} rsqrt(add.4138)
  broadcast.4147 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.4139), dimensions={3}
  parameter.36 = f32[1024]{0} parameter(35)
  reshape.4146 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.36)
  multiply.4148 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.4147, reshape.4146)
  reshape.4149 = f32[1024]{0} reshape(multiply.4148)
  broadcast.4150 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4149), dimensions={3}
  multiply.4151 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.4135, broadcast.4150)
  parameter.35 = f32[1024]{0} parameter(34)
  reshape.4152 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.35)
  reshape.4153 = f32[1024]{0} reshape(reshape.4152)
  broadcast.4154 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4153), dimensions={3}
  add.4155 = f32[128,14,14,1024]{3,2,1,0} add(multiply.4151, broadcast.4154)
  convert.4156 = bf16[128,14,14,1024]{3,2,1,0} convert(add.4155)
  add.4157 = bf16[128,14,14,1024]{3,2,1,0} add(get-tuple-element.3901, convert.4156)
  constant.4159 = bf16[] constant(0)
  broadcast.4160 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.4159), dimensions={}
  maximum.4161 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.4157, broadcast.4160)
  tuple.4162 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.4161)
  get-tuple-element.4163 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.4162), index=0
  convert.4169 = f32[128,14,14,1024]{3,2,1,0} convert(get-tuple-element.4163)
  parameter.175 = f32[1,14,14,1024]{3,2,1,0} parameter(174)
  reshape.4170 = f32[14,14,1024]{2,1,0} reshape(parameter.175)
  broadcast.4171 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4170), dimensions={1,2,3}
  add.4172 = f32[128,14,14,1024]{3,2,1,0} add(convert.4169, broadcast.4171)
  convert.4173 = bf16[128,14,14,1024]{3,2,1,0} convert(add.4172)
  parameter.46 = f32[1,1,1024,256]{3,2,1,0} parameter(45)
  convert.4174 = bf16[1,1,1024,256]{3,2,1,0} convert(parameter.46)
  convolution.4175 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.4173, convert.4174), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4176 = f32[128,14,14,256]{3,2,1,0} convert(convolution.4175)
  constant.4177 = f32[] constant(0)
  reduce.4182 = f32[256]{0} reduce(convert.4176, constant.4177), dimensions={0,1,2}, to_apply=primitive_computation_add.4178
  constant.4183 = s32[] constant(25088)
  convert.4184 = f32[] convert(constant.4183)
  broadcast.4185 = f32[256]{0} broadcast(convert.4184), dimensions={}
  divide.4186 = f32[256]{0} divide(reduce.4182, broadcast.4185)
  reshape.4220 = f32[1,1,1,256]{3,2,1,0} reshape(divide.4186)
  reshape.4221 = f32[256]{0} reshape(reshape.4220)
  broadcast.4222 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4221), dimensions={3}
  subtract.4223 = f32[128,14,14,256]{3,2,1,0} subtract(convert.4176, broadcast.4222)
  multiply.4187 = f32[128,14,14,256]{3,2,1,0} multiply(convert.4176, convert.4176)
  constant.4191 = f32[] constant(0)
  reduce.4196 = f32[256]{0} reduce(multiply.4187, constant.4191), dimensions={0,1,2}, to_apply=primitive_computation_add.4192
  constant.4197 = s32[] constant(25088)
  convert.4198 = f32[] convert(constant.4197)
  broadcast.4199 = f32[256]{0} broadcast(convert.4198), dimensions={}
  divide.4200 = f32[256]{0} divide(reduce.4196, broadcast.4199)
  multiply.4201 = f32[256]{0} multiply(divide.4186, divide.4186)
  subtract.4205 = f32[256]{0} subtract(divide.4200, multiply.4201)
  constant.4224 = f32[] constant(1e-05)
  broadcast.4225 = f32[256]{0} broadcast(constant.4224), dimensions={}
  add.4226 = f32[256]{0} add(subtract.4205, broadcast.4225)
  rsqrt.4227 = f32[256]{0} rsqrt(add.4226)
  broadcast.4235 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.4227), dimensions={3}
  parameter.41 = f32[256]{0} parameter(40)
  reshape.4234 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.41)
  multiply.4236 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.4235, reshape.4234)
  reshape.4237 = f32[256]{0} reshape(multiply.4236)
  broadcast.4238 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4237), dimensions={3}
  multiply.4239 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.4223, broadcast.4238)
  parameter.40 = f32[256]{0} parameter(39)
  reshape.4240 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.40)
  reshape.4241 = f32[256]{0} reshape(reshape.4240)
  broadcast.4242 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4241), dimensions={3}
  add.4243 = f32[128,14,14,256]{3,2,1,0} add(multiply.4239, broadcast.4242)
  convert.4244 = bf16[128,14,14,256]{3,2,1,0} convert(add.4243)
  constant.4246 = bf16[] constant(0)
  broadcast.4247 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4246), dimensions={}
  maximum.4248 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.4244, broadcast.4247)
  tuple.4249 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.4248)
  get-tuple-element.4250 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.4249), index=0
  convert.4256 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.4250)
  parameter.176 = f32[1,14,14,256]{3,2,1,0} parameter(175)
  reshape.4257 = f32[14,14,256]{2,1,0} reshape(parameter.176)
  broadcast.4258 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4257), dimensions={1,2,3}
  add.4259 = f32[128,14,14,256]{3,2,1,0} add(convert.4256, broadcast.4258)
  convert.4260 = bf16[128,14,14,256]{3,2,1,0} convert(add.4259)
  parameter.47 = f32[3,3,256,256]{3,2,1,0} parameter(46)
  convert.4261 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.47)
  convolution.4262 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.4260, convert.4261), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.4263 = f32[128,14,14,256]{3,2,1,0} convert(convolution.4262)
  constant.4264 = f32[] constant(0)
  reduce.4269 = f32[256]{0} reduce(convert.4263, constant.4264), dimensions={0,1,2}, to_apply=primitive_computation_add.4265
  constant.4270 = s32[] constant(25088)
  convert.4271 = f32[] convert(constant.4270)
  broadcast.4272 = f32[256]{0} broadcast(convert.4271), dimensions={}
  divide.4273 = f32[256]{0} divide(reduce.4269, broadcast.4272)
  reshape.4307 = f32[1,1,1,256]{3,2,1,0} reshape(divide.4273)
  reshape.4308 = f32[256]{0} reshape(reshape.4307)
  broadcast.4309 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4308), dimensions={3}
  subtract.4310 = f32[128,14,14,256]{3,2,1,0} subtract(convert.4263, broadcast.4309)
  multiply.4274 = f32[128,14,14,256]{3,2,1,0} multiply(convert.4263, convert.4263)
  constant.4278 = f32[] constant(0)
  reduce.4283 = f32[256]{0} reduce(multiply.4274, constant.4278), dimensions={0,1,2}, to_apply=primitive_computation_add.4279
  constant.4284 = s32[] constant(25088)
  convert.4285 = f32[] convert(constant.4284)
  broadcast.4286 = f32[256]{0} broadcast(convert.4285), dimensions={}
  divide.4287 = f32[256]{0} divide(reduce.4283, broadcast.4286)
  multiply.4288 = f32[256]{0} multiply(divide.4273, divide.4273)
  subtract.4292 = f32[256]{0} subtract(divide.4287, multiply.4288)
  constant.4311 = f32[] constant(1e-05)
  broadcast.4312 = f32[256]{0} broadcast(constant.4311), dimensions={}
  add.4313 = f32[256]{0} add(subtract.4292, broadcast.4312)
  rsqrt.4314 = f32[256]{0} rsqrt(add.4313)
  broadcast.4322 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.4314), dimensions={3}
  parameter.43 = f32[256]{0} parameter(42)
  reshape.4321 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.43)
  multiply.4323 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.4322, reshape.4321)
  reshape.4324 = f32[256]{0} reshape(multiply.4323)
  broadcast.4325 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4324), dimensions={3}
  multiply.4326 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.4310, broadcast.4325)
  parameter.42 = f32[256]{0} parameter(41)
  reshape.4327 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.42)
  reshape.4328 = f32[256]{0} reshape(reshape.4327)
  broadcast.4329 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4328), dimensions={3}
  add.4330 = f32[128,14,14,256]{3,2,1,0} add(multiply.4326, broadcast.4329)
  convert.4331 = bf16[128,14,14,256]{3,2,1,0} convert(add.4330)
  constant.4333 = bf16[] constant(0)
  broadcast.4334 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4333), dimensions={}
  maximum.4335 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.4331, broadcast.4334)
  tuple.4336 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.4335)
  get-tuple-element.4337 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.4336), index=0
  convert.4343 = f32[128,14,14,256]{3,2,1,0} convert(get-tuple-element.4337)
  parameter.177 = f32[1,14,14,256]{3,2,1,0} parameter(176)
  reshape.4344 = f32[14,14,256]{2,1,0} reshape(parameter.177)
  broadcast.4345 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4344), dimensions={1,2,3}
  add.4346 = f32[128,14,14,256]{3,2,1,0} add(convert.4343, broadcast.4345)
  convert.4347 = bf16[128,14,14,256]{3,2,1,0} convert(add.4346)
  parameter.48 = f32[1,1,256,1024]{3,2,1,0} parameter(47)
  convert.4348 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.48)
  convolution.4349 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.4347, convert.4348), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4350 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.4349)
  constant.4351 = f32[] constant(0)
  reduce.4356 = f32[1024]{0} reduce(convert.4350, constant.4351), dimensions={0,1,2}, to_apply=primitive_computation_add.4352
  constant.4357 = s32[] constant(25088)
  convert.4358 = f32[] convert(constant.4357)
  broadcast.4359 = f32[1024]{0} broadcast(convert.4358), dimensions={}
  divide.4360 = f32[1024]{0} divide(reduce.4356, broadcast.4359)
  reshape.4394 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.4360)
  reshape.4395 = f32[1024]{0} reshape(reshape.4394)
  broadcast.4396 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4395), dimensions={3}
  subtract.4397 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.4350, broadcast.4396)
  multiply.4361 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.4350, convert.4350)
  constant.4365 = f32[] constant(0)
  reduce.4370 = f32[1024]{0} reduce(multiply.4361, constant.4365), dimensions={0,1,2}, to_apply=primitive_computation_add.4366
  constant.4371 = s32[] constant(25088)
  convert.4372 = f32[] convert(constant.4371)
  broadcast.4373 = f32[1024]{0} broadcast(convert.4372), dimensions={}
  divide.4374 = f32[1024]{0} divide(reduce.4370, broadcast.4373)
  multiply.4375 = f32[1024]{0} multiply(divide.4360, divide.4360)
  subtract.4379 = f32[1024]{0} subtract(divide.4374, multiply.4375)
  constant.4398 = f32[] constant(1e-05)
  broadcast.4399 = f32[1024]{0} broadcast(constant.4398), dimensions={}
  add.4400 = f32[1024]{0} add(subtract.4379, broadcast.4399)
  rsqrt.4401 = f32[1024]{0} rsqrt(add.4400)
  broadcast.4409 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.4401), dimensions={3}
  parameter.45 = f32[1024]{0} parameter(44)
  reshape.4408 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.45)
  multiply.4410 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.4409, reshape.4408)
  reshape.4411 = f32[1024]{0} reshape(multiply.4410)
  broadcast.4412 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4411), dimensions={3}
  multiply.4413 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.4397, broadcast.4412)
  parameter.44 = f32[1024]{0} parameter(43)
  reshape.4414 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.44)
  reshape.4415 = f32[1024]{0} reshape(reshape.4414)
  broadcast.4416 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4415), dimensions={3}
  add.4417 = f32[128,14,14,1024]{3,2,1,0} add(multiply.4413, broadcast.4416)
  convert.4418 = bf16[128,14,14,1024]{3,2,1,0} convert(add.4417)
  add.4419 = bf16[128,14,14,1024]{3,2,1,0} add(get-tuple-element.4163, convert.4418)
  constant.4421 = bf16[] constant(0)
  broadcast.4422 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.4421), dimensions={}
  maximum.4423 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.4419, broadcast.4422)
  tuple.4424 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.4423)
  get-tuple-element.4425 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.4424), index=0
  convert.4681 = f32[128,14,14,1024]{3,2,1,0} convert(get-tuple-element.4425)
  parameter.181 = f32[1,14,14,1024]{3,2,1,0} parameter(180)
  reshape.4682 = f32[14,14,1024]{2,1,0} reshape(parameter.181)
  broadcast.4683 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4682), dimensions={1,2,3}
  add.4684 = f32[128,14,14,1024]{3,2,1,0} add(convert.4681, broadcast.4683)
  convert.4685 = bf16[128,14,14,1024]{3,2,1,0} convert(add.4684)
  parameter.58 = f32[1,1,1024,2048]{3,2,1,0} parameter(57)
  convert.4686 = bf16[1,1,1024,2048]{3,2,1,0} convert(parameter.58)
  convolution.4687 = bf16[128,7,7,2048]{3,2,1,0} convolution(convert.4685, convert.4686), window={size=1x1 stride=2x2}, dim_labels=b01f_01io->b01f
  convert.4688 = f32[128,7,7,2048]{3,2,1,0} convert(convolution.4687)
  constant.4689 = f32[] constant(0)
  reduce.4694 = f32[2048]{0} reduce(convert.4688, constant.4689), dimensions={0,1,2}, to_apply=primitive_computation_add.4690
  constant.4695 = s32[] constant(6272)
  convert.4696 = f32[] convert(constant.4695)
  broadcast.4697 = f32[2048]{0} broadcast(convert.4696), dimensions={}
  divide.4698 = f32[2048]{0} divide(reduce.4694, broadcast.4697)
  reshape.4732 = f32[1,1,1,2048]{3,2,1,0} reshape(divide.4698)
  reshape.4733 = f32[2048]{0} reshape(reshape.4732)
  broadcast.4734 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4733), dimensions={3}
  subtract.4735 = f32[128,7,7,2048]{3,2,1,0} subtract(convert.4688, broadcast.4734)
  multiply.4699 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.4688, convert.4688)
  constant.4703 = f32[] constant(0)
  reduce.4708 = f32[2048]{0} reduce(multiply.4699, constant.4703), dimensions={0,1,2}, to_apply=primitive_computation_add.4704
  constant.4709 = s32[] constant(6272)
  convert.4710 = f32[] convert(constant.4709)
  broadcast.4711 = f32[2048]{0} broadcast(convert.4710), dimensions={}
  divide.4712 = f32[2048]{0} divide(reduce.4708, broadcast.4711)
  multiply.4713 = f32[2048]{0} multiply(divide.4698, divide.4698)
  subtract.4717 = f32[2048]{0} subtract(divide.4712, multiply.4713)
  constant.4736 = f32[] constant(1e-05)
  broadcast.4737 = f32[2048]{0} broadcast(constant.4736), dimensions={}
  add.4738 = f32[2048]{0} add(subtract.4717, broadcast.4737)
  rsqrt.4739 = f32[2048]{0} rsqrt(add.4738)
  broadcast.4747 = f32[1,1,1,2048]{3,2,1,0} broadcast(rsqrt.4739), dimensions={3}
  parameter.60 = f32[2048]{0} parameter(59)
  reshape.4746 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.60)
  multiply.4748 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.4747, reshape.4746)
  reshape.4749 = f32[2048]{0} reshape(multiply.4748)
  broadcast.4750 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4749), dimensions={3}
  multiply.4751 = f32[128,7,7,2048]{3,2,1,0} multiply(subtract.4735, broadcast.4750)
  parameter.59 = f32[2048]{0} parameter(58)
  reshape.4752 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.59)
  reshape.4753 = f32[2048]{0} reshape(reshape.4752)
  broadcast.4754 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4753), dimensions={3}
  add.4755 = f32[128,7,7,2048]{3,2,1,0} add(multiply.4751, broadcast.4754)
  convert.4756 = bf16[128,7,7,2048]{3,2,1,0} convert(add.4755)
  convert.4431 = f32[128,14,14,1024]{3,2,1,0} convert(get-tuple-element.4425)
  parameter.178 = f32[1,14,14,1024]{3,2,1,0} parameter(177)
  reshape.4432 = f32[14,14,1024]{2,1,0} reshape(parameter.178)
  broadcast.4433 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4432), dimensions={1,2,3}
  add.4434 = f32[128,14,14,1024]{3,2,1,0} add(convert.4431, broadcast.4433)
  convert.4435 = bf16[128,14,14,1024]{3,2,1,0} convert(add.4434)
  parameter.55 = f32[1,1,1024,512]{3,2,1,0} parameter(54)
  convert.4436 = bf16[1,1,1024,512]{3,2,1,0} convert(parameter.55)
  convolution.4437 = bf16[128,14,14,512]{3,2,1,0} convolution(convert.4435, convert.4436), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4438 = f32[128,14,14,512]{3,2,1,0} convert(convolution.4437)
  constant.4439 = f32[] constant(0)
  reduce.4444 = f32[512]{0} reduce(convert.4438, constant.4439), dimensions={0,1,2}, to_apply=primitive_computation_add.4440
  constant.4445 = s32[] constant(25088)
  convert.4446 = f32[] convert(constant.4445)
  broadcast.4447 = f32[512]{0} broadcast(convert.4446), dimensions={}
  divide.4448 = f32[512]{0} divide(reduce.4444, broadcast.4447)
  reshape.4482 = f32[1,1,1,512]{3,2,1,0} reshape(divide.4448)
  reshape.4483 = f32[512]{0} reshape(reshape.4482)
  broadcast.4484 = f32[128,14,14,512]{3,2,1,0} broadcast(reshape.4483), dimensions={3}
  subtract.4485 = f32[128,14,14,512]{3,2,1,0} subtract(convert.4438, broadcast.4484)
  multiply.4449 = f32[128,14,14,512]{3,2,1,0} multiply(convert.4438, convert.4438)
  constant.4453 = f32[] constant(0)
  reduce.4458 = f32[512]{0} reduce(multiply.4449, constant.4453), dimensions={0,1,2}, to_apply=primitive_computation_add.4454
  constant.4459 = s32[] constant(25088)
  convert.4460 = f32[] convert(constant.4459)
  broadcast.4461 = f32[512]{0} broadcast(convert.4460), dimensions={}
  divide.4462 = f32[512]{0} divide(reduce.4458, broadcast.4461)
  multiply.4463 = f32[512]{0} multiply(divide.4448, divide.4448)
  subtract.4467 = f32[512]{0} subtract(divide.4462, multiply.4463)
  constant.4486 = f32[] constant(1e-05)
  broadcast.4487 = f32[512]{0} broadcast(constant.4486), dimensions={}
  add.4488 = f32[512]{0} add(subtract.4467, broadcast.4487)
  rsqrt.4489 = f32[512]{0} rsqrt(add.4488)
  broadcast.4497 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.4489), dimensions={3}
  parameter.50 = f32[512]{0} parameter(49)
  reshape.4496 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.50)
  multiply.4498 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.4497, reshape.4496)
  reshape.4499 = f32[512]{0} reshape(multiply.4498)
  broadcast.4500 = f32[128,14,14,512]{3,2,1,0} broadcast(reshape.4499), dimensions={3}
  multiply.4501 = f32[128,14,14,512]{3,2,1,0} multiply(subtract.4485, broadcast.4500)
  parameter.49 = f32[512]{0} parameter(48)
  reshape.4502 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.49)
  reshape.4503 = f32[512]{0} reshape(reshape.4502)
  broadcast.4504 = f32[128,14,14,512]{3,2,1,0} broadcast(reshape.4503), dimensions={3}
  add.4505 = f32[128,14,14,512]{3,2,1,0} add(multiply.4501, broadcast.4504)
  convert.4506 = bf16[128,14,14,512]{3,2,1,0} convert(add.4505)
  constant.4508 = bf16[] constant(0)
  broadcast.4509 = bf16[128,14,14,512]{3,2,1,0} broadcast(constant.4508), dimensions={}
  maximum.4510 = bf16[128,14,14,512]{3,2,1,0} maximum(convert.4506, broadcast.4509)
  tuple.4511 = (bf16[128,14,14,512]{3,2,1,0}) tuple(maximum.4510)
  get-tuple-element.4512 = bf16[128,14,14,512]{3,2,1,0} get-tuple-element(tuple.4511), index=0
  convert.4518 = f32[128,14,14,512]{3,2,1,0} convert(get-tuple-element.4512)
  parameter.179 = f32[1,14,14,512]{3,2,1,0} parameter(178)
  reshape.4519 = f32[14,14,512]{2,1,0} reshape(parameter.179)
  broadcast.4520 = f32[128,14,14,512]{3,2,1,0} broadcast(reshape.4519), dimensions={1,2,3}
  add.4521 = f32[128,14,14,512]{3,2,1,0} add(convert.4518, broadcast.4520)
  convert.4522 = bf16[128,14,14,512]{3,2,1,0} convert(add.4521)
  parameter.56 = f32[3,3,512,512]{3,2,1,0} parameter(55)
  convert.4523 = bf16[3,3,512,512]{3,2,1,0} convert(parameter.56)
  convolution.4524 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.4522, convert.4523), window={size=3x3 stride=2x2 pad=0_1x0_1}, dim_labels=b01f_01io->b01f
  convert.4525 = f32[128,7,7,512]{3,2,1,0} convert(convolution.4524)
  constant.4526 = f32[] constant(0)
  reduce.4531 = f32[512]{0} reduce(convert.4525, constant.4526), dimensions={0,1,2}, to_apply=primitive_computation_add.4527
  constant.4532 = s32[] constant(6272)
  convert.4533 = f32[] convert(constant.4532)
  broadcast.4534 = f32[512]{0} broadcast(convert.4533), dimensions={}
  divide.4535 = f32[512]{0} divide(reduce.4531, broadcast.4534)
  reshape.4569 = f32[1,1,1,512]{3,2,1,0} reshape(divide.4535)
  reshape.4570 = f32[512]{0} reshape(reshape.4569)
  broadcast.4571 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4570), dimensions={3}
  subtract.4572 = f32[128,7,7,512]{3,2,1,0} subtract(convert.4525, broadcast.4571)
  multiply.4536 = f32[128,7,7,512]{3,2,1,0} multiply(convert.4525, convert.4525)
  constant.4540 = f32[] constant(0)
  reduce.4545 = f32[512]{0} reduce(multiply.4536, constant.4540), dimensions={0,1,2}, to_apply=primitive_computation_add.4541
  constant.4546 = s32[] constant(6272)
  convert.4547 = f32[] convert(constant.4546)
  broadcast.4548 = f32[512]{0} broadcast(convert.4547), dimensions={}
  divide.4549 = f32[512]{0} divide(reduce.4545, broadcast.4548)
  multiply.4550 = f32[512]{0} multiply(divide.4535, divide.4535)
  subtract.4554 = f32[512]{0} subtract(divide.4549, multiply.4550)
  constant.4573 = f32[] constant(1e-05)
  broadcast.4574 = f32[512]{0} broadcast(constant.4573), dimensions={}
  add.4575 = f32[512]{0} add(subtract.4554, broadcast.4574)
  rsqrt.4576 = f32[512]{0} rsqrt(add.4575)
  broadcast.4584 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.4576), dimensions={3}
  parameter.52 = f32[512]{0} parameter(51)
  reshape.4583 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.52)
  multiply.4585 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.4584, reshape.4583)
  reshape.4586 = f32[512]{0} reshape(multiply.4585)
  broadcast.4587 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4586), dimensions={3}
  multiply.4588 = f32[128,7,7,512]{3,2,1,0} multiply(subtract.4572, broadcast.4587)
  parameter.51 = f32[512]{0} parameter(50)
  reshape.4589 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.51)
  reshape.4590 = f32[512]{0} reshape(reshape.4589)
  broadcast.4591 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4590), dimensions={3}
  add.4592 = f32[128,7,7,512]{3,2,1,0} add(multiply.4588, broadcast.4591)
  convert.4593 = bf16[128,7,7,512]{3,2,1,0} convert(add.4592)
  constant.4595 = bf16[] constant(0)
  broadcast.4596 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4595), dimensions={}
  maximum.4597 = bf16[128,7,7,512]{3,2,1,0} maximum(convert.4593, broadcast.4596)
  tuple.4598 = (bf16[128,7,7,512]{3,2,1,0}) tuple(maximum.4597)
  get-tuple-element.4599 = bf16[128,7,7,512]{3,2,1,0} get-tuple-element(tuple.4598), index=0
  convert.4605 = f32[128,7,7,512]{3,2,1,0} convert(get-tuple-element.4599)
  parameter.180 = f32[1,7,7,512]{3,2,1,0} parameter(179)
  reshape.4606 = f32[7,7,512]{2,1,0} reshape(parameter.180)
  broadcast.4607 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4606), dimensions={1,2,3}
  add.4608 = f32[128,7,7,512]{3,2,1,0} add(convert.4605, broadcast.4607)
  convert.4609 = bf16[128,7,7,512]{3,2,1,0} convert(add.4608)
  parameter.57 = f32[1,1,512,2048]{3,2,1,0} parameter(56)
  convert.4610 = bf16[1,1,512,2048]{3,2,1,0} convert(parameter.57)
  convolution.4611 = bf16[128,7,7,2048]{3,2,1,0} convolution(convert.4609, convert.4610), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4612 = f32[128,7,7,2048]{3,2,1,0} convert(convolution.4611)
  constant.4613 = f32[] constant(0)
  reduce.4618 = f32[2048]{0} reduce(convert.4612, constant.4613), dimensions={0,1,2}, to_apply=primitive_computation_add.4614
  constant.4619 = s32[] constant(6272)
  convert.4620 = f32[] convert(constant.4619)
  broadcast.4621 = f32[2048]{0} broadcast(convert.4620), dimensions={}
  divide.4622 = f32[2048]{0} divide(reduce.4618, broadcast.4621)
  reshape.4656 = f32[1,1,1,2048]{3,2,1,0} reshape(divide.4622)
  reshape.4657 = f32[2048]{0} reshape(reshape.4656)
  broadcast.4658 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4657), dimensions={3}
  subtract.4659 = f32[128,7,7,2048]{3,2,1,0} subtract(convert.4612, broadcast.4658)
  multiply.4623 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.4612, convert.4612)
  constant.4627 = f32[] constant(0)
  reduce.4632 = f32[2048]{0} reduce(multiply.4623, constant.4627), dimensions={0,1,2}, to_apply=primitive_computation_add.4628
  constant.4633 = s32[] constant(6272)
  convert.4634 = f32[] convert(constant.4633)
  broadcast.4635 = f32[2048]{0} broadcast(convert.4634), dimensions={}
  divide.4636 = f32[2048]{0} divide(reduce.4632, broadcast.4635)
  multiply.4637 = f32[2048]{0} multiply(divide.4622, divide.4622)
  subtract.4641 = f32[2048]{0} subtract(divide.4636, multiply.4637)
  constant.4660 = f32[] constant(1e-05)
  broadcast.4661 = f32[2048]{0} broadcast(constant.4660), dimensions={}
  add.4662 = f32[2048]{0} add(subtract.4641, broadcast.4661)
  rsqrt.4663 = f32[2048]{0} rsqrt(add.4662)
  broadcast.4671 = f32[1,1,1,2048]{3,2,1,0} broadcast(rsqrt.4663), dimensions={3}
  parameter.54 = f32[2048]{0} parameter(53)
  reshape.4670 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.54)
  multiply.4672 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.4671, reshape.4670)
  reshape.4673 = f32[2048]{0} reshape(multiply.4672)
  broadcast.4674 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4673), dimensions={3}
  multiply.4675 = f32[128,7,7,2048]{3,2,1,0} multiply(subtract.4659, broadcast.4674)
  parameter.53 = f32[2048]{0} parameter(52)
  reshape.4676 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.53)
  reshape.4677 = f32[2048]{0} reshape(reshape.4676)
  broadcast.4678 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4677), dimensions={3}
  add.4679 = f32[128,7,7,2048]{3,2,1,0} add(multiply.4675, broadcast.4678)
  convert.4680 = bf16[128,7,7,2048]{3,2,1,0} convert(add.4679)
  add.4757 = bf16[128,7,7,2048]{3,2,1,0} add(convert.4756, convert.4680)
  constant.4759 = bf16[] constant(0)
  broadcast.4760 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4759), dimensions={}
  maximum.4761 = bf16[128,7,7,2048]{3,2,1,0} maximum(add.4757, broadcast.4760)
  tuple.4762 = (bf16[128,7,7,2048]{3,2,1,0}) tuple(maximum.4761)
  get-tuple-element.4763 = bf16[128,7,7,2048]{3,2,1,0} get-tuple-element(tuple.4762), index=0
  convert.4769 = f32[128,7,7,2048]{3,2,1,0} convert(get-tuple-element.4763)
  parameter.182 = f32[1,7,7,2048]{3,2,1,0} parameter(181)
  reshape.4770 = f32[7,7,2048]{2,1,0} reshape(parameter.182)
  broadcast.4771 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4770), dimensions={1,2,3}
  add.4772 = f32[128,7,7,2048]{3,2,1,0} add(convert.4769, broadcast.4771)
  convert.4773 = bf16[128,7,7,2048]{3,2,1,0} convert(add.4772)
  parameter.67 = f32[1,1,2048,512]{3,2,1,0} parameter(66)
  convert.4774 = bf16[1,1,2048,512]{3,2,1,0} convert(parameter.67)
  convolution.4775 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.4773, convert.4774), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4776 = f32[128,7,7,512]{3,2,1,0} convert(convolution.4775)
  constant.4777 = f32[] constant(0)
  reduce.4782 = f32[512]{0} reduce(convert.4776, constant.4777), dimensions={0,1,2}, to_apply=primitive_computation_add.4778
  constant.4783 = s32[] constant(6272)
  convert.4784 = f32[] convert(constant.4783)
  broadcast.4785 = f32[512]{0} broadcast(convert.4784), dimensions={}
  divide.4786 = f32[512]{0} divide(reduce.4782, broadcast.4785)
  reshape.4820 = f32[1,1,1,512]{3,2,1,0} reshape(divide.4786)
  reshape.4821 = f32[512]{0} reshape(reshape.4820)
  broadcast.4822 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4821), dimensions={3}
  subtract.4823 = f32[128,7,7,512]{3,2,1,0} subtract(convert.4776, broadcast.4822)
  multiply.4787 = f32[128,7,7,512]{3,2,1,0} multiply(convert.4776, convert.4776)
  constant.4791 = f32[] constant(0)
  reduce.4796 = f32[512]{0} reduce(multiply.4787, constant.4791), dimensions={0,1,2}, to_apply=primitive_computation_add.4792
  constant.4797 = s32[] constant(6272)
  convert.4798 = f32[] convert(constant.4797)
  broadcast.4799 = f32[512]{0} broadcast(convert.4798), dimensions={}
  divide.4800 = f32[512]{0} divide(reduce.4796, broadcast.4799)
  multiply.4801 = f32[512]{0} multiply(divide.4786, divide.4786)
  subtract.4805 = f32[512]{0} subtract(divide.4800, multiply.4801)
  constant.4824 = f32[] constant(1e-05)
  broadcast.4825 = f32[512]{0} broadcast(constant.4824), dimensions={}
  add.4826 = f32[512]{0} add(subtract.4805, broadcast.4825)
  rsqrt.4827 = f32[512]{0} rsqrt(add.4826)
  broadcast.4835 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.4827), dimensions={3}
  parameter.62 = f32[512]{0} parameter(61)
  reshape.4834 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.62)
  multiply.4836 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.4835, reshape.4834)
  reshape.4837 = f32[512]{0} reshape(multiply.4836)
  broadcast.4838 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4837), dimensions={3}
  multiply.4839 = f32[128,7,7,512]{3,2,1,0} multiply(subtract.4823, broadcast.4838)
  parameter.61 = f32[512]{0} parameter(60)
  reshape.4840 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.61)
  reshape.4841 = f32[512]{0} reshape(reshape.4840)
  broadcast.4842 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4841), dimensions={3}
  add.4843 = f32[128,7,7,512]{3,2,1,0} add(multiply.4839, broadcast.4842)
  convert.4844 = bf16[128,7,7,512]{3,2,1,0} convert(add.4843)
  constant.4846 = bf16[] constant(0)
  broadcast.4847 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4846), dimensions={}
  maximum.4848 = bf16[128,7,7,512]{3,2,1,0} maximum(convert.4844, broadcast.4847)
  tuple.4849 = (bf16[128,7,7,512]{3,2,1,0}) tuple(maximum.4848)
  get-tuple-element.4850 = bf16[128,7,7,512]{3,2,1,0} get-tuple-element(tuple.4849), index=0
  convert.4856 = f32[128,7,7,512]{3,2,1,0} convert(get-tuple-element.4850)
  parameter.183 = f32[1,7,7,512]{3,2,1,0} parameter(182)
  reshape.4857 = f32[7,7,512]{2,1,0} reshape(parameter.183)
  broadcast.4858 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4857), dimensions={1,2,3}
  add.4859 = f32[128,7,7,512]{3,2,1,0} add(convert.4856, broadcast.4858)
  convert.4860 = bf16[128,7,7,512]{3,2,1,0} convert(add.4859)
  parameter.68 = f32[3,3,512,512]{3,2,1,0} parameter(67)
  convert.4861 = bf16[3,3,512,512]{3,2,1,0} convert(parameter.68)
  convolution.4862 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.4860, convert.4861), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.4863 = f32[128,7,7,512]{3,2,1,0} convert(convolution.4862)
  constant.4864 = f32[] constant(0)
  reduce.4869 = f32[512]{0} reduce(convert.4863, constant.4864), dimensions={0,1,2}, to_apply=primitive_computation_add.4865
  constant.4870 = s32[] constant(6272)
  convert.4871 = f32[] convert(constant.4870)
  broadcast.4872 = f32[512]{0} broadcast(convert.4871), dimensions={}
  divide.4873 = f32[512]{0} divide(reduce.4869, broadcast.4872)
  reshape.4907 = f32[1,1,1,512]{3,2,1,0} reshape(divide.4873)
  reshape.4908 = f32[512]{0} reshape(reshape.4907)
  broadcast.4909 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4908), dimensions={3}
  subtract.4910 = f32[128,7,7,512]{3,2,1,0} subtract(convert.4863, broadcast.4909)
  multiply.4874 = f32[128,7,7,512]{3,2,1,0} multiply(convert.4863, convert.4863)
  constant.4878 = f32[] constant(0)
  reduce.4883 = f32[512]{0} reduce(multiply.4874, constant.4878), dimensions={0,1,2}, to_apply=primitive_computation_add.4879
  constant.4884 = s32[] constant(6272)
  convert.4885 = f32[] convert(constant.4884)
  broadcast.4886 = f32[512]{0} broadcast(convert.4885), dimensions={}
  divide.4887 = f32[512]{0} divide(reduce.4883, broadcast.4886)
  multiply.4888 = f32[512]{0} multiply(divide.4873, divide.4873)
  subtract.4892 = f32[512]{0} subtract(divide.4887, multiply.4888)
  constant.4911 = f32[] constant(1e-05)
  broadcast.4912 = f32[512]{0} broadcast(constant.4911), dimensions={}
  add.4913 = f32[512]{0} add(subtract.4892, broadcast.4912)
  rsqrt.4914 = f32[512]{0} rsqrt(add.4913)
  broadcast.4922 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.4914), dimensions={3}
  parameter.64 = f32[512]{0} parameter(63)
  reshape.4921 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.64)
  multiply.4923 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.4922, reshape.4921)
  reshape.4924 = f32[512]{0} reshape(multiply.4923)
  broadcast.4925 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4924), dimensions={3}
  multiply.4926 = f32[128,7,7,512]{3,2,1,0} multiply(subtract.4910, broadcast.4925)
  parameter.63 = f32[512]{0} parameter(62)
  reshape.4927 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.63)
  reshape.4928 = f32[512]{0} reshape(reshape.4927)
  broadcast.4929 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4928), dimensions={3}
  add.4930 = f32[128,7,7,512]{3,2,1,0} add(multiply.4926, broadcast.4929)
  convert.4931 = bf16[128,7,7,512]{3,2,1,0} convert(add.4930)
  constant.4933 = bf16[] constant(0)
  broadcast.4934 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4933), dimensions={}
  maximum.4935 = bf16[128,7,7,512]{3,2,1,0} maximum(convert.4931, broadcast.4934)
  tuple.4936 = (bf16[128,7,7,512]{3,2,1,0}) tuple(maximum.4935)
  get-tuple-element.4937 = bf16[128,7,7,512]{3,2,1,0} get-tuple-element(tuple.4936), index=0
  convert.4943 = f32[128,7,7,512]{3,2,1,0} convert(get-tuple-element.4937)
  parameter.184 = f32[1,7,7,512]{3,2,1,0} parameter(183)
  reshape.4944 = f32[7,7,512]{2,1,0} reshape(parameter.184)
  broadcast.4945 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4944), dimensions={1,2,3}
  add.4946 = f32[128,7,7,512]{3,2,1,0} add(convert.4943, broadcast.4945)
  convert.4947 = bf16[128,7,7,512]{3,2,1,0} convert(add.4946)
  parameter.69 = f32[1,1,512,2048]{3,2,1,0} parameter(68)
  convert.4948 = bf16[1,1,512,2048]{3,2,1,0} convert(parameter.69)
  convolution.4949 = bf16[128,7,7,2048]{3,2,1,0} convolution(convert.4947, convert.4948), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4950 = f32[128,7,7,2048]{3,2,1,0} convert(convolution.4949)
  constant.4951 = f32[] constant(0)
  reduce.4956 = f32[2048]{0} reduce(convert.4950, constant.4951), dimensions={0,1,2}, to_apply=primitive_computation_add.4952
  constant.4957 = s32[] constant(6272)
  convert.4958 = f32[] convert(constant.4957)
  broadcast.4959 = f32[2048]{0} broadcast(convert.4958), dimensions={}
  divide.4960 = f32[2048]{0} divide(reduce.4956, broadcast.4959)
  reshape.4994 = f32[1,1,1,2048]{3,2,1,0} reshape(divide.4960)
  reshape.4995 = f32[2048]{0} reshape(reshape.4994)
  broadcast.4996 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4995), dimensions={3}
  subtract.4997 = f32[128,7,7,2048]{3,2,1,0} subtract(convert.4950, broadcast.4996)
  multiply.4961 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.4950, convert.4950)
  constant.4965 = f32[] constant(0)
  reduce.4970 = f32[2048]{0} reduce(multiply.4961, constant.4965), dimensions={0,1,2}, to_apply=primitive_computation_add.4966
  constant.4971 = s32[] constant(6272)
  convert.4972 = f32[] convert(constant.4971)
  broadcast.4973 = f32[2048]{0} broadcast(convert.4972), dimensions={}
  divide.4974 = f32[2048]{0} divide(reduce.4970, broadcast.4973)
  multiply.4975 = f32[2048]{0} multiply(divide.4960, divide.4960)
  subtract.4979 = f32[2048]{0} subtract(divide.4974, multiply.4975)
  constant.4998 = f32[] constant(1e-05)
  broadcast.4999 = f32[2048]{0} broadcast(constant.4998), dimensions={}
  add.5000 = f32[2048]{0} add(subtract.4979, broadcast.4999)
  rsqrt.5001 = f32[2048]{0} rsqrt(add.5000)
  broadcast.5009 = f32[1,1,1,2048]{3,2,1,0} broadcast(rsqrt.5001), dimensions={3}
  parameter.66 = f32[2048]{0} parameter(65)
  reshape.5008 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.66)
  multiply.5010 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.5009, reshape.5008)
  reshape.5011 = f32[2048]{0} reshape(multiply.5010)
  broadcast.5012 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.5011), dimensions={3}
  multiply.5013 = f32[128,7,7,2048]{3,2,1,0} multiply(subtract.4997, broadcast.5012)
  parameter.65 = f32[2048]{0} parameter(64)
  reshape.5014 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.65)
  reshape.5015 = f32[2048]{0} reshape(reshape.5014)
  broadcast.5016 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.5015), dimensions={3}
  add.5017 = f32[128,7,7,2048]{3,2,1,0} add(multiply.5013, broadcast.5016)
  convert.5018 = bf16[128,7,7,2048]{3,2,1,0} convert(add.5017)
  add.5019 = bf16[128,7,7,2048]{3,2,1,0} add(get-tuple-element.4763, convert.5018)
  constant.5021 = bf16[] constant(0)
  broadcast.5022 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.5021), dimensions={}
  maximum.5023 = bf16[128,7,7,2048]{3,2,1,0} maximum(add.5019, broadcast.5022)
  tuple.5024 = (bf16[128,7,7,2048]{3,2,1,0}) tuple(maximum.5023)
  get-tuple-element.5025 = bf16[128,7,7,2048]{3,2,1,0} get-tuple-element(tuple.5024), index=0
  convert.5031 = f32[128,7,7,2048]{3,2,1,0} convert(get-tuple-element.5025)
  parameter.185 = f32[1,7,7,2048]{3,2,1,0} parameter(184)
  reshape.5032 = f32[7,7,2048]{2,1,0} reshape(parameter.185)
  broadcast.5033 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.5032), dimensions={1,2,3}
  add.5034 = f32[128,7,7,2048]{3,2,1,0} add(convert.5031, broadcast.5033)
  convert.5035 = bf16[128,7,7,2048]{3,2,1,0} convert(add.5034)
  parameter.76 = f32[1,1,2048,512]{3,2,1,0} parameter(75)
  convert.5036 = bf16[1,1,2048,512]{3,2,1,0} convert(parameter.76)
  convolution.5037 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.5035, convert.5036), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.5038 = f32[128,7,7,512]{3,2,1,0} convert(convolution.5037)
  constant.5039 = f32[] constant(0)
  reduce.5044 = f32[512]{0} reduce(convert.5038, constant.5039), dimensions={0,1,2}, to_apply=primitive_computation_add.5040
  constant.5045 = s32[] constant(6272)
  convert.5046 = f32[] convert(constant.5045)
  broadcast.5047 = f32[512]{0} broadcast(convert.5046), dimensions={}
  divide.5048 = f32[512]{0} divide(reduce.5044, broadcast.5047)
  reshape.5082 = f32[1,1,1,512]{3,2,1,0} reshape(divide.5048)
  reshape.5083 = f32[512]{0} reshape(reshape.5082)
  broadcast.5084 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.5083), dimensions={3}
  subtract.5085 = f32[128,7,7,512]{3,2,1,0} subtract(convert.5038, broadcast.5084)
  multiply.5049 = f32[128,7,7,512]{3,2,1,0} multiply(convert.5038, convert.5038)
  constant.5053 = f32[] constant(0)
  reduce.5058 = f32[512]{0} reduce(multiply.5049, constant.5053), dimensions={0,1,2}, to_apply=primitive_computation_add.5054
  constant.5059 = s32[] constant(6272)
  convert.5060 = f32[] convert(constant.5059)
  broadcast.5061 = f32[512]{0} broadcast(convert.5060), dimensions={}
  divide.5062 = f32[512]{0} divide(reduce.5058, broadcast.5061)
  multiply.5063 = f32[512]{0} multiply(divide.5048, divide.5048)
  subtract.5067 = f32[512]{0} subtract(divide.5062, multiply.5063)
  constant.5086 = f32[] constant(1e-05)
  broadcast.5087 = f32[512]{0} broadcast(constant.5086), dimensions={}
  add.5088 = f32[512]{0} add(subtract.5067, broadcast.5087)
  rsqrt.5089 = f32[512]{0} rsqrt(add.5088)
  broadcast.5097 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.5089), dimensions={3}
  parameter.71 = f32[512]{0} parameter(70)
  reshape.5096 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.71)
  multiply.5098 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.5097, reshape.5096)
  reshape.5099 = f32[512]{0} reshape(multiply.5098)
  broadcast.5100 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.5099), dimensions={3}
  multiply.5101 = f32[128,7,7,512]{3,2,1,0} multiply(subtract.5085, broadcast.5100)
  parameter.70 = f32[512]{0} parameter(69)
  reshape.5102 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.70)
  reshape.5103 = f32[512]{0} reshape(reshape.5102)
  broadcast.5104 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.5103), dimensions={3}
  add.5105 = f32[128,7,7,512]{3,2,1,0} add(multiply.5101, broadcast.5104)
  convert.5106 = bf16[128,7,7,512]{3,2,1,0} convert(add.5105)
  constant.5108 = bf16[] constant(0)
  broadcast.5109 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.5108), dimensions={}
  maximum.5110 = bf16[128,7,7,512]{3,2,1,0} maximum(convert.5106, broadcast.5109)
  tuple.5111 = (bf16[128,7,7,512]{3,2,1,0}) tuple(maximum.5110)
  get-tuple-element.5112 = bf16[128,7,7,512]{3,2,1,0} get-tuple-element(tuple.5111), index=0
  convert.5118 = f32[128,7,7,512]{3,2,1,0} convert(get-tuple-element.5112)
  parameter.186 = f32[1,7,7,512]{3,2,1,0} parameter(185)
  reshape.5119 = f32[7,7,512]{2,1,0} reshape(parameter.186)
  broadcast.5120 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.5119), dimensions={1,2,3}
  add.5121 = f32[128,7,7,512]{3,2,1,0} add(convert.5118, broadcast.5120)
  convert.5122 = bf16[128,7,7,512]{3,2,1,0} convert(add.5121)
  parameter.77 = f32[3,3,512,512]{3,2,1,0} parameter(76)
  convert.5123 = bf16[3,3,512,512]{3,2,1,0} convert(parameter.77)
  convolution.5124 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.5122, convert.5123), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.5125 = f32[128,7,7,512]{3,2,1,0} convert(convolution.5124)
  constant.5126 = f32[] constant(0)
  reduce.5131 = f32[512]{0} reduce(convert.5125, constant.5126), dimensions={0,1,2}, to_apply=primitive_computation_add.5127
  constant.5132 = s32[] constant(6272)
  convert.5133 = f32[] convert(constant.5132)
  broadcast.5134 = f32[512]{0} broadcast(convert.5133), dimensions={}
  divide.5135 = f32[512]{0} divide(reduce.5131, broadcast.5134)
  reshape.5169 = f32[1,1,1,512]{3,2,1,0} reshape(divide.5135)
  reshape.5170 = f32[512]{0} reshape(reshape.5169)
  broadcast.5171 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.5170), dimensions={3}
  subtract.5172 = f32[128,7,7,512]{3,2,1,0} subtract(convert.5125, broadcast.5171)
  multiply.5136 = f32[128,7,7,512]{3,2,1,0} multiply(convert.5125, convert.5125)
  constant.5140 = f32[] constant(0)
  reduce.5145 = f32[512]{0} reduce(multiply.5136, constant.5140), dimensions={0,1,2}, to_apply=primitive_computation_add.5141
  constant.5146 = s32[] constant(6272)
  convert.5147 = f32[] convert(constant.5146)
  broadcast.5148 = f32[512]{0} broadcast(convert.5147), dimensions={}
  divide.5149 = f32[512]{0} divide(reduce.5145, broadcast.5148)
  multiply.5150 = f32[512]{0} multiply(divide.5135, divide.5135)
  subtract.5154 = f32[512]{0} subtract(divide.5149, multiply.5150)
  constant.5173 = f32[] constant(1e-05)
  broadcast.5174 = f32[512]{0} broadcast(constant.5173), dimensions={}
  add.5175 = f32[512]{0} add(subtract.5154, broadcast.5174)
  rsqrt.5176 = f32[512]{0} rsqrt(add.5175)
  broadcast.5184 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.5176), dimensions={3}
  parameter.73 = f32[512]{0} parameter(72)
  reshape.5183 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.73)
  multiply.5185 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.5184, reshape.5183)
  reshape.5186 = f32[512]{0} reshape(multiply.5185)
  broadcast.5187 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.5186), dimensions={3}
  multiply.5188 = f32[128,7,7,512]{3,2,1,0} multiply(subtract.5172, broadcast.5187)
  parameter.72 = f32[512]{0} parameter(71)
  reshape.5189 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.72)
  reshape.5190 = f32[512]{0} reshape(reshape.5189)
  broadcast.5191 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.5190), dimensions={3}
  add.5192 = f32[128,7,7,512]{3,2,1,0} add(multiply.5188, broadcast.5191)
  convert.5193 = bf16[128,7,7,512]{3,2,1,0} convert(add.5192)
  constant.5195 = bf16[] constant(0)
  broadcast.5196 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.5195), dimensions={}
  maximum.5197 = bf16[128,7,7,512]{3,2,1,0} maximum(convert.5193, broadcast.5196)
  tuple.5198 = (bf16[128,7,7,512]{3,2,1,0}) tuple(maximum.5197)
  get-tuple-element.5199 = bf16[128,7,7,512]{3,2,1,0} get-tuple-element(tuple.5198), index=0
  convert.5205 = f32[128,7,7,512]{3,2,1,0} convert(get-tuple-element.5199)
  parameter.187 = f32[1,7,7,512]{3,2,1,0} parameter(186)
  reshape.5206 = f32[7,7,512]{2,1,0} reshape(parameter.187)
  broadcast.5207 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.5206), dimensions={1,2,3}
  add.5208 = f32[128,7,7,512]{3,2,1,0} add(convert.5205, broadcast.5207)
  convert.5209 = bf16[128,7,7,512]{3,2,1,0} convert(add.5208)
  parameter.78 = f32[1,1,512,2048]{3,2,1,0} parameter(77)
  convert.5210 = bf16[1,1,512,2048]{3,2,1,0} convert(parameter.78)
  convolution.5211 = bf16[128,7,7,2048]{3,2,1,0} convolution(convert.5209, convert.5210), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.5212 = f32[128,7,7,2048]{3,2,1,0} convert(convolution.5211)
  constant.5213 = f32[] constant(0)
  reduce.5218 = f32[2048]{0} reduce(convert.5212, constant.5213), dimensions={0,1,2}, to_apply=primitive_computation_add.5214
  constant.5219 = s32[] constant(6272)
  convert.5220 = f32[] convert(constant.5219)
  broadcast.5221 = f32[2048]{0} broadcast(convert.5220), dimensions={}
  divide.5222 = f32[2048]{0} divide(reduce.5218, broadcast.5221)
  reshape.5256 = f32[1,1,1,2048]{3,2,1,0} reshape(divide.5222)
  reshape.5257 = f32[2048]{0} reshape(reshape.5256)
  broadcast.5258 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.5257), dimensions={3}
  subtract.5259 = f32[128,7,7,2048]{3,2,1,0} subtract(convert.5212, broadcast.5258)
  multiply.5223 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.5212, convert.5212)
  constant.5227 = f32[] constant(0)
  reduce.5232 = f32[2048]{0} reduce(multiply.5223, constant.5227), dimensions={0,1,2}, to_apply=primitive_computation_add.5228
  constant.5233 = s32[] constant(6272)
  convert.5234 = f32[] convert(constant.5233)
  broadcast.5235 = f32[2048]{0} broadcast(convert.5234), dimensions={}
  divide.5236 = f32[2048]{0} divide(reduce.5232, broadcast.5235)
  multiply.5237 = f32[2048]{0} multiply(divide.5222, divide.5222)
  subtract.5241 = f32[2048]{0} subtract(divide.5236, multiply.5237)
  constant.5260 = f32[] constant(1e-05)
  broadcast.5261 = f32[2048]{0} broadcast(constant.5260), dimensions={}
  add.5262 = f32[2048]{0} add(subtract.5241, broadcast.5261)
  rsqrt.5263 = f32[2048]{0} rsqrt(add.5262)
  broadcast.5271 = f32[1,1,1,2048]{3,2,1,0} broadcast(rsqrt.5263), dimensions={3}
  parameter.75 = f32[2048]{0} parameter(74)
  reshape.5270 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.75)
  multiply.5272 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.5271, reshape.5270)
  reshape.5273 = f32[2048]{0} reshape(multiply.5272)
  broadcast.5274 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.5273), dimensions={3}
  multiply.5275 = f32[128,7,7,2048]{3,2,1,0} multiply(subtract.5259, broadcast.5274)
  parameter.74 = f32[2048]{0} parameter(73)
  reshape.5276 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.74)
  reshape.5277 = f32[2048]{0} reshape(reshape.5276)
  broadcast.5278 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.5277), dimensions={3}
  add.5279 = f32[128,7,7,2048]{3,2,1,0} add(multiply.5275, broadcast.5278)
  convert.5280 = bf16[128,7,7,2048]{3,2,1,0} convert(add.5279)
  add.5281 = bf16[128,7,7,2048]{3,2,1,0} add(get-tuple-element.5025, convert.5280)
  constant.5283 = bf16[] constant(0)
  broadcast.5284 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.5283), dimensions={}
  maximum.5285 = bf16[128,7,7,2048]{3,2,1,0} maximum(add.5281, broadcast.5284)
  tuple.5286 = (bf16[128,7,7,2048]{3,2,1,0}) tuple(maximum.5285)
  get-tuple-element.5287 = bf16[128,7,7,2048]{3,2,1,0} get-tuple-element(tuple.5286), index=0
  convert.5293 = f32[128,7,7,2048]{3,2,1,0} convert(get-tuple-element.5287)
  constant.5294 = f32[] constant(0)
  reduce.5299 = f32[128,2048]{1,0} reduce(convert.5293, constant.5294), dimensions={1,2}, to_apply=primitive_computation_add.5295
  convert.5300 = bf16[128,2048]{1,0} convert(reduce.5299)
  constant.5301 = s32[] constant(49)
  convert.5302 = bf16[] convert(constant.5301)
  broadcast.5303 = bf16[128,2048]{1,0} broadcast(convert.5302), dimensions={}
  divide.5304 = bf16[128,2048]{1,0} divide(convert.5300, broadcast.5303)
  convert.5305 = f32[128,2048]{1,0} convert(divide.5304)
  parameter.215 = f32[1,2048]{1,0} parameter(214)
  reshape.5306 = f32[2048]{0} reshape(parameter.215)
  broadcast.5307 = f32[128,2048]{1,0} broadcast(reshape.5306), dimensions={1}
  add.5308 = f32[128,2048]{1,0} add(convert.5305, broadcast.5307)
  convert.5309 = bf16[128,2048]{1,0} convert(add.5308)
  parameter.158 = f32[2048,1000]{1,0} parameter(157)
  convert.5310 = bf16[2048,1000]{1,0} convert(parameter.158)
  dot.5311 = bf16[128,1000]{1,0} dot(convert.5309, convert.5310), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  parameter.157 = f32[1000]{0} parameter(156)
  convert.5312 = bf16[1000]{0} convert(parameter.157)
  broadcast.5313 = bf16[1,1000]{1,0} broadcast(convert.5312), dimensions={1}
  reshape.5314 = bf16[1000]{0} reshape(broadcast.5313)
  broadcast.5315 = bf16[128,1000]{1,0} broadcast(reshape.5314), dimensions={1}
  add.5316 = bf16[128,1000]{1,0} add(dot.5311, broadcast.5315)
  convert.5317 = f32[128,1000]{1,0} convert(add.5316)
  parameter.216 = f32[1,1000]{1,0} parameter(215)
  reshape.5318 = f32[1000]{0} reshape(parameter.216)
  broadcast.5319 = f32[128,1000]{1,0} broadcast(reshape.5318), dimensions={1}
  add.5320 = f32[128,1000]{1,0} add(convert.5317, broadcast.5319)
  constant.5321 = f32[] constant(-inf)
  reduce.5326 = f32[128]{0} reduce(add.5320, constant.5321), dimensions={1}, to_apply=primitive_computation_max__1.5322
  reshape.5327 = f32[128,1]{1,0} reshape(reduce.5326)
  reshape.5328 = f32[128]{0} reshape(reshape.5327)
  broadcast.5329 = f32[128,1000]{1,0} broadcast(reshape.5328), dimensions={0}
  compare.5330 = pred[128,1000]{1,0} compare(add.5320, broadcast.5329), direction=EQ
  convert.5331 = f32[128,1000]{1,0} convert(compare.5330)
  constant.5332 = f32[] constant(0)
  reduce.5337 = f32[128]{0} reduce(convert.5331, constant.5332), dimensions={1}, to_apply=primitive_computation_add.5333
  parameter.218 = s32[128]{0} parameter(217)
  broadcast.5354 = s32[128,1]{1,0} broadcast(parameter.218), dimensions={0}
  reshape.5357 = s32[128]{0} reshape(broadcast.5354)
  broadcast.5358 = s32[128,1000]{1,0} broadcast(reshape.5357), dimensions={0}
  iota.5355 = s32[1000] iota(), iota_dimension=0
  broadcast.5356 = s32[1,1000]{1,0} broadcast(iota.5355), dimensions={1}
  reshape.5359 = s32[1000]{0} reshape(broadcast.5356)
  broadcast.5360 = s32[128,1000]{1,0} broadcast(reshape.5359), dimensions={1}
  compare.5361 = pred[128,1000]{1,0} compare(broadcast.5358, broadcast.5360), direction=EQ
  constant.5362 = f32[] constant(1)
  broadcast.5363 = f32[128,1000]{1,0} broadcast(constant.5362), dimensions={}
  constant.5364 = f32[] constant(0)
  broadcast.5365 = f32[128,1000]{1,0} broadcast(constant.5364), dimensions={}
  select.5366 = f32[128,1000]{1,0} select(compare.5361, broadcast.5363, broadcast.5365)
  broadcast.5338 = f32[128,1]{1,0} broadcast(reduce.5326), dimensions={0}
  reshape.5339 = f32[128]{0} reshape(broadcast.5338)
  broadcast.5340 = f32[128,1000]{1,0} broadcast(reshape.5339), dimensions={0}
  subtract.5341 = f32[128,1000]{1,0} subtract(add.5320, broadcast.5340)
  exponential.5342 = f32[128,1000]{1,0} exponential(subtract.5341)
  constant.5343 = f32[] constant(0)
  reduce.5348 = f32[128]{0} reduce(exponential.5342, constant.5343), dimensions={1}, to_apply=primitive_computation_add.5344
  broadcast.5349 = f32[128,1]{1,0} broadcast(reduce.5348), dimensions={0}
  log.5350 = f32[128,1]{1,0} log(broadcast.5349)
  reshape.5351 = f32[128]{0} reshape(log.5350)
  broadcast.5352 = f32[128,1000]{1,0} broadcast(reshape.5351), dimensions={0}
  subtract.5353 = f32[128,1000]{1,0} subtract(subtract.5341, broadcast.5352)
  multiply.5367 = f32[128,1000]{1,0} multiply(select.5366, subtract.5353)
  constant.5368 = f32[] constant(0)
  reduce.5373 = f32[] reduce(multiply.5367, constant.5368), dimensions={0,1}, to_apply=primitive_computation_add.5369
  negate.5374 = f32[] negate(reduce.5373)
  constant.5375 = f32[] constant(128)
  divide.5376 = f32[] divide(negate.5374, constant.5375)
  multiply.5377 = f32[1,1,64,64]{3,2,1,0} multiply(parameter.7, parameter.7)
  constant.5381 = f32[] constant(0)
  reduce.5386 = f32[] reduce(multiply.5377, constant.5381), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5382
  constant.5917 = f32[] constant(0)
  add.5918 = f32[] add(reduce.5386, constant.5917)
  multiply.5387 = f32[3,3,64,64]{3,2,1,0} multiply(parameter.8, parameter.8)
  constant.5391 = f32[] constant(0)
  reduce.5396 = f32[] reduce(multiply.5387, constant.5391), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5392
  add.5919 = f32[] add(add.5918, reduce.5396)
  multiply.5397 = f32[1,1,64,256]{3,2,1,0} multiply(parameter.9, parameter.9)
  constant.5401 = f32[] constant(0)
  reduce.5406 = f32[] reduce(multiply.5397, constant.5401), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5402
  add.5920 = f32[] add(add.5919, reduce.5406)
  multiply.5407 = f32[1,1,64,256]{3,2,1,0} multiply(parameter.10, parameter.10)
  constant.5411 = f32[] constant(0)
  reduce.5416 = f32[] reduce(multiply.5407, constant.5411), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5412
  add.5921 = f32[] add(add.5920, reduce.5416)
  multiply.5417 = f32[1,1,256,64]{3,2,1,0} multiply(parameter.19, parameter.19)
  constant.5421 = f32[] constant(0)
  reduce.5426 = f32[] reduce(multiply.5417, constant.5421), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5422
  add.5922 = f32[] add(add.5921, reduce.5426)
  multiply.5427 = f32[3,3,64,64]{3,2,1,0} multiply(parameter.20, parameter.20)
  constant.5431 = f32[] constant(0)
  reduce.5436 = f32[] reduce(multiply.5427, constant.5431), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5432
  add.5923 = f32[] add(add.5922, reduce.5436)
  multiply.5437 = f32[1,1,64,256]{3,2,1,0} multiply(parameter.21, parameter.21)
  constant.5441 = f32[] constant(0)
  reduce.5446 = f32[] reduce(multiply.5437, constant.5441), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5442
  add.5924 = f32[] add(add.5923, reduce.5446)
  multiply.5447 = f32[1,1,1024,256]{3,2,1,0} multiply(parameter.28, parameter.28)
  constant.5451 = f32[] constant(0)
  reduce.5456 = f32[] reduce(multiply.5447, constant.5451), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5452
  add.5925 = f32[] add(add.5924, reduce.5456)
  multiply.5457 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.29, parameter.29)
  constant.5461 = f32[] constant(0)
  reduce.5466 = f32[] reduce(multiply.5457, constant.5461), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5462
  add.5926 = f32[] add(add.5925, reduce.5466)
  multiply.5467 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.30, parameter.30)
  constant.5471 = f32[] constant(0)
  reduce.5476 = f32[] reduce(multiply.5467, constant.5471), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5472
  add.5927 = f32[] add(add.5926, reduce.5476)
  multiply.5477 = f32[1,1,1024,256]{3,2,1,0} multiply(parameter.37, parameter.37)
  constant.5481 = f32[] constant(0)
  reduce.5486 = f32[] reduce(multiply.5477, constant.5481), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5482
  add.5928 = f32[] add(add.5927, reduce.5486)
  multiply.5487 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.38, parameter.38)
  constant.5491 = f32[] constant(0)
  reduce.5496 = f32[] reduce(multiply.5487, constant.5491), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5492
  add.5929 = f32[] add(add.5928, reduce.5496)
  multiply.5497 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.39, parameter.39)
  constant.5501 = f32[] constant(0)
  reduce.5506 = f32[] reduce(multiply.5497, constant.5501), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5502
  add.5930 = f32[] add(add.5929, reduce.5506)
  multiply.5507 = f32[1,1,1024,256]{3,2,1,0} multiply(parameter.46, parameter.46)
  constant.5511 = f32[] constant(0)
  reduce.5516 = f32[] reduce(multiply.5507, constant.5511), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5512
  add.5931 = f32[] add(add.5930, reduce.5516)
  multiply.5517 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.47, parameter.47)
  constant.5521 = f32[] constant(0)
  reduce.5526 = f32[] reduce(multiply.5517, constant.5521), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5522
  add.5932 = f32[] add(add.5931, reduce.5526)
  multiply.5527 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.48, parameter.48)
  constant.5531 = f32[] constant(0)
  reduce.5536 = f32[] reduce(multiply.5527, constant.5531), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5532
  add.5933 = f32[] add(add.5932, reduce.5536)
  multiply.5537 = f32[1,1,1024,512]{3,2,1,0} multiply(parameter.55, parameter.55)
  constant.5541 = f32[] constant(0)
  reduce.5546 = f32[] reduce(multiply.5537, constant.5541), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5542
  add.5934 = f32[] add(add.5933, reduce.5546)
  multiply.5547 = f32[3,3,512,512]{3,2,1,0} multiply(parameter.56, parameter.56)
  constant.5551 = f32[] constant(0)
  reduce.5556 = f32[] reduce(multiply.5547, constant.5551), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5552
  add.5935 = f32[] add(add.5934, reduce.5556)
  multiply.5557 = f32[1,1,512,2048]{3,2,1,0} multiply(parameter.57, parameter.57)
  constant.5561 = f32[] constant(0)
  reduce.5566 = f32[] reduce(multiply.5557, constant.5561), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5562
  add.5936 = f32[] add(add.5935, reduce.5566)
  multiply.5567 = f32[1,1,1024,2048]{3,2,1,0} multiply(parameter.58, parameter.58)
  constant.5571 = f32[] constant(0)
  reduce.5576 = f32[] reduce(multiply.5567, constant.5571), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5572
  add.5937 = f32[] add(add.5936, reduce.5576)
  multiply.5577 = f32[1,1,2048,512]{3,2,1,0} multiply(parameter.67, parameter.67)
  constant.5581 = f32[] constant(0)
  reduce.5586 = f32[] reduce(multiply.5577, constant.5581), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5582
  add.5938 = f32[] add(add.5937, reduce.5586)
  multiply.5587 = f32[3,3,512,512]{3,2,1,0} multiply(parameter.68, parameter.68)
  constant.5591 = f32[] constant(0)
  reduce.5596 = f32[] reduce(multiply.5587, constant.5591), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5592
  add.5939 = f32[] add(add.5938, reduce.5596)
  multiply.5597 = f32[1,1,512,2048]{3,2,1,0} multiply(parameter.69, parameter.69)
  constant.5601 = f32[] constant(0)
  reduce.5606 = f32[] reduce(multiply.5597, constant.5601), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5602
  add.5940 = f32[] add(add.5939, reduce.5606)
  multiply.5607 = f32[1,1,2048,512]{3,2,1,0} multiply(parameter.76, parameter.76)
  constant.5611 = f32[] constant(0)
  reduce.5616 = f32[] reduce(multiply.5607, constant.5611), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5612
  add.5941 = f32[] add(add.5940, reduce.5616)
  multiply.5617 = f32[3,3,512,512]{3,2,1,0} multiply(parameter.77, parameter.77)
  constant.5621 = f32[] constant(0)
  reduce.5626 = f32[] reduce(multiply.5617, constant.5621), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5622
  add.5942 = f32[] add(add.5941, reduce.5626)
  multiply.5627 = f32[1,1,512,2048]{3,2,1,0} multiply(parameter.78, parameter.78)
  constant.5631 = f32[] constant(0)
  reduce.5636 = f32[] reduce(multiply.5627, constant.5631), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5632
  add.5943 = f32[] add(add.5942, reduce.5636)
  multiply.5637 = f32[1,1,256,64]{3,2,1,0} multiply(parameter.85, parameter.85)
  constant.5641 = f32[] constant(0)
  reduce.5646 = f32[] reduce(multiply.5637, constant.5641), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5642
  add.5944 = f32[] add(add.5943, reduce.5646)
  multiply.5647 = f32[3,3,64,64]{3,2,1,0} multiply(parameter.86, parameter.86)
  constant.5651 = f32[] constant(0)
  reduce.5656 = f32[] reduce(multiply.5647, constant.5651), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5652
  add.5945 = f32[] add(add.5944, reduce.5656)
  multiply.5657 = f32[1,1,64,256]{3,2,1,0} multiply(parameter.87, parameter.87)
  constant.5661 = f32[] constant(0)
  reduce.5666 = f32[] reduce(multiply.5657, constant.5661), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5662
  add.5946 = f32[] add(add.5945, reduce.5666)
  multiply.5667 = f32[1,1,256,128]{3,2,1,0} multiply(parameter.94, parameter.94)
  constant.5671 = f32[] constant(0)
  reduce.5676 = f32[] reduce(multiply.5667, constant.5671), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5672
  add.5947 = f32[] add(add.5946, reduce.5676)
  multiply.5677 = f32[3,3,128,128]{3,2,1,0} multiply(parameter.95, parameter.95)
  constant.5681 = f32[] constant(0)
  reduce.5686 = f32[] reduce(multiply.5677, constant.5681), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5682
  add.5948 = f32[] add(add.5947, reduce.5686)
  multiply.5687 = f32[1,1,128,512]{3,2,1,0} multiply(parameter.96, parameter.96)
  constant.5691 = f32[] constant(0)
  reduce.5696 = f32[] reduce(multiply.5687, constant.5691), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5692
  add.5949 = f32[] add(add.5948, reduce.5696)
  multiply.5697 = f32[1,1,256,512]{3,2,1,0} multiply(parameter.97, parameter.97)
  constant.5701 = f32[] constant(0)
  reduce.5706 = f32[] reduce(multiply.5697, constant.5701), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5702
  add.5950 = f32[] add(add.5949, reduce.5706)
  multiply.5707 = f32[1,1,512,128]{3,2,1,0} multiply(parameter.106, parameter.106)
  constant.5711 = f32[] constant(0)
  reduce.5716 = f32[] reduce(multiply.5707, constant.5711), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5712
  add.5951 = f32[] add(add.5950, reduce.5716)
  multiply.5717 = f32[3,3,128,128]{3,2,1,0} multiply(parameter.107, parameter.107)
  constant.5721 = f32[] constant(0)
  reduce.5726 = f32[] reduce(multiply.5717, constant.5721), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5722
  add.5952 = f32[] add(add.5951, reduce.5726)
  multiply.5727 = f32[1,1,128,512]{3,2,1,0} multiply(parameter.108, parameter.108)
  constant.5731 = f32[] constant(0)
  reduce.5736 = f32[] reduce(multiply.5727, constant.5731), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5732
  add.5953 = f32[] add(add.5952, reduce.5736)
  multiply.5737 = f32[1,1,512,128]{3,2,1,0} multiply(parameter.115, parameter.115)
  constant.5741 = f32[] constant(0)
  reduce.5746 = f32[] reduce(multiply.5737, constant.5741), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5742
  add.5954 = f32[] add(add.5953, reduce.5746)
  multiply.5747 = f32[3,3,128,128]{3,2,1,0} multiply(parameter.116, parameter.116)
  constant.5751 = f32[] constant(0)
  reduce.5756 = f32[] reduce(multiply.5747, constant.5751), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5752
  add.5955 = f32[] add(add.5954, reduce.5756)
  multiply.5757 = f32[1,1,128,512]{3,2,1,0} multiply(parameter.117, parameter.117)
  constant.5761 = f32[] constant(0)
  reduce.5766 = f32[] reduce(multiply.5757, constant.5761), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5762
  add.5956 = f32[] add(add.5955, reduce.5766)
  multiply.5767 = f32[1,1,512,128]{3,2,1,0} multiply(parameter.124, parameter.124)
  constant.5771 = f32[] constant(0)
  reduce.5776 = f32[] reduce(multiply.5767, constant.5771), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5772
  add.5957 = f32[] add(add.5956, reduce.5776)
  multiply.5777 = f32[3,3,128,128]{3,2,1,0} multiply(parameter.125, parameter.125)
  constant.5781 = f32[] constant(0)
  reduce.5786 = f32[] reduce(multiply.5777, constant.5781), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5782
  add.5958 = f32[] add(add.5957, reduce.5786)
  multiply.5787 = f32[1,1,128,512]{3,2,1,0} multiply(parameter.126, parameter.126)
  constant.5791 = f32[] constant(0)
  reduce.5796 = f32[] reduce(multiply.5787, constant.5791), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5792
  add.5959 = f32[] add(add.5958, reduce.5796)
  multiply.5797 = f32[1,1,512,256]{3,2,1,0} multiply(parameter.133, parameter.133)
  constant.5801 = f32[] constant(0)
  reduce.5806 = f32[] reduce(multiply.5797, constant.5801), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5802
  add.5960 = f32[] add(add.5959, reduce.5806)
  multiply.5807 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.134, parameter.134)
  constant.5811 = f32[] constant(0)
  reduce.5816 = f32[] reduce(multiply.5807, constant.5811), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5812
  add.5961 = f32[] add(add.5960, reduce.5816)
  multiply.5817 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.135, parameter.135)
  constant.5821 = f32[] constant(0)
  reduce.5826 = f32[] reduce(multiply.5817, constant.5821), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5822
  add.5962 = f32[] add(add.5961, reduce.5826)
  multiply.5827 = f32[1,1,512,1024]{3,2,1,0} multiply(parameter.136, parameter.136)
  constant.5831 = f32[] constant(0)
  reduce.5836 = f32[] reduce(multiply.5827, constant.5831), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5832
  add.5963 = f32[] add(add.5962, reduce.5836)
  multiply.5837 = f32[1,1,1024,256]{3,2,1,0} multiply(parameter.145, parameter.145)
  constant.5841 = f32[] constant(0)
  reduce.5846 = f32[] reduce(multiply.5837, constant.5841), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5842
  add.5964 = f32[] add(add.5963, reduce.5846)
  multiply.5847 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.146, parameter.146)
  constant.5851 = f32[] constant(0)
  reduce.5856 = f32[] reduce(multiply.5847, constant.5851), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5852
  add.5965 = f32[] add(add.5964, reduce.5856)
  multiply.5857 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.147, parameter.147)
  constant.5861 = f32[] constant(0)
  reduce.5866 = f32[] reduce(multiply.5857, constant.5861), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5862
  add.5966 = f32[] add(add.5965, reduce.5866)
  multiply.5867 = f32[1,1,1024,256]{3,2,1,0} multiply(parameter.154, parameter.154)
  constant.5871 = f32[] constant(0)
  reduce.5876 = f32[] reduce(multiply.5867, constant.5871), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5872
  add.5967 = f32[] add(add.5966, reduce.5876)
  multiply.5877 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.155, parameter.155)
  constant.5881 = f32[] constant(0)
  reduce.5886 = f32[] reduce(multiply.5877, constant.5881), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5882
  add.5968 = f32[] add(add.5967, reduce.5886)
  multiply.5887 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.156, parameter.156)
  constant.5891 = f32[] constant(0)
  reduce.5896 = f32[] reduce(multiply.5887, constant.5891), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5892
  add.5969 = f32[] add(add.5968, reduce.5896)
  multiply.5897 = f32[2048,1000]{1,0} multiply(parameter.158, parameter.158)
  constant.5901 = f32[] constant(0)
  reduce.5906 = f32[] reduce(multiply.5897, constant.5901), dimensions={0,1}, to_apply=primitive_computation_add.5902
  add.5970 = f32[] add(add.5969, reduce.5906)
  multiply.5907 = f32[7,7,3,64]{3,2,1,0} multiply(parameter.161, parameter.161)
  constant.5911 = f32[] constant(0)
  reduce.5916 = f32[] reduce(multiply.5907, constant.5911), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5912
  add.5971 = f32[] add(add.5970, reduce.5916)
  constant.5972 = f32[] constant(5e-05)
  multiply.5973 = f32[] multiply(add.5971, constant.5972)
  add.5974 = f32[] add(divide.5376, multiply.5973)
  parameter.543 = f32[64]{0} parameter(542)
  constant.834 = f32[] constant(0.9)
  broadcast.835 = f32[64]{0} broadcast(constant.834), dimensions={}
  multiply.836 = f32[64]{0} multiply(parameter.543, broadcast.835)
  constant.837 = f32[] constant(0.1)
  broadcast.838 = f32[64]{0} broadcast(constant.837), dimensions={}
  multiply.839 = f32[64]{0} multiply(divide.814, broadcast.838)
  add.840 = f32[64]{0} add(multiply.836, multiply.839)
  parameter.544 = f32[64]{0} parameter(543)
  constant.841 = f32[] constant(0.9)
  broadcast.842 = f32[64]{0} broadcast(constant.841), dimensions={}
  multiply.843 = f32[64]{0} multiply(parameter.544, broadcast.842)
  constant.844 = f32[] constant(0.1)
  broadcast.845 = f32[64]{0} broadcast(constant.844), dimensions={}
  multiply.846 = f32[64]{0} multiply(subtract.833, broadcast.845)
  add.847 = f32[64]{0} add(multiply.843, multiply.846)
  parameter.545 = f32[64]{0} parameter(544)
  constant.921 = f32[] constant(0.9)
  broadcast.922 = f32[64]{0} broadcast(constant.921), dimensions={}
  multiply.923 = f32[64]{0} multiply(parameter.545, broadcast.922)
  constant.924 = f32[] constant(0.1)
  broadcast.925 = f32[64]{0} broadcast(constant.924), dimensions={}
  multiply.926 = f32[64]{0} multiply(divide.901, broadcast.925)
  add.927 = f32[64]{0} add(multiply.923, multiply.926)
  parameter.546 = f32[64]{0} parameter(545)
  constant.928 = f32[] constant(0.9)
  broadcast.929 = f32[64]{0} broadcast(constant.928), dimensions={}
  multiply.930 = f32[64]{0} multiply(parameter.546, broadcast.929)
  constant.931 = f32[] constant(0.1)
  broadcast.932 = f32[64]{0} broadcast(constant.931), dimensions={}
  multiply.933 = f32[64]{0} multiply(subtract.920, broadcast.932)
  add.934 = f32[64]{0} add(multiply.930, multiply.933)
  parameter.547 = f32[256]{0} parameter(546)
  constant.1008 = f32[] constant(0.9)
  broadcast.1009 = f32[256]{0} broadcast(constant.1008), dimensions={}
  multiply.1010 = f32[256]{0} multiply(parameter.547, broadcast.1009)
  constant.1011 = f32[] constant(0.1)
  broadcast.1012 = f32[256]{0} broadcast(constant.1011), dimensions={}
  multiply.1013 = f32[256]{0} multiply(divide.988, broadcast.1012)
  add.1014 = f32[256]{0} add(multiply.1010, multiply.1013)
  parameter.548 = f32[256]{0} parameter(547)
  constant.1015 = f32[] constant(0.9)
  broadcast.1016 = f32[256]{0} broadcast(constant.1015), dimensions={}
  multiply.1017 = f32[256]{0} multiply(parameter.548, broadcast.1016)
  constant.1018 = f32[] constant(0.1)
  broadcast.1019 = f32[256]{0} broadcast(constant.1018), dimensions={}
  multiply.1020 = f32[256]{0} multiply(subtract.1007, broadcast.1019)
  add.1021 = f32[256]{0} add(multiply.1017, multiply.1020)
  parameter.549 = f32[256]{0} parameter(548)
  constant.1084 = f32[] constant(0.9)
  broadcast.1085 = f32[256]{0} broadcast(constant.1084), dimensions={}
  multiply.1086 = f32[256]{0} multiply(parameter.549, broadcast.1085)
  constant.1087 = f32[] constant(0.1)
  broadcast.1088 = f32[256]{0} broadcast(constant.1087), dimensions={}
  multiply.1089 = f32[256]{0} multiply(divide.1064, broadcast.1088)
  add.1090 = f32[256]{0} add(multiply.1086, multiply.1089)
  parameter.550 = f32[256]{0} parameter(549)
  constant.1091 = f32[] constant(0.9)
  broadcast.1092 = f32[256]{0} broadcast(constant.1091), dimensions={}
  multiply.1093 = f32[256]{0} multiply(parameter.550, broadcast.1092)
  constant.1094 = f32[] constant(0.1)
  broadcast.1095 = f32[256]{0} broadcast(constant.1094), dimensions={}
  multiply.1096 = f32[256]{0} multiply(subtract.1083, broadcast.1095)
  add.1097 = f32[256]{0} add(multiply.1093, multiply.1096)
  parameter.551 = f32[64]{0} parameter(550)
  constant.1172 = f32[] constant(0.9)
  broadcast.1173 = f32[64]{0} broadcast(constant.1172), dimensions={}
  multiply.1174 = f32[64]{0} multiply(parameter.551, broadcast.1173)
  constant.1175 = f32[] constant(0.1)
  broadcast.1176 = f32[64]{0} broadcast(constant.1175), dimensions={}
  multiply.1177 = f32[64]{0} multiply(divide.1152, broadcast.1176)
  add.1178 = f32[64]{0} add(multiply.1174, multiply.1177)
  parameter.552 = f32[64]{0} parameter(551)
  constant.1179 = f32[] constant(0.9)
  broadcast.1180 = f32[64]{0} broadcast(constant.1179), dimensions={}
  multiply.1181 = f32[64]{0} multiply(parameter.552, broadcast.1180)
  constant.1182 = f32[] constant(0.1)
  broadcast.1183 = f32[64]{0} broadcast(constant.1182), dimensions={}
  multiply.1184 = f32[64]{0} multiply(subtract.1171, broadcast.1183)
  add.1185 = f32[64]{0} add(multiply.1181, multiply.1184)
  parameter.553 = f32[64]{0} parameter(552)
  constant.1259 = f32[] constant(0.9)
  broadcast.1260 = f32[64]{0} broadcast(constant.1259), dimensions={}
  multiply.1261 = f32[64]{0} multiply(parameter.553, broadcast.1260)
  constant.1262 = f32[] constant(0.1)
  broadcast.1263 = f32[64]{0} broadcast(constant.1262), dimensions={}
  multiply.1264 = f32[64]{0} multiply(divide.1239, broadcast.1263)
  add.1265 = f32[64]{0} add(multiply.1261, multiply.1264)
  parameter.554 = f32[64]{0} parameter(553)
  constant.1266 = f32[] constant(0.9)
  broadcast.1267 = f32[64]{0} broadcast(constant.1266), dimensions={}
  multiply.1268 = f32[64]{0} multiply(parameter.554, broadcast.1267)
  constant.1269 = f32[] constant(0.1)
  broadcast.1270 = f32[64]{0} broadcast(constant.1269), dimensions={}
  multiply.1271 = f32[64]{0} multiply(subtract.1258, broadcast.1270)
  add.1272 = f32[64]{0} add(multiply.1268, multiply.1271)
  parameter.555 = f32[256]{0} parameter(554)
  constant.1346 = f32[] constant(0.9)
  broadcast.1347 = f32[256]{0} broadcast(constant.1346), dimensions={}
  multiply.1348 = f32[256]{0} multiply(parameter.555, broadcast.1347)
  constant.1349 = f32[] constant(0.1)
  broadcast.1350 = f32[256]{0} broadcast(constant.1349), dimensions={}
  multiply.1351 = f32[256]{0} multiply(divide.1326, broadcast.1350)
  add.1352 = f32[256]{0} add(multiply.1348, multiply.1351)
  parameter.556 = f32[256]{0} parameter(555)
  constant.1353 = f32[] constant(0.9)
  broadcast.1354 = f32[256]{0} broadcast(constant.1353), dimensions={}
  multiply.1355 = f32[256]{0} multiply(parameter.556, broadcast.1354)
  constant.1356 = f32[] constant(0.1)
  broadcast.1357 = f32[256]{0} broadcast(constant.1356), dimensions={}
  multiply.1358 = f32[256]{0} multiply(subtract.1345, broadcast.1357)
  add.1359 = f32[256]{0} add(multiply.1355, multiply.1358)
  parameter.557 = f32[256]{0} parameter(556)
  constant.3682 = f32[] constant(0.9)
  broadcast.3683 = f32[256]{0} broadcast(constant.3682), dimensions={}
  multiply.3684 = f32[256]{0} multiply(parameter.557, broadcast.3683)
  constant.3685 = f32[] constant(0.1)
  broadcast.3686 = f32[256]{0} broadcast(constant.3685), dimensions={}
  multiply.3687 = f32[256]{0} multiply(divide.3662, broadcast.3686)
  add.3688 = f32[256]{0} add(multiply.3684, multiply.3687)
  parameter.558 = f32[256]{0} parameter(557)
  constant.3689 = f32[] constant(0.9)
  broadcast.3690 = f32[256]{0} broadcast(constant.3689), dimensions={}
  multiply.3691 = f32[256]{0} multiply(parameter.558, broadcast.3690)
  constant.3692 = f32[] constant(0.1)
  broadcast.3693 = f32[256]{0} broadcast(constant.3692), dimensions={}
  multiply.3694 = f32[256]{0} multiply(subtract.3681, broadcast.3693)
  add.3695 = f32[256]{0} add(multiply.3691, multiply.3694)
  parameter.559 = f32[256]{0} parameter(558)
  constant.3769 = f32[] constant(0.9)
  broadcast.3770 = f32[256]{0} broadcast(constant.3769), dimensions={}
  multiply.3771 = f32[256]{0} multiply(parameter.559, broadcast.3770)
  constant.3772 = f32[] constant(0.1)
  broadcast.3773 = f32[256]{0} broadcast(constant.3772), dimensions={}
  multiply.3774 = f32[256]{0} multiply(divide.3749, broadcast.3773)
  add.3775 = f32[256]{0} add(multiply.3771, multiply.3774)
  parameter.560 = f32[256]{0} parameter(559)
  constant.3776 = f32[] constant(0.9)
  broadcast.3777 = f32[256]{0} broadcast(constant.3776), dimensions={}
  multiply.3778 = f32[256]{0} multiply(parameter.560, broadcast.3777)
  constant.3779 = f32[] constant(0.1)
  broadcast.3780 = f32[256]{0} broadcast(constant.3779), dimensions={}
  multiply.3781 = f32[256]{0} multiply(subtract.3768, broadcast.3780)
  add.3782 = f32[256]{0} add(multiply.3778, multiply.3781)
  parameter.561 = f32[1024]{0} parameter(560)
  constant.3856 = f32[] constant(0.9)
  broadcast.3857 = f32[1024]{0} broadcast(constant.3856), dimensions={}
  multiply.3858 = f32[1024]{0} multiply(parameter.561, broadcast.3857)
  constant.3859 = f32[] constant(0.1)
  broadcast.3860 = f32[1024]{0} broadcast(constant.3859), dimensions={}
  multiply.3861 = f32[1024]{0} multiply(divide.3836, broadcast.3860)
  add.3862 = f32[1024]{0} add(multiply.3858, multiply.3861)
  parameter.562 = f32[1024]{0} parameter(561)
  constant.3863 = f32[] constant(0.9)
  broadcast.3864 = f32[1024]{0} broadcast(constant.3863), dimensions={}
  multiply.3865 = f32[1024]{0} multiply(parameter.562, broadcast.3864)
  constant.3866 = f32[] constant(0.1)
  broadcast.3867 = f32[1024]{0} broadcast(constant.3866), dimensions={}
  multiply.3868 = f32[1024]{0} multiply(subtract.3855, broadcast.3867)
  add.3869 = f32[1024]{0} add(multiply.3865, multiply.3868)
  parameter.563 = f32[256]{0} parameter(562)
  constant.3944 = f32[] constant(0.9)
  broadcast.3945 = f32[256]{0} broadcast(constant.3944), dimensions={}
  multiply.3946 = f32[256]{0} multiply(parameter.563, broadcast.3945)
  constant.3947 = f32[] constant(0.1)
  broadcast.3948 = f32[256]{0} broadcast(constant.3947), dimensions={}
  multiply.3949 = f32[256]{0} multiply(divide.3924, broadcast.3948)
  add.3950 = f32[256]{0} add(multiply.3946, multiply.3949)
  parameter.564 = f32[256]{0} parameter(563)
  constant.3951 = f32[] constant(0.9)
  broadcast.3952 = f32[256]{0} broadcast(constant.3951), dimensions={}
  multiply.3953 = f32[256]{0} multiply(parameter.564, broadcast.3952)
  constant.3954 = f32[] constant(0.1)
  broadcast.3955 = f32[256]{0} broadcast(constant.3954), dimensions={}
  multiply.3956 = f32[256]{0} multiply(subtract.3943, broadcast.3955)
  add.3957 = f32[256]{0} add(multiply.3953, multiply.3956)
  parameter.565 = f32[256]{0} parameter(564)
  constant.4031 = f32[] constant(0.9)
  broadcast.4032 = f32[256]{0} broadcast(constant.4031), dimensions={}
  multiply.4033 = f32[256]{0} multiply(parameter.565, broadcast.4032)
  constant.4034 = f32[] constant(0.1)
  broadcast.4035 = f32[256]{0} broadcast(constant.4034), dimensions={}
  multiply.4036 = f32[256]{0} multiply(divide.4011, broadcast.4035)
  add.4037 = f32[256]{0} add(multiply.4033, multiply.4036)
  parameter.566 = f32[256]{0} parameter(565)
  constant.4038 = f32[] constant(0.9)
  broadcast.4039 = f32[256]{0} broadcast(constant.4038), dimensions={}
  multiply.4040 = f32[256]{0} multiply(parameter.566, broadcast.4039)
  constant.4041 = f32[] constant(0.1)
  broadcast.4042 = f32[256]{0} broadcast(constant.4041), dimensions={}
  multiply.4043 = f32[256]{0} multiply(subtract.4030, broadcast.4042)
  add.4044 = f32[256]{0} add(multiply.4040, multiply.4043)
  parameter.567 = f32[1024]{0} parameter(566)
  constant.4118 = f32[] constant(0.9)
  broadcast.4119 = f32[1024]{0} broadcast(constant.4118), dimensions={}
  multiply.4120 = f32[1024]{0} multiply(parameter.567, broadcast.4119)
  constant.4121 = f32[] constant(0.1)
  broadcast.4122 = f32[1024]{0} broadcast(constant.4121), dimensions={}
  multiply.4123 = f32[1024]{0} multiply(divide.4098, broadcast.4122)
  add.4124 = f32[1024]{0} add(multiply.4120, multiply.4123)
  parameter.568 = f32[1024]{0} parameter(567)
  constant.4125 = f32[] constant(0.9)
  broadcast.4126 = f32[1024]{0} broadcast(constant.4125), dimensions={}
  multiply.4127 = f32[1024]{0} multiply(parameter.568, broadcast.4126)
  constant.4128 = f32[] constant(0.1)
  broadcast.4129 = f32[1024]{0} broadcast(constant.4128), dimensions={}
  multiply.4130 = f32[1024]{0} multiply(subtract.4117, broadcast.4129)
  add.4131 = f32[1024]{0} add(multiply.4127, multiply.4130)
  parameter.569 = f32[256]{0} parameter(568)
  constant.4206 = f32[] constant(0.9)
  broadcast.4207 = f32[256]{0} broadcast(constant.4206), dimensions={}
  multiply.4208 = f32[256]{0} multiply(parameter.569, broadcast.4207)
  constant.4209 = f32[] constant(0.1)
  broadcast.4210 = f32[256]{0} broadcast(constant.4209), dimensions={}
  multiply.4211 = f32[256]{0} multiply(divide.4186, broadcast.4210)
  add.4212 = f32[256]{0} add(multiply.4208, multiply.4211)
  parameter.570 = f32[256]{0} parameter(569)
  constant.4213 = f32[] constant(0.9)
  broadcast.4214 = f32[256]{0} broadcast(constant.4213), dimensions={}
  multiply.4215 = f32[256]{0} multiply(parameter.570, broadcast.4214)
  constant.4216 = f32[] constant(0.1)
  broadcast.4217 = f32[256]{0} broadcast(constant.4216), dimensions={}
  multiply.4218 = f32[256]{0} multiply(subtract.4205, broadcast.4217)
  add.4219 = f32[256]{0} add(multiply.4215, multiply.4218)
  parameter.571 = f32[256]{0} parameter(570)
  constant.4293 = f32[] constant(0.9)
  broadcast.4294 = f32[256]{0} broadcast(constant.4293), dimensions={}
  multiply.4295 = f32[256]{0} multiply(parameter.571, broadcast.4294)
  constant.4296 = f32[] constant(0.1)
  broadcast.4297 = f32[256]{0} broadcast(constant.4296), dimensions={}
  multiply.4298 = f32[256]{0} multiply(divide.4273, broadcast.4297)
  add.4299 = f32[256]{0} add(multiply.4295, multiply.4298)
  parameter.572 = f32[256]{0} parameter(571)
  constant.4300 = f32[] constant(0.9)
  broadcast.4301 = f32[256]{0} broadcast(constant.4300), dimensions={}
  multiply.4302 = f32[256]{0} multiply(parameter.572, broadcast.4301)
  constant.4303 = f32[] constant(0.1)
  broadcast.4304 = f32[256]{0} broadcast(constant.4303), dimensions={}
  multiply.4305 = f32[256]{0} multiply(subtract.4292, broadcast.4304)
  add.4306 = f32[256]{0} add(multiply.4302, multiply.4305)
  parameter.573 = f32[1024]{0} parameter(572)
  constant.4380 = f32[] constant(0.9)
  broadcast.4381 = f32[1024]{0} broadcast(constant.4380), dimensions={}
  multiply.4382 = f32[1024]{0} multiply(parameter.573, broadcast.4381)
  constant.4383 = f32[] constant(0.1)
  broadcast.4384 = f32[1024]{0} broadcast(constant.4383), dimensions={}
  multiply.4385 = f32[1024]{0} multiply(divide.4360, broadcast.4384)
  add.4386 = f32[1024]{0} add(multiply.4382, multiply.4385)
  parameter.574 = f32[1024]{0} parameter(573)
  constant.4387 = f32[] constant(0.9)
  broadcast.4388 = f32[1024]{0} broadcast(constant.4387), dimensions={}
  multiply.4389 = f32[1024]{0} multiply(parameter.574, broadcast.4388)
  constant.4390 = f32[] constant(0.1)
  broadcast.4391 = f32[1024]{0} broadcast(constant.4390), dimensions={}
  multiply.4392 = f32[1024]{0} multiply(subtract.4379, broadcast.4391)
  add.4393 = f32[1024]{0} add(multiply.4389, multiply.4392)
  parameter.575 = f32[512]{0} parameter(574)
  constant.4468 = f32[] constant(0.9)
  broadcast.4469 = f32[512]{0} broadcast(constant.4468), dimensions={}
  multiply.4470 = f32[512]{0} multiply(parameter.575, broadcast.4469)
  constant.4471 = f32[] constant(0.1)
  broadcast.4472 = f32[512]{0} broadcast(constant.4471), dimensions={}
  multiply.4473 = f32[512]{0} multiply(divide.4448, broadcast.4472)
  add.4474 = f32[512]{0} add(multiply.4470, multiply.4473)
  parameter.576 = f32[512]{0} parameter(575)
  constant.4475 = f32[] constant(0.9)
  broadcast.4476 = f32[512]{0} broadcast(constant.4475), dimensions={}
  multiply.4477 = f32[512]{0} multiply(parameter.576, broadcast.4476)
  constant.4478 = f32[] constant(0.1)
  broadcast.4479 = f32[512]{0} broadcast(constant.4478), dimensions={}
  multiply.4480 = f32[512]{0} multiply(subtract.4467, broadcast.4479)
  add.4481 = f32[512]{0} add(multiply.4477, multiply.4480)
  parameter.577 = f32[512]{0} parameter(576)
  constant.4555 = f32[] constant(0.9)
  broadcast.4556 = f32[512]{0} broadcast(constant.4555), dimensions={}
  multiply.4557 = f32[512]{0} multiply(parameter.577, broadcast.4556)
  constant.4558 = f32[] constant(0.1)
  broadcast.4559 = f32[512]{0} broadcast(constant.4558), dimensions={}
  multiply.4560 = f32[512]{0} multiply(divide.4535, broadcast.4559)
  add.4561 = f32[512]{0} add(multiply.4557, multiply.4560)
  parameter.578 = f32[512]{0} parameter(577)
  constant.4562 = f32[] constant(0.9)
  broadcast.4563 = f32[512]{0} broadcast(constant.4562), dimensions={}
  multiply.4564 = f32[512]{0} multiply(parameter.578, broadcast.4563)
  constant.4565 = f32[] constant(0.1)
  broadcast.4566 = f32[512]{0} broadcast(constant.4565), dimensions={}
  multiply.4567 = f32[512]{0} multiply(subtract.4554, broadcast.4566)
  add.4568 = f32[512]{0} add(multiply.4564, multiply.4567)
  parameter.579 = f32[2048]{0} parameter(578)
  constant.4642 = f32[] constant(0.9)
  broadcast.4643 = f32[2048]{0} broadcast(constant.4642), dimensions={}
  multiply.4644 = f32[2048]{0} multiply(parameter.579, broadcast.4643)
  constant.4645 = f32[] constant(0.1)
  broadcast.4646 = f32[2048]{0} broadcast(constant.4645), dimensions={}
  multiply.4647 = f32[2048]{0} multiply(divide.4622, broadcast.4646)
  add.4648 = f32[2048]{0} add(multiply.4644, multiply.4647)
  parameter.580 = f32[2048]{0} parameter(579)
  constant.4649 = f32[] constant(0.9)
  broadcast.4650 = f32[2048]{0} broadcast(constant.4649), dimensions={}
  multiply.4651 = f32[2048]{0} multiply(parameter.580, broadcast.4650)
  constant.4652 = f32[] constant(0.1)
  broadcast.4653 = f32[2048]{0} broadcast(constant.4652), dimensions={}
  multiply.4654 = f32[2048]{0} multiply(subtract.4641, broadcast.4653)
  add.4655 = f32[2048]{0} add(multiply.4651, multiply.4654)
  parameter.581 = f32[2048]{0} parameter(580)
  constant.4718 = f32[] constant(0.9)
  broadcast.4719 = f32[2048]{0} broadcast(constant.4718), dimensions={}
  multiply.4720 = f32[2048]{0} multiply(parameter.581, broadcast.4719)
  constant.4721 = f32[] constant(0.1)
  broadcast.4722 = f32[2048]{0} broadcast(constant.4721), dimensions={}
  multiply.4723 = f32[2048]{0} multiply(divide.4698, broadcast.4722)
  add.4724 = f32[2048]{0} add(multiply.4720, multiply.4723)
  parameter.582 = f32[2048]{0} parameter(581)
  constant.4725 = f32[] constant(0.9)
  broadcast.4726 = f32[2048]{0} broadcast(constant.4725), dimensions={}
  multiply.4727 = f32[2048]{0} multiply(parameter.582, broadcast.4726)
  constant.4728 = f32[] constant(0.1)
  broadcast.4729 = f32[2048]{0} broadcast(constant.4728), dimensions={}
  multiply.4730 = f32[2048]{0} multiply(subtract.4717, broadcast.4729)
  add.4731 = f32[2048]{0} add(multiply.4727, multiply.4730)
  parameter.583 = f32[512]{0} parameter(582)
  constant.4806 = f32[] constant(0.9)
  broadcast.4807 = f32[512]{0} broadcast(constant.4806), dimensions={}
  multiply.4808 = f32[512]{0} multiply(parameter.583, broadcast.4807)
  constant.4809 = f32[] constant(0.1)
  broadcast.4810 = f32[512]{0} broadcast(constant.4809), dimensions={}
  multiply.4811 = f32[512]{0} multiply(divide.4786, broadcast.4810)
  add.4812 = f32[512]{0} add(multiply.4808, multiply.4811)
  parameter.584 = f32[512]{0} parameter(583)
  constant.4813 = f32[] constant(0.9)
  broadcast.4814 = f32[512]{0} broadcast(constant.4813), dimensions={}
  multiply.4815 = f32[512]{0} multiply(parameter.584, broadcast.4814)
  constant.4816 = f32[] constant(0.1)
  broadcast.4817 = f32[512]{0} broadcast(constant.4816), dimensions={}
  multiply.4818 = f32[512]{0} multiply(subtract.4805, broadcast.4817)
  add.4819 = f32[512]{0} add(multiply.4815, multiply.4818)
  parameter.585 = f32[512]{0} parameter(584)
  constant.4893 = f32[] constant(0.9)
  broadcast.4894 = f32[512]{0} broadcast(constant.4893), dimensions={}
  multiply.4895 = f32[512]{0} multiply(parameter.585, broadcast.4894)
  constant.4896 = f32[] constant(0.1)
  broadcast.4897 = f32[512]{0} broadcast(constant.4896), dimensions={}
  multiply.4898 = f32[512]{0} multiply(divide.4873, broadcast.4897)
  add.4899 = f32[512]{0} add(multiply.4895, multiply.4898)
  parameter.586 = f32[512]{0} parameter(585)
  constant.4900 = f32[] constant(0.9)
  broadcast.4901 = f32[512]{0} broadcast(constant.4900), dimensions={}
  multiply.4902 = f32[512]{0} multiply(parameter.586, broadcast.4901)
  constant.4903 = f32[] constant(0.1)
  broadcast.4904 = f32[512]{0} broadcast(constant.4903), dimensions={}
  multiply.4905 = f32[512]{0} multiply(subtract.4892, broadcast.4904)
  add.4906 = f32[512]{0} add(multiply.4902, multiply.4905)
  parameter.587 = f32[2048]{0} parameter(586)
  constant.4980 = f32[] constant(0.9)
  broadcast.4981 = f32[2048]{0} broadcast(constant.4980), dimensions={}
  multiply.4982 = f32[2048]{0} multiply(parameter.587, broadcast.4981)
  constant.4983 = f32[] constant(0.1)
  broadcast.4984 = f32[2048]{0} broadcast(constant.4983), dimensions={}
  multiply.4985 = f32[2048]{0} multiply(divide.4960, broadcast.4984)
  add.4986 = f32[2048]{0} add(multiply.4982, multiply.4985)
  parameter.588 = f32[2048]{0} parameter(587)
  constant.4987 = f32[] constant(0.9)
  broadcast.4988 = f32[2048]{0} broadcast(constant.4987), dimensions={}
  multiply.4989 = f32[2048]{0} multiply(parameter.588, broadcast.4988)
  constant.4990 = f32[] constant(0.1)
  broadcast.4991 = f32[2048]{0} broadcast(constant.4990), dimensions={}
  multiply.4992 = f32[2048]{0} multiply(subtract.4979, broadcast.4991)
  add.4993 = f32[2048]{0} add(multiply.4989, multiply.4992)
  parameter.589 = f32[512]{0} parameter(588)
  constant.5068 = f32[] constant(0.9)
  broadcast.5069 = f32[512]{0} broadcast(constant.5068), dimensions={}
  multiply.5070 = f32[512]{0} multiply(parameter.589, broadcast.5069)
  constant.5071 = f32[] constant(0.1)
  broadcast.5072 = f32[512]{0} broadcast(constant.5071), dimensions={}
  multiply.5073 = f32[512]{0} multiply(divide.5048, broadcast.5072)
  add.5074 = f32[512]{0} add(multiply.5070, multiply.5073)
  parameter.590 = f32[512]{0} parameter(589)
  constant.5075 = f32[] constant(0.9)
  broadcast.5076 = f32[512]{0} broadcast(constant.5075), dimensions={}
  multiply.5077 = f32[512]{0} multiply(parameter.590, broadcast.5076)
  constant.5078 = f32[] constant(0.1)
  broadcast.5079 = f32[512]{0} broadcast(constant.5078), dimensions={}
  multiply.5080 = f32[512]{0} multiply(subtract.5067, broadcast.5079)
  add.5081 = f32[512]{0} add(multiply.5077, multiply.5080)
  parameter.591 = f32[512]{0} parameter(590)
  constant.5155 = f32[] constant(0.9)
  broadcast.5156 = f32[512]{0} broadcast(constant.5155), dimensions={}
  multiply.5157 = f32[512]{0} multiply(parameter.591, broadcast.5156)
  constant.5158 = f32[] constant(0.1)
  broadcast.5159 = f32[512]{0} broadcast(constant.5158), dimensions={}
  multiply.5160 = f32[512]{0} multiply(divide.5135, broadcast.5159)
  add.5161 = f32[512]{0} add(multiply.5157, multiply.5160)
  parameter.592 = f32[512]{0} parameter(591)
  constant.5162 = f32[] constant(0.9)
  broadcast.5163 = f32[512]{0} broadcast(constant.5162), dimensions={}
  multiply.5164 = f32[512]{0} multiply(parameter.592, broadcast.5163)
  constant.5165 = f32[] constant(0.1)
  broadcast.5166 = f32[512]{0} broadcast(constant.5165), dimensions={}
  multiply.5167 = f32[512]{0} multiply(subtract.5154, broadcast.5166)
  add.5168 = f32[512]{0} add(multiply.5164, multiply.5167)
  parameter.593 = f32[2048]{0} parameter(592)
  constant.5242 = f32[] constant(0.9)
  broadcast.5243 = f32[2048]{0} broadcast(constant.5242), dimensions={}
  multiply.5244 = f32[2048]{0} multiply(parameter.593, broadcast.5243)
  constant.5245 = f32[] constant(0.1)
  broadcast.5246 = f32[2048]{0} broadcast(constant.5245), dimensions={}
  multiply.5247 = f32[2048]{0} multiply(divide.5222, broadcast.5246)
  add.5248 = f32[2048]{0} add(multiply.5244, multiply.5247)
  parameter.594 = f32[2048]{0} parameter(593)
  constant.5249 = f32[] constant(0.9)
  broadcast.5250 = f32[2048]{0} broadcast(constant.5249), dimensions={}
  multiply.5251 = f32[2048]{0} multiply(parameter.594, broadcast.5250)
  constant.5252 = f32[] constant(0.1)
  broadcast.5253 = f32[2048]{0} broadcast(constant.5252), dimensions={}
  multiply.5254 = f32[2048]{0} multiply(subtract.5241, broadcast.5253)
  add.5255 = f32[2048]{0} add(multiply.5251, multiply.5254)
  parameter.595 = f32[64]{0} parameter(594)
  constant.1434 = f32[] constant(0.9)
  broadcast.1435 = f32[64]{0} broadcast(constant.1434), dimensions={}
  multiply.1436 = f32[64]{0} multiply(parameter.595, broadcast.1435)
  constant.1437 = f32[] constant(0.1)
  broadcast.1438 = f32[64]{0} broadcast(constant.1437), dimensions={}
  multiply.1439 = f32[64]{0} multiply(divide.1414, broadcast.1438)
  add.1440 = f32[64]{0} add(multiply.1436, multiply.1439)
  parameter.596 = f32[64]{0} parameter(595)
  constant.1441 = f32[] constant(0.9)
  broadcast.1442 = f32[64]{0} broadcast(constant.1441), dimensions={}
  multiply.1443 = f32[64]{0} multiply(parameter.596, broadcast.1442)
  constant.1444 = f32[] constant(0.1)
  broadcast.1445 = f32[64]{0} broadcast(constant.1444), dimensions={}
  multiply.1446 = f32[64]{0} multiply(subtract.1433, broadcast.1445)
  add.1447 = f32[64]{0} add(multiply.1443, multiply.1446)
  parameter.597 = f32[64]{0} parameter(596)
  constant.1521 = f32[] constant(0.9)
  broadcast.1522 = f32[64]{0} broadcast(constant.1521), dimensions={}
  multiply.1523 = f32[64]{0} multiply(parameter.597, broadcast.1522)
  constant.1524 = f32[] constant(0.1)
  broadcast.1525 = f32[64]{0} broadcast(constant.1524), dimensions={}
  multiply.1526 = f32[64]{0} multiply(divide.1501, broadcast.1525)
  add.1527 = f32[64]{0} add(multiply.1523, multiply.1526)
  parameter.598 = f32[64]{0} parameter(597)
  constant.1528 = f32[] constant(0.9)
  broadcast.1529 = f32[64]{0} broadcast(constant.1528), dimensions={}
  multiply.1530 = f32[64]{0} multiply(parameter.598, broadcast.1529)
  constant.1531 = f32[] constant(0.1)
  broadcast.1532 = f32[64]{0} broadcast(constant.1531), dimensions={}
  multiply.1533 = f32[64]{0} multiply(subtract.1520, broadcast.1532)
  add.1534 = f32[64]{0} add(multiply.1530, multiply.1533)
  parameter.599 = f32[256]{0} parameter(598)
  constant.1608 = f32[] constant(0.9)
  broadcast.1609 = f32[256]{0} broadcast(constant.1608), dimensions={}
  multiply.1610 = f32[256]{0} multiply(parameter.599, broadcast.1609)
  constant.1611 = f32[] constant(0.1)
  broadcast.1612 = f32[256]{0} broadcast(constant.1611), dimensions={}
  multiply.1613 = f32[256]{0} multiply(divide.1588, broadcast.1612)
  add.1614 = f32[256]{0} add(multiply.1610, multiply.1613)
  parameter.600 = f32[256]{0} parameter(599)
  constant.1615 = f32[] constant(0.9)
  broadcast.1616 = f32[256]{0} broadcast(constant.1615), dimensions={}
  multiply.1617 = f32[256]{0} multiply(parameter.600, broadcast.1616)
  constant.1618 = f32[] constant(0.1)
  broadcast.1619 = f32[256]{0} broadcast(constant.1618), dimensions={}
  multiply.1620 = f32[256]{0} multiply(subtract.1607, broadcast.1619)
  add.1621 = f32[256]{0} add(multiply.1617, multiply.1620)
  parameter.601 = f32[128]{0} parameter(600)
  constant.1696 = f32[] constant(0.9)
  broadcast.1697 = f32[128]{0} broadcast(constant.1696), dimensions={}
  multiply.1698 = f32[128]{0} multiply(parameter.601, broadcast.1697)
  constant.1699 = f32[] constant(0.1)
  broadcast.1700 = f32[128]{0} broadcast(constant.1699), dimensions={}
  multiply.1701 = f32[128]{0} multiply(divide.1676, broadcast.1700)
  add.1702 = f32[128]{0} add(multiply.1698, multiply.1701)
  parameter.602 = f32[128]{0} parameter(601)
  constant.1703 = f32[] constant(0.9)
  broadcast.1704 = f32[128]{0} broadcast(constant.1703), dimensions={}
  multiply.1705 = f32[128]{0} multiply(parameter.602, broadcast.1704)
  constant.1706 = f32[] constant(0.1)
  broadcast.1707 = f32[128]{0} broadcast(constant.1706), dimensions={}
  multiply.1708 = f32[128]{0} multiply(subtract.1695, broadcast.1707)
  add.1709 = f32[128]{0} add(multiply.1705, multiply.1708)
  parameter.603 = f32[128]{0} parameter(602)
  constant.1783 = f32[] constant(0.9)
  broadcast.1784 = f32[128]{0} broadcast(constant.1783), dimensions={}
  multiply.1785 = f32[128]{0} multiply(parameter.603, broadcast.1784)
  constant.1786 = f32[] constant(0.1)
  broadcast.1787 = f32[128]{0} broadcast(constant.1786), dimensions={}
  multiply.1788 = f32[128]{0} multiply(divide.1763, broadcast.1787)
  add.1789 = f32[128]{0} add(multiply.1785, multiply.1788)
  parameter.604 = f32[128]{0} parameter(603)
  constant.1790 = f32[] constant(0.9)
  broadcast.1791 = f32[128]{0} broadcast(constant.1790), dimensions={}
  multiply.1792 = f32[128]{0} multiply(parameter.604, broadcast.1791)
  constant.1793 = f32[] constant(0.1)
  broadcast.1794 = f32[128]{0} broadcast(constant.1793), dimensions={}
  multiply.1795 = f32[128]{0} multiply(subtract.1782, broadcast.1794)
  add.1796 = f32[128]{0} add(multiply.1792, multiply.1795)
  parameter.605 = f32[512]{0} parameter(604)
  constant.1870 = f32[] constant(0.9)
  broadcast.1871 = f32[512]{0} broadcast(constant.1870), dimensions={}
  multiply.1872 = f32[512]{0} multiply(parameter.605, broadcast.1871)
  constant.1873 = f32[] constant(0.1)
  broadcast.1874 = f32[512]{0} broadcast(constant.1873), dimensions={}
  multiply.1875 = f32[512]{0} multiply(divide.1850, broadcast.1874)
  add.1876 = f32[512]{0} add(multiply.1872, multiply.1875)
  parameter.606 = f32[512]{0} parameter(605)
  constant.1877 = f32[] constant(0.9)
  broadcast.1878 = f32[512]{0} broadcast(constant.1877), dimensions={}
  multiply.1879 = f32[512]{0} multiply(parameter.606, broadcast.1878)
  constant.1880 = f32[] constant(0.1)
  broadcast.1881 = f32[512]{0} broadcast(constant.1880), dimensions={}
  multiply.1882 = f32[512]{0} multiply(subtract.1869, broadcast.1881)
  add.1883 = f32[512]{0} add(multiply.1879, multiply.1882)
  parameter.607 = f32[512]{0} parameter(606)
  constant.1946 = f32[] constant(0.9)
  broadcast.1947 = f32[512]{0} broadcast(constant.1946), dimensions={}
  multiply.1948 = f32[512]{0} multiply(parameter.607, broadcast.1947)
  constant.1949 = f32[] constant(0.1)
  broadcast.1950 = f32[512]{0} broadcast(constant.1949), dimensions={}
  multiply.1951 = f32[512]{0} multiply(divide.1926, broadcast.1950)
  add.1952 = f32[512]{0} add(multiply.1948, multiply.1951)
  parameter.608 = f32[512]{0} parameter(607)
  constant.1953 = f32[] constant(0.9)
  broadcast.1954 = f32[512]{0} broadcast(constant.1953), dimensions={}
  multiply.1955 = f32[512]{0} multiply(parameter.608, broadcast.1954)
  constant.1956 = f32[] constant(0.1)
  broadcast.1957 = f32[512]{0} broadcast(constant.1956), dimensions={}
  multiply.1958 = f32[512]{0} multiply(subtract.1945, broadcast.1957)
  add.1959 = f32[512]{0} add(multiply.1955, multiply.1958)
  parameter.609 = f32[128]{0} parameter(608)
  constant.2034 = f32[] constant(0.9)
  broadcast.2035 = f32[128]{0} broadcast(constant.2034), dimensions={}
  multiply.2036 = f32[128]{0} multiply(parameter.609, broadcast.2035)
  constant.2037 = f32[] constant(0.1)
  broadcast.2038 = f32[128]{0} broadcast(constant.2037), dimensions={}
  multiply.2039 = f32[128]{0} multiply(divide.2014, broadcast.2038)
  add.2040 = f32[128]{0} add(multiply.2036, multiply.2039)
  parameter.610 = f32[128]{0} parameter(609)
  constant.2041 = f32[] constant(0.9)
  broadcast.2042 = f32[128]{0} broadcast(constant.2041), dimensions={}
  multiply.2043 = f32[128]{0} multiply(parameter.610, broadcast.2042)
  constant.2044 = f32[] constant(0.1)
  broadcast.2045 = f32[128]{0} broadcast(constant.2044), dimensions={}
  multiply.2046 = f32[128]{0} multiply(subtract.2033, broadcast.2045)
  add.2047 = f32[128]{0} add(multiply.2043, multiply.2046)
  parameter.611 = f32[128]{0} parameter(610)
  constant.2121 = f32[] constant(0.9)
  broadcast.2122 = f32[128]{0} broadcast(constant.2121), dimensions={}
  multiply.2123 = f32[128]{0} multiply(parameter.611, broadcast.2122)
  constant.2124 = f32[] constant(0.1)
  broadcast.2125 = f32[128]{0} broadcast(constant.2124), dimensions={}
  multiply.2126 = f32[128]{0} multiply(divide.2101, broadcast.2125)
  add.2127 = f32[128]{0} add(multiply.2123, multiply.2126)
  parameter.612 = f32[128]{0} parameter(611)
  constant.2128 = f32[] constant(0.9)
  broadcast.2129 = f32[128]{0} broadcast(constant.2128), dimensions={}
  multiply.2130 = f32[128]{0} multiply(parameter.612, broadcast.2129)
  constant.2131 = f32[] constant(0.1)
  broadcast.2132 = f32[128]{0} broadcast(constant.2131), dimensions={}
  multiply.2133 = f32[128]{0} multiply(subtract.2120, broadcast.2132)
  add.2134 = f32[128]{0} add(multiply.2130, multiply.2133)
  parameter.613 = f32[512]{0} parameter(612)
  constant.2208 = f32[] constant(0.9)
  broadcast.2209 = f32[512]{0} broadcast(constant.2208), dimensions={}
  multiply.2210 = f32[512]{0} multiply(parameter.613, broadcast.2209)
  constant.2211 = f32[] constant(0.1)
  broadcast.2212 = f32[512]{0} broadcast(constant.2211), dimensions={}
  multiply.2213 = f32[512]{0} multiply(divide.2188, broadcast.2212)
  add.2214 = f32[512]{0} add(multiply.2210, multiply.2213)
  parameter.614 = f32[512]{0} parameter(613)
  constant.2215 = f32[] constant(0.9)
  broadcast.2216 = f32[512]{0} broadcast(constant.2215), dimensions={}
  multiply.2217 = f32[512]{0} multiply(parameter.614, broadcast.2216)
  constant.2218 = f32[] constant(0.1)
  broadcast.2219 = f32[512]{0} broadcast(constant.2218), dimensions={}
  multiply.2220 = f32[512]{0} multiply(subtract.2207, broadcast.2219)
  add.2221 = f32[512]{0} add(multiply.2217, multiply.2220)
  parameter.615 = f32[128]{0} parameter(614)
  constant.2296 = f32[] constant(0.9)
  broadcast.2297 = f32[128]{0} broadcast(constant.2296), dimensions={}
  multiply.2298 = f32[128]{0} multiply(parameter.615, broadcast.2297)
  constant.2299 = f32[] constant(0.1)
  broadcast.2300 = f32[128]{0} broadcast(constant.2299), dimensions={}
  multiply.2301 = f32[128]{0} multiply(divide.2276, broadcast.2300)
  add.2302 = f32[128]{0} add(multiply.2298, multiply.2301)
  parameter.616 = f32[128]{0} parameter(615)
  constant.2303 = f32[] constant(0.9)
  broadcast.2304 = f32[128]{0} broadcast(constant.2303), dimensions={}
  multiply.2305 = f32[128]{0} multiply(parameter.616, broadcast.2304)
  constant.2306 = f32[] constant(0.1)
  broadcast.2307 = f32[128]{0} broadcast(constant.2306), dimensions={}
  multiply.2308 = f32[128]{0} multiply(subtract.2295, broadcast.2307)
  add.2309 = f32[128]{0} add(multiply.2305, multiply.2308)
  parameter.617 = f32[128]{0} parameter(616)
  constant.2383 = f32[] constant(0.9)
  broadcast.2384 = f32[128]{0} broadcast(constant.2383), dimensions={}
  multiply.2385 = f32[128]{0} multiply(parameter.617, broadcast.2384)
  constant.2386 = f32[] constant(0.1)
  broadcast.2387 = f32[128]{0} broadcast(constant.2386), dimensions={}
  multiply.2388 = f32[128]{0} multiply(divide.2363, broadcast.2387)
  add.2389 = f32[128]{0} add(multiply.2385, multiply.2388)
  parameter.618 = f32[128]{0} parameter(617)
  constant.2390 = f32[] constant(0.9)
  broadcast.2391 = f32[128]{0} broadcast(constant.2390), dimensions={}
  multiply.2392 = f32[128]{0} multiply(parameter.618, broadcast.2391)
  constant.2393 = f32[] constant(0.1)
  broadcast.2394 = f32[128]{0} broadcast(constant.2393), dimensions={}
  multiply.2395 = f32[128]{0} multiply(subtract.2382, broadcast.2394)
  add.2396 = f32[128]{0} add(multiply.2392, multiply.2395)
  parameter.619 = f32[512]{0} parameter(618)
  constant.2470 = f32[] constant(0.9)
  broadcast.2471 = f32[512]{0} broadcast(constant.2470), dimensions={}
  multiply.2472 = f32[512]{0} multiply(parameter.619, broadcast.2471)
  constant.2473 = f32[] constant(0.1)
  broadcast.2474 = f32[512]{0} broadcast(constant.2473), dimensions={}
  multiply.2475 = f32[512]{0} multiply(divide.2450, broadcast.2474)
  add.2476 = f32[512]{0} add(multiply.2472, multiply.2475)
  parameter.620 = f32[512]{0} parameter(619)
  constant.2477 = f32[] constant(0.9)
  broadcast.2478 = f32[512]{0} broadcast(constant.2477), dimensions={}
  multiply.2479 = f32[512]{0} multiply(parameter.620, broadcast.2478)
  constant.2480 = f32[] constant(0.1)
  broadcast.2481 = f32[512]{0} broadcast(constant.2480), dimensions={}
  multiply.2482 = f32[512]{0} multiply(subtract.2469, broadcast.2481)
  add.2483 = f32[512]{0} add(multiply.2479, multiply.2482)
  parameter.621 = f32[128]{0} parameter(620)
  constant.2558 = f32[] constant(0.9)
  broadcast.2559 = f32[128]{0} broadcast(constant.2558), dimensions={}
  multiply.2560 = f32[128]{0} multiply(parameter.621, broadcast.2559)
  constant.2561 = f32[] constant(0.1)
  broadcast.2562 = f32[128]{0} broadcast(constant.2561), dimensions={}
  multiply.2563 = f32[128]{0} multiply(divide.2538, broadcast.2562)
  add.2564 = f32[128]{0} add(multiply.2560, multiply.2563)
  parameter.622 = f32[128]{0} parameter(621)
  constant.2565 = f32[] constant(0.9)
  broadcast.2566 = f32[128]{0} broadcast(constant.2565), dimensions={}
  multiply.2567 = f32[128]{0} multiply(parameter.622, broadcast.2566)
  constant.2568 = f32[] constant(0.1)
  broadcast.2569 = f32[128]{0} broadcast(constant.2568), dimensions={}
  multiply.2570 = f32[128]{0} multiply(subtract.2557, broadcast.2569)
  add.2571 = f32[128]{0} add(multiply.2567, multiply.2570)
  parameter.623 = f32[128]{0} parameter(622)
  constant.2645 = f32[] constant(0.9)
  broadcast.2646 = f32[128]{0} broadcast(constant.2645), dimensions={}
  multiply.2647 = f32[128]{0} multiply(parameter.623, broadcast.2646)
  constant.2648 = f32[] constant(0.1)
  broadcast.2649 = f32[128]{0} broadcast(constant.2648), dimensions={}
  multiply.2650 = f32[128]{0} multiply(divide.2625, broadcast.2649)
  add.2651 = f32[128]{0} add(multiply.2647, multiply.2650)
  parameter.624 = f32[128]{0} parameter(623)
  constant.2652 = f32[] constant(0.9)
  broadcast.2653 = f32[128]{0} broadcast(constant.2652), dimensions={}
  multiply.2654 = f32[128]{0} multiply(parameter.624, broadcast.2653)
  constant.2655 = f32[] constant(0.1)
  broadcast.2656 = f32[128]{0} broadcast(constant.2655), dimensions={}
  multiply.2657 = f32[128]{0} multiply(subtract.2644, broadcast.2656)
  add.2658 = f32[128]{0} add(multiply.2654, multiply.2657)
  parameter.625 = f32[512]{0} parameter(624)
  constant.2732 = f32[] constant(0.9)
  broadcast.2733 = f32[512]{0} broadcast(constant.2732), dimensions={}
  multiply.2734 = f32[512]{0} multiply(parameter.625, broadcast.2733)
  constant.2735 = f32[] constant(0.1)
  broadcast.2736 = f32[512]{0} broadcast(constant.2735), dimensions={}
  multiply.2737 = f32[512]{0} multiply(divide.2712, broadcast.2736)
  add.2738 = f32[512]{0} add(multiply.2734, multiply.2737)
  parameter.626 = f32[512]{0} parameter(625)
  constant.2739 = f32[] constant(0.9)
  broadcast.2740 = f32[512]{0} broadcast(constant.2739), dimensions={}
  multiply.2741 = f32[512]{0} multiply(parameter.626, broadcast.2740)
  constant.2742 = f32[] constant(0.1)
  broadcast.2743 = f32[512]{0} broadcast(constant.2742), dimensions={}
  multiply.2744 = f32[512]{0} multiply(subtract.2731, broadcast.2743)
  add.2745 = f32[512]{0} add(multiply.2741, multiply.2744)
  parameter.627 = f32[256]{0} parameter(626)
  constant.2820 = f32[] constant(0.9)
  broadcast.2821 = f32[256]{0} broadcast(constant.2820), dimensions={}
  multiply.2822 = f32[256]{0} multiply(parameter.627, broadcast.2821)
  constant.2823 = f32[] constant(0.1)
  broadcast.2824 = f32[256]{0} broadcast(constant.2823), dimensions={}
  multiply.2825 = f32[256]{0} multiply(divide.2800, broadcast.2824)
  add.2826 = f32[256]{0} add(multiply.2822, multiply.2825)
  parameter.628 = f32[256]{0} parameter(627)
  constant.2827 = f32[] constant(0.9)
  broadcast.2828 = f32[256]{0} broadcast(constant.2827), dimensions={}
  multiply.2829 = f32[256]{0} multiply(parameter.628, broadcast.2828)
  constant.2830 = f32[] constant(0.1)
  broadcast.2831 = f32[256]{0} broadcast(constant.2830), dimensions={}
  multiply.2832 = f32[256]{0} multiply(subtract.2819, broadcast.2831)
  add.2833 = f32[256]{0} add(multiply.2829, multiply.2832)
  parameter.629 = f32[256]{0} parameter(628)
  constant.2907 = f32[] constant(0.9)
  broadcast.2908 = f32[256]{0} broadcast(constant.2907), dimensions={}
  multiply.2909 = f32[256]{0} multiply(parameter.629, broadcast.2908)
  constant.2910 = f32[] constant(0.1)
  broadcast.2911 = f32[256]{0} broadcast(constant.2910), dimensions={}
  multiply.2912 = f32[256]{0} multiply(divide.2887, broadcast.2911)
  add.2913 = f32[256]{0} add(multiply.2909, multiply.2912)
  parameter.630 = f32[256]{0} parameter(629)
  constant.2914 = f32[] constant(0.9)
  broadcast.2915 = f32[256]{0} broadcast(constant.2914), dimensions={}
  multiply.2916 = f32[256]{0} multiply(parameter.630, broadcast.2915)
  constant.2917 = f32[] constant(0.1)
  broadcast.2918 = f32[256]{0} broadcast(constant.2917), dimensions={}
  multiply.2919 = f32[256]{0} multiply(subtract.2906, broadcast.2918)
  add.2920 = f32[256]{0} add(multiply.2916, multiply.2919)
  parameter.631 = f32[1024]{0} parameter(630)
  constant.2994 = f32[] constant(0.9)
  broadcast.2995 = f32[1024]{0} broadcast(constant.2994), dimensions={}
  multiply.2996 = f32[1024]{0} multiply(parameter.631, broadcast.2995)
  constant.2997 = f32[] constant(0.1)
  broadcast.2998 = f32[1024]{0} broadcast(constant.2997), dimensions={}
  multiply.2999 = f32[1024]{0} multiply(divide.2974, broadcast.2998)
  add.3000 = f32[1024]{0} add(multiply.2996, multiply.2999)
  parameter.632 = f32[1024]{0} parameter(631)
  constant.3001 = f32[] constant(0.9)
  broadcast.3002 = f32[1024]{0} broadcast(constant.3001), dimensions={}
  multiply.3003 = f32[1024]{0} multiply(parameter.632, broadcast.3002)
  constant.3004 = f32[] constant(0.1)
  broadcast.3005 = f32[1024]{0} broadcast(constant.3004), dimensions={}
  multiply.3006 = f32[1024]{0} multiply(subtract.2993, broadcast.3005)
  add.3007 = f32[1024]{0} add(multiply.3003, multiply.3006)
  parameter.633 = f32[1024]{0} parameter(632)
  constant.3070 = f32[] constant(0.9)
  broadcast.3071 = f32[1024]{0} broadcast(constant.3070), dimensions={}
  multiply.3072 = f32[1024]{0} multiply(parameter.633, broadcast.3071)
  constant.3073 = f32[] constant(0.1)
  broadcast.3074 = f32[1024]{0} broadcast(constant.3073), dimensions={}
  multiply.3075 = f32[1024]{0} multiply(divide.3050, broadcast.3074)
  add.3076 = f32[1024]{0} add(multiply.3072, multiply.3075)
  parameter.634 = f32[1024]{0} parameter(633)
  constant.3077 = f32[] constant(0.9)
  broadcast.3078 = f32[1024]{0} broadcast(constant.3077), dimensions={}
  multiply.3079 = f32[1024]{0} multiply(parameter.634, broadcast.3078)
  constant.3080 = f32[] constant(0.1)
  broadcast.3081 = f32[1024]{0} broadcast(constant.3080), dimensions={}
  multiply.3082 = f32[1024]{0} multiply(subtract.3069, broadcast.3081)
  add.3083 = f32[1024]{0} add(multiply.3079, multiply.3082)
  parameter.635 = f32[256]{0} parameter(634)
  constant.3158 = f32[] constant(0.9)
  broadcast.3159 = f32[256]{0} broadcast(constant.3158), dimensions={}
  multiply.3160 = f32[256]{0} multiply(parameter.635, broadcast.3159)
  constant.3161 = f32[] constant(0.1)
  broadcast.3162 = f32[256]{0} broadcast(constant.3161), dimensions={}
  multiply.3163 = f32[256]{0} multiply(divide.3138, broadcast.3162)
  add.3164 = f32[256]{0} add(multiply.3160, multiply.3163)
  parameter.636 = f32[256]{0} parameter(635)
  constant.3165 = f32[] constant(0.9)
  broadcast.3166 = f32[256]{0} broadcast(constant.3165), dimensions={}
  multiply.3167 = f32[256]{0} multiply(parameter.636, broadcast.3166)
  constant.3168 = f32[] constant(0.1)
  broadcast.3169 = f32[256]{0} broadcast(constant.3168), dimensions={}
  multiply.3170 = f32[256]{0} multiply(subtract.3157, broadcast.3169)
  add.3171 = f32[256]{0} add(multiply.3167, multiply.3170)
  parameter.637 = f32[256]{0} parameter(636)
  constant.3245 = f32[] constant(0.9)
  broadcast.3246 = f32[256]{0} broadcast(constant.3245), dimensions={}
  multiply.3247 = f32[256]{0} multiply(parameter.637, broadcast.3246)
  constant.3248 = f32[] constant(0.1)
  broadcast.3249 = f32[256]{0} broadcast(constant.3248), dimensions={}
  multiply.3250 = f32[256]{0} multiply(divide.3225, broadcast.3249)
  add.3251 = f32[256]{0} add(multiply.3247, multiply.3250)
  parameter.638 = f32[256]{0} parameter(637)
  constant.3252 = f32[] constant(0.9)
  broadcast.3253 = f32[256]{0} broadcast(constant.3252), dimensions={}
  multiply.3254 = f32[256]{0} multiply(parameter.638, broadcast.3253)
  constant.3255 = f32[] constant(0.1)
  broadcast.3256 = f32[256]{0} broadcast(constant.3255), dimensions={}
  multiply.3257 = f32[256]{0} multiply(subtract.3244, broadcast.3256)
  add.3258 = f32[256]{0} add(multiply.3254, multiply.3257)
  parameter.639 = f32[1024]{0} parameter(638)
  constant.3332 = f32[] constant(0.9)
  broadcast.3333 = f32[1024]{0} broadcast(constant.3332), dimensions={}
  multiply.3334 = f32[1024]{0} multiply(parameter.639, broadcast.3333)
  constant.3335 = f32[] constant(0.1)
  broadcast.3336 = f32[1024]{0} broadcast(constant.3335), dimensions={}
  multiply.3337 = f32[1024]{0} multiply(divide.3312, broadcast.3336)
  add.3338 = f32[1024]{0} add(multiply.3334, multiply.3337)
  parameter.640 = f32[1024]{0} parameter(639)
  constant.3339 = f32[] constant(0.9)
  broadcast.3340 = f32[1024]{0} broadcast(constant.3339), dimensions={}
  multiply.3341 = f32[1024]{0} multiply(parameter.640, broadcast.3340)
  constant.3342 = f32[] constant(0.1)
  broadcast.3343 = f32[1024]{0} broadcast(constant.3342), dimensions={}
  multiply.3344 = f32[1024]{0} multiply(subtract.3331, broadcast.3343)
  add.3345 = f32[1024]{0} add(multiply.3341, multiply.3344)
  parameter.641 = f32[256]{0} parameter(640)
  constant.3420 = f32[] constant(0.9)
  broadcast.3421 = f32[256]{0} broadcast(constant.3420), dimensions={}
  multiply.3422 = f32[256]{0} multiply(parameter.641, broadcast.3421)
  constant.3423 = f32[] constant(0.1)
  broadcast.3424 = f32[256]{0} broadcast(constant.3423), dimensions={}
  multiply.3425 = f32[256]{0} multiply(divide.3400, broadcast.3424)
  add.3426 = f32[256]{0} add(multiply.3422, multiply.3425)
  parameter.642 = f32[256]{0} parameter(641)
  constant.3427 = f32[] constant(0.9)
  broadcast.3428 = f32[256]{0} broadcast(constant.3427), dimensions={}
  multiply.3429 = f32[256]{0} multiply(parameter.642, broadcast.3428)
  constant.3430 = f32[] constant(0.1)
  broadcast.3431 = f32[256]{0} broadcast(constant.3430), dimensions={}
  multiply.3432 = f32[256]{0} multiply(subtract.3419, broadcast.3431)
  add.3433 = f32[256]{0} add(multiply.3429, multiply.3432)
  parameter.643 = f32[256]{0} parameter(642)
  constant.3507 = f32[] constant(0.9)
  broadcast.3508 = f32[256]{0} broadcast(constant.3507), dimensions={}
  multiply.3509 = f32[256]{0} multiply(parameter.643, broadcast.3508)
  constant.3510 = f32[] constant(0.1)
  broadcast.3511 = f32[256]{0} broadcast(constant.3510), dimensions={}
  multiply.3512 = f32[256]{0} multiply(divide.3487, broadcast.3511)
  add.3513 = f32[256]{0} add(multiply.3509, multiply.3512)
  parameter.644 = f32[256]{0} parameter(643)
  constant.3514 = f32[] constant(0.9)
  broadcast.3515 = f32[256]{0} broadcast(constant.3514), dimensions={}
  multiply.3516 = f32[256]{0} multiply(parameter.644, broadcast.3515)
  constant.3517 = f32[] constant(0.1)
  broadcast.3518 = f32[256]{0} broadcast(constant.3517), dimensions={}
  multiply.3519 = f32[256]{0} multiply(subtract.3506, broadcast.3518)
  add.3520 = f32[256]{0} add(multiply.3516, multiply.3519)
  parameter.645 = f32[1024]{0} parameter(644)
  constant.3594 = f32[] constant(0.9)
  broadcast.3595 = f32[1024]{0} broadcast(constant.3594), dimensions={}
  multiply.3596 = f32[1024]{0} multiply(parameter.645, broadcast.3595)
  constant.3597 = f32[] constant(0.1)
  broadcast.3598 = f32[1024]{0} broadcast(constant.3597), dimensions={}
  multiply.3599 = f32[1024]{0} multiply(divide.3574, broadcast.3598)
  add.3600 = f32[1024]{0} add(multiply.3596, multiply.3599)
  parameter.646 = f32[1024]{0} parameter(645)
  constant.3601 = f32[] constant(0.9)
  broadcast.3602 = f32[1024]{0} broadcast(constant.3601), dimensions={}
  multiply.3603 = f32[1024]{0} multiply(parameter.646, broadcast.3602)
  constant.3604 = f32[] constant(0.1)
  broadcast.3605 = f32[1024]{0} broadcast(constant.3604), dimensions={}
  multiply.3606 = f32[1024]{0} multiply(subtract.3593, broadcast.3605)
  add.3607 = f32[1024]{0} add(multiply.3603, multiply.3606)
  parameter.647 = f32[64]{0} parameter(646)
  constant.741 = f32[] constant(0.9)
  broadcast.742 = f32[64]{0} broadcast(constant.741), dimensions={}
  multiply.743 = f32[64]{0} multiply(parameter.647, broadcast.742)
  constant.744 = f32[] constant(0.1)
  broadcast.745 = f32[64]{0} broadcast(constant.744), dimensions={}
  multiply.746 = f32[64]{0} multiply(divide.721, broadcast.745)
  add.747 = f32[64]{0} add(multiply.743, multiply.746)
  parameter.648 = f32[64]{0} parameter(647)
  constant.748 = f32[] constant(0.9)
  broadcast.749 = f32[64]{0} broadcast(constant.748), dimensions={}
  multiply.750 = f32[64]{0} multiply(parameter.648, broadcast.749)
  constant.751 = f32[] constant(0.1)
  broadcast.752 = f32[64]{0} broadcast(constant.751), dimensions={}
  multiply.753 = f32[64]{0} multiply(subtract.740, broadcast.752)
  add.754 = f32[64]{0} add(multiply.750, multiply.753)
  constant.879 = bf16[] constant(0)
  broadcast.880 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.879), dimensions={}
  compare.881 = pred[128,56,56,64]{3,2,1,0} compare(convert.872, broadcast.880), direction=GT
  constant.966 = bf16[] constant(0)
  broadcast.967 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.966), dimensions={}
  compare.968 = pred[128,56,56,64]{3,2,1,0} compare(convert.959, broadcast.967), direction=GT
  constant.1130 = bf16[] constant(0)
  broadcast.1131 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1130), dimensions={}
  compare.1132 = pred[128,56,56,256]{3,2,1,0} compare(add.1123, broadcast.1131), direction=GT
  constant.1392 = bf16[] constant(0)
  broadcast.1393 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1392), dimensions={}
  compare.1394 = pred[128,56,56,256]{3,2,1,0} compare(add.1385, broadcast.1393), direction=GT
  constant.1654 = bf16[] constant(0)
  broadcast.1655 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1654), dimensions={}
  compare.1656 = pred[128,56,56,256]{3,2,1,0} compare(add.1647, broadcast.1655), direction=GT
  constant.1741 = bf16[] constant(0)
  broadcast.1742 = bf16[128,56,56,128]{3,2,1,0} broadcast(constant.1741), dimensions={}
  compare.1743 = pred[128,56,56,128]{3,2,1,0} compare(convert.1734, broadcast.1742), direction=GT
  constant.1828 = bf16[] constant(0)
  broadcast.1829 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1828), dimensions={}
  compare.1830 = pred[128,28,28,128]{3,2,1,0} compare(convert.1821, broadcast.1829), direction=GT
  constant.1992 = bf16[] constant(0)
  broadcast.1993 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.1992), dimensions={}
  compare.1994 = pred[128,28,28,512]{3,2,1,0} compare(add.1985, broadcast.1993), direction=GT
  constant.2254 = bf16[] constant(0)
  broadcast.2255 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2254), dimensions={}
  compare.2256 = pred[128,28,28,512]{3,2,1,0} compare(add.2247, broadcast.2255), direction=GT
  constant.2516 = bf16[] constant(0)
  broadcast.2517 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2516), dimensions={}
  compare.2518 = pred[128,28,28,512]{3,2,1,0} compare(add.2509, broadcast.2517), direction=GT
  constant.2778 = bf16[] constant(0)
  broadcast.2779 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2778), dimensions={}
  compare.2780 = pred[128,28,28,512]{3,2,1,0} compare(add.2771, broadcast.2779), direction=GT
  constant.2865 = bf16[] constant(0)
  broadcast.2866 = bf16[128,28,28,256]{3,2,1,0} broadcast(constant.2865), dimensions={}
  compare.2867 = pred[128,28,28,256]{3,2,1,0} compare(convert.2858, broadcast.2866), direction=GT
  constant.2952 = bf16[] constant(0)
  broadcast.2953 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.2952), dimensions={}
  compare.2954 = pred[128,14,14,256]{3,2,1,0} compare(convert.2945, broadcast.2953), direction=GT
  constant.3116 = bf16[] constant(0)
  broadcast.3117 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3116), dimensions={}
  compare.3118 = pred[128,14,14,1024]{3,2,1,0} compare(add.3109, broadcast.3117), direction=GT
  constant.3378 = bf16[] constant(0)
  broadcast.3379 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3378), dimensions={}
  compare.3380 = pred[128,14,14,1024]{3,2,1,0} compare(add.3371, broadcast.3379), direction=GT
  constant.3640 = bf16[] constant(0)
  broadcast.3641 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3640), dimensions={}
  compare.3642 = pred[128,14,14,1024]{3,2,1,0} compare(add.3633, broadcast.3641), direction=GT
  constant.3902 = bf16[] constant(0)
  broadcast.3903 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3902), dimensions={}
  compare.3904 = pred[128,14,14,1024]{3,2,1,0} compare(add.3895, broadcast.3903), direction=GT
  constant.4164 = bf16[] constant(0)
  broadcast.4165 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.4164), dimensions={}
  compare.4166 = pred[128,14,14,1024]{3,2,1,0} compare(add.4157, broadcast.4165), direction=GT
  constant.4426 = bf16[] constant(0)
  broadcast.4427 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.4426), dimensions={}
  compare.4428 = pred[128,14,14,1024]{3,2,1,0} compare(add.4419, broadcast.4427), direction=GT
  constant.4513 = bf16[] constant(0)
  broadcast.4514 = bf16[128,14,14,512]{3,2,1,0} broadcast(constant.4513), dimensions={}
  compare.4515 = pred[128,14,14,512]{3,2,1,0} compare(convert.4506, broadcast.4514), direction=GT
  constant.4600 = bf16[] constant(0)
  broadcast.4601 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4600), dimensions={}
  compare.4602 = pred[128,7,7,512]{3,2,1,0} compare(convert.4593, broadcast.4601), direction=GT
  constant.4764 = bf16[] constant(0)
  broadcast.4765 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4764), dimensions={}
  compare.4766 = pred[128,7,7,2048]{3,2,1,0} compare(add.4757, broadcast.4765), direction=GT
  constant.5026 = bf16[] constant(0)
  broadcast.5027 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.5026), dimensions={}
  compare.5028 = pred[128,7,7,2048]{3,2,1,0} compare(add.5019, broadcast.5027), direction=GT
  constant.5288 = bf16[] constant(0)
  broadcast.5289 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.5288), dimensions={}
  compare.5290 = pred[128,7,7,2048]{3,2,1,0} compare(add.5281, broadcast.5289), direction=GT
  constant.6086 = f32[] constant(1)
  constant.6087 = f32[] constant(128)
  divide.6088 = f32[] divide(constant.6086, constant.6087)
  negate.6089 = f32[] negate(divide.6088)
  broadcast.6090 = f32[128,1000]{1,0} broadcast(negate.6089), dimensions={}
  multiply.6091 = f32[128,1000]{1,0} multiply(broadcast.6090, select.5366)
  constant.6092 = f32[] constant(0)
  reduce.6097 = f32[128]{0} reduce(multiply.6091, constant.6092), dimensions={1}, to_apply=primitive_computation_add.6093
  broadcast.6098 = f32[128]{0} broadcast(reduce.6097), dimensions={0}
  broadcast.6099 = f32[128,1]{1,0} broadcast(broadcast.6098), dimensions={0}
  negate.6100 = f32[128,1]{1,0} negate(broadcast.6099)
  divide.6101 = f32[128,1]{1,0} divide(negate.6100, broadcast.5349)
  constant.6102 = f32[] constant(0)
  reduce.6107 = f32[128]{0} reduce(divide.6101, constant.6102), dimensions={1}, to_apply=primitive_computation_add.6103
  broadcast.6108 = f32[128]{0} broadcast(reduce.6107), dimensions={0}
  broadcast.6109 = f32[128,1000]{1,0} broadcast(broadcast.6108), dimensions={0}
  multiply.6110 = f32[128,1000]{1,0} multiply(broadcast.6109, exponential.5342)
  add.6111 = f32[128,1000]{1,0} add(multiply.6091, multiply.6110)
  convert.6112 = bf16[128,1000]{1,0} convert(add.6111)
  dot.6133 = bf16[128,2048]{1,0} dot(convert.6112, convert.5310), lhs_contracting_dims={1}, rhs_contracting_dims={1}
  convert.6134 = f32[128,2048]{1,0} convert(dot.6133)
  convert.6135 = bf16[128,2048]{1,0} convert(convert.6134)
  broadcast.6136 = bf16[128,2048]{1,0} broadcast(convert.5302), dimensions={}
  divide.6137 = bf16[128,2048]{1,0} divide(convert.6135, broadcast.6136)
  convert.6138 = f32[128,2048]{1,0} convert(divide.6137)
  broadcast.6139 = f32[128,7,7,2048]{3,2,1,0} broadcast(convert.6138), dimensions={0,3}
  convert.6140 = bf16[128,7,7,2048]{3,2,1,0} convert(broadcast.6139)
  constant.6141 = bf16[] constant(0)
  broadcast.6142 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.6141), dimensions={}
  select.6143 = bf16[128,7,7,2048]{3,2,1,0} select(compare.5290, convert.6140, broadcast.6142)
  constant.5113 = bf16[] constant(0)
  broadcast.5114 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.5113), dimensions={}
  compare.5115 = pred[128,7,7,512]{3,2,1,0} compare(convert.5106, broadcast.5114), direction=GT
  constant.5200 = bf16[] constant(0)
  broadcast.5201 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.5200), dimensions={}
  compare.5202 = pred[128,7,7,512]{3,2,1,0} compare(convert.5193, broadcast.5201), direction=GT
  convert.6144 = f32[128,7,7,2048]{3,2,1,0} convert(select.6143)
  multiply.6154 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6144, subtract.5259)
  constant.6155 = f32[] constant(0)
  reduce.6160 = f32[2048]{0} reduce(multiply.6154, constant.6155), dimensions={0,1,2}, to_apply=primitive_computation_add.6156
  broadcast.6161 = f32[2048]{0} broadcast(reduce.6160), dimensions={0}
  broadcast.6162 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6161), dimensions={3}
  multiply.6165 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6162, reshape.5270)
  constant.6166 = f32[] constant(0)
  reduce.6171 = f32[2048]{0} reduce(multiply.6165, constant.6166), dimensions={0,1,2}, to_apply=primitive_computation_add.6167
  broadcast.6172 = f32[2048]{0} broadcast(reduce.6171), dimensions={0}
  constant.5267 = f32[] constant(-0.5)
  broadcast.5268 = f32[2048]{0} broadcast(constant.5267), dimensions={}
  constant.5264 = f32[] constant(-1.5)
  broadcast.5265 = f32[2048]{0} broadcast(constant.5264), dimensions={}
  power.5266 = f32[2048]{0} power(add.5262, broadcast.5265)
  multiply.5269 = f32[2048]{0} multiply(broadcast.5268, power.5266)
  multiply.6173 = f32[2048]{0} multiply(broadcast.6172, multiply.5269)
  broadcast.6176 = f32[2048]{0} broadcast(convert.5234), dimensions={}
  divide.6177 = f32[2048]{0} divide(multiply.6173, broadcast.6176)
  broadcast.6178 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6177), dimensions={3}
  constant.5224 = f32[] constant(2)
  broadcast.5225 = f32[128,7,7,2048]{3,2,1,0} broadcast(constant.5224), dimensions={}
  multiply.5226 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.5225, convert.5212)
  multiply.6179 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.6178, multiply.5226)
  reshape.6180 = f32[2048]{0} reshape(multiply.5272)
  broadcast.6181 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.6180), dimensions={3}
  multiply.6182 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6144, broadcast.6181)
  add.6183 = f32[128,7,7,2048]{3,2,1,0} add(multiply.6179, multiply.6182)
  negate.6174 = f32[2048]{0} negate(multiply.6173)
  constant.5238 = f32[] constant(2)
  broadcast.5239 = f32[2048]{0} broadcast(constant.5238), dimensions={}
  multiply.5240 = f32[2048]{0} multiply(broadcast.5239, divide.5222)
  multiply.6175 = f32[2048]{0} multiply(negate.6174, multiply.5240)
  constant.6184 = f32[] constant(0)
  reduce.6189 = f32[2048]{0} reduce(multiply.6182, constant.6184), dimensions={0,1,2}, to_apply=primitive_computation_add.6185
  broadcast.6190 = f32[2048]{0} broadcast(reduce.6189), dimensions={0}
  broadcast.6191 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6190), dimensions={3}
  negate.6192 = f32[1,1,1,2048]{3,2,1,0} negate(broadcast.6191)
  reshape.6193 = f32[2048]{0} reshape(negate.6192)
  add.6194 = f32[2048]{0} add(multiply.6175, reshape.6193)
  broadcast.6195 = f32[2048]{0} broadcast(convert.5220), dimensions={}
  divide.6196 = f32[2048]{0} divide(add.6194, broadcast.6195)
  broadcast.6197 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6196), dimensions={3}
  add.6198 = f32[128,7,7,2048]{3,2,1,0} add(add.6183, broadcast.6197)
  convert.6199 = bf16[128,7,7,2048]{3,2,1,0} convert(add.6198)
  reverse.6203 = bf16[1,1,512,2048]{3,2,1,0} reverse(convert.5210), dimensions={0,1}
  convolution.6204 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.6199, reverse.6203), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.6205 = f32[128,7,7,512]{3,2,1,0} convert(convolution.6204)
  convert.6206 = bf16[128,7,7,512]{3,2,1,0} convert(convert.6205)
  constant.6207 = bf16[] constant(0)
  broadcast.6208 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.6207), dimensions={}
  select.6209 = bf16[128,7,7,512]{3,2,1,0} select(compare.5202, convert.6206, broadcast.6208)
  convert.6210 = f32[128,7,7,512]{3,2,1,0} convert(select.6209)
  multiply.6220 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6210, subtract.5172)
  constant.6221 = f32[] constant(0)
  reduce.6226 = f32[512]{0} reduce(multiply.6220, constant.6221), dimensions={0,1,2}, to_apply=primitive_computation_add.6222
  broadcast.6227 = f32[512]{0} broadcast(reduce.6226), dimensions={0}
  broadcast.6228 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6227), dimensions={3}
  multiply.6231 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6228, reshape.5183)
  constant.6232 = f32[] constant(0)
  reduce.6237 = f32[512]{0} reduce(multiply.6231, constant.6232), dimensions={0,1,2}, to_apply=primitive_computation_add.6233
  broadcast.6238 = f32[512]{0} broadcast(reduce.6237), dimensions={0}
  constant.5180 = f32[] constant(-0.5)
  broadcast.5181 = f32[512]{0} broadcast(constant.5180), dimensions={}
  constant.5177 = f32[] constant(-1.5)
  broadcast.5178 = f32[512]{0} broadcast(constant.5177), dimensions={}
  power.5179 = f32[512]{0} power(add.5175, broadcast.5178)
  multiply.5182 = f32[512]{0} multiply(broadcast.5181, power.5179)
  multiply.6239 = f32[512]{0} multiply(broadcast.6238, multiply.5182)
  broadcast.6242 = f32[512]{0} broadcast(convert.5147), dimensions={}
  divide.6243 = f32[512]{0} divide(multiply.6239, broadcast.6242)
  broadcast.6244 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6243), dimensions={3}
  constant.5137 = f32[] constant(2)
  broadcast.5138 = f32[128,7,7,512]{3,2,1,0} broadcast(constant.5137), dimensions={}
  multiply.5139 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.5138, convert.5125)
  multiply.6245 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.6244, multiply.5139)
  reshape.6246 = f32[512]{0} reshape(multiply.5185)
  broadcast.6247 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.6246), dimensions={3}
  multiply.6248 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6210, broadcast.6247)
  add.6249 = f32[128,7,7,512]{3,2,1,0} add(multiply.6245, multiply.6248)
  negate.6240 = f32[512]{0} negate(multiply.6239)
  constant.5151 = f32[] constant(2)
  broadcast.5152 = f32[512]{0} broadcast(constant.5151), dimensions={}
  multiply.5153 = f32[512]{0} multiply(broadcast.5152, divide.5135)
  multiply.6241 = f32[512]{0} multiply(negate.6240, multiply.5153)
  constant.6250 = f32[] constant(0)
  reduce.6255 = f32[512]{0} reduce(multiply.6248, constant.6250), dimensions={0,1,2}, to_apply=primitive_computation_add.6251
  broadcast.6256 = f32[512]{0} broadcast(reduce.6255), dimensions={0}
  broadcast.6257 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6256), dimensions={3}
  negate.6258 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.6257)
  reshape.6259 = f32[512]{0} reshape(negate.6258)
  add.6260 = f32[512]{0} add(multiply.6241, reshape.6259)
  broadcast.6261 = f32[512]{0} broadcast(convert.5133), dimensions={}
  divide.6262 = f32[512]{0} divide(add.6260, broadcast.6261)
  broadcast.6263 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6262), dimensions={3}
  add.6264 = f32[128,7,7,512]{3,2,1,0} add(add.6249, broadcast.6263)
  convert.6265 = bf16[128,7,7,512]{3,2,1,0} convert(add.6264)
  reverse.6269 = bf16[3,3,512,512]{3,2,1,0} reverse(convert.5123), dimensions={0,1}
  convolution.6270 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.6265, reverse.6269), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.6271 = f32[128,7,7,512]{3,2,1,0} convert(convolution.6270)
  convert.6272 = bf16[128,7,7,512]{3,2,1,0} convert(convert.6271)
  constant.6273 = bf16[] constant(0)
  broadcast.6274 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.6273), dimensions={}
  select.6275 = bf16[128,7,7,512]{3,2,1,0} select(compare.5115, convert.6272, broadcast.6274)
  convert.6276 = f32[128,7,7,512]{3,2,1,0} convert(select.6275)
  multiply.6286 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6276, subtract.5085)
  constant.6287 = f32[] constant(0)
  reduce.6292 = f32[512]{0} reduce(multiply.6286, constant.6287), dimensions={0,1,2}, to_apply=primitive_computation_add.6288
  broadcast.6293 = f32[512]{0} broadcast(reduce.6292), dimensions={0}
  broadcast.6294 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6293), dimensions={3}
  multiply.6297 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6294, reshape.5096)
  constant.6298 = f32[] constant(0)
  reduce.6303 = f32[512]{0} reduce(multiply.6297, constant.6298), dimensions={0,1,2}, to_apply=primitive_computation_add.6299
  broadcast.6304 = f32[512]{0} broadcast(reduce.6303), dimensions={0}
  constant.5093 = f32[] constant(-0.5)
  broadcast.5094 = f32[512]{0} broadcast(constant.5093), dimensions={}
  constant.5090 = f32[] constant(-1.5)
  broadcast.5091 = f32[512]{0} broadcast(constant.5090), dimensions={}
  power.5092 = f32[512]{0} power(add.5088, broadcast.5091)
  multiply.5095 = f32[512]{0} multiply(broadcast.5094, power.5092)
  multiply.6305 = f32[512]{0} multiply(broadcast.6304, multiply.5095)
  broadcast.6308 = f32[512]{0} broadcast(convert.5060), dimensions={}
  divide.6309 = f32[512]{0} divide(multiply.6305, broadcast.6308)
  broadcast.6310 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6309), dimensions={3}
  constant.5050 = f32[] constant(2)
  broadcast.5051 = f32[128,7,7,512]{3,2,1,0} broadcast(constant.5050), dimensions={}
  multiply.5052 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.5051, convert.5038)
  multiply.6311 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.6310, multiply.5052)
  reshape.6312 = f32[512]{0} reshape(multiply.5098)
  broadcast.6313 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.6312), dimensions={3}
  multiply.6314 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6276, broadcast.6313)
  add.6315 = f32[128,7,7,512]{3,2,1,0} add(multiply.6311, multiply.6314)
  negate.6306 = f32[512]{0} negate(multiply.6305)
  constant.5064 = f32[] constant(2)
  broadcast.5065 = f32[512]{0} broadcast(constant.5064), dimensions={}
  multiply.5066 = f32[512]{0} multiply(broadcast.5065, divide.5048)
  multiply.6307 = f32[512]{0} multiply(negate.6306, multiply.5066)
  constant.6316 = f32[] constant(0)
  reduce.6321 = f32[512]{0} reduce(multiply.6314, constant.6316), dimensions={0,1,2}, to_apply=primitive_computation_add.6317
  broadcast.6322 = f32[512]{0} broadcast(reduce.6321), dimensions={0}
  broadcast.6323 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6322), dimensions={3}
  negate.6324 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.6323)
  reshape.6325 = f32[512]{0} reshape(negate.6324)
  add.6326 = f32[512]{0} add(multiply.6307, reshape.6325)
  broadcast.6327 = f32[512]{0} broadcast(convert.5046), dimensions={}
  divide.6328 = f32[512]{0} divide(add.6326, broadcast.6327)
  broadcast.6329 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6328), dimensions={3}
  add.6330 = f32[128,7,7,512]{3,2,1,0} add(add.6315, broadcast.6329)
  convert.6331 = bf16[128,7,7,512]{3,2,1,0} convert(add.6330)
  reverse.6335 = bf16[1,1,2048,512]{3,2,1,0} reverse(convert.5036), dimensions={0,1}
  convolution.6336 = bf16[128,7,7,2048]{3,2,1,0} convolution(convert.6331, reverse.6335), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.6337 = f32[128,7,7,2048]{3,2,1,0} convert(convolution.6336)
  convert.6338 = bf16[128,7,7,2048]{3,2,1,0} convert(convert.6337)
  add.6339 = bf16[128,7,7,2048]{3,2,1,0} add(select.6143, convert.6338)
  constant.6340 = bf16[] constant(0)
  broadcast.6341 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.6340), dimensions={}
  select.6342 = bf16[128,7,7,2048]{3,2,1,0} select(compare.5028, add.6339, broadcast.6341)
  constant.4851 = bf16[] constant(0)
  broadcast.4852 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4851), dimensions={}
  compare.4853 = pred[128,7,7,512]{3,2,1,0} compare(convert.4844, broadcast.4852), direction=GT
  constant.4938 = bf16[] constant(0)
  broadcast.4939 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4938), dimensions={}
  compare.4940 = pred[128,7,7,512]{3,2,1,0} compare(convert.4931, broadcast.4939), direction=GT
  convert.6343 = f32[128,7,7,2048]{3,2,1,0} convert(select.6342)
  multiply.6353 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6343, subtract.4997)
  constant.6354 = f32[] constant(0)
  reduce.6359 = f32[2048]{0} reduce(multiply.6353, constant.6354), dimensions={0,1,2}, to_apply=primitive_computation_add.6355
  broadcast.6360 = f32[2048]{0} broadcast(reduce.6359), dimensions={0}
  broadcast.6361 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6360), dimensions={3}
  multiply.6364 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6361, reshape.5008)
  constant.6365 = f32[] constant(0)
  reduce.6370 = f32[2048]{0} reduce(multiply.6364, constant.6365), dimensions={0,1,2}, to_apply=primitive_computation_add.6366
  broadcast.6371 = f32[2048]{0} broadcast(reduce.6370), dimensions={0}
  constant.5005 = f32[] constant(-0.5)
  broadcast.5006 = f32[2048]{0} broadcast(constant.5005), dimensions={}
  constant.5002 = f32[] constant(-1.5)
  broadcast.5003 = f32[2048]{0} broadcast(constant.5002), dimensions={}
  power.5004 = f32[2048]{0} power(add.5000, broadcast.5003)
  multiply.5007 = f32[2048]{0} multiply(broadcast.5006, power.5004)
  multiply.6372 = f32[2048]{0} multiply(broadcast.6371, multiply.5007)
  broadcast.6375 = f32[2048]{0} broadcast(convert.4972), dimensions={}
  divide.6376 = f32[2048]{0} divide(multiply.6372, broadcast.6375)
  broadcast.6377 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6376), dimensions={3}
  constant.4962 = f32[] constant(2)
  broadcast.4963 = f32[128,7,7,2048]{3,2,1,0} broadcast(constant.4962), dimensions={}
  multiply.4964 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.4963, convert.4950)
  multiply.6378 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.6377, multiply.4964)
  reshape.6379 = f32[2048]{0} reshape(multiply.5010)
  broadcast.6380 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.6379), dimensions={3}
  multiply.6381 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6343, broadcast.6380)
  add.6382 = f32[128,7,7,2048]{3,2,1,0} add(multiply.6378, multiply.6381)
  negate.6373 = f32[2048]{0} negate(multiply.6372)
  constant.4976 = f32[] constant(2)
  broadcast.4977 = f32[2048]{0} broadcast(constant.4976), dimensions={}
  multiply.4978 = f32[2048]{0} multiply(broadcast.4977, divide.4960)
  multiply.6374 = f32[2048]{0} multiply(negate.6373, multiply.4978)
  constant.6383 = f32[] constant(0)
  reduce.6388 = f32[2048]{0} reduce(multiply.6381, constant.6383), dimensions={0,1,2}, to_apply=primitive_computation_add.6384
  broadcast.6389 = f32[2048]{0} broadcast(reduce.6388), dimensions={0}
  broadcast.6390 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6389), dimensions={3}
  negate.6391 = f32[1,1,1,2048]{3,2,1,0} negate(broadcast.6390)
  reshape.6392 = f32[2048]{0} reshape(negate.6391)
  add.6393 = f32[2048]{0} add(multiply.6374, reshape.6392)
  broadcast.6394 = f32[2048]{0} broadcast(convert.4958), dimensions={}
  divide.6395 = f32[2048]{0} divide(add.6393, broadcast.6394)
  broadcast.6396 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6395), dimensions={3}
  add.6397 = f32[128,7,7,2048]{3,2,1,0} add(add.6382, broadcast.6396)
  convert.6398 = bf16[128,7,7,2048]{3,2,1,0} convert(add.6397)
  reverse.6402 = bf16[1,1,512,2048]{3,2,1,0} reverse(convert.4948), dimensions={0,1}
  convolution.6403 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.6398, reverse.6402), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.6404 = f32[128,7,7,512]{3,2,1,0} convert(convolution.6403)
  convert.6405 = bf16[128,7,7,512]{3,2,1,0} convert(convert.6404)
  constant.6406 = bf16[] constant(0)
  broadcast.6407 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.6406), dimensions={}
  select.6408 = bf16[128,7,7,512]{3,2,1,0} select(compare.4940, convert.6405, broadcast.6407)
  convert.6409 = f32[128,7,7,512]{3,2,1,0} convert(select.6408)
  multiply.6419 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6409, subtract.4910)
  constant.6420 = f32[] constant(0)
  reduce.6425 = f32[512]{0} reduce(multiply.6419, constant.6420), dimensions={0,1,2}, to_apply=primitive_computation_add.6421
  broadcast.6426 = f32[512]{0} broadcast(reduce.6425), dimensions={0}
  broadcast.6427 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6426), dimensions={3}
  multiply.6430 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6427, reshape.4921)
  constant.6431 = f32[] constant(0)
  reduce.6436 = f32[512]{0} reduce(multiply.6430, constant.6431), dimensions={0,1,2}, to_apply=primitive_computation_add.6432
  broadcast.6437 = f32[512]{0} broadcast(reduce.6436), dimensions={0}
  constant.4918 = f32[] constant(-0.5)
  broadcast.4919 = f32[512]{0} broadcast(constant.4918), dimensions={}
  constant.4915 = f32[] constant(-1.5)
  broadcast.4916 = f32[512]{0} broadcast(constant.4915), dimensions={}
  power.4917 = f32[512]{0} power(add.4913, broadcast.4916)
  multiply.4920 = f32[512]{0} multiply(broadcast.4919, power.4917)
  multiply.6438 = f32[512]{0} multiply(broadcast.6437, multiply.4920)
  broadcast.6441 = f32[512]{0} broadcast(convert.4885), dimensions={}
  divide.6442 = f32[512]{0} divide(multiply.6438, broadcast.6441)
  broadcast.6443 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6442), dimensions={3}
  constant.4875 = f32[] constant(2)
  broadcast.4876 = f32[128,7,7,512]{3,2,1,0} broadcast(constant.4875), dimensions={}
  multiply.4877 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.4876, convert.4863)
  multiply.6444 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.6443, multiply.4877)
  reshape.6445 = f32[512]{0} reshape(multiply.4923)
  broadcast.6446 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.6445), dimensions={3}
  multiply.6447 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6409, broadcast.6446)
  add.6448 = f32[128,7,7,512]{3,2,1,0} add(multiply.6444, multiply.6447)
  negate.6439 = f32[512]{0} negate(multiply.6438)
  constant.4889 = f32[] constant(2)
  broadcast.4890 = f32[512]{0} broadcast(constant.4889), dimensions={}
  multiply.4891 = f32[512]{0} multiply(broadcast.4890, divide.4873)
  multiply.6440 = f32[512]{0} multiply(negate.6439, multiply.4891)
  constant.6449 = f32[] constant(0)
  reduce.6454 = f32[512]{0} reduce(multiply.6447, constant.6449), dimensions={0,1,2}, to_apply=primitive_computation_add.6450
  broadcast.6455 = f32[512]{0} broadcast(reduce.6454), dimensions={0}
  broadcast.6456 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6455), dimensions={3}
  negate.6457 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.6456)
  reshape.6458 = f32[512]{0} reshape(negate.6457)
  add.6459 = f32[512]{0} add(multiply.6440, reshape.6458)
  broadcast.6460 = f32[512]{0} broadcast(convert.4871), dimensions={}
  divide.6461 = f32[512]{0} divide(add.6459, broadcast.6460)
  broadcast.6462 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6461), dimensions={3}
  add.6463 = f32[128,7,7,512]{3,2,1,0} add(add.6448, broadcast.6462)
  convert.6464 = bf16[128,7,7,512]{3,2,1,0} convert(add.6463)
  reverse.6468 = bf16[3,3,512,512]{3,2,1,0} reverse(convert.4861), dimensions={0,1}
  convolution.6469 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.6464, reverse.6468), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.6470 = f32[128,7,7,512]{3,2,1,0} convert(convolution.6469)
  convert.6471 = bf16[128,7,7,512]{3,2,1,0} convert(convert.6470)
  constant.6472 = bf16[] constant(0)
  broadcast.6473 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.6472), dimensions={}
  select.6474 = bf16[128,7,7,512]{3,2,1,0} select(compare.4853, convert.6471, broadcast.6473)
  convert.6475 = f32[128,7,7,512]{3,2,1,0} convert(select.6474)
  multiply.6485 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6475, subtract.4823)
  constant.6486 = f32[] constant(0)
  reduce.6491 = f32[512]{0} reduce(multiply.6485, constant.6486), dimensions={0,1,2}, to_apply=primitive_computation_add.6487
  broadcast.6492 = f32[512]{0} broadcast(reduce.6491), dimensions={0}
  broadcast.6493 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6492), dimensions={3}
  multiply.6496 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6493, reshape.4834)
  constant.6497 = f32[] constant(0)
  reduce.6502 = f32[512]{0} reduce(multiply.6496, constant.6497), dimensions={0,1,2}, to_apply=primitive_computation_add.6498
  broadcast.6503 = f32[512]{0} broadcast(reduce.6502), dimensions={0}
  constant.4831 = f32[] constant(-0.5)
  broadcast.4832 = f32[512]{0} broadcast(constant.4831), dimensions={}
  constant.4828 = f32[] constant(-1.5)
  broadcast.4829 = f32[512]{0} broadcast(constant.4828), dimensions={}
  power.4830 = f32[512]{0} power(add.4826, broadcast.4829)
  multiply.4833 = f32[512]{0} multiply(broadcast.4832, power.4830)
  multiply.6504 = f32[512]{0} multiply(broadcast.6503, multiply.4833)
  broadcast.6507 = f32[512]{0} broadcast(convert.4798), dimensions={}
  divide.6508 = f32[512]{0} divide(multiply.6504, broadcast.6507)
  broadcast.6509 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6508), dimensions={3}
  constant.4788 = f32[] constant(2)
  broadcast.4789 = f32[128,7,7,512]{3,2,1,0} broadcast(constant.4788), dimensions={}
  multiply.4790 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.4789, convert.4776)
  multiply.6510 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.6509, multiply.4790)
  reshape.6511 = f32[512]{0} reshape(multiply.4836)
  broadcast.6512 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.6511), dimensions={3}
  multiply.6513 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6475, broadcast.6512)
  add.6514 = f32[128,7,7,512]{3,2,1,0} add(multiply.6510, multiply.6513)
  negate.6505 = f32[512]{0} negate(multiply.6504)
  constant.4802 = f32[] constant(2)
  broadcast.4803 = f32[512]{0} broadcast(constant.4802), dimensions={}
  multiply.4804 = f32[512]{0} multiply(broadcast.4803, divide.4786)
  multiply.6506 = f32[512]{0} multiply(negate.6505, multiply.4804)
  constant.6515 = f32[] constant(0)
  reduce.6520 = f32[512]{0} reduce(multiply.6513, constant.6515), dimensions={0,1,2}, to_apply=primitive_computation_add.6516
  broadcast.6521 = f32[512]{0} broadcast(reduce.6520), dimensions={0}
  broadcast.6522 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6521), dimensions={3}
  negate.6523 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.6522)
  reshape.6524 = f32[512]{0} reshape(negate.6523)
  add.6525 = f32[512]{0} add(multiply.6506, reshape.6524)
  broadcast.6526 = f32[512]{0} broadcast(convert.4784), dimensions={}
  divide.6527 = f32[512]{0} divide(add.6525, broadcast.6526)
  broadcast.6528 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6527), dimensions={3}
  add.6529 = f32[128,7,7,512]{3,2,1,0} add(add.6514, broadcast.6528)
  convert.6530 = bf16[128,7,7,512]{3,2,1,0} convert(add.6529)
  reverse.6534 = bf16[1,1,2048,512]{3,2,1,0} reverse(convert.4774), dimensions={0,1}
  convolution.6535 = bf16[128,7,7,2048]{3,2,1,0} convolution(convert.6530, reverse.6534), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.6536 = f32[128,7,7,2048]{3,2,1,0} convert(convolution.6535)
  convert.6537 = bf16[128,7,7,2048]{3,2,1,0} convert(convert.6536)
  add.6538 = bf16[128,7,7,2048]{3,2,1,0} add(select.6342, convert.6537)
  constant.6539 = bf16[] constant(0)
  broadcast.6540 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.6539), dimensions={}
  select.6541 = bf16[128,7,7,2048]{3,2,1,0} select(compare.4766, add.6538, broadcast.6540)
  convert.6542 = f32[128,7,7,2048]{3,2,1,0} convert(select.6541)
  multiply.6552 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6542, subtract.4659)
  constant.6553 = f32[] constant(0)
  reduce.6558 = f32[2048]{0} reduce(multiply.6552, constant.6553), dimensions={0,1,2}, to_apply=primitive_computation_add.6554
  broadcast.6559 = f32[2048]{0} broadcast(reduce.6558), dimensions={0}
  broadcast.6560 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6559), dimensions={3}
  multiply.6563 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6560, reshape.4670)
  constant.6564 = f32[] constant(0)
  reduce.6569 = f32[2048]{0} reduce(multiply.6563, constant.6564), dimensions={0,1,2}, to_apply=primitive_computation_add.6565
  broadcast.6570 = f32[2048]{0} broadcast(reduce.6569), dimensions={0}
  constant.4667 = f32[] constant(-0.5)
  broadcast.4668 = f32[2048]{0} broadcast(constant.4667), dimensions={}
  constant.4664 = f32[] constant(-1.5)
  broadcast.4665 = f32[2048]{0} broadcast(constant.4664), dimensions={}
  power.4666 = f32[2048]{0} power(add.4662, broadcast.4665)
  multiply.4669 = f32[2048]{0} multiply(broadcast.4668, power.4666)
  multiply.6571 = f32[2048]{0} multiply(broadcast.6570, multiply.4669)
  broadcast.6574 = f32[2048]{0} broadcast(convert.4634), dimensions={}
  divide.6575 = f32[2048]{0} divide(multiply.6571, broadcast.6574)
  broadcast.6576 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6575), dimensions={3}
  constant.4624 = f32[] constant(2)
  broadcast.4625 = f32[128,7,7,2048]{3,2,1,0} broadcast(constant.4624), dimensions={}
  multiply.4626 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.4625, convert.4612)
  multiply.6577 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.6576, multiply.4626)
  reshape.6578 = f32[2048]{0} reshape(multiply.4672)
  broadcast.6579 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.6578), dimensions={3}
  multiply.6580 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6542, broadcast.6579)
  add.6581 = f32[128,7,7,2048]{3,2,1,0} add(multiply.6577, multiply.6580)
  negate.6572 = f32[2048]{0} negate(multiply.6571)
  constant.4638 = f32[] constant(2)
  broadcast.4639 = f32[2048]{0} broadcast(constant.4638), dimensions={}
  multiply.4640 = f32[2048]{0} multiply(broadcast.4639, divide.4622)
  multiply.6573 = f32[2048]{0} multiply(negate.6572, multiply.4640)
  constant.6582 = f32[] constant(0)
  reduce.6587 = f32[2048]{0} reduce(multiply.6580, constant.6582), dimensions={0,1,2}, to_apply=primitive_computation_add.6583
  broadcast.6588 = f32[2048]{0} broadcast(reduce.6587), dimensions={0}
  broadcast.6589 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6588), dimensions={3}
  negate.6590 = f32[1,1,1,2048]{3,2,1,0} negate(broadcast.6589)
  reshape.6591 = f32[2048]{0} reshape(negate.6590)
  add.6592 = f32[2048]{0} add(multiply.6573, reshape.6591)
  broadcast.6593 = f32[2048]{0} broadcast(convert.4620), dimensions={}
  divide.6594 = f32[2048]{0} divide(add.6592, broadcast.6593)
  broadcast.6595 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6594), dimensions={3}
  add.6596 = f32[128,7,7,2048]{3,2,1,0} add(add.6581, broadcast.6595)
  convert.6597 = bf16[128,7,7,2048]{3,2,1,0} convert(add.6596)
  reverse.6601 = bf16[1,1,512,2048]{3,2,1,0} reverse(convert.4610), dimensions={0,1}
  convolution.6602 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.6597, reverse.6601), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.6603 = f32[128,7,7,512]{3,2,1,0} convert(convolution.6602)
  convert.6604 = bf16[128,7,7,512]{3,2,1,0} convert(convert.6603)
  constant.6605 = bf16[] constant(0)
  broadcast.6606 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.6605), dimensions={}
  select.6607 = bf16[128,7,7,512]{3,2,1,0} select(compare.4602, convert.6604, broadcast.6606)
  convert.6608 = f32[128,7,7,512]{3,2,1,0} convert(select.6607)
  multiply.6618 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6608, subtract.4572)
  constant.6619 = f32[] constant(0)
  reduce.6624 = f32[512]{0} reduce(multiply.6618, constant.6619), dimensions={0,1,2}, to_apply=primitive_computation_add.6620
  broadcast.6625 = f32[512]{0} broadcast(reduce.6624), dimensions={0}
  broadcast.6626 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6625), dimensions={3}
  multiply.6629 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6626, reshape.4583)
  constant.6630 = f32[] constant(0)
  reduce.6635 = f32[512]{0} reduce(multiply.6629, constant.6630), dimensions={0,1,2}, to_apply=primitive_computation_add.6631
  broadcast.6636 = f32[512]{0} broadcast(reduce.6635), dimensions={0}
  constant.4580 = f32[] constant(-0.5)
  broadcast.4581 = f32[512]{0} broadcast(constant.4580), dimensions={}
  constant.4577 = f32[] constant(-1.5)
  broadcast.4578 = f32[512]{0} broadcast(constant.4577), dimensions={}
  power.4579 = f32[512]{0} power(add.4575, broadcast.4578)
  multiply.4582 = f32[512]{0} multiply(broadcast.4581, power.4579)
  multiply.6637 = f32[512]{0} multiply(broadcast.6636, multiply.4582)
  broadcast.6640 = f32[512]{0} broadcast(convert.4547), dimensions={}
  divide.6641 = f32[512]{0} divide(multiply.6637, broadcast.6640)
  broadcast.6642 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6641), dimensions={3}
  constant.4537 = f32[] constant(2)
  broadcast.4538 = f32[128,7,7,512]{3,2,1,0} broadcast(constant.4537), dimensions={}
  multiply.4539 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.4538, convert.4525)
  multiply.6643 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.6642, multiply.4539)
  reshape.6644 = f32[512]{0} reshape(multiply.4585)
  broadcast.6645 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.6644), dimensions={3}
  multiply.6646 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6608, broadcast.6645)
  add.6647 = f32[128,7,7,512]{3,2,1,0} add(multiply.6643, multiply.6646)
  negate.6638 = f32[512]{0} negate(multiply.6637)
  constant.4551 = f32[] constant(2)
  broadcast.4552 = f32[512]{0} broadcast(constant.4551), dimensions={}
  multiply.4553 = f32[512]{0} multiply(broadcast.4552, divide.4535)
  multiply.6639 = f32[512]{0} multiply(negate.6638, multiply.4553)
  constant.6648 = f32[] constant(0)
  reduce.6653 = f32[512]{0} reduce(multiply.6646, constant.6648), dimensions={0,1,2}, to_apply=primitive_computation_add.6649
  broadcast.6654 = f32[512]{0} broadcast(reduce.6653), dimensions={0}
  broadcast.6655 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6654), dimensions={3}
  negate.6656 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.6655)
  reshape.6657 = f32[512]{0} reshape(negate.6656)
  add.6658 = f32[512]{0} add(multiply.6639, reshape.6657)
  broadcast.6659 = f32[512]{0} broadcast(convert.4533), dimensions={}
  divide.6660 = f32[512]{0} divide(add.6658, broadcast.6659)
  broadcast.6661 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6660), dimensions={3}
  add.6662 = f32[128,7,7,512]{3,2,1,0} add(add.6647, broadcast.6661)
  convert.6663 = bf16[128,7,7,512]{3,2,1,0} convert(add.6662)
  reverse.6667 = bf16[3,3,512,512]{3,2,1,0} reverse(convert.4523), dimensions={0,1}
  convolution.6668 = bf16[128,14,14,512]{3,2,1,0} convolution(convert.6663, reverse.6667), window={size=3x3 pad=2_1x2_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  convert.6669 = f32[128,14,14,512]{3,2,1,0} convert(convolution.6668)
  convert.6670 = bf16[128,14,14,512]{3,2,1,0} convert(convert.6669)
  constant.6671 = bf16[] constant(0)
  broadcast.6672 = bf16[128,14,14,512]{3,2,1,0} broadcast(constant.6671), dimensions={}
  select.6673 = bf16[128,14,14,512]{3,2,1,0} select(compare.4515, convert.6670, broadcast.6672)
  convert.6674 = f32[128,14,14,512]{3,2,1,0} convert(select.6673)
  multiply.6684 = f32[128,14,14,512]{3,2,1,0} multiply(convert.6674, subtract.4485)
  constant.6685 = f32[] constant(0)
  reduce.6690 = f32[512]{0} reduce(multiply.6684, constant.6685), dimensions={0,1,2}, to_apply=primitive_computation_add.6686
  broadcast.6691 = f32[512]{0} broadcast(reduce.6690), dimensions={0}
  broadcast.6692 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6691), dimensions={3}
  multiply.6695 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6692, reshape.4496)
  constant.6696 = f32[] constant(0)
  reduce.6701 = f32[512]{0} reduce(multiply.6695, constant.6696), dimensions={0,1,2}, to_apply=primitive_computation_add.6697
  broadcast.6702 = f32[512]{0} broadcast(reduce.6701), dimensions={0}
  constant.4493 = f32[] constant(-0.5)
  broadcast.4494 = f32[512]{0} broadcast(constant.4493), dimensions={}
  constant.4490 = f32[] constant(-1.5)
  broadcast.4491 = f32[512]{0} broadcast(constant.4490), dimensions={}
  power.4492 = f32[512]{0} power(add.4488, broadcast.4491)
  multiply.4495 = f32[512]{0} multiply(broadcast.4494, power.4492)
  multiply.6703 = f32[512]{0} multiply(broadcast.6702, multiply.4495)
  broadcast.6706 = f32[512]{0} broadcast(convert.4460), dimensions={}
  divide.6707 = f32[512]{0} divide(multiply.6703, broadcast.6706)
  broadcast.6708 = f32[128,14,14,512]{3,2,1,0} broadcast(divide.6707), dimensions={3}
  constant.4450 = f32[] constant(2)
  broadcast.4451 = f32[128,14,14,512]{3,2,1,0} broadcast(constant.4450), dimensions={}
  multiply.4452 = f32[128,14,14,512]{3,2,1,0} multiply(broadcast.4451, convert.4438)
  multiply.6709 = f32[128,14,14,512]{3,2,1,0} multiply(broadcast.6708, multiply.4452)
  reshape.6710 = f32[512]{0} reshape(multiply.4498)
  broadcast.6711 = f32[128,14,14,512]{3,2,1,0} broadcast(reshape.6710), dimensions={3}
  multiply.6712 = f32[128,14,14,512]{3,2,1,0} multiply(convert.6674, broadcast.6711)
  add.6713 = f32[128,14,14,512]{3,2,1,0} add(multiply.6709, multiply.6712)
  negate.6704 = f32[512]{0} negate(multiply.6703)
  constant.4464 = f32[] constant(2)
  broadcast.4465 = f32[512]{0} broadcast(constant.4464), dimensions={}
  multiply.4466 = f32[512]{0} multiply(broadcast.4465, divide.4448)
  multiply.6705 = f32[512]{0} multiply(negate.6704, multiply.4466)
  constant.6714 = f32[] constant(0)
  reduce.6719 = f32[512]{0} reduce(multiply.6712, constant.6714), dimensions={0,1,2}, to_apply=primitive_computation_add.6715
  broadcast.6720 = f32[512]{0} broadcast(reduce.6719), dimensions={0}
  broadcast.6721 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6720), dimensions={3}
  negate.6722 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.6721)
  reshape.6723 = f32[512]{0} reshape(negate.6722)
  add.6724 = f32[512]{0} add(multiply.6705, reshape.6723)
  broadcast.6725 = f32[512]{0} broadcast(convert.4446), dimensions={}
  divide.6726 = f32[512]{0} divide(add.6724, broadcast.6725)
  broadcast.6727 = f32[128,14,14,512]{3,2,1,0} broadcast(divide.6726), dimensions={3}
  add.6728 = f32[128,14,14,512]{3,2,1,0} add(add.6713, broadcast.6727)
  convert.6729 = bf16[128,14,14,512]{3,2,1,0} convert(add.6728)
  reverse.6733 = bf16[1,1,1024,512]{3,2,1,0} reverse(convert.4436), dimensions={0,1}
  convolution.6734 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.6729, reverse.6733), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.6735 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.6734)
  convert.6736 = bf16[128,14,14,1024]{3,2,1,0} convert(convert.6735)
  convert.6737 = f32[128,7,7,2048]{3,2,1,0} convert(select.6541)
  multiply.6747 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6737, subtract.4735)
  constant.6748 = f32[] constant(0)
  reduce.6753 = f32[2048]{0} reduce(multiply.6747, constant.6748), dimensions={0,1,2}, to_apply=primitive_computation_add.6749
  broadcast.6754 = f32[2048]{0} broadcast(reduce.6753), dimensions={0}
  broadcast.6755 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6754), dimensions={3}
  multiply.6758 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6755, reshape.4746)
  constant.6759 = f32[] constant(0)
  reduce.6764 = f32[2048]{0} reduce(multiply.6758, constant.6759), dimensions={0,1,2}, to_apply=primitive_computation_add.6760
  broadcast.6765 = f32[2048]{0} broadcast(reduce.6764), dimensions={0}
  constant.4743 = f32[] constant(-0.5)
  broadcast.4744 = f32[2048]{0} broadcast(constant.4743), dimensions={}
  constant.4740 = f32[] constant(-1.5)
  broadcast.4741 = f32[2048]{0} broadcast(constant.4740), dimensions={}
  power.4742 = f32[2048]{0} power(add.4738, broadcast.4741)
  multiply.4745 = f32[2048]{0} multiply(broadcast.4744, power.4742)
  multiply.6766 = f32[2048]{0} multiply(broadcast.6765, multiply.4745)
  broadcast.6769 = f32[2048]{0} broadcast(convert.4710), dimensions={}
  divide.6770 = f32[2048]{0} divide(multiply.6766, broadcast.6769)
  broadcast.6771 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6770), dimensions={3}
  constant.4700 = f32[] constant(2)
  broadcast.4701 = f32[128,7,7,2048]{3,2,1,0} broadcast(constant.4700), dimensions={}
  multiply.4702 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.4701, convert.4688)
  multiply.6772 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.6771, multiply.4702)
  reshape.6773 = f32[2048]{0} reshape(multiply.4748)
  broadcast.6774 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.6773), dimensions={3}
  multiply.6775 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6737, broadcast.6774)
  add.6776 = f32[128,7,7,2048]{3,2,1,0} add(multiply.6772, multiply.6775)
  negate.6767 = f32[2048]{0} negate(multiply.6766)
  constant.4714 = f32[] constant(2)
  broadcast.4715 = f32[2048]{0} broadcast(constant.4714), dimensions={}
  multiply.4716 = f32[2048]{0} multiply(broadcast.4715, divide.4698)
  multiply.6768 = f32[2048]{0} multiply(negate.6767, multiply.4716)
  constant.6777 = f32[] constant(0)
  reduce.6782 = f32[2048]{0} reduce(multiply.6775, constant.6777), dimensions={0,1,2}, to_apply=primitive_computation_add.6778
  broadcast.6783 = f32[2048]{0} broadcast(reduce.6782), dimensions={0}
  broadcast.6784 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6783), dimensions={3}
  negate.6785 = f32[1,1,1,2048]{3,2,1,0} negate(broadcast.6784)
  reshape.6786 = f32[2048]{0} reshape(negate.6785)
  add.6787 = f32[2048]{0} add(multiply.6768, reshape.6786)
  broadcast.6788 = f32[2048]{0} broadcast(convert.4696), dimensions={}
  divide.6789 = f32[2048]{0} divide(add.6787, broadcast.6788)
  broadcast.6790 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6789), dimensions={3}
  add.6791 = f32[128,7,7,2048]{3,2,1,0} add(add.6776, broadcast.6790)
  convert.6792 = bf16[128,7,7,2048]{3,2,1,0} convert(add.6791)
  reverse.6796 = bf16[1,1,1024,2048]{3,2,1,0} reverse(convert.4686), dimensions={0,1}
  convolution.6797 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.6792, reverse.6796), window={size=1x1 pad=0_1x0_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  convert.6798 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.6797)
  convert.6799 = bf16[128,14,14,1024]{3,2,1,0} convert(convert.6798)
  add.6800 = bf16[128,14,14,1024]{3,2,1,0} add(convert.6736, convert.6799)
  constant.6801 = bf16[] constant(0)
  broadcast.6802 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.6801), dimensions={}
  select.6803 = bf16[128,14,14,1024]{3,2,1,0} select(compare.4428, add.6800, broadcast.6802)
  constant.4251 = bf16[] constant(0)
  broadcast.4252 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4251), dimensions={}
  compare.4253 = pred[128,14,14,256]{3,2,1,0} compare(convert.4244, broadcast.4252), direction=GT
  constant.4338 = bf16[] constant(0)
  broadcast.4339 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4338), dimensions={}
  compare.4340 = pred[128,14,14,256]{3,2,1,0} compare(convert.4331, broadcast.4339), direction=GT
  convert.6804 = f32[128,14,14,1024]{3,2,1,0} convert(select.6803)
  multiply.6814 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.6804, subtract.4397)
  constant.6815 = f32[] constant(0)
  reduce.6820 = f32[1024]{0} reduce(multiply.6814, constant.6815), dimensions={0,1,2}, to_apply=primitive_computation_add.6816
  broadcast.6821 = f32[1024]{0} broadcast(reduce.6820), dimensions={0}
  broadcast.6822 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6821), dimensions={3}
  multiply.6825 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.6822, reshape.4408)
  constant.6826 = f32[] constant(0)
  reduce.6831 = f32[1024]{0} reduce(multiply.6825, constant.6826), dimensions={0,1,2}, to_apply=primitive_computation_add.6827
  broadcast.6832 = f32[1024]{0} broadcast(reduce.6831), dimensions={0}
  constant.4405 = f32[] constant(-0.5)
  broadcast.4406 = f32[1024]{0} broadcast(constant.4405), dimensions={}
  constant.4402 = f32[] constant(-1.5)
  broadcast.4403 = f32[1024]{0} broadcast(constant.4402), dimensions={}
  power.4404 = f32[1024]{0} power(add.4400, broadcast.4403)
  multiply.4407 = f32[1024]{0} multiply(broadcast.4406, power.4404)
  multiply.6833 = f32[1024]{0} multiply(broadcast.6832, multiply.4407)
  broadcast.6836 = f32[1024]{0} broadcast(convert.4372), dimensions={}
  divide.6837 = f32[1024]{0} divide(multiply.6833, broadcast.6836)
  broadcast.6838 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.6837), dimensions={3}
  constant.4362 = f32[] constant(2)
  broadcast.4363 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.4362), dimensions={}
  multiply.4364 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.4363, convert.4350)
  multiply.6839 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.6838, multiply.4364)
  reshape.6840 = f32[1024]{0} reshape(multiply.4410)
  broadcast.6841 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.6840), dimensions={3}
  multiply.6842 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.6804, broadcast.6841)
  add.6843 = f32[128,14,14,1024]{3,2,1,0} add(multiply.6839, multiply.6842)
  negate.6834 = f32[1024]{0} negate(multiply.6833)
  constant.4376 = f32[] constant(2)
  broadcast.4377 = f32[1024]{0} broadcast(constant.4376), dimensions={}
  multiply.4378 = f32[1024]{0} multiply(broadcast.4377, divide.4360)
  multiply.6835 = f32[1024]{0} multiply(negate.6834, multiply.4378)
  constant.6844 = f32[] constant(0)
  reduce.6849 = f32[1024]{0} reduce(multiply.6842, constant.6844), dimensions={0,1,2}, to_apply=primitive_computation_add.6845
  broadcast.6850 = f32[1024]{0} broadcast(reduce.6849), dimensions={0}
  broadcast.6851 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6850), dimensions={3}
  negate.6852 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.6851)
  reshape.6853 = f32[1024]{0} reshape(negate.6852)
  add.6854 = f32[1024]{0} add(multiply.6835, reshape.6853)
  broadcast.6855 = f32[1024]{0} broadcast(convert.4358), dimensions={}
  divide.6856 = f32[1024]{0} divide(add.6854, broadcast.6855)
  broadcast.6857 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.6856), dimensions={3}
  add.6858 = f32[128,14,14,1024]{3,2,1,0} add(add.6843, broadcast.6857)
  convert.6859 = bf16[128,14,14,1024]{3,2,1,0} convert(add.6858)
  reverse.6863 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.4348), dimensions={0,1}
  convolution.6864 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.6859, reverse.6863), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.6865 = f32[128,14,14,256]{3,2,1,0} convert(convolution.6864)
  convert.6866 = bf16[128,14,14,256]{3,2,1,0} convert(convert.6865)
  constant.6867 = bf16[] constant(0)
  broadcast.6868 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.6867), dimensions={}
  select.6869 = bf16[128,14,14,256]{3,2,1,0} select(compare.4340, convert.6866, broadcast.6868)
  convert.6870 = f32[128,14,14,256]{3,2,1,0} convert(select.6869)
  multiply.6880 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6870, subtract.4310)
  constant.6881 = f32[] constant(0)
  reduce.6886 = f32[256]{0} reduce(multiply.6880, constant.6881), dimensions={0,1,2}, to_apply=primitive_computation_add.6882
  broadcast.6887 = f32[256]{0} broadcast(reduce.6886), dimensions={0}
  broadcast.6888 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6887), dimensions={3}
  multiply.6891 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6888, reshape.4321)
  constant.6892 = f32[] constant(0)
  reduce.6897 = f32[256]{0} reduce(multiply.6891, constant.6892), dimensions={0,1,2}, to_apply=primitive_computation_add.6893
  broadcast.6898 = f32[256]{0} broadcast(reduce.6897), dimensions={0}
  constant.4318 = f32[] constant(-0.5)
  broadcast.4319 = f32[256]{0} broadcast(constant.4318), dimensions={}
  constant.4315 = f32[] constant(-1.5)
  broadcast.4316 = f32[256]{0} broadcast(constant.4315), dimensions={}
  power.4317 = f32[256]{0} power(add.4313, broadcast.4316)
  multiply.4320 = f32[256]{0} multiply(broadcast.4319, power.4317)
  multiply.6899 = f32[256]{0} multiply(broadcast.6898, multiply.4320)
  broadcast.6902 = f32[256]{0} broadcast(convert.4285), dimensions={}
  divide.6903 = f32[256]{0} divide(multiply.6899, broadcast.6902)
  broadcast.6904 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6903), dimensions={3}
  constant.4275 = f32[] constant(2)
  broadcast.4276 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.4275), dimensions={}
  multiply.4277 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.4276, convert.4263)
  multiply.6905 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.6904, multiply.4277)
  reshape.6906 = f32[256]{0} reshape(multiply.4323)
  broadcast.6907 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.6906), dimensions={3}
  multiply.6908 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6870, broadcast.6907)
  add.6909 = f32[128,14,14,256]{3,2,1,0} add(multiply.6905, multiply.6908)
  negate.6900 = f32[256]{0} negate(multiply.6899)
  constant.4289 = f32[] constant(2)
  broadcast.4290 = f32[256]{0} broadcast(constant.4289), dimensions={}
  multiply.4291 = f32[256]{0} multiply(broadcast.4290, divide.4273)
  multiply.6901 = f32[256]{0} multiply(negate.6900, multiply.4291)
  constant.6910 = f32[] constant(0)
  reduce.6915 = f32[256]{0} reduce(multiply.6908, constant.6910), dimensions={0,1,2}, to_apply=primitive_computation_add.6911
  broadcast.6916 = f32[256]{0} broadcast(reduce.6915), dimensions={0}
  broadcast.6917 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6916), dimensions={3}
  negate.6918 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.6917)
  reshape.6919 = f32[256]{0} reshape(negate.6918)
  add.6920 = f32[256]{0} add(multiply.6901, reshape.6919)
  broadcast.6921 = f32[256]{0} broadcast(convert.4271), dimensions={}
  divide.6922 = f32[256]{0} divide(add.6920, broadcast.6921)
  broadcast.6923 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6922), dimensions={3}
  add.6924 = f32[128,14,14,256]{3,2,1,0} add(add.6909, broadcast.6923)
  convert.6925 = bf16[128,14,14,256]{3,2,1,0} convert(add.6924)
  reverse.6929 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.4261), dimensions={0,1}
  convolution.6930 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.6925, reverse.6929), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.6931 = f32[128,14,14,256]{3,2,1,0} convert(convolution.6930)
  convert.6932 = bf16[128,14,14,256]{3,2,1,0} convert(convert.6931)
  constant.6933 = bf16[] constant(0)
  broadcast.6934 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.6933), dimensions={}
  select.6935 = bf16[128,14,14,256]{3,2,1,0} select(compare.4253, convert.6932, broadcast.6934)
  convert.6936 = f32[128,14,14,256]{3,2,1,0} convert(select.6935)
  multiply.6946 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6936, subtract.4223)
  constant.6947 = f32[] constant(0)
  reduce.6952 = f32[256]{0} reduce(multiply.6946, constant.6947), dimensions={0,1,2}, to_apply=primitive_computation_add.6948
  broadcast.6953 = f32[256]{0} broadcast(reduce.6952), dimensions={0}
  broadcast.6954 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6953), dimensions={3}
  multiply.6957 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6954, reshape.4234)
  constant.6958 = f32[] constant(0)
  reduce.6963 = f32[256]{0} reduce(multiply.6957, constant.6958), dimensions={0,1,2}, to_apply=primitive_computation_add.6959
  broadcast.6964 = f32[256]{0} broadcast(reduce.6963), dimensions={0}
  constant.4231 = f32[] constant(-0.5)
  broadcast.4232 = f32[256]{0} broadcast(constant.4231), dimensions={}
  constant.4228 = f32[] constant(-1.5)
  broadcast.4229 = f32[256]{0} broadcast(constant.4228), dimensions={}
  power.4230 = f32[256]{0} power(add.4226, broadcast.4229)
  multiply.4233 = f32[256]{0} multiply(broadcast.4232, power.4230)
  multiply.6965 = f32[256]{0} multiply(broadcast.6964, multiply.4233)
  broadcast.6968 = f32[256]{0} broadcast(convert.4198), dimensions={}
  divide.6969 = f32[256]{0} divide(multiply.6965, broadcast.6968)
  broadcast.6970 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6969), dimensions={3}
  constant.4188 = f32[] constant(2)
  broadcast.4189 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.4188), dimensions={}
  multiply.4190 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.4189, convert.4176)
  multiply.6971 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.6970, multiply.4190)
  reshape.6972 = f32[256]{0} reshape(multiply.4236)
  broadcast.6973 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.6972), dimensions={3}
  multiply.6974 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6936, broadcast.6973)
  add.6975 = f32[128,14,14,256]{3,2,1,0} add(multiply.6971, multiply.6974)
  negate.6966 = f32[256]{0} negate(multiply.6965)
  constant.4202 = f32[] constant(2)
  broadcast.4203 = f32[256]{0} broadcast(constant.4202), dimensions={}
  multiply.4204 = f32[256]{0} multiply(broadcast.4203, divide.4186)
  multiply.6967 = f32[256]{0} multiply(negate.6966, multiply.4204)
  constant.6976 = f32[] constant(0)
  reduce.6981 = f32[256]{0} reduce(multiply.6974, constant.6976), dimensions={0,1,2}, to_apply=primitive_computation_add.6977
  broadcast.6982 = f32[256]{0} broadcast(reduce.6981), dimensions={0}
  broadcast.6983 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6982), dimensions={3}
  negate.6984 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.6983)
  reshape.6985 = f32[256]{0} reshape(negate.6984)
  add.6986 = f32[256]{0} add(multiply.6967, reshape.6985)
  broadcast.6987 = f32[256]{0} broadcast(convert.4184), dimensions={}
  divide.6988 = f32[256]{0} divide(add.6986, broadcast.6987)
  broadcast.6989 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6988), dimensions={3}
  add.6990 = f32[128,14,14,256]{3,2,1,0} add(add.6975, broadcast.6989)
  convert.6991 = bf16[128,14,14,256]{3,2,1,0} convert(add.6990)
  reverse.6995 = bf16[1,1,1024,256]{3,2,1,0} reverse(convert.4174), dimensions={0,1}
  convolution.6996 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.6991, reverse.6995), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.6997 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.6996)
  convert.6998 = bf16[128,14,14,1024]{3,2,1,0} convert(convert.6997)
  add.6999 = bf16[128,14,14,1024]{3,2,1,0} add(select.6803, convert.6998)
  constant.7000 = bf16[] constant(0)
  broadcast.7001 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.7000), dimensions={}
  select.7002 = bf16[128,14,14,1024]{3,2,1,0} select(compare.4166, add.6999, broadcast.7001)
  constant.3989 = bf16[] constant(0)
  broadcast.3990 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3989), dimensions={}
  compare.3991 = pred[128,14,14,256]{3,2,1,0} compare(convert.3982, broadcast.3990), direction=GT
  constant.4076 = bf16[] constant(0)
  broadcast.4077 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4076), dimensions={}
  compare.4078 = pred[128,14,14,256]{3,2,1,0} compare(convert.4069, broadcast.4077), direction=GT
  convert.7003 = f32[128,14,14,1024]{3,2,1,0} convert(select.7002)
  multiply.7013 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7003, subtract.4135)
  constant.7014 = f32[] constant(0)
  reduce.7019 = f32[1024]{0} reduce(multiply.7013, constant.7014), dimensions={0,1,2}, to_apply=primitive_computation_add.7015
  broadcast.7020 = f32[1024]{0} broadcast(reduce.7019), dimensions={0}
  broadcast.7021 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7020), dimensions={3}
  multiply.7024 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7021, reshape.4146)
  constant.7025 = f32[] constant(0)
  reduce.7030 = f32[1024]{0} reduce(multiply.7024, constant.7025), dimensions={0,1,2}, to_apply=primitive_computation_add.7026
  broadcast.7031 = f32[1024]{0} broadcast(reduce.7030), dimensions={0}
  constant.4143 = f32[] constant(-0.5)
  broadcast.4144 = f32[1024]{0} broadcast(constant.4143), dimensions={}
  constant.4140 = f32[] constant(-1.5)
  broadcast.4141 = f32[1024]{0} broadcast(constant.4140), dimensions={}
  power.4142 = f32[1024]{0} power(add.4138, broadcast.4141)
  multiply.4145 = f32[1024]{0} multiply(broadcast.4144, power.4142)
  multiply.7032 = f32[1024]{0} multiply(broadcast.7031, multiply.4145)
  broadcast.7035 = f32[1024]{0} broadcast(convert.4110), dimensions={}
  divide.7036 = f32[1024]{0} divide(multiply.7032, broadcast.7035)
  broadcast.7037 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7036), dimensions={3}
  constant.4100 = f32[] constant(2)
  broadcast.4101 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.4100), dimensions={}
  multiply.4102 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.4101, convert.4088)
  multiply.7038 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.7037, multiply.4102)
  reshape.7039 = f32[1024]{0} reshape(multiply.4148)
  broadcast.7040 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.7039), dimensions={3}
  multiply.7041 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7003, broadcast.7040)
  add.7042 = f32[128,14,14,1024]{3,2,1,0} add(multiply.7038, multiply.7041)
  negate.7033 = f32[1024]{0} negate(multiply.7032)
  constant.4114 = f32[] constant(2)
  broadcast.4115 = f32[1024]{0} broadcast(constant.4114), dimensions={}
  multiply.4116 = f32[1024]{0} multiply(broadcast.4115, divide.4098)
  multiply.7034 = f32[1024]{0} multiply(negate.7033, multiply.4116)
  constant.7043 = f32[] constant(0)
  reduce.7048 = f32[1024]{0} reduce(multiply.7041, constant.7043), dimensions={0,1,2}, to_apply=primitive_computation_add.7044
  broadcast.7049 = f32[1024]{0} broadcast(reduce.7048), dimensions={0}
  broadcast.7050 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7049), dimensions={3}
  negate.7051 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.7050)
  reshape.7052 = f32[1024]{0} reshape(negate.7051)
  add.7053 = f32[1024]{0} add(multiply.7034, reshape.7052)
  broadcast.7054 = f32[1024]{0} broadcast(convert.4096), dimensions={}
  divide.7055 = f32[1024]{0} divide(add.7053, broadcast.7054)
  broadcast.7056 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7055), dimensions={3}
  add.7057 = f32[128,14,14,1024]{3,2,1,0} add(add.7042, broadcast.7056)
  convert.7058 = bf16[128,14,14,1024]{3,2,1,0} convert(add.7057)
  reverse.7062 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.4086), dimensions={0,1}
  convolution.7063 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7058, reverse.7062), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7064 = f32[128,14,14,256]{3,2,1,0} convert(convolution.7063)
  convert.7065 = bf16[128,14,14,256]{3,2,1,0} convert(convert.7064)
  constant.7066 = bf16[] constant(0)
  broadcast.7067 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7066), dimensions={}
  select.7068 = bf16[128,14,14,256]{3,2,1,0} select(compare.4078, convert.7065, broadcast.7067)
  convert.7069 = f32[128,14,14,256]{3,2,1,0} convert(select.7068)
  multiply.7079 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7069, subtract.4048)
  constant.7080 = f32[] constant(0)
  reduce.7085 = f32[256]{0} reduce(multiply.7079, constant.7080), dimensions={0,1,2}, to_apply=primitive_computation_add.7081
  broadcast.7086 = f32[256]{0} broadcast(reduce.7085), dimensions={0}
  broadcast.7087 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7086), dimensions={3}
  multiply.7090 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7087, reshape.4059)
  constant.7091 = f32[] constant(0)
  reduce.7096 = f32[256]{0} reduce(multiply.7090, constant.7091), dimensions={0,1,2}, to_apply=primitive_computation_add.7092
  broadcast.7097 = f32[256]{0} broadcast(reduce.7096), dimensions={0}
  constant.4056 = f32[] constant(-0.5)
  broadcast.4057 = f32[256]{0} broadcast(constant.4056), dimensions={}
  constant.4053 = f32[] constant(-1.5)
  broadcast.4054 = f32[256]{0} broadcast(constant.4053), dimensions={}
  power.4055 = f32[256]{0} power(add.4051, broadcast.4054)
  multiply.4058 = f32[256]{0} multiply(broadcast.4057, power.4055)
  multiply.7098 = f32[256]{0} multiply(broadcast.7097, multiply.4058)
  broadcast.7101 = f32[256]{0} broadcast(convert.4023), dimensions={}
  divide.7102 = f32[256]{0} divide(multiply.7098, broadcast.7101)
  broadcast.7103 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7102), dimensions={3}
  constant.4013 = f32[] constant(2)
  broadcast.4014 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.4013), dimensions={}
  multiply.4015 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.4014, convert.4001)
  multiply.7104 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7103, multiply.4015)
  reshape.7105 = f32[256]{0} reshape(multiply.4061)
  broadcast.7106 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7105), dimensions={3}
  multiply.7107 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7069, broadcast.7106)
  add.7108 = f32[128,14,14,256]{3,2,1,0} add(multiply.7104, multiply.7107)
  negate.7099 = f32[256]{0} negate(multiply.7098)
  constant.4027 = f32[] constant(2)
  broadcast.4028 = f32[256]{0} broadcast(constant.4027), dimensions={}
  multiply.4029 = f32[256]{0} multiply(broadcast.4028, divide.4011)
  multiply.7100 = f32[256]{0} multiply(negate.7099, multiply.4029)
  constant.7109 = f32[] constant(0)
  reduce.7114 = f32[256]{0} reduce(multiply.7107, constant.7109), dimensions={0,1,2}, to_apply=primitive_computation_add.7110
  broadcast.7115 = f32[256]{0} broadcast(reduce.7114), dimensions={0}
  broadcast.7116 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7115), dimensions={3}
  negate.7117 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7116)
  reshape.7118 = f32[256]{0} reshape(negate.7117)
  add.7119 = f32[256]{0} add(multiply.7100, reshape.7118)
  broadcast.7120 = f32[256]{0} broadcast(convert.4009), dimensions={}
  divide.7121 = f32[256]{0} divide(add.7119, broadcast.7120)
  broadcast.7122 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7121), dimensions={3}
  add.7123 = f32[128,14,14,256]{3,2,1,0} add(add.7108, broadcast.7122)
  convert.7124 = bf16[128,14,14,256]{3,2,1,0} convert(add.7123)
  reverse.7128 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.3999), dimensions={0,1}
  convolution.7129 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7124, reverse.7128), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.7130 = f32[128,14,14,256]{3,2,1,0} convert(convolution.7129)
  convert.7131 = bf16[128,14,14,256]{3,2,1,0} convert(convert.7130)
  constant.7132 = bf16[] constant(0)
  broadcast.7133 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7132), dimensions={}
  select.7134 = bf16[128,14,14,256]{3,2,1,0} select(compare.3991, convert.7131, broadcast.7133)
  convert.7135 = f32[128,14,14,256]{3,2,1,0} convert(select.7134)
  multiply.7145 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7135, subtract.3961)
  constant.7146 = f32[] constant(0)
  reduce.7151 = f32[256]{0} reduce(multiply.7145, constant.7146), dimensions={0,1,2}, to_apply=primitive_computation_add.7147
  broadcast.7152 = f32[256]{0} broadcast(reduce.7151), dimensions={0}
  broadcast.7153 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7152), dimensions={3}
  multiply.7156 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7153, reshape.3972)
  constant.7157 = f32[] constant(0)
  reduce.7162 = f32[256]{0} reduce(multiply.7156, constant.7157), dimensions={0,1,2}, to_apply=primitive_computation_add.7158
  broadcast.7163 = f32[256]{0} broadcast(reduce.7162), dimensions={0}
  constant.3969 = f32[] constant(-0.5)
  broadcast.3970 = f32[256]{0} broadcast(constant.3969), dimensions={}
  constant.3966 = f32[] constant(-1.5)
  broadcast.3967 = f32[256]{0} broadcast(constant.3966), dimensions={}
  power.3968 = f32[256]{0} power(add.3964, broadcast.3967)
  multiply.3971 = f32[256]{0} multiply(broadcast.3970, power.3968)
  multiply.7164 = f32[256]{0} multiply(broadcast.7163, multiply.3971)
  broadcast.7167 = f32[256]{0} broadcast(convert.3936), dimensions={}
  divide.7168 = f32[256]{0} divide(multiply.7164, broadcast.7167)
  broadcast.7169 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7168), dimensions={3}
  constant.3926 = f32[] constant(2)
  broadcast.3927 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3926), dimensions={}
  multiply.3928 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3927, convert.3914)
  multiply.7170 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7169, multiply.3928)
  reshape.7171 = f32[256]{0} reshape(multiply.3974)
  broadcast.7172 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7171), dimensions={3}
  multiply.7173 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7135, broadcast.7172)
  add.7174 = f32[128,14,14,256]{3,2,1,0} add(multiply.7170, multiply.7173)
  negate.7165 = f32[256]{0} negate(multiply.7164)
  constant.3940 = f32[] constant(2)
  broadcast.3941 = f32[256]{0} broadcast(constant.3940), dimensions={}
  multiply.3942 = f32[256]{0} multiply(broadcast.3941, divide.3924)
  multiply.7166 = f32[256]{0} multiply(negate.7165, multiply.3942)
  constant.7175 = f32[] constant(0)
  reduce.7180 = f32[256]{0} reduce(multiply.7173, constant.7175), dimensions={0,1,2}, to_apply=primitive_computation_add.7176
  broadcast.7181 = f32[256]{0} broadcast(reduce.7180), dimensions={0}
  broadcast.7182 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7181), dimensions={3}
  negate.7183 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7182)
  reshape.7184 = f32[256]{0} reshape(negate.7183)
  add.7185 = f32[256]{0} add(multiply.7166, reshape.7184)
  broadcast.7186 = f32[256]{0} broadcast(convert.3922), dimensions={}
  divide.7187 = f32[256]{0} divide(add.7185, broadcast.7186)
  broadcast.7188 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7187), dimensions={3}
  add.7189 = f32[128,14,14,256]{3,2,1,0} add(add.7174, broadcast.7188)
  convert.7190 = bf16[128,14,14,256]{3,2,1,0} convert(add.7189)
  reverse.7194 = bf16[1,1,1024,256]{3,2,1,0} reverse(convert.3912), dimensions={0,1}
  convolution.7195 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.7190, reverse.7194), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7196 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.7195)
  convert.7197 = bf16[128,14,14,1024]{3,2,1,0} convert(convert.7196)
  add.7198 = bf16[128,14,14,1024]{3,2,1,0} add(select.7002, convert.7197)
  constant.7199 = bf16[] constant(0)
  broadcast.7200 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.7199), dimensions={}
  select.7201 = bf16[128,14,14,1024]{3,2,1,0} select(compare.3904, add.7198, broadcast.7200)
  constant.3727 = bf16[] constant(0)
  broadcast.3728 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3727), dimensions={}
  compare.3729 = pred[128,14,14,256]{3,2,1,0} compare(convert.3720, broadcast.3728), direction=GT
  constant.3814 = bf16[] constant(0)
  broadcast.3815 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3814), dimensions={}
  compare.3816 = pred[128,14,14,256]{3,2,1,0} compare(convert.3807, broadcast.3815), direction=GT
  convert.7202 = f32[128,14,14,1024]{3,2,1,0} convert(select.7201)
  multiply.7212 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7202, subtract.3873)
  constant.7213 = f32[] constant(0)
  reduce.7218 = f32[1024]{0} reduce(multiply.7212, constant.7213), dimensions={0,1,2}, to_apply=primitive_computation_add.7214
  broadcast.7219 = f32[1024]{0} broadcast(reduce.7218), dimensions={0}
  broadcast.7220 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7219), dimensions={3}
  multiply.7223 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7220, reshape.3884)
  constant.7224 = f32[] constant(0)
  reduce.7229 = f32[1024]{0} reduce(multiply.7223, constant.7224), dimensions={0,1,2}, to_apply=primitive_computation_add.7225
  broadcast.7230 = f32[1024]{0} broadcast(reduce.7229), dimensions={0}
  constant.3881 = f32[] constant(-0.5)
  broadcast.3882 = f32[1024]{0} broadcast(constant.3881), dimensions={}
  constant.3878 = f32[] constant(-1.5)
  broadcast.3879 = f32[1024]{0} broadcast(constant.3878), dimensions={}
  power.3880 = f32[1024]{0} power(add.3876, broadcast.3879)
  multiply.3883 = f32[1024]{0} multiply(broadcast.3882, power.3880)
  multiply.7231 = f32[1024]{0} multiply(broadcast.7230, multiply.3883)
  broadcast.7234 = f32[1024]{0} broadcast(convert.3848), dimensions={}
  divide.7235 = f32[1024]{0} divide(multiply.7231, broadcast.7234)
  broadcast.7236 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7235), dimensions={3}
  constant.3838 = f32[] constant(2)
  broadcast.3839 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.3838), dimensions={}
  multiply.3840 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.3839, convert.3826)
  multiply.7237 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.7236, multiply.3840)
  reshape.7238 = f32[1024]{0} reshape(multiply.3886)
  broadcast.7239 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.7238), dimensions={3}
  multiply.7240 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7202, broadcast.7239)
  add.7241 = f32[128,14,14,1024]{3,2,1,0} add(multiply.7237, multiply.7240)
  negate.7232 = f32[1024]{0} negate(multiply.7231)
  constant.3852 = f32[] constant(2)
  broadcast.3853 = f32[1024]{0} broadcast(constant.3852), dimensions={}
  multiply.3854 = f32[1024]{0} multiply(broadcast.3853, divide.3836)
  multiply.7233 = f32[1024]{0} multiply(negate.7232, multiply.3854)
  constant.7242 = f32[] constant(0)
  reduce.7247 = f32[1024]{0} reduce(multiply.7240, constant.7242), dimensions={0,1,2}, to_apply=primitive_computation_add.7243
  broadcast.7248 = f32[1024]{0} broadcast(reduce.7247), dimensions={0}
  broadcast.7249 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7248), dimensions={3}
  negate.7250 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.7249)
  reshape.7251 = f32[1024]{0} reshape(negate.7250)
  add.7252 = f32[1024]{0} add(multiply.7233, reshape.7251)
  broadcast.7253 = f32[1024]{0} broadcast(convert.3834), dimensions={}
  divide.7254 = f32[1024]{0} divide(add.7252, broadcast.7253)
  broadcast.7255 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7254), dimensions={3}
  add.7256 = f32[128,14,14,1024]{3,2,1,0} add(add.7241, broadcast.7255)
  convert.7257 = bf16[128,14,14,1024]{3,2,1,0} convert(add.7256)
  reverse.7261 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.3824), dimensions={0,1}
  convolution.7262 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7257, reverse.7261), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7263 = f32[128,14,14,256]{3,2,1,0} convert(convolution.7262)
  convert.7264 = bf16[128,14,14,256]{3,2,1,0} convert(convert.7263)
  constant.7265 = bf16[] constant(0)
  broadcast.7266 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7265), dimensions={}
  select.7267 = bf16[128,14,14,256]{3,2,1,0} select(compare.3816, convert.7264, broadcast.7266)
  convert.7268 = f32[128,14,14,256]{3,2,1,0} convert(select.7267)
  multiply.7278 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7268, subtract.3786)
  constant.7279 = f32[] constant(0)
  reduce.7284 = f32[256]{0} reduce(multiply.7278, constant.7279), dimensions={0,1,2}, to_apply=primitive_computation_add.7280
  broadcast.7285 = f32[256]{0} broadcast(reduce.7284), dimensions={0}
  broadcast.7286 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7285), dimensions={3}
  multiply.7289 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7286, reshape.3797)
  constant.7290 = f32[] constant(0)
  reduce.7295 = f32[256]{0} reduce(multiply.7289, constant.7290), dimensions={0,1,2}, to_apply=primitive_computation_add.7291
  broadcast.7296 = f32[256]{0} broadcast(reduce.7295), dimensions={0}
  constant.3794 = f32[] constant(-0.5)
  broadcast.3795 = f32[256]{0} broadcast(constant.3794), dimensions={}
  constant.3791 = f32[] constant(-1.5)
  broadcast.3792 = f32[256]{0} broadcast(constant.3791), dimensions={}
  power.3793 = f32[256]{0} power(add.3789, broadcast.3792)
  multiply.3796 = f32[256]{0} multiply(broadcast.3795, power.3793)
  multiply.7297 = f32[256]{0} multiply(broadcast.7296, multiply.3796)
  broadcast.7300 = f32[256]{0} broadcast(convert.3761), dimensions={}
  divide.7301 = f32[256]{0} divide(multiply.7297, broadcast.7300)
  broadcast.7302 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7301), dimensions={3}
  constant.3751 = f32[] constant(2)
  broadcast.3752 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3751), dimensions={}
  multiply.3753 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3752, convert.3739)
  multiply.7303 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7302, multiply.3753)
  reshape.7304 = f32[256]{0} reshape(multiply.3799)
  broadcast.7305 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7304), dimensions={3}
  multiply.7306 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7268, broadcast.7305)
  add.7307 = f32[128,14,14,256]{3,2,1,0} add(multiply.7303, multiply.7306)
  negate.7298 = f32[256]{0} negate(multiply.7297)
  constant.3765 = f32[] constant(2)
  broadcast.3766 = f32[256]{0} broadcast(constant.3765), dimensions={}
  multiply.3767 = f32[256]{0} multiply(broadcast.3766, divide.3749)
  multiply.7299 = f32[256]{0} multiply(negate.7298, multiply.3767)
  constant.7308 = f32[] constant(0)
  reduce.7313 = f32[256]{0} reduce(multiply.7306, constant.7308), dimensions={0,1,2}, to_apply=primitive_computation_add.7309
  broadcast.7314 = f32[256]{0} broadcast(reduce.7313), dimensions={0}
  broadcast.7315 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7314), dimensions={3}
  negate.7316 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7315)
  reshape.7317 = f32[256]{0} reshape(negate.7316)
  add.7318 = f32[256]{0} add(multiply.7299, reshape.7317)
  broadcast.7319 = f32[256]{0} broadcast(convert.3747), dimensions={}
  divide.7320 = f32[256]{0} divide(add.7318, broadcast.7319)
  broadcast.7321 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7320), dimensions={3}
  add.7322 = f32[128,14,14,256]{3,2,1,0} add(add.7307, broadcast.7321)
  convert.7323 = bf16[128,14,14,256]{3,2,1,0} convert(add.7322)
  reverse.7327 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.3737), dimensions={0,1}
  convolution.7328 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7323, reverse.7327), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.7329 = f32[128,14,14,256]{3,2,1,0} convert(convolution.7328)
  convert.7330 = bf16[128,14,14,256]{3,2,1,0} convert(convert.7329)
  constant.7331 = bf16[] constant(0)
  broadcast.7332 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7331), dimensions={}
  select.7333 = bf16[128,14,14,256]{3,2,1,0} select(compare.3729, convert.7330, broadcast.7332)
  convert.7334 = f32[128,14,14,256]{3,2,1,0} convert(select.7333)
  multiply.7344 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7334, subtract.3699)
  constant.7345 = f32[] constant(0)
  reduce.7350 = f32[256]{0} reduce(multiply.7344, constant.7345), dimensions={0,1,2}, to_apply=primitive_computation_add.7346
  broadcast.7351 = f32[256]{0} broadcast(reduce.7350), dimensions={0}
  broadcast.7352 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7351), dimensions={3}
  multiply.7355 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7352, reshape.3710)
  constant.7356 = f32[] constant(0)
  reduce.7361 = f32[256]{0} reduce(multiply.7355, constant.7356), dimensions={0,1,2}, to_apply=primitive_computation_add.7357
  broadcast.7362 = f32[256]{0} broadcast(reduce.7361), dimensions={0}
  constant.3707 = f32[] constant(-0.5)
  broadcast.3708 = f32[256]{0} broadcast(constant.3707), dimensions={}
  constant.3704 = f32[] constant(-1.5)
  broadcast.3705 = f32[256]{0} broadcast(constant.3704), dimensions={}
  power.3706 = f32[256]{0} power(add.3702, broadcast.3705)
  multiply.3709 = f32[256]{0} multiply(broadcast.3708, power.3706)
  multiply.7363 = f32[256]{0} multiply(broadcast.7362, multiply.3709)
  broadcast.7366 = f32[256]{0} broadcast(convert.3674), dimensions={}
  divide.7367 = f32[256]{0} divide(multiply.7363, broadcast.7366)
  broadcast.7368 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7367), dimensions={3}
  constant.3664 = f32[] constant(2)
  broadcast.3665 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3664), dimensions={}
  multiply.3666 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3665, convert.3652)
  multiply.7369 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7368, multiply.3666)
  reshape.7370 = f32[256]{0} reshape(multiply.3712)
  broadcast.7371 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7370), dimensions={3}
  multiply.7372 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7334, broadcast.7371)
  add.7373 = f32[128,14,14,256]{3,2,1,0} add(multiply.7369, multiply.7372)
  negate.7364 = f32[256]{0} negate(multiply.7363)
  constant.3678 = f32[] constant(2)
  broadcast.3679 = f32[256]{0} broadcast(constant.3678), dimensions={}
  multiply.3680 = f32[256]{0} multiply(broadcast.3679, divide.3662)
  multiply.7365 = f32[256]{0} multiply(negate.7364, multiply.3680)
  constant.7374 = f32[] constant(0)
  reduce.7379 = f32[256]{0} reduce(multiply.7372, constant.7374), dimensions={0,1,2}, to_apply=primitive_computation_add.7375
  broadcast.7380 = f32[256]{0} broadcast(reduce.7379), dimensions={0}
  broadcast.7381 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7380), dimensions={3}
  negate.7382 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7381)
  reshape.7383 = f32[256]{0} reshape(negate.7382)
  add.7384 = f32[256]{0} add(multiply.7365, reshape.7383)
  broadcast.7385 = f32[256]{0} broadcast(convert.3660), dimensions={}
  divide.7386 = f32[256]{0} divide(add.7384, broadcast.7385)
  broadcast.7387 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7386), dimensions={3}
  add.7388 = f32[128,14,14,256]{3,2,1,0} add(add.7373, broadcast.7387)
  convert.7389 = bf16[128,14,14,256]{3,2,1,0} convert(add.7388)
  reverse.7393 = bf16[1,1,1024,256]{3,2,1,0} reverse(convert.3650), dimensions={0,1}
  convolution.7394 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.7389, reverse.7393), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7395 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.7394)
  convert.7396 = bf16[128,14,14,1024]{3,2,1,0} convert(convert.7395)
  add.7397 = bf16[128,14,14,1024]{3,2,1,0} add(select.7201, convert.7396)
  constant.7398 = bf16[] constant(0)
  broadcast.7399 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.7398), dimensions={}
  select.7400 = bf16[128,14,14,1024]{3,2,1,0} select(compare.3642, add.7397, broadcast.7399)
  constant.3465 = bf16[] constant(0)
  broadcast.3466 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3465), dimensions={}
  compare.3467 = pred[128,14,14,256]{3,2,1,0} compare(convert.3458, broadcast.3466), direction=GT
  constant.3552 = bf16[] constant(0)
  broadcast.3553 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3552), dimensions={}
  compare.3554 = pred[128,14,14,256]{3,2,1,0} compare(convert.3545, broadcast.3553), direction=GT
  convert.7401 = f32[128,14,14,1024]{3,2,1,0} convert(select.7400)
  multiply.7411 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7401, subtract.3611)
  constant.7412 = f32[] constant(0)
  reduce.7417 = f32[1024]{0} reduce(multiply.7411, constant.7412), dimensions={0,1,2}, to_apply=primitive_computation_add.7413
  broadcast.7418 = f32[1024]{0} broadcast(reduce.7417), dimensions={0}
  broadcast.7419 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7418), dimensions={3}
  multiply.7422 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7419, reshape.3622)
  constant.7423 = f32[] constant(0)
  reduce.7428 = f32[1024]{0} reduce(multiply.7422, constant.7423), dimensions={0,1,2}, to_apply=primitive_computation_add.7424
  broadcast.7429 = f32[1024]{0} broadcast(reduce.7428), dimensions={0}
  constant.3619 = f32[] constant(-0.5)
  broadcast.3620 = f32[1024]{0} broadcast(constant.3619), dimensions={}
  constant.3616 = f32[] constant(-1.5)
  broadcast.3617 = f32[1024]{0} broadcast(constant.3616), dimensions={}
  power.3618 = f32[1024]{0} power(add.3614, broadcast.3617)
  multiply.3621 = f32[1024]{0} multiply(broadcast.3620, power.3618)
  multiply.7430 = f32[1024]{0} multiply(broadcast.7429, multiply.3621)
  broadcast.7433 = f32[1024]{0} broadcast(convert.3586), dimensions={}
  divide.7434 = f32[1024]{0} divide(multiply.7430, broadcast.7433)
  broadcast.7435 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7434), dimensions={3}
  constant.3576 = f32[] constant(2)
  broadcast.3577 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.3576), dimensions={}
  multiply.3578 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.3577, convert.3564)
  multiply.7436 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.7435, multiply.3578)
  reshape.7437 = f32[1024]{0} reshape(multiply.3624)
  broadcast.7438 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.7437), dimensions={3}
  multiply.7439 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7401, broadcast.7438)
  add.7440 = f32[128,14,14,1024]{3,2,1,0} add(multiply.7436, multiply.7439)
  negate.7431 = f32[1024]{0} negate(multiply.7430)
  constant.3590 = f32[] constant(2)
  broadcast.3591 = f32[1024]{0} broadcast(constant.3590), dimensions={}
  multiply.3592 = f32[1024]{0} multiply(broadcast.3591, divide.3574)
  multiply.7432 = f32[1024]{0} multiply(negate.7431, multiply.3592)
  constant.7441 = f32[] constant(0)
  reduce.7446 = f32[1024]{0} reduce(multiply.7439, constant.7441), dimensions={0,1,2}, to_apply=primitive_computation_add.7442
  broadcast.7447 = f32[1024]{0} broadcast(reduce.7446), dimensions={0}
  broadcast.7448 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7447), dimensions={3}
  negate.7449 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.7448)
  reshape.7450 = f32[1024]{0} reshape(negate.7449)
  add.7451 = f32[1024]{0} add(multiply.7432, reshape.7450)
  broadcast.7452 = f32[1024]{0} broadcast(convert.3572), dimensions={}
  divide.7453 = f32[1024]{0} divide(add.7451, broadcast.7452)
  broadcast.7454 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7453), dimensions={3}
  add.7455 = f32[128,14,14,1024]{3,2,1,0} add(add.7440, broadcast.7454)
  convert.7456 = bf16[128,14,14,1024]{3,2,1,0} convert(add.7455)
  reverse.7460 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.3562), dimensions={0,1}
  convolution.7461 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7456, reverse.7460), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7462 = f32[128,14,14,256]{3,2,1,0} convert(convolution.7461)
  convert.7463 = bf16[128,14,14,256]{3,2,1,0} convert(convert.7462)
  constant.7464 = bf16[] constant(0)
  broadcast.7465 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7464), dimensions={}
  select.7466 = bf16[128,14,14,256]{3,2,1,0} select(compare.3554, convert.7463, broadcast.7465)
  convert.7467 = f32[128,14,14,256]{3,2,1,0} convert(select.7466)
  multiply.7477 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7467, subtract.3524)
  constant.7478 = f32[] constant(0)
  reduce.7483 = f32[256]{0} reduce(multiply.7477, constant.7478), dimensions={0,1,2}, to_apply=primitive_computation_add.7479
  broadcast.7484 = f32[256]{0} broadcast(reduce.7483), dimensions={0}
  broadcast.7485 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7484), dimensions={3}
  multiply.7488 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7485, reshape.3535)
  constant.7489 = f32[] constant(0)
  reduce.7494 = f32[256]{0} reduce(multiply.7488, constant.7489), dimensions={0,1,2}, to_apply=primitive_computation_add.7490
  broadcast.7495 = f32[256]{0} broadcast(reduce.7494), dimensions={0}
  constant.3532 = f32[] constant(-0.5)
  broadcast.3533 = f32[256]{0} broadcast(constant.3532), dimensions={}
  constant.3529 = f32[] constant(-1.5)
  broadcast.3530 = f32[256]{0} broadcast(constant.3529), dimensions={}
  power.3531 = f32[256]{0} power(add.3527, broadcast.3530)
  multiply.3534 = f32[256]{0} multiply(broadcast.3533, power.3531)
  multiply.7496 = f32[256]{0} multiply(broadcast.7495, multiply.3534)
  broadcast.7499 = f32[256]{0} broadcast(convert.3499), dimensions={}
  divide.7500 = f32[256]{0} divide(multiply.7496, broadcast.7499)
  broadcast.7501 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7500), dimensions={3}
  constant.3489 = f32[] constant(2)
  broadcast.3490 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3489), dimensions={}
  multiply.3491 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3490, convert.3477)
  multiply.7502 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7501, multiply.3491)
  reshape.7503 = f32[256]{0} reshape(multiply.3537)
  broadcast.7504 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7503), dimensions={3}
  multiply.7505 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7467, broadcast.7504)
  add.7506 = f32[128,14,14,256]{3,2,1,0} add(multiply.7502, multiply.7505)
  negate.7497 = f32[256]{0} negate(multiply.7496)
  constant.3503 = f32[] constant(2)
  broadcast.3504 = f32[256]{0} broadcast(constant.3503), dimensions={}
  multiply.3505 = f32[256]{0} multiply(broadcast.3504, divide.3487)
  multiply.7498 = f32[256]{0} multiply(negate.7497, multiply.3505)
  constant.7507 = f32[] constant(0)
  reduce.7512 = f32[256]{0} reduce(multiply.7505, constant.7507), dimensions={0,1,2}, to_apply=primitive_computation_add.7508
  broadcast.7513 = f32[256]{0} broadcast(reduce.7512), dimensions={0}
  broadcast.7514 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7513), dimensions={3}
  negate.7515 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7514)
  reshape.7516 = f32[256]{0} reshape(negate.7515)
  add.7517 = f32[256]{0} add(multiply.7498, reshape.7516)
  broadcast.7518 = f32[256]{0} broadcast(convert.3485), dimensions={}
  divide.7519 = f32[256]{0} divide(add.7517, broadcast.7518)
  broadcast.7520 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7519), dimensions={3}
  add.7521 = f32[128,14,14,256]{3,2,1,0} add(add.7506, broadcast.7520)
  convert.7522 = bf16[128,14,14,256]{3,2,1,0} convert(add.7521)
  reverse.7526 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.3475), dimensions={0,1}
  convolution.7527 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7522, reverse.7526), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.7528 = f32[128,14,14,256]{3,2,1,0} convert(convolution.7527)
  convert.7529 = bf16[128,14,14,256]{3,2,1,0} convert(convert.7528)
  constant.7530 = bf16[] constant(0)
  broadcast.7531 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7530), dimensions={}
  select.7532 = bf16[128,14,14,256]{3,2,1,0} select(compare.3467, convert.7529, broadcast.7531)
  convert.7533 = f32[128,14,14,256]{3,2,1,0} convert(select.7532)
  multiply.7543 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7533, subtract.3437)
  constant.7544 = f32[] constant(0)
  reduce.7549 = f32[256]{0} reduce(multiply.7543, constant.7544), dimensions={0,1,2}, to_apply=primitive_computation_add.7545
  broadcast.7550 = f32[256]{0} broadcast(reduce.7549), dimensions={0}
  broadcast.7551 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7550), dimensions={3}
  multiply.7554 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7551, reshape.3448)
  constant.7555 = f32[] constant(0)
  reduce.7560 = f32[256]{0} reduce(multiply.7554, constant.7555), dimensions={0,1,2}, to_apply=primitive_computation_add.7556
  broadcast.7561 = f32[256]{0} broadcast(reduce.7560), dimensions={0}
  constant.3445 = f32[] constant(-0.5)
  broadcast.3446 = f32[256]{0} broadcast(constant.3445), dimensions={}
  constant.3442 = f32[] constant(-1.5)
  broadcast.3443 = f32[256]{0} broadcast(constant.3442), dimensions={}
  power.3444 = f32[256]{0} power(add.3440, broadcast.3443)
  multiply.3447 = f32[256]{0} multiply(broadcast.3446, power.3444)
  multiply.7562 = f32[256]{0} multiply(broadcast.7561, multiply.3447)
  broadcast.7565 = f32[256]{0} broadcast(convert.3412), dimensions={}
  divide.7566 = f32[256]{0} divide(multiply.7562, broadcast.7565)
  broadcast.7567 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7566), dimensions={3}
  constant.3402 = f32[] constant(2)
  broadcast.3403 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3402), dimensions={}
  multiply.3404 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3403, convert.3390)
  multiply.7568 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7567, multiply.3404)
  reshape.7569 = f32[256]{0} reshape(multiply.3450)
  broadcast.7570 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7569), dimensions={3}
  multiply.7571 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7533, broadcast.7570)
  add.7572 = f32[128,14,14,256]{3,2,1,0} add(multiply.7568, multiply.7571)
  negate.7563 = f32[256]{0} negate(multiply.7562)
  constant.3416 = f32[] constant(2)
  broadcast.3417 = f32[256]{0} broadcast(constant.3416), dimensions={}
  multiply.3418 = f32[256]{0} multiply(broadcast.3417, divide.3400)
  multiply.7564 = f32[256]{0} multiply(negate.7563, multiply.3418)
  constant.7573 = f32[] constant(0)
  reduce.7578 = f32[256]{0} reduce(multiply.7571, constant.7573), dimensions={0,1,2}, to_apply=primitive_computation_add.7574
  broadcast.7579 = f32[256]{0} broadcast(reduce.7578), dimensions={0}
  broadcast.7580 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7579), dimensions={3}
  negate.7581 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7580)
  reshape.7582 = f32[256]{0} reshape(negate.7581)
  add.7583 = f32[256]{0} add(multiply.7564, reshape.7582)
  broadcast.7584 = f32[256]{0} broadcast(convert.3398), dimensions={}
  divide.7585 = f32[256]{0} divide(add.7583, broadcast.7584)
  broadcast.7586 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7585), dimensions={3}
  add.7587 = f32[128,14,14,256]{3,2,1,0} add(add.7572, broadcast.7586)
  convert.7588 = bf16[128,14,14,256]{3,2,1,0} convert(add.7587)
  reverse.7592 = bf16[1,1,1024,256]{3,2,1,0} reverse(convert.3388), dimensions={0,1}
  convolution.7593 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.7588, reverse.7592), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7594 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.7593)
  convert.7595 = bf16[128,14,14,1024]{3,2,1,0} convert(convert.7594)
  add.7596 = bf16[128,14,14,1024]{3,2,1,0} add(select.7400, convert.7595)
  constant.7597 = bf16[] constant(0)
  broadcast.7598 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.7597), dimensions={}
  select.7599 = bf16[128,14,14,1024]{3,2,1,0} select(compare.3380, add.7596, broadcast.7598)
  constant.3203 = bf16[] constant(0)
  broadcast.3204 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3203), dimensions={}
  compare.3205 = pred[128,14,14,256]{3,2,1,0} compare(convert.3196, broadcast.3204), direction=GT
  constant.3290 = bf16[] constant(0)
  broadcast.3291 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3290), dimensions={}
  compare.3292 = pred[128,14,14,256]{3,2,1,0} compare(convert.3283, broadcast.3291), direction=GT
  convert.7600 = f32[128,14,14,1024]{3,2,1,0} convert(select.7599)
  multiply.7610 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7600, subtract.3349)
  constant.7611 = f32[] constant(0)
  reduce.7616 = f32[1024]{0} reduce(multiply.7610, constant.7611), dimensions={0,1,2}, to_apply=primitive_computation_add.7612
  broadcast.7617 = f32[1024]{0} broadcast(reduce.7616), dimensions={0}
  broadcast.7618 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7617), dimensions={3}
  multiply.7621 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7618, reshape.3360)
  constant.7622 = f32[] constant(0)
  reduce.7627 = f32[1024]{0} reduce(multiply.7621, constant.7622), dimensions={0,1,2}, to_apply=primitive_computation_add.7623
  broadcast.7628 = f32[1024]{0} broadcast(reduce.7627), dimensions={0}
  constant.3357 = f32[] constant(-0.5)
  broadcast.3358 = f32[1024]{0} broadcast(constant.3357), dimensions={}
  constant.3354 = f32[] constant(-1.5)
  broadcast.3355 = f32[1024]{0} broadcast(constant.3354), dimensions={}
  power.3356 = f32[1024]{0} power(add.3352, broadcast.3355)
  multiply.3359 = f32[1024]{0} multiply(broadcast.3358, power.3356)
  multiply.7629 = f32[1024]{0} multiply(broadcast.7628, multiply.3359)
  broadcast.7632 = f32[1024]{0} broadcast(convert.3324), dimensions={}
  divide.7633 = f32[1024]{0} divide(multiply.7629, broadcast.7632)
  broadcast.7634 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7633), dimensions={3}
  constant.3314 = f32[] constant(2)
  broadcast.3315 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.3314), dimensions={}
  multiply.3316 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.3315, convert.3302)
  multiply.7635 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.7634, multiply.3316)
  reshape.7636 = f32[1024]{0} reshape(multiply.3362)
  broadcast.7637 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.7636), dimensions={3}
  multiply.7638 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7600, broadcast.7637)
  add.7639 = f32[128,14,14,1024]{3,2,1,0} add(multiply.7635, multiply.7638)
  negate.7630 = f32[1024]{0} negate(multiply.7629)
  constant.3328 = f32[] constant(2)
  broadcast.3329 = f32[1024]{0} broadcast(constant.3328), dimensions={}
  multiply.3330 = f32[1024]{0} multiply(broadcast.3329, divide.3312)
  multiply.7631 = f32[1024]{0} multiply(negate.7630, multiply.3330)
  constant.7640 = f32[] constant(0)
  reduce.7645 = f32[1024]{0} reduce(multiply.7638, constant.7640), dimensions={0,1,2}, to_apply=primitive_computation_add.7641
  broadcast.7646 = f32[1024]{0} broadcast(reduce.7645), dimensions={0}
  broadcast.7647 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7646), dimensions={3}
  negate.7648 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.7647)
  reshape.7649 = f32[1024]{0} reshape(negate.7648)
  add.7650 = f32[1024]{0} add(multiply.7631, reshape.7649)
  broadcast.7651 = f32[1024]{0} broadcast(convert.3310), dimensions={}
  divide.7652 = f32[1024]{0} divide(add.7650, broadcast.7651)
  broadcast.7653 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7652), dimensions={3}
  add.7654 = f32[128,14,14,1024]{3,2,1,0} add(add.7639, broadcast.7653)
  convert.7655 = bf16[128,14,14,1024]{3,2,1,0} convert(add.7654)
  reverse.7659 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.3300), dimensions={0,1}
  convolution.7660 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7655, reverse.7659), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7661 = f32[128,14,14,256]{3,2,1,0} convert(convolution.7660)
  convert.7662 = bf16[128,14,14,256]{3,2,1,0} convert(convert.7661)
  constant.7663 = bf16[] constant(0)
  broadcast.7664 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7663), dimensions={}
  select.7665 = bf16[128,14,14,256]{3,2,1,0} select(compare.3292, convert.7662, broadcast.7664)
  convert.7666 = f32[128,14,14,256]{3,2,1,0} convert(select.7665)
  multiply.7676 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7666, subtract.3262)
  constant.7677 = f32[] constant(0)
  reduce.7682 = f32[256]{0} reduce(multiply.7676, constant.7677), dimensions={0,1,2}, to_apply=primitive_computation_add.7678
  broadcast.7683 = f32[256]{0} broadcast(reduce.7682), dimensions={0}
  broadcast.7684 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7683), dimensions={3}
  multiply.7687 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7684, reshape.3273)
  constant.7688 = f32[] constant(0)
  reduce.7693 = f32[256]{0} reduce(multiply.7687, constant.7688), dimensions={0,1,2}, to_apply=primitive_computation_add.7689
  broadcast.7694 = f32[256]{0} broadcast(reduce.7693), dimensions={0}
  constant.3270 = f32[] constant(-0.5)
  broadcast.3271 = f32[256]{0} broadcast(constant.3270), dimensions={}
  constant.3267 = f32[] constant(-1.5)
  broadcast.3268 = f32[256]{0} broadcast(constant.3267), dimensions={}
  power.3269 = f32[256]{0} power(add.3265, broadcast.3268)
  multiply.3272 = f32[256]{0} multiply(broadcast.3271, power.3269)
  multiply.7695 = f32[256]{0} multiply(broadcast.7694, multiply.3272)
  broadcast.7698 = f32[256]{0} broadcast(convert.3237), dimensions={}
  divide.7699 = f32[256]{0} divide(multiply.7695, broadcast.7698)
  broadcast.7700 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7699), dimensions={3}
  constant.3227 = f32[] constant(2)
  broadcast.3228 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3227), dimensions={}
  multiply.3229 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3228, convert.3215)
  multiply.7701 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7700, multiply.3229)
  reshape.7702 = f32[256]{0} reshape(multiply.3275)
  broadcast.7703 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7702), dimensions={3}
  multiply.7704 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7666, broadcast.7703)
  add.7705 = f32[128,14,14,256]{3,2,1,0} add(multiply.7701, multiply.7704)
  negate.7696 = f32[256]{0} negate(multiply.7695)
  constant.3241 = f32[] constant(2)
  broadcast.3242 = f32[256]{0} broadcast(constant.3241), dimensions={}
  multiply.3243 = f32[256]{0} multiply(broadcast.3242, divide.3225)
  multiply.7697 = f32[256]{0} multiply(negate.7696, multiply.3243)
  constant.7706 = f32[] constant(0)
  reduce.7711 = f32[256]{0} reduce(multiply.7704, constant.7706), dimensions={0,1,2}, to_apply=primitive_computation_add.7707
  broadcast.7712 = f32[256]{0} broadcast(reduce.7711), dimensions={0}
  broadcast.7713 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7712), dimensions={3}
  negate.7714 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7713)
  reshape.7715 = f32[256]{0} reshape(negate.7714)
  add.7716 = f32[256]{0} add(multiply.7697, reshape.7715)
  broadcast.7717 = f32[256]{0} broadcast(convert.3223), dimensions={}
  divide.7718 = f32[256]{0} divide(add.7716, broadcast.7717)
  broadcast.7719 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7718), dimensions={3}
  add.7720 = f32[128,14,14,256]{3,2,1,0} add(add.7705, broadcast.7719)
  convert.7721 = bf16[128,14,14,256]{3,2,1,0} convert(add.7720)
  reverse.7725 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.3213), dimensions={0,1}
  convolution.7726 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7721, reverse.7725), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.7727 = f32[128,14,14,256]{3,2,1,0} convert(convolution.7726)
  convert.7728 = bf16[128,14,14,256]{3,2,1,0} convert(convert.7727)
  constant.7729 = bf16[] constant(0)
  broadcast.7730 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7729), dimensions={}
  select.7731 = bf16[128,14,14,256]{3,2,1,0} select(compare.3205, convert.7728, broadcast.7730)
  convert.7732 = f32[128,14,14,256]{3,2,1,0} convert(select.7731)
  multiply.7742 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7732, subtract.3175)
  constant.7743 = f32[] constant(0)
  reduce.7748 = f32[256]{0} reduce(multiply.7742, constant.7743), dimensions={0,1,2}, to_apply=primitive_computation_add.7744
  broadcast.7749 = f32[256]{0} broadcast(reduce.7748), dimensions={0}
  broadcast.7750 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7749), dimensions={3}
  multiply.7753 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7750, reshape.3186)
  constant.7754 = f32[] constant(0)
  reduce.7759 = f32[256]{0} reduce(multiply.7753, constant.7754), dimensions={0,1,2}, to_apply=primitive_computation_add.7755
  broadcast.7760 = f32[256]{0} broadcast(reduce.7759), dimensions={0}
  constant.3183 = f32[] constant(-0.5)
  broadcast.3184 = f32[256]{0} broadcast(constant.3183), dimensions={}
  constant.3180 = f32[] constant(-1.5)
  broadcast.3181 = f32[256]{0} broadcast(constant.3180), dimensions={}
  power.3182 = f32[256]{0} power(add.3178, broadcast.3181)
  multiply.3185 = f32[256]{0} multiply(broadcast.3184, power.3182)
  multiply.7761 = f32[256]{0} multiply(broadcast.7760, multiply.3185)
  broadcast.7764 = f32[256]{0} broadcast(convert.3150), dimensions={}
  divide.7765 = f32[256]{0} divide(multiply.7761, broadcast.7764)
  broadcast.7766 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7765), dimensions={3}
  constant.3140 = f32[] constant(2)
  broadcast.3141 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3140), dimensions={}
  multiply.3142 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3141, convert.3128)
  multiply.7767 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7766, multiply.3142)
  reshape.7768 = f32[256]{0} reshape(multiply.3188)
  broadcast.7769 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7768), dimensions={3}
  multiply.7770 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7732, broadcast.7769)
  add.7771 = f32[128,14,14,256]{3,2,1,0} add(multiply.7767, multiply.7770)
  negate.7762 = f32[256]{0} negate(multiply.7761)
  constant.3154 = f32[] constant(2)
  broadcast.3155 = f32[256]{0} broadcast(constant.3154), dimensions={}
  multiply.3156 = f32[256]{0} multiply(broadcast.3155, divide.3138)
  multiply.7763 = f32[256]{0} multiply(negate.7762, multiply.3156)
  constant.7772 = f32[] constant(0)
  reduce.7777 = f32[256]{0} reduce(multiply.7770, constant.7772), dimensions={0,1,2}, to_apply=primitive_computation_add.7773
  broadcast.7778 = f32[256]{0} broadcast(reduce.7777), dimensions={0}
  broadcast.7779 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7778), dimensions={3}
  negate.7780 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7779)
  reshape.7781 = f32[256]{0} reshape(negate.7780)
  add.7782 = f32[256]{0} add(multiply.7763, reshape.7781)
  broadcast.7783 = f32[256]{0} broadcast(convert.3136), dimensions={}
  divide.7784 = f32[256]{0} divide(add.7782, broadcast.7783)
  broadcast.7785 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7784), dimensions={3}
  add.7786 = f32[128,14,14,256]{3,2,1,0} add(add.7771, broadcast.7785)
  convert.7787 = bf16[128,14,14,256]{3,2,1,0} convert(add.7786)
  reverse.7791 = bf16[1,1,1024,256]{3,2,1,0} reverse(convert.3126), dimensions={0,1}
  convolution.7792 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.7787, reverse.7791), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7793 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.7792)
  convert.7794 = bf16[128,14,14,1024]{3,2,1,0} convert(convert.7793)
  add.7795 = bf16[128,14,14,1024]{3,2,1,0} add(select.7599, convert.7794)
  constant.7796 = bf16[] constant(0)
  broadcast.7797 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.7796), dimensions={}
  select.7798 = bf16[128,14,14,1024]{3,2,1,0} select(compare.3118, add.7795, broadcast.7797)
  convert.7799 = f32[128,14,14,1024]{3,2,1,0} convert(select.7798)
  multiply.7809 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7799, subtract.3011)
  constant.7810 = f32[] constant(0)
  reduce.7815 = f32[1024]{0} reduce(multiply.7809, constant.7810), dimensions={0,1,2}, to_apply=primitive_computation_add.7811
  broadcast.7816 = f32[1024]{0} broadcast(reduce.7815), dimensions={0}
  broadcast.7817 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7816), dimensions={3}
  multiply.7820 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7817, reshape.3022)
  constant.7821 = f32[] constant(0)
  reduce.7826 = f32[1024]{0} reduce(multiply.7820, constant.7821), dimensions={0,1,2}, to_apply=primitive_computation_add.7822
  broadcast.7827 = f32[1024]{0} broadcast(reduce.7826), dimensions={0}
  constant.3019 = f32[] constant(-0.5)
  broadcast.3020 = f32[1024]{0} broadcast(constant.3019), dimensions={}
  constant.3016 = f32[] constant(-1.5)
  broadcast.3017 = f32[1024]{0} broadcast(constant.3016), dimensions={}
  power.3018 = f32[1024]{0} power(add.3014, broadcast.3017)
  multiply.3021 = f32[1024]{0} multiply(broadcast.3020, power.3018)
  multiply.7828 = f32[1024]{0} multiply(broadcast.7827, multiply.3021)
  broadcast.7831 = f32[1024]{0} broadcast(convert.2986), dimensions={}
  divide.7832 = f32[1024]{0} divide(multiply.7828, broadcast.7831)
  broadcast.7833 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7832), dimensions={3}
  constant.2976 = f32[] constant(2)
  broadcast.2977 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.2976), dimensions={}
  multiply.2978 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.2977, convert.2964)
  multiply.7834 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.7833, multiply.2978)
  reshape.7835 = f32[1024]{0} reshape(multiply.3024)
  broadcast.7836 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.7835), dimensions={3}
  multiply.7837 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7799, broadcast.7836)
  add.7838 = f32[128,14,14,1024]{3,2,1,0} add(multiply.7834, multiply.7837)
  negate.7829 = f32[1024]{0} negate(multiply.7828)
  constant.2990 = f32[] constant(2)
  broadcast.2991 = f32[1024]{0} broadcast(constant.2990), dimensions={}
  multiply.2992 = f32[1024]{0} multiply(broadcast.2991, divide.2974)
  multiply.7830 = f32[1024]{0} multiply(negate.7829, multiply.2992)
  constant.7839 = f32[] constant(0)
  reduce.7844 = f32[1024]{0} reduce(multiply.7837, constant.7839), dimensions={0,1,2}, to_apply=primitive_computation_add.7840
  broadcast.7845 = f32[1024]{0} broadcast(reduce.7844), dimensions={0}
  broadcast.7846 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7845), dimensions={3}
  negate.7847 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.7846)
  reshape.7848 = f32[1024]{0} reshape(negate.7847)
  add.7849 = f32[1024]{0} add(multiply.7830, reshape.7848)
  broadcast.7850 = f32[1024]{0} broadcast(convert.2972), dimensions={}
  divide.7851 = f32[1024]{0} divide(add.7849, broadcast.7850)
  broadcast.7852 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7851), dimensions={3}
  add.7853 = f32[128,14,14,1024]{3,2,1,0} add(add.7838, broadcast.7852)
  convert.7854 = bf16[128,14,14,1024]{3,2,1,0} convert(add.7853)
  reverse.7858 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.2962), dimensions={0,1}
  convolution.7859 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7854, reverse.7858), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7860 = f32[128,14,14,256]{3,2,1,0} convert(convolution.7859)
  convert.7861 = bf16[128,14,14,256]{3,2,1,0} convert(convert.7860)
  constant.7862 = bf16[] constant(0)
  broadcast.7863 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7862), dimensions={}
  select.7864 = bf16[128,14,14,256]{3,2,1,0} select(compare.2954, convert.7861, broadcast.7863)
  convert.7865 = f32[128,14,14,256]{3,2,1,0} convert(select.7864)
  multiply.7875 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7865, subtract.2924)
  constant.7876 = f32[] constant(0)
  reduce.7881 = f32[256]{0} reduce(multiply.7875, constant.7876), dimensions={0,1,2}, to_apply=primitive_computation_add.7877
  broadcast.7882 = f32[256]{0} broadcast(reduce.7881), dimensions={0}
  broadcast.7883 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7882), dimensions={3}
  multiply.7886 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7883, reshape.2935)
  constant.7887 = f32[] constant(0)
  reduce.7892 = f32[256]{0} reduce(multiply.7886, constant.7887), dimensions={0,1,2}, to_apply=primitive_computation_add.7888
  broadcast.7893 = f32[256]{0} broadcast(reduce.7892), dimensions={0}
  constant.2932 = f32[] constant(-0.5)
  broadcast.2933 = f32[256]{0} broadcast(constant.2932), dimensions={}
  constant.2929 = f32[] constant(-1.5)
  broadcast.2930 = f32[256]{0} broadcast(constant.2929), dimensions={}
  power.2931 = f32[256]{0} power(add.2927, broadcast.2930)
  multiply.2934 = f32[256]{0} multiply(broadcast.2933, power.2931)
  multiply.7894 = f32[256]{0} multiply(broadcast.7893, multiply.2934)
  broadcast.7897 = f32[256]{0} broadcast(convert.2899), dimensions={}
  divide.7898 = f32[256]{0} divide(multiply.7894, broadcast.7897)
  broadcast.7899 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7898), dimensions={3}
  constant.2889 = f32[] constant(2)
  broadcast.2890 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.2889), dimensions={}
  multiply.2891 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.2890, convert.2877)
  multiply.7900 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7899, multiply.2891)
  reshape.7901 = f32[256]{0} reshape(multiply.2937)
  broadcast.7902 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7901), dimensions={3}
  multiply.7903 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7865, broadcast.7902)
  add.7904 = f32[128,14,14,256]{3,2,1,0} add(multiply.7900, multiply.7903)
  negate.7895 = f32[256]{0} negate(multiply.7894)
  constant.2903 = f32[] constant(2)
  broadcast.2904 = f32[256]{0} broadcast(constant.2903), dimensions={}
  multiply.2905 = f32[256]{0} multiply(broadcast.2904, divide.2887)
  multiply.7896 = f32[256]{0} multiply(negate.7895, multiply.2905)
  constant.7905 = f32[] constant(0)
  reduce.7910 = f32[256]{0} reduce(multiply.7903, constant.7905), dimensions={0,1,2}, to_apply=primitive_computation_add.7906
  broadcast.7911 = f32[256]{0} broadcast(reduce.7910), dimensions={0}
  broadcast.7912 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7911), dimensions={3}
  negate.7913 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7912)
  reshape.7914 = f32[256]{0} reshape(negate.7913)
  add.7915 = f32[256]{0} add(multiply.7896, reshape.7914)
  broadcast.7916 = f32[256]{0} broadcast(convert.2885), dimensions={}
  divide.7917 = f32[256]{0} divide(add.7915, broadcast.7916)
  broadcast.7918 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7917), dimensions={3}
  add.7919 = f32[128,14,14,256]{3,2,1,0} add(add.7904, broadcast.7918)
  convert.7920 = bf16[128,14,14,256]{3,2,1,0} convert(add.7919)
  reverse.7924 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.2875), dimensions={0,1}
  convolution.7925 = bf16[128,28,28,256]{3,2,1,0} convolution(convert.7920, reverse.7924), window={size=3x3 pad=2_1x2_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  convert.7926 = f32[128,28,28,256]{3,2,1,0} convert(convolution.7925)
  convert.7927 = bf16[128,28,28,256]{3,2,1,0} convert(convert.7926)
  constant.7928 = bf16[] constant(0)
  broadcast.7929 = bf16[128,28,28,256]{3,2,1,0} broadcast(constant.7928), dimensions={}
  select.7930 = bf16[128,28,28,256]{3,2,1,0} select(compare.2867, convert.7927, broadcast.7929)
  convert.7931 = f32[128,28,28,256]{3,2,1,0} convert(select.7930)
  multiply.7941 = f32[128,28,28,256]{3,2,1,0} multiply(convert.7931, subtract.2837)
  constant.7942 = f32[] constant(0)
  reduce.7947 = f32[256]{0} reduce(multiply.7941, constant.7942), dimensions={0,1,2}, to_apply=primitive_computation_add.7943
  broadcast.7948 = f32[256]{0} broadcast(reduce.7947), dimensions={0}
  broadcast.7949 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7948), dimensions={3}
  multiply.7952 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7949, reshape.2848)
  constant.7953 = f32[] constant(0)
  reduce.7958 = f32[256]{0} reduce(multiply.7952, constant.7953), dimensions={0,1,2}, to_apply=primitive_computation_add.7954
  broadcast.7959 = f32[256]{0} broadcast(reduce.7958), dimensions={0}
  constant.2845 = f32[] constant(-0.5)
  broadcast.2846 = f32[256]{0} broadcast(constant.2845), dimensions={}
  constant.2842 = f32[] constant(-1.5)
  broadcast.2843 = f32[256]{0} broadcast(constant.2842), dimensions={}
  power.2844 = f32[256]{0} power(add.2840, broadcast.2843)
  multiply.2847 = f32[256]{0} multiply(broadcast.2846, power.2844)
  multiply.7960 = f32[256]{0} multiply(broadcast.7959, multiply.2847)
  broadcast.7963 = f32[256]{0} broadcast(convert.2812), dimensions={}
  divide.7964 = f32[256]{0} divide(multiply.7960, broadcast.7963)
  broadcast.7965 = f32[128,28,28,256]{3,2,1,0} broadcast(divide.7964), dimensions={3}
  constant.2802 = f32[] constant(2)
  broadcast.2803 = f32[128,28,28,256]{3,2,1,0} broadcast(constant.2802), dimensions={}
  multiply.2804 = f32[128,28,28,256]{3,2,1,0} multiply(broadcast.2803, convert.2790)
  multiply.7966 = f32[128,28,28,256]{3,2,1,0} multiply(broadcast.7965, multiply.2804)
  reshape.7967 = f32[256]{0} reshape(multiply.2850)
  broadcast.7968 = f32[128,28,28,256]{3,2,1,0} broadcast(reshape.7967), dimensions={3}
  multiply.7969 = f32[128,28,28,256]{3,2,1,0} multiply(convert.7931, broadcast.7968)
  add.7970 = f32[128,28,28,256]{3,2,1,0} add(multiply.7966, multiply.7969)
  negate.7961 = f32[256]{0} negate(multiply.7960)
  constant.2816 = f32[] constant(2)
  broadcast.2817 = f32[256]{0} broadcast(constant.2816), dimensions={}
  multiply.2818 = f32[256]{0} multiply(broadcast.2817, divide.2800)
  multiply.7962 = f32[256]{0} multiply(negate.7961, multiply.2818)
  constant.7971 = f32[] constant(0)
  reduce.7976 = f32[256]{0} reduce(multiply.7969, constant.7971), dimensions={0,1,2}, to_apply=primitive_computation_add.7972
  broadcast.7977 = f32[256]{0} broadcast(reduce.7976), dimensions={0}
  broadcast.7978 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7977), dimensions={3}
  negate.7979 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7978)
  reshape.7980 = f32[256]{0} reshape(negate.7979)
  add.7981 = f32[256]{0} add(multiply.7962, reshape.7980)
  broadcast.7982 = f32[256]{0} broadcast(convert.2798), dimensions={}
  divide.7983 = f32[256]{0} divide(add.7981, broadcast.7982)
  broadcast.7984 = f32[128,28,28,256]{3,2,1,0} broadcast(divide.7983), dimensions={3}
  add.7985 = f32[128,28,28,256]{3,2,1,0} add(add.7970, broadcast.7984)
  convert.7986 = bf16[128,28,28,256]{3,2,1,0} convert(add.7985)
  reverse.7990 = bf16[1,1,512,256]{3,2,1,0} reverse(convert.2788), dimensions={0,1}
  convolution.7991 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.7986, reverse.7990), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7992 = f32[128,28,28,512]{3,2,1,0} convert(convolution.7991)
  convert.7993 = bf16[128,28,28,512]{3,2,1,0} convert(convert.7992)
  convert.7994 = f32[128,14,14,1024]{3,2,1,0} convert(select.7798)
  multiply.8004 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7994, subtract.3087)
  constant.8005 = f32[] constant(0)
  reduce.8010 = f32[1024]{0} reduce(multiply.8004, constant.8005), dimensions={0,1,2}, to_apply=primitive_computation_add.8006
  broadcast.8011 = f32[1024]{0} broadcast(reduce.8010), dimensions={0}
  broadcast.8012 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.8011), dimensions={3}
  multiply.8015 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.8012, reshape.3098)
  constant.8016 = f32[] constant(0)
  reduce.8021 = f32[1024]{0} reduce(multiply.8015, constant.8016), dimensions={0,1,2}, to_apply=primitive_computation_add.8017
  broadcast.8022 = f32[1024]{0} broadcast(reduce.8021), dimensions={0}
  constant.3095 = f32[] constant(-0.5)
  broadcast.3096 = f32[1024]{0} broadcast(constant.3095), dimensions={}
  constant.3092 = f32[] constant(-1.5)
  broadcast.3093 = f32[1024]{0} broadcast(constant.3092), dimensions={}
  power.3094 = f32[1024]{0} power(add.3090, broadcast.3093)
  multiply.3097 = f32[1024]{0} multiply(broadcast.3096, power.3094)
  multiply.8023 = f32[1024]{0} multiply(broadcast.8022, multiply.3097)
  broadcast.8026 = f32[1024]{0} broadcast(convert.3062), dimensions={}
  divide.8027 = f32[1024]{0} divide(multiply.8023, broadcast.8026)
  broadcast.8028 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.8027), dimensions={3}
  constant.3052 = f32[] constant(2)
  broadcast.3053 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.3052), dimensions={}
  multiply.3054 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.3053, convert.3040)
  multiply.8029 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.8028, multiply.3054)
  reshape.8030 = f32[1024]{0} reshape(multiply.3100)
  broadcast.8031 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.8030), dimensions={3}
  multiply.8032 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7994, broadcast.8031)
  add.8033 = f32[128,14,14,1024]{3,2,1,0} add(multiply.8029, multiply.8032)
  negate.8024 = f32[1024]{0} negate(multiply.8023)
  constant.3066 = f32[] constant(2)
  broadcast.3067 = f32[1024]{0} broadcast(constant.3066), dimensions={}
  multiply.3068 = f32[1024]{0} multiply(broadcast.3067, divide.3050)
  multiply.8025 = f32[1024]{0} multiply(negate.8024, multiply.3068)
  constant.8034 = f32[] constant(0)
  reduce.8039 = f32[1024]{0} reduce(multiply.8032, constant.8034), dimensions={0,1,2}, to_apply=primitive_computation_add.8035
  broadcast.8040 = f32[1024]{0} broadcast(reduce.8039), dimensions={0}
  broadcast.8041 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.8040), dimensions={3}
  negate.8042 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.8041)
  reshape.8043 = f32[1024]{0} reshape(negate.8042)
  add.8044 = f32[1024]{0} add(multiply.8025, reshape.8043)
  broadcast.8045 = f32[1024]{0} broadcast(convert.3048), dimensions={}
  divide.8046 = f32[1024]{0} divide(add.8044, broadcast.8045)
  broadcast.8047 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.8046), dimensions={3}
  add.8048 = f32[128,14,14,1024]{3,2,1,0} add(add.8033, broadcast.8047)
  convert.8049 = bf16[128,14,14,1024]{3,2,1,0} convert(add.8048)
  reverse.8053 = bf16[1,1,512,1024]{3,2,1,0} reverse(convert.3038), dimensions={0,1}
  convolution.8054 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.8049, reverse.8053), window={size=1x1 pad=0_1x0_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  convert.8055 = f32[128,28,28,512]{3,2,1,0} convert(convolution.8054)
  convert.8056 = bf16[128,28,28,512]{3,2,1,0} convert(convert.8055)
  add.8057 = bf16[128,28,28,512]{3,2,1,0} add(convert.7993, convert.8056)
  constant.8058 = bf16[] constant(0)
  broadcast.8059 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.8058), dimensions={}
  select.8060 = bf16[128,28,28,512]{3,2,1,0} select(compare.2780, add.8057, broadcast.8059)
  constant.2603 = bf16[] constant(0)
  broadcast.2604 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2603), dimensions={}
  compare.2605 = pred[128,28,28,128]{3,2,1,0} compare(convert.2596, broadcast.2604), direction=GT
  constant.2690 = bf16[] constant(0)
  broadcast.2691 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2690), dimensions={}
  compare.2692 = pred[128,28,28,128]{3,2,1,0} compare(convert.2683, broadcast.2691), direction=GT
  convert.8061 = f32[128,28,28,512]{3,2,1,0} convert(select.8060)
  multiply.8071 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8061, subtract.2749)
  constant.8072 = f32[] constant(0)
  reduce.8077 = f32[512]{0} reduce(multiply.8071, constant.8072), dimensions={0,1,2}, to_apply=primitive_computation_add.8073
  broadcast.8078 = f32[512]{0} broadcast(reduce.8077), dimensions={0}
  broadcast.8079 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8078), dimensions={3}
  multiply.8082 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8079, reshape.2760)
  constant.8083 = f32[] constant(0)
  reduce.8088 = f32[512]{0} reduce(multiply.8082, constant.8083), dimensions={0,1,2}, to_apply=primitive_computation_add.8084
  broadcast.8089 = f32[512]{0} broadcast(reduce.8088), dimensions={0}
  constant.2757 = f32[] constant(-0.5)
  broadcast.2758 = f32[512]{0} broadcast(constant.2757), dimensions={}
  constant.2754 = f32[] constant(-1.5)
  broadcast.2755 = f32[512]{0} broadcast(constant.2754), dimensions={}
  power.2756 = f32[512]{0} power(add.2752, broadcast.2755)
  multiply.2759 = f32[512]{0} multiply(broadcast.2758, power.2756)
  multiply.8090 = f32[512]{0} multiply(broadcast.8089, multiply.2759)
  broadcast.8093 = f32[512]{0} broadcast(convert.2724), dimensions={}
  divide.8094 = f32[512]{0} divide(multiply.8090, broadcast.8093)
  broadcast.8095 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8094), dimensions={3}
  constant.2714 = f32[] constant(2)
  broadcast.2715 = f32[128,28,28,512]{3,2,1,0} broadcast(constant.2714), dimensions={}
  multiply.2716 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.2715, convert.2702)
  multiply.8096 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.8095, multiply.2716)
  reshape.8097 = f32[512]{0} reshape(multiply.2762)
  broadcast.8098 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.8097), dimensions={3}
  multiply.8099 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8061, broadcast.8098)
  add.8100 = f32[128,28,28,512]{3,2,1,0} add(multiply.8096, multiply.8099)
  negate.8091 = f32[512]{0} negate(multiply.8090)
  constant.2728 = f32[] constant(2)
  broadcast.2729 = f32[512]{0} broadcast(constant.2728), dimensions={}
  multiply.2730 = f32[512]{0} multiply(broadcast.2729, divide.2712)
  multiply.8092 = f32[512]{0} multiply(negate.8091, multiply.2730)
  constant.8101 = f32[] constant(0)
  reduce.8106 = f32[512]{0} reduce(multiply.8099, constant.8101), dimensions={0,1,2}, to_apply=primitive_computation_add.8102
  broadcast.8107 = f32[512]{0} broadcast(reduce.8106), dimensions={0}
  broadcast.8108 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8107), dimensions={3}
  negate.8109 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.8108)
  reshape.8110 = f32[512]{0} reshape(negate.8109)
  add.8111 = f32[512]{0} add(multiply.8092, reshape.8110)
  broadcast.8112 = f32[512]{0} broadcast(convert.2710), dimensions={}
  divide.8113 = f32[512]{0} divide(add.8111, broadcast.8112)
  broadcast.8114 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8113), dimensions={3}
  add.8115 = f32[128,28,28,512]{3,2,1,0} add(add.8100, broadcast.8114)
  convert.8116 = bf16[128,28,28,512]{3,2,1,0} convert(add.8115)
  reverse.8120 = bf16[1,1,128,512]{3,2,1,0} reverse(convert.2700), dimensions={0,1}
  convolution.8121 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.8116, reverse.8120), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.8122 = f32[128,28,28,128]{3,2,1,0} convert(convolution.8121)
  convert.8123 = bf16[128,28,28,128]{3,2,1,0} convert(convert.8122)
  constant.8124 = bf16[] constant(0)
  broadcast.8125 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.8124), dimensions={}
  select.8126 = bf16[128,28,28,128]{3,2,1,0} select(compare.2692, convert.8123, broadcast.8125)
  convert.8127 = f32[128,28,28,128]{3,2,1,0} convert(select.8126)
  multiply.8137 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8127, subtract.2662)
  constant.8138 = f32[] constant(0)
  reduce.8143 = f32[128]{0} reduce(multiply.8137, constant.8138), dimensions={0,1,2}, to_apply=primitive_computation_add.8139
  broadcast.8144 = f32[128]{0} broadcast(reduce.8143), dimensions={0}
  broadcast.8145 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8144), dimensions={3}
  multiply.8148 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8145, reshape.2673)
  constant.8149 = f32[] constant(0)
  reduce.8154 = f32[128]{0} reduce(multiply.8148, constant.8149), dimensions={0,1,2}, to_apply=primitive_computation_add.8150
  broadcast.8155 = f32[128]{0} broadcast(reduce.8154), dimensions={0}
  constant.2670 = f32[] constant(-0.5)
  broadcast.2671 = f32[128]{0} broadcast(constant.2670), dimensions={}
  constant.2667 = f32[] constant(-1.5)
  broadcast.2668 = f32[128]{0} broadcast(constant.2667), dimensions={}
  power.2669 = f32[128]{0} power(add.2665, broadcast.2668)
  multiply.2672 = f32[128]{0} multiply(broadcast.2671, power.2669)
  multiply.8156 = f32[128]{0} multiply(broadcast.8155, multiply.2672)
  broadcast.8159 = f32[128]{0} broadcast(convert.2637), dimensions={}
  divide.8160 = f32[128]{0} divide(multiply.8156, broadcast.8159)
  broadcast.8161 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8160), dimensions={3}
  constant.2627 = f32[] constant(2)
  broadcast.2628 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.2627), dimensions={}
  multiply.2629 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.2628, convert.2615)
  multiply.8162 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.8161, multiply.2629)
  reshape.8163 = f32[128]{0} reshape(multiply.2675)
  broadcast.8164 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.8163), dimensions={3}
  multiply.8165 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8127, broadcast.8164)
  add.8166 = f32[128,28,28,128]{3,2,1,0} add(multiply.8162, multiply.8165)
  negate.8157 = f32[128]{0} negate(multiply.8156)
  constant.2641 = f32[] constant(2)
  broadcast.2642 = f32[128]{0} broadcast(constant.2641), dimensions={}
  multiply.2643 = f32[128]{0} multiply(broadcast.2642, divide.2625)
  multiply.8158 = f32[128]{0} multiply(negate.8157, multiply.2643)
  constant.8167 = f32[] constant(0)
  reduce.8172 = f32[128]{0} reduce(multiply.8165, constant.8167), dimensions={0,1,2}, to_apply=primitive_computation_add.8168
  broadcast.8173 = f32[128]{0} broadcast(reduce.8172), dimensions={0}
  broadcast.8174 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8173), dimensions={3}
  negate.8175 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8174)
  reshape.8176 = f32[128]{0} reshape(negate.8175)
  add.8177 = f32[128]{0} add(multiply.8158, reshape.8176)
  broadcast.8178 = f32[128]{0} broadcast(convert.2623), dimensions={}
  divide.8179 = f32[128]{0} divide(add.8177, broadcast.8178)
  broadcast.8180 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8179), dimensions={3}
  add.8181 = f32[128,28,28,128]{3,2,1,0} add(add.8166, broadcast.8180)
  convert.8182 = bf16[128,28,28,128]{3,2,1,0} convert(add.8181)
  reverse.8186 = bf16[3,3,128,128]{3,2,1,0} reverse(convert.2613), dimensions={0,1}
  convolution.8187 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.8182, reverse.8186), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.8188 = f32[128,28,28,128]{3,2,1,0} convert(convolution.8187)
  convert.8189 = bf16[128,28,28,128]{3,2,1,0} convert(convert.8188)
  constant.8190 = bf16[] constant(0)
  broadcast.8191 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.8190), dimensions={}
  select.8192 = bf16[128,28,28,128]{3,2,1,0} select(compare.2605, convert.8189, broadcast.8191)
  convert.8193 = f32[128,28,28,128]{3,2,1,0} convert(select.8192)
  multiply.8203 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8193, subtract.2575)
  constant.8204 = f32[] constant(0)
  reduce.8209 = f32[128]{0} reduce(multiply.8203, constant.8204), dimensions={0,1,2}, to_apply=primitive_computation_add.8205
  broadcast.8210 = f32[128]{0} broadcast(reduce.8209), dimensions={0}
  broadcast.8211 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8210), dimensions={3}
  multiply.8214 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8211, reshape.2586)
  constant.8215 = f32[] constant(0)
  reduce.8220 = f32[128]{0} reduce(multiply.8214, constant.8215), dimensions={0,1,2}, to_apply=primitive_computation_add.8216
  broadcast.8221 = f32[128]{0} broadcast(reduce.8220), dimensions={0}
  constant.2583 = f32[] constant(-0.5)
  broadcast.2584 = f32[128]{0} broadcast(constant.2583), dimensions={}
  constant.2580 = f32[] constant(-1.5)
  broadcast.2581 = f32[128]{0} broadcast(constant.2580), dimensions={}
  power.2582 = f32[128]{0} power(add.2578, broadcast.2581)
  multiply.2585 = f32[128]{0} multiply(broadcast.2584, power.2582)
  multiply.8222 = f32[128]{0} multiply(broadcast.8221, multiply.2585)
  broadcast.8225 = f32[128]{0} broadcast(convert.2550), dimensions={}
  divide.8226 = f32[128]{0} divide(multiply.8222, broadcast.8225)
  broadcast.8227 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8226), dimensions={3}
  constant.2540 = f32[] constant(2)
  broadcast.2541 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.2540), dimensions={}
  multiply.2542 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.2541, convert.2528)
  multiply.8228 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.8227, multiply.2542)
  reshape.8229 = f32[128]{0} reshape(multiply.2588)
  broadcast.8230 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.8229), dimensions={3}
  multiply.8231 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8193, broadcast.8230)
  add.8232 = f32[128,28,28,128]{3,2,1,0} add(multiply.8228, multiply.8231)
  negate.8223 = f32[128]{0} negate(multiply.8222)
  constant.2554 = f32[] constant(2)
  broadcast.2555 = f32[128]{0} broadcast(constant.2554), dimensions={}
  multiply.2556 = f32[128]{0} multiply(broadcast.2555, divide.2538)
  multiply.8224 = f32[128]{0} multiply(negate.8223, multiply.2556)
  constant.8233 = f32[] constant(0)
  reduce.8238 = f32[128]{0} reduce(multiply.8231, constant.8233), dimensions={0,1,2}, to_apply=primitive_computation_add.8234
  broadcast.8239 = f32[128]{0} broadcast(reduce.8238), dimensions={0}
  broadcast.8240 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8239), dimensions={3}
  negate.8241 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8240)
  reshape.8242 = f32[128]{0} reshape(negate.8241)
  add.8243 = f32[128]{0} add(multiply.8224, reshape.8242)
  broadcast.8244 = f32[128]{0} broadcast(convert.2536), dimensions={}
  divide.8245 = f32[128]{0} divide(add.8243, broadcast.8244)
  broadcast.8246 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8245), dimensions={3}
  add.8247 = f32[128,28,28,128]{3,2,1,0} add(add.8232, broadcast.8246)
  convert.8248 = bf16[128,28,28,128]{3,2,1,0} convert(add.8247)
  reverse.8252 = bf16[1,1,512,128]{3,2,1,0} reverse(convert.2526), dimensions={0,1}
  convolution.8253 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.8248, reverse.8252), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.8254 = f32[128,28,28,512]{3,2,1,0} convert(convolution.8253)
  convert.8255 = bf16[128,28,28,512]{3,2,1,0} convert(convert.8254)
  add.8256 = bf16[128,28,28,512]{3,2,1,0} add(select.8060, convert.8255)
  constant.8257 = bf16[] constant(0)
  broadcast.8258 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.8257), dimensions={}
  select.8259 = bf16[128,28,28,512]{3,2,1,0} select(compare.2518, add.8256, broadcast.8258)
  constant.2341 = bf16[] constant(0)
  broadcast.2342 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2341), dimensions={}
  compare.2343 = pred[128,28,28,128]{3,2,1,0} compare(convert.2334, broadcast.2342), direction=GT
  constant.2428 = bf16[] constant(0)
  broadcast.2429 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2428), dimensions={}
  compare.2430 = pred[128,28,28,128]{3,2,1,0} compare(convert.2421, broadcast.2429), direction=GT
  convert.8260 = f32[128,28,28,512]{3,2,1,0} convert(select.8259)
  multiply.8270 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8260, subtract.2487)
  constant.8271 = f32[] constant(0)
  reduce.8276 = f32[512]{0} reduce(multiply.8270, constant.8271), dimensions={0,1,2}, to_apply=primitive_computation_add.8272
  broadcast.8277 = f32[512]{0} broadcast(reduce.8276), dimensions={0}
  broadcast.8278 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8277), dimensions={3}
  multiply.8281 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8278, reshape.2498)
  constant.8282 = f32[] constant(0)
  reduce.8287 = f32[512]{0} reduce(multiply.8281, constant.8282), dimensions={0,1,2}, to_apply=primitive_computation_add.8283
  broadcast.8288 = f32[512]{0} broadcast(reduce.8287), dimensions={0}
  constant.2495 = f32[] constant(-0.5)
  broadcast.2496 = f32[512]{0} broadcast(constant.2495), dimensions={}
  constant.2492 = f32[] constant(-1.5)
  broadcast.2493 = f32[512]{0} broadcast(constant.2492), dimensions={}
  power.2494 = f32[512]{0} power(add.2490, broadcast.2493)
  multiply.2497 = f32[512]{0} multiply(broadcast.2496, power.2494)
  multiply.8289 = f32[512]{0} multiply(broadcast.8288, multiply.2497)
  broadcast.8292 = f32[512]{0} broadcast(convert.2462), dimensions={}
  divide.8293 = f32[512]{0} divide(multiply.8289, broadcast.8292)
  broadcast.8294 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8293), dimensions={3}
  constant.2452 = f32[] constant(2)
  broadcast.2453 = f32[128,28,28,512]{3,2,1,0} broadcast(constant.2452), dimensions={}
  multiply.2454 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.2453, convert.2440)
  multiply.8295 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.8294, multiply.2454)
  reshape.8296 = f32[512]{0} reshape(multiply.2500)
  broadcast.8297 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.8296), dimensions={3}
  multiply.8298 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8260, broadcast.8297)
  add.8299 = f32[128,28,28,512]{3,2,1,0} add(multiply.8295, multiply.8298)
  negate.8290 = f32[512]{0} negate(multiply.8289)
  constant.2466 = f32[] constant(2)
  broadcast.2467 = f32[512]{0} broadcast(constant.2466), dimensions={}
  multiply.2468 = f32[512]{0} multiply(broadcast.2467, divide.2450)
  multiply.8291 = f32[512]{0} multiply(negate.8290, multiply.2468)
  constant.8300 = f32[] constant(0)
  reduce.8305 = f32[512]{0} reduce(multiply.8298, constant.8300), dimensions={0,1,2}, to_apply=primitive_computation_add.8301
  broadcast.8306 = f32[512]{0} broadcast(reduce.8305), dimensions={0}
  broadcast.8307 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8306), dimensions={3}
  negate.8308 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.8307)
  reshape.8309 = f32[512]{0} reshape(negate.8308)
  add.8310 = f32[512]{0} add(multiply.8291, reshape.8309)
  broadcast.8311 = f32[512]{0} broadcast(convert.2448), dimensions={}
  divide.8312 = f32[512]{0} divide(add.8310, broadcast.8311)
  broadcast.8313 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8312), dimensions={3}
  add.8314 = f32[128,28,28,512]{3,2,1,0} add(add.8299, broadcast.8313)
  convert.8315 = bf16[128,28,28,512]{3,2,1,0} convert(add.8314)
  reverse.8319 = bf16[1,1,128,512]{3,2,1,0} reverse(convert.2438), dimensions={0,1}
  convolution.8320 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.8315, reverse.8319), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.8321 = f32[128,28,28,128]{3,2,1,0} convert(convolution.8320)
  convert.8322 = bf16[128,28,28,128]{3,2,1,0} convert(convert.8321)
  constant.8323 = bf16[] constant(0)
  broadcast.8324 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.8323), dimensions={}
  select.8325 = bf16[128,28,28,128]{3,2,1,0} select(compare.2430, convert.8322, broadcast.8324)
  convert.8326 = f32[128,28,28,128]{3,2,1,0} convert(select.8325)
  multiply.8336 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8326, subtract.2400)
  constant.8337 = f32[] constant(0)
  reduce.8342 = f32[128]{0} reduce(multiply.8336, constant.8337), dimensions={0,1,2}, to_apply=primitive_computation_add.8338
  broadcast.8343 = f32[128]{0} broadcast(reduce.8342), dimensions={0}
  broadcast.8344 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8343), dimensions={3}
  multiply.8347 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8344, reshape.2411)
  constant.8348 = f32[] constant(0)
  reduce.8353 = f32[128]{0} reduce(multiply.8347, constant.8348), dimensions={0,1,2}, to_apply=primitive_computation_add.8349
  broadcast.8354 = f32[128]{0} broadcast(reduce.8353), dimensions={0}
  constant.2408 = f32[] constant(-0.5)
  broadcast.2409 = f32[128]{0} broadcast(constant.2408), dimensions={}
  constant.2405 = f32[] constant(-1.5)
  broadcast.2406 = f32[128]{0} broadcast(constant.2405), dimensions={}
  power.2407 = f32[128]{0} power(add.2403, broadcast.2406)
  multiply.2410 = f32[128]{0} multiply(broadcast.2409, power.2407)
  multiply.8355 = f32[128]{0} multiply(broadcast.8354, multiply.2410)
  broadcast.8358 = f32[128]{0} broadcast(convert.2375), dimensions={}
  divide.8359 = f32[128]{0} divide(multiply.8355, broadcast.8358)
  broadcast.8360 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8359), dimensions={3}
  constant.2365 = f32[] constant(2)
  broadcast.2366 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.2365), dimensions={}
  multiply.2367 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.2366, convert.2353)
  multiply.8361 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.8360, multiply.2367)
  reshape.8362 = f32[128]{0} reshape(multiply.2413)
  broadcast.8363 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.8362), dimensions={3}
  multiply.8364 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8326, broadcast.8363)
  add.8365 = f32[128,28,28,128]{3,2,1,0} add(multiply.8361, multiply.8364)
  negate.8356 = f32[128]{0} negate(multiply.8355)
  constant.2379 = f32[] constant(2)
  broadcast.2380 = f32[128]{0} broadcast(constant.2379), dimensions={}
  multiply.2381 = f32[128]{0} multiply(broadcast.2380, divide.2363)
  multiply.8357 = f32[128]{0} multiply(negate.8356, multiply.2381)
  constant.8366 = f32[] constant(0)
  reduce.8371 = f32[128]{0} reduce(multiply.8364, constant.8366), dimensions={0,1,2}, to_apply=primitive_computation_add.8367
  broadcast.8372 = f32[128]{0} broadcast(reduce.8371), dimensions={0}
  broadcast.8373 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8372), dimensions={3}
  negate.8374 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8373)
  reshape.8375 = f32[128]{0} reshape(negate.8374)
  add.8376 = f32[128]{0} add(multiply.8357, reshape.8375)
  broadcast.8377 = f32[128]{0} broadcast(convert.2361), dimensions={}
  divide.8378 = f32[128]{0} divide(add.8376, broadcast.8377)
  broadcast.8379 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8378), dimensions={3}
  add.8380 = f32[128,28,28,128]{3,2,1,0} add(add.8365, broadcast.8379)
  convert.8381 = bf16[128,28,28,128]{3,2,1,0} convert(add.8380)
  reverse.8385 = bf16[3,3,128,128]{3,2,1,0} reverse(convert.2351), dimensions={0,1}
  convolution.8386 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.8381, reverse.8385), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.8387 = f32[128,28,28,128]{3,2,1,0} convert(convolution.8386)
  convert.8388 = bf16[128,28,28,128]{3,2,1,0} convert(convert.8387)
  constant.8389 = bf16[] constant(0)
  broadcast.8390 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.8389), dimensions={}
  select.8391 = bf16[128,28,28,128]{3,2,1,0} select(compare.2343, convert.8388, broadcast.8390)
  convert.8392 = f32[128,28,28,128]{3,2,1,0} convert(select.8391)
  multiply.8402 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8392, subtract.2313)
  constant.8403 = f32[] constant(0)
  reduce.8408 = f32[128]{0} reduce(multiply.8402, constant.8403), dimensions={0,1,2}, to_apply=primitive_computation_add.8404
  broadcast.8409 = f32[128]{0} broadcast(reduce.8408), dimensions={0}
  broadcast.8410 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8409), dimensions={3}
  multiply.8413 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8410, reshape.2324)
  constant.8414 = f32[] constant(0)
  reduce.8419 = f32[128]{0} reduce(multiply.8413, constant.8414), dimensions={0,1,2}, to_apply=primitive_computation_add.8415
  broadcast.8420 = f32[128]{0} broadcast(reduce.8419), dimensions={0}
  constant.2321 = f32[] constant(-0.5)
  broadcast.2322 = f32[128]{0} broadcast(constant.2321), dimensions={}
  constant.2318 = f32[] constant(-1.5)
  broadcast.2319 = f32[128]{0} broadcast(constant.2318), dimensions={}
  power.2320 = f32[128]{0} power(add.2316, broadcast.2319)
  multiply.2323 = f32[128]{0} multiply(broadcast.2322, power.2320)
  multiply.8421 = f32[128]{0} multiply(broadcast.8420, multiply.2323)
  broadcast.8424 = f32[128]{0} broadcast(convert.2288), dimensions={}
  divide.8425 = f32[128]{0} divide(multiply.8421, broadcast.8424)
  broadcast.8426 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8425), dimensions={3}
  constant.2278 = f32[] constant(2)
  broadcast.2279 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.2278), dimensions={}
  multiply.2280 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.2279, convert.2266)
  multiply.8427 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.8426, multiply.2280)
  reshape.8428 = f32[128]{0} reshape(multiply.2326)
  broadcast.8429 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.8428), dimensions={3}
  multiply.8430 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8392, broadcast.8429)
  add.8431 = f32[128,28,28,128]{3,2,1,0} add(multiply.8427, multiply.8430)
  negate.8422 = f32[128]{0} negate(multiply.8421)
  constant.2292 = f32[] constant(2)
  broadcast.2293 = f32[128]{0} broadcast(constant.2292), dimensions={}
  multiply.2294 = f32[128]{0} multiply(broadcast.2293, divide.2276)
  multiply.8423 = f32[128]{0} multiply(negate.8422, multiply.2294)
  constant.8432 = f32[] constant(0)
  reduce.8437 = f32[128]{0} reduce(multiply.8430, constant.8432), dimensions={0,1,2}, to_apply=primitive_computation_add.8433
  broadcast.8438 = f32[128]{0} broadcast(reduce.8437), dimensions={0}
  broadcast.8439 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8438), dimensions={3}
  negate.8440 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8439)
  reshape.8441 = f32[128]{0} reshape(negate.8440)
  add.8442 = f32[128]{0} add(multiply.8423, reshape.8441)
  broadcast.8443 = f32[128]{0} broadcast(convert.2274), dimensions={}
  divide.8444 = f32[128]{0} divide(add.8442, broadcast.8443)
  broadcast.8445 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8444), dimensions={3}
  add.8446 = f32[128,28,28,128]{3,2,1,0} add(add.8431, broadcast.8445)
  convert.8447 = bf16[128,28,28,128]{3,2,1,0} convert(add.8446)
  reverse.8451 = bf16[1,1,512,128]{3,2,1,0} reverse(convert.2264), dimensions={0,1}
  convolution.8452 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.8447, reverse.8451), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.8453 = f32[128,28,28,512]{3,2,1,0} convert(convolution.8452)
  convert.8454 = bf16[128,28,28,512]{3,2,1,0} convert(convert.8453)
  add.8455 = bf16[128,28,28,512]{3,2,1,0} add(select.8259, convert.8454)
  constant.8456 = bf16[] constant(0)
  broadcast.8457 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.8456), dimensions={}
  select.8458 = bf16[128,28,28,512]{3,2,1,0} select(compare.2256, add.8455, broadcast.8457)
  constant.2079 = bf16[] constant(0)
  broadcast.2080 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2079), dimensions={}
  compare.2081 = pred[128,28,28,128]{3,2,1,0} compare(convert.2072, broadcast.2080), direction=GT
  constant.2166 = bf16[] constant(0)
  broadcast.2167 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2166), dimensions={}
  compare.2168 = pred[128,28,28,128]{3,2,1,0} compare(convert.2159, broadcast.2167), direction=GT
  convert.8459 = f32[128,28,28,512]{3,2,1,0} convert(select.8458)
  multiply.8469 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8459, subtract.2225)
  constant.8470 = f32[] constant(0)
  reduce.8475 = f32[512]{0} reduce(multiply.8469, constant.8470), dimensions={0,1,2}, to_apply=primitive_computation_add.8471
  broadcast.8476 = f32[512]{0} broadcast(reduce.8475), dimensions={0}
  broadcast.8477 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8476), dimensions={3}
  multiply.8480 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8477, reshape.2236)
  constant.8481 = f32[] constant(0)
  reduce.8486 = f32[512]{0} reduce(multiply.8480, constant.8481), dimensions={0,1,2}, to_apply=primitive_computation_add.8482
  broadcast.8487 = f32[512]{0} broadcast(reduce.8486), dimensions={0}
  constant.2233 = f32[] constant(-0.5)
  broadcast.2234 = f32[512]{0} broadcast(constant.2233), dimensions={}
  constant.2230 = f32[] constant(-1.5)
  broadcast.2231 = f32[512]{0} broadcast(constant.2230), dimensions={}
  power.2232 = f32[512]{0} power(add.2228, broadcast.2231)
  multiply.2235 = f32[512]{0} multiply(broadcast.2234, power.2232)
  multiply.8488 = f32[512]{0} multiply(broadcast.8487, multiply.2235)
  broadcast.8491 = f32[512]{0} broadcast(convert.2200), dimensions={}
  divide.8492 = f32[512]{0} divide(multiply.8488, broadcast.8491)
  broadcast.8493 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8492), dimensions={3}
  constant.2190 = f32[] constant(2)
  broadcast.2191 = f32[128,28,28,512]{3,2,1,0} broadcast(constant.2190), dimensions={}
  multiply.2192 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.2191, convert.2178)
  multiply.8494 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.8493, multiply.2192)
  reshape.8495 = f32[512]{0} reshape(multiply.2238)
  broadcast.8496 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.8495), dimensions={3}
  multiply.8497 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8459, broadcast.8496)
  add.8498 = f32[128,28,28,512]{3,2,1,0} add(multiply.8494, multiply.8497)
  negate.8489 = f32[512]{0} negate(multiply.8488)
  constant.2204 = f32[] constant(2)
  broadcast.2205 = f32[512]{0} broadcast(constant.2204), dimensions={}
  multiply.2206 = f32[512]{0} multiply(broadcast.2205, divide.2188)
  multiply.8490 = f32[512]{0} multiply(negate.8489, multiply.2206)
  constant.8499 = f32[] constant(0)
  reduce.8504 = f32[512]{0} reduce(multiply.8497, constant.8499), dimensions={0,1,2}, to_apply=primitive_computation_add.8500
  broadcast.8505 = f32[512]{0} broadcast(reduce.8504), dimensions={0}
  broadcast.8506 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8505), dimensions={3}
  negate.8507 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.8506)
  reshape.8508 = f32[512]{0} reshape(negate.8507)
  add.8509 = f32[512]{0} add(multiply.8490, reshape.8508)
  broadcast.8510 = f32[512]{0} broadcast(convert.2186), dimensions={}
  divide.8511 = f32[512]{0} divide(add.8509, broadcast.8510)
  broadcast.8512 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8511), dimensions={3}
  add.8513 = f32[128,28,28,512]{3,2,1,0} add(add.8498, broadcast.8512)
  convert.8514 = bf16[128,28,28,512]{3,2,1,0} convert(add.8513)
  reverse.8518 = bf16[1,1,128,512]{3,2,1,0} reverse(convert.2176), dimensions={0,1}
  convolution.8519 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.8514, reverse.8518), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.8520 = f32[128,28,28,128]{3,2,1,0} convert(convolution.8519)
  convert.8521 = bf16[128,28,28,128]{3,2,1,0} convert(convert.8520)
  constant.8522 = bf16[] constant(0)
  broadcast.8523 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.8522), dimensions={}
  select.8524 = bf16[128,28,28,128]{3,2,1,0} select(compare.2168, convert.8521, broadcast.8523)
  convert.8525 = f32[128,28,28,128]{3,2,1,0} convert(select.8524)
  multiply.8535 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8525, subtract.2138)
  constant.8536 = f32[] constant(0)
  reduce.8541 = f32[128]{0} reduce(multiply.8535, constant.8536), dimensions={0,1,2}, to_apply=primitive_computation_add.8537
  broadcast.8542 = f32[128]{0} broadcast(reduce.8541), dimensions={0}
  broadcast.8543 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8542), dimensions={3}
  multiply.8546 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8543, reshape.2149)
  constant.8547 = f32[] constant(0)
  reduce.8552 = f32[128]{0} reduce(multiply.8546, constant.8547), dimensions={0,1,2}, to_apply=primitive_computation_add.8548
  broadcast.8553 = f32[128]{0} broadcast(reduce.8552), dimensions={0}
  constant.2146 = f32[] constant(-0.5)
  broadcast.2147 = f32[128]{0} broadcast(constant.2146), dimensions={}
  constant.2143 = f32[] constant(-1.5)
  broadcast.2144 = f32[128]{0} broadcast(constant.2143), dimensions={}
  power.2145 = f32[128]{0} power(add.2141, broadcast.2144)
  multiply.2148 = f32[128]{0} multiply(broadcast.2147, power.2145)
  multiply.8554 = f32[128]{0} multiply(broadcast.8553, multiply.2148)
  broadcast.8557 = f32[128]{0} broadcast(convert.2113), dimensions={}
  divide.8558 = f32[128]{0} divide(multiply.8554, broadcast.8557)
  broadcast.8559 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8558), dimensions={3}
  constant.2103 = f32[] constant(2)
  broadcast.2104 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.2103), dimensions={}
  multiply.2105 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.2104, convert.2091)
  multiply.8560 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.8559, multiply.2105)
  reshape.8561 = f32[128]{0} reshape(multiply.2151)
  broadcast.8562 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.8561), dimensions={3}
  multiply.8563 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8525, broadcast.8562)
  add.8564 = f32[128,28,28,128]{3,2,1,0} add(multiply.8560, multiply.8563)
  negate.8555 = f32[128]{0} negate(multiply.8554)
  constant.2117 = f32[] constant(2)
  broadcast.2118 = f32[128]{0} broadcast(constant.2117), dimensions={}
  multiply.2119 = f32[128]{0} multiply(broadcast.2118, divide.2101)
  multiply.8556 = f32[128]{0} multiply(negate.8555, multiply.2119)
  constant.8565 = f32[] constant(0)
  reduce.8570 = f32[128]{0} reduce(multiply.8563, constant.8565), dimensions={0,1,2}, to_apply=primitive_computation_add.8566
  broadcast.8571 = f32[128]{0} broadcast(reduce.8570), dimensions={0}
  broadcast.8572 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8571), dimensions={3}
  negate.8573 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8572)
  reshape.8574 = f32[128]{0} reshape(negate.8573)
  add.8575 = f32[128]{0} add(multiply.8556, reshape.8574)
  broadcast.8576 = f32[128]{0} broadcast(convert.2099), dimensions={}
  divide.8577 = f32[128]{0} divide(add.8575, broadcast.8576)
  broadcast.8578 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8577), dimensions={3}
  add.8579 = f32[128,28,28,128]{3,2,1,0} add(add.8564, broadcast.8578)
  convert.8580 = bf16[128,28,28,128]{3,2,1,0} convert(add.8579)
  reverse.8584 = bf16[3,3,128,128]{3,2,1,0} reverse(convert.2089), dimensions={0,1}
  convolution.8585 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.8580, reverse.8584), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.8586 = f32[128,28,28,128]{3,2,1,0} convert(convolution.8585)
  convert.8587 = bf16[128,28,28,128]{3,2,1,0} convert(convert.8586)
  constant.8588 = bf16[] constant(0)
  broadcast.8589 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.8588), dimensions={}
  select.8590 = bf16[128,28,28,128]{3,2,1,0} select(compare.2081, convert.8587, broadcast.8589)
  convert.8591 = f32[128,28,28,128]{3,2,1,0} convert(select.8590)
  multiply.8601 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8591, subtract.2051)
  constant.8602 = f32[] constant(0)
  reduce.8607 = f32[128]{0} reduce(multiply.8601, constant.8602), dimensions={0,1,2}, to_apply=primitive_computation_add.8603
  broadcast.8608 = f32[128]{0} broadcast(reduce.8607), dimensions={0}
  broadcast.8609 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8608), dimensions={3}
  multiply.8612 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8609, reshape.2062)
  constant.8613 = f32[] constant(0)
  reduce.8618 = f32[128]{0} reduce(multiply.8612, constant.8613), dimensions={0,1,2}, to_apply=primitive_computation_add.8614
  broadcast.8619 = f32[128]{0} broadcast(reduce.8618), dimensions={0}
  constant.2059 = f32[] constant(-0.5)
  broadcast.2060 = f32[128]{0} broadcast(constant.2059), dimensions={}
  constant.2056 = f32[] constant(-1.5)
  broadcast.2057 = f32[128]{0} broadcast(constant.2056), dimensions={}
  power.2058 = f32[128]{0} power(add.2054, broadcast.2057)
  multiply.2061 = f32[128]{0} multiply(broadcast.2060, power.2058)
  multiply.8620 = f32[128]{0} multiply(broadcast.8619, multiply.2061)
  broadcast.8623 = f32[128]{0} broadcast(convert.2026), dimensions={}
  divide.8624 = f32[128]{0} divide(multiply.8620, broadcast.8623)
  broadcast.8625 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8624), dimensions={3}
  constant.2016 = f32[] constant(2)
  broadcast.2017 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.2016), dimensions={}
  multiply.2018 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.2017, convert.2004)
  multiply.8626 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.8625, multiply.2018)
  reshape.8627 = f32[128]{0} reshape(multiply.2064)
  broadcast.8628 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.8627), dimensions={3}
  multiply.8629 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8591, broadcast.8628)
  add.8630 = f32[128,28,28,128]{3,2,1,0} add(multiply.8626, multiply.8629)
  negate.8621 = f32[128]{0} negate(multiply.8620)
  constant.2030 = f32[] constant(2)
  broadcast.2031 = f32[128]{0} broadcast(constant.2030), dimensions={}
  multiply.2032 = f32[128]{0} multiply(broadcast.2031, divide.2014)
  multiply.8622 = f32[128]{0} multiply(negate.8621, multiply.2032)
  constant.8631 = f32[] constant(0)
  reduce.8636 = f32[128]{0} reduce(multiply.8629, constant.8631), dimensions={0,1,2}, to_apply=primitive_computation_add.8632
  broadcast.8637 = f32[128]{0} broadcast(reduce.8636), dimensions={0}
  broadcast.8638 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8637), dimensions={3}
  negate.8639 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8638)
  reshape.8640 = f32[128]{0} reshape(negate.8639)
  add.8641 = f32[128]{0} add(multiply.8622, reshape.8640)
  broadcast.8642 = f32[128]{0} broadcast(convert.2012), dimensions={}
  divide.8643 = f32[128]{0} divide(add.8641, broadcast.8642)
  broadcast.8644 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8643), dimensions={3}
  add.8645 = f32[128,28,28,128]{3,2,1,0} add(add.8630, broadcast.8644)
  convert.8646 = bf16[128,28,28,128]{3,2,1,0} convert(add.8645)
  reverse.8650 = bf16[1,1,512,128]{3,2,1,0} reverse(convert.2002), dimensions={0,1}
  convolution.8651 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.8646, reverse.8650), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.8652 = f32[128,28,28,512]{3,2,1,0} convert(convolution.8651)
  convert.8653 = bf16[128,28,28,512]{3,2,1,0} convert(convert.8652)
  add.8654 = bf16[128,28,28,512]{3,2,1,0} add(select.8458, convert.8653)
  constant.8655 = bf16[] constant(0)
  broadcast.8656 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.8655), dimensions={}
  select.8657 = bf16[128,28,28,512]{3,2,1,0} select(compare.1994, add.8654, broadcast.8656)
  convert.8658 = f32[128,28,28,512]{3,2,1,0} convert(select.8657)
  multiply.8668 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8658, subtract.1887)
  constant.8669 = f32[] constant(0)
  reduce.8674 = f32[512]{0} reduce(multiply.8668, constant.8669), dimensions={0,1,2}, to_apply=primitive_computation_add.8670
  broadcast.8675 = f32[512]{0} broadcast(reduce.8674), dimensions={0}
  broadcast.8676 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8675), dimensions={3}
  multiply.8679 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8676, reshape.1898)
  constant.8680 = f32[] constant(0)
  reduce.8685 = f32[512]{0} reduce(multiply.8679, constant.8680), dimensions={0,1,2}, to_apply=primitive_computation_add.8681
  broadcast.8686 = f32[512]{0} broadcast(reduce.8685), dimensions={0}
  constant.1895 = f32[] constant(-0.5)
  broadcast.1896 = f32[512]{0} broadcast(constant.1895), dimensions={}
  constant.1892 = f32[] constant(-1.5)
  broadcast.1893 = f32[512]{0} broadcast(constant.1892), dimensions={}
  power.1894 = f32[512]{0} power(add.1890, broadcast.1893)
  multiply.1897 = f32[512]{0} multiply(broadcast.1896, power.1894)
  multiply.8687 = f32[512]{0} multiply(broadcast.8686, multiply.1897)
  broadcast.8690 = f32[512]{0} broadcast(convert.1862), dimensions={}
  divide.8691 = f32[512]{0} divide(multiply.8687, broadcast.8690)
  broadcast.8692 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8691), dimensions={3}
  constant.1852 = f32[] constant(2)
  broadcast.1853 = f32[128,28,28,512]{3,2,1,0} broadcast(constant.1852), dimensions={}
  multiply.1854 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.1853, convert.1840)
  multiply.8693 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.8692, multiply.1854)
  reshape.8694 = f32[512]{0} reshape(multiply.1900)
  broadcast.8695 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.8694), dimensions={3}
  multiply.8696 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8658, broadcast.8695)
  add.8697 = f32[128,28,28,512]{3,2,1,0} add(multiply.8693, multiply.8696)
  negate.8688 = f32[512]{0} negate(multiply.8687)
  constant.1866 = f32[] constant(2)
  broadcast.1867 = f32[512]{0} broadcast(constant.1866), dimensions={}
  multiply.1868 = f32[512]{0} multiply(broadcast.1867, divide.1850)
  multiply.8689 = f32[512]{0} multiply(negate.8688, multiply.1868)
  constant.8698 = f32[] constant(0)
  reduce.8703 = f32[512]{0} reduce(multiply.8696, constant.8698), dimensions={0,1,2}, to_apply=primitive_computation_add.8699
  broadcast.8704 = f32[512]{0} broadcast(reduce.8703), dimensions={0}
  broadcast.8705 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8704), dimensions={3}
  negate.8706 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.8705)
  reshape.8707 = f32[512]{0} reshape(negate.8706)
  add.8708 = f32[512]{0} add(multiply.8689, reshape.8707)
  broadcast.8709 = f32[512]{0} broadcast(convert.1848), dimensions={}
  divide.8710 = f32[512]{0} divide(add.8708, broadcast.8709)
  broadcast.8711 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8710), dimensions={3}
  add.8712 = f32[128,28,28,512]{3,2,1,0} add(add.8697, broadcast.8711)
  convert.8713 = bf16[128,28,28,512]{3,2,1,0} convert(add.8712)
  reverse.8717 = bf16[1,1,128,512]{3,2,1,0} reverse(convert.1838), dimensions={0,1}
  convolution.8718 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.8713, reverse.8717), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.8719 = f32[128,28,28,128]{3,2,1,0} convert(convolution.8718)
  convert.8720 = bf16[128,28,28,128]{3,2,1,0} convert(convert.8719)
  constant.8721 = bf16[] constant(0)
  broadcast.8722 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.8721), dimensions={}
  select.8723 = bf16[128,28,28,128]{3,2,1,0} select(compare.1830, convert.8720, broadcast.8722)
  convert.8724 = f32[128,28,28,128]{3,2,1,0} convert(select.8723)
  multiply.8734 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8724, subtract.1800)
  constant.8735 = f32[] constant(0)
  reduce.8740 = f32[128]{0} reduce(multiply.8734, constant.8735), dimensions={0,1,2}, to_apply=primitive_computation_add.8736
  broadcast.8741 = f32[128]{0} broadcast(reduce.8740), dimensions={0}
  broadcast.8742 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8741), dimensions={3}
  multiply.8745 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8742, reshape.1811)
  constant.8746 = f32[] constant(0)
  reduce.8751 = f32[128]{0} reduce(multiply.8745, constant.8746), dimensions={0,1,2}, to_apply=primitive_computation_add.8747
  broadcast.8752 = f32[128]{0} broadcast(reduce.8751), dimensions={0}
  constant.1808 = f32[] constant(-0.5)
  broadcast.1809 = f32[128]{0} broadcast(constant.1808), dimensions={}
  constant.1805 = f32[] constant(-1.5)
  broadcast.1806 = f32[128]{0} broadcast(constant.1805), dimensions={}
  power.1807 = f32[128]{0} power(add.1803, broadcast.1806)
  multiply.1810 = f32[128]{0} multiply(broadcast.1809, power.1807)
  multiply.8753 = f32[128]{0} multiply(broadcast.8752, multiply.1810)
  broadcast.8756 = f32[128]{0} broadcast(convert.1775), dimensions={}
  divide.8757 = f32[128]{0} divide(multiply.8753, broadcast.8756)
  broadcast.8758 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8757), dimensions={3}
  constant.1765 = f32[] constant(2)
  broadcast.1766 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.1765), dimensions={}
  multiply.1767 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.1766, convert.1753)
  multiply.8759 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.8758, multiply.1767)
  reshape.8760 = f32[128]{0} reshape(multiply.1813)
  broadcast.8761 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.8760), dimensions={3}
  multiply.8762 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8724, broadcast.8761)
  add.8763 = f32[128,28,28,128]{3,2,1,0} add(multiply.8759, multiply.8762)
  negate.8754 = f32[128]{0} negate(multiply.8753)
  constant.1779 = f32[] constant(2)
  broadcast.1780 = f32[128]{0} broadcast(constant.1779), dimensions={}
  multiply.1781 = f32[128]{0} multiply(broadcast.1780, divide.1763)
  multiply.8755 = f32[128]{0} multiply(negate.8754, multiply.1781)
  constant.8764 = f32[] constant(0)
  reduce.8769 = f32[128]{0} reduce(multiply.8762, constant.8764), dimensions={0,1,2}, to_apply=primitive_computation_add.8765
  broadcast.8770 = f32[128]{0} broadcast(reduce.8769), dimensions={0}
  broadcast.8771 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8770), dimensions={3}
  negate.8772 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8771)
  reshape.8773 = f32[128]{0} reshape(negate.8772)
  add.8774 = f32[128]{0} add(multiply.8755, reshape.8773)
  broadcast.8775 = f32[128]{0} broadcast(convert.1761), dimensions={}
  divide.8776 = f32[128]{0} divide(add.8774, broadcast.8775)
  broadcast.8777 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8776), dimensions={3}
  add.8778 = f32[128,28,28,128]{3,2,1,0} add(add.8763, broadcast.8777)
  convert.8779 = bf16[128,28,28,128]{3,2,1,0} convert(add.8778)
  reverse.8783 = bf16[3,3,128,128]{3,2,1,0} reverse(convert.1751), dimensions={0,1}
  convolution.8784 = bf16[128,56,56,128]{3,2,1,0} convolution(convert.8779, reverse.8783), window={size=3x3 pad=2_1x2_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  convert.8785 = f32[128,56,56,128]{3,2,1,0} convert(convolution.8784)
  convert.8786 = bf16[128,56,56,128]{3,2,1,0} convert(convert.8785)
  constant.8787 = bf16[] constant(0)
  broadcast.8788 = bf16[128,56,56,128]{3,2,1,0} broadcast(constant.8787), dimensions={}
  select.8789 = bf16[128,56,56,128]{3,2,1,0} select(compare.1743, convert.8786, broadcast.8788)
  convert.8790 = f32[128,56,56,128]{3,2,1,0} convert(select.8789)
  multiply.8800 = f32[128,56,56,128]{3,2,1,0} multiply(convert.8790, subtract.1713)
  constant.8801 = f32[] constant(0)
  reduce.8806 = f32[128]{0} reduce(multiply.8800, constant.8801), dimensions={0,1,2}, to_apply=primitive_computation_add.8802
  broadcast.8807 = f32[128]{0} broadcast(reduce.8806), dimensions={0}
  broadcast.8808 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8807), dimensions={3}
  multiply.8811 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8808, reshape.1724)
  constant.8812 = f32[] constant(0)
  reduce.8817 = f32[128]{0} reduce(multiply.8811, constant.8812), dimensions={0,1,2}, to_apply=primitive_computation_add.8813
  broadcast.8818 = f32[128]{0} broadcast(reduce.8817), dimensions={0}
  constant.1721 = f32[] constant(-0.5)
  broadcast.1722 = f32[128]{0} broadcast(constant.1721), dimensions={}
  constant.1718 = f32[] constant(-1.5)
  broadcast.1719 = f32[128]{0} broadcast(constant.1718), dimensions={}
  power.1720 = f32[128]{0} power(add.1716, broadcast.1719)
  multiply.1723 = f32[128]{0} multiply(broadcast.1722, power.1720)
  multiply.8819 = f32[128]{0} multiply(broadcast.8818, multiply.1723)
  broadcast.8822 = f32[128]{0} broadcast(convert.1688), dimensions={}
  divide.8823 = f32[128]{0} divide(multiply.8819, broadcast.8822)
  broadcast.8824 = f32[128,56,56,128]{3,2,1,0} broadcast(divide.8823), dimensions={3}
  constant.1678 = f32[] constant(2)
  broadcast.1679 = f32[128,56,56,128]{3,2,1,0} broadcast(constant.1678), dimensions={}
  multiply.1680 = f32[128,56,56,128]{3,2,1,0} multiply(broadcast.1679, convert.1666)
  multiply.8825 = f32[128,56,56,128]{3,2,1,0} multiply(broadcast.8824, multiply.1680)
  reshape.8826 = f32[128]{0} reshape(multiply.1726)
  broadcast.8827 = f32[128,56,56,128]{3,2,1,0} broadcast(reshape.8826), dimensions={3}
  multiply.8828 = f32[128,56,56,128]{3,2,1,0} multiply(convert.8790, broadcast.8827)
  add.8829 = f32[128,56,56,128]{3,2,1,0} add(multiply.8825, multiply.8828)
  negate.8820 = f32[128]{0} negate(multiply.8819)
  constant.1692 = f32[] constant(2)
  broadcast.1693 = f32[128]{0} broadcast(constant.1692), dimensions={}
  multiply.1694 = f32[128]{0} multiply(broadcast.1693, divide.1676)
  multiply.8821 = f32[128]{0} multiply(negate.8820, multiply.1694)
  constant.8830 = f32[] constant(0)
  reduce.8835 = f32[128]{0} reduce(multiply.8828, constant.8830), dimensions={0,1,2}, to_apply=primitive_computation_add.8831
  broadcast.8836 = f32[128]{0} broadcast(reduce.8835), dimensions={0}
  broadcast.8837 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8836), dimensions={3}
  negate.8838 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8837)
  reshape.8839 = f32[128]{0} reshape(negate.8838)
  add.8840 = f32[128]{0} add(multiply.8821, reshape.8839)
  broadcast.8841 = f32[128]{0} broadcast(convert.1674), dimensions={}
  divide.8842 = f32[128]{0} divide(add.8840, broadcast.8841)
  broadcast.8843 = f32[128,56,56,128]{3,2,1,0} broadcast(divide.8842), dimensions={3}
  add.8844 = f32[128,56,56,128]{3,2,1,0} add(add.8829, broadcast.8843)
  convert.8845 = bf16[128,56,56,128]{3,2,1,0} convert(add.8844)
  reverse.8849 = bf16[1,1,256,128]{3,2,1,0} reverse(convert.1664), dimensions={0,1}
  convolution.8850 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.8845, reverse.8849), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.8851 = f32[128,56,56,256]{3,2,1,0} convert(convolution.8850)
  convert.8852 = bf16[128,56,56,256]{3,2,1,0} convert(convert.8851)
  convert.8853 = f32[128,28,28,512]{3,2,1,0} convert(select.8657)
  multiply.8863 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8853, subtract.1963)
  constant.8864 = f32[] constant(0)
  reduce.8869 = f32[512]{0} reduce(multiply.8863, constant.8864), dimensions={0,1,2}, to_apply=primitive_computation_add.8865
  broadcast.8870 = f32[512]{0} broadcast(reduce.8869), dimensions={0}
  broadcast.8871 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8870), dimensions={3}
  multiply.8874 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8871, reshape.1974)
  constant.8875 = f32[] constant(0)
  reduce.8880 = f32[512]{0} reduce(multiply.8874, constant.8875), dimensions={0,1,2}, to_apply=primitive_computation_add.8876
  broadcast.8881 = f32[512]{0} broadcast(reduce.8880), dimensions={0}
  constant.1971 = f32[] constant(-0.5)
  broadcast.1972 = f32[512]{0} broadcast(constant.1971), dimensions={}
  constant.1968 = f32[] constant(-1.5)
  broadcast.1969 = f32[512]{0} broadcast(constant.1968), dimensions={}
  power.1970 = f32[512]{0} power(add.1966, broadcast.1969)
  multiply.1973 = f32[512]{0} multiply(broadcast.1972, power.1970)
  multiply.8882 = f32[512]{0} multiply(broadcast.8881, multiply.1973)
  broadcast.8885 = f32[512]{0} broadcast(convert.1938), dimensions={}
  divide.8886 = f32[512]{0} divide(multiply.8882, broadcast.8885)
  broadcast.8887 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8886), dimensions={3}
  constant.1928 = f32[] constant(2)
  broadcast.1929 = f32[128,28,28,512]{3,2,1,0} broadcast(constant.1928), dimensions={}
  multiply.1930 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.1929, convert.1916)
  multiply.8888 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.8887, multiply.1930)
  reshape.8889 = f32[512]{0} reshape(multiply.1976)
  broadcast.8890 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.8889), dimensions={3}
  multiply.8891 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8853, broadcast.8890)
  add.8892 = f32[128,28,28,512]{3,2,1,0} add(multiply.8888, multiply.8891)
  negate.8883 = f32[512]{0} negate(multiply.8882)
  constant.1942 = f32[] constant(2)
  broadcast.1943 = f32[512]{0} broadcast(constant.1942), dimensions={}
  multiply.1944 = f32[512]{0} multiply(broadcast.1943, divide.1926)
  multiply.8884 = f32[512]{0} multiply(negate.8883, multiply.1944)
  constant.8893 = f32[] constant(0)
  reduce.8898 = f32[512]{0} reduce(multiply.8891, constant.8893), dimensions={0,1,2}, to_apply=primitive_computation_add.8894
  broadcast.8899 = f32[512]{0} broadcast(reduce.8898), dimensions={0}
  broadcast.8900 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8899), dimensions={3}
  negate.8901 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.8900)
  reshape.8902 = f32[512]{0} reshape(negate.8901)
  add.8903 = f32[512]{0} add(multiply.8884, reshape.8902)
  broadcast.8904 = f32[512]{0} broadcast(convert.1924), dimensions={}
  divide.8905 = f32[512]{0} divide(add.8903, broadcast.8904)
  broadcast.8906 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8905), dimensions={3}
  add.8907 = f32[128,28,28,512]{3,2,1,0} add(add.8892, broadcast.8906)
  convert.8908 = bf16[128,28,28,512]{3,2,1,0} convert(add.8907)
  reverse.8912 = bf16[1,1,256,512]{3,2,1,0} reverse(convert.1914), dimensions={0,1}
  convolution.8913 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.8908, reverse.8912), window={size=1x1 pad=0_1x0_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  convert.8914 = f32[128,56,56,256]{3,2,1,0} convert(convolution.8913)
  convert.8915 = bf16[128,56,56,256]{3,2,1,0} convert(convert.8914)
  add.8916 = bf16[128,56,56,256]{3,2,1,0} add(convert.8852, convert.8915)
  constant.8917 = bf16[] constant(0)
  broadcast.8918 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.8917), dimensions={}
  select.8919 = bf16[128,56,56,256]{3,2,1,0} select(compare.1656, add.8916, broadcast.8918)
  constant.1479 = bf16[] constant(0)
  broadcast.1480 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1479), dimensions={}
  compare.1481 = pred[128,56,56,64]{3,2,1,0} compare(convert.1472, broadcast.1480), direction=GT
  constant.1566 = bf16[] constant(0)
  broadcast.1567 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1566), dimensions={}
  compare.1568 = pred[128,56,56,64]{3,2,1,0} compare(convert.1559, broadcast.1567), direction=GT
  convert.8920 = f32[128,56,56,256]{3,2,1,0} convert(select.8919)
  multiply.8930 = f32[128,56,56,256]{3,2,1,0} multiply(convert.8920, subtract.1625)
  constant.8931 = f32[] constant(0)
  reduce.8936 = f32[256]{0} reduce(multiply.8930, constant.8931), dimensions={0,1,2}, to_apply=primitive_computation_add.8932
  broadcast.8937 = f32[256]{0} broadcast(reduce.8936), dimensions={0}
  broadcast.8938 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8937), dimensions={3}
  multiply.8941 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.8938, reshape.1636)
  constant.8942 = f32[] constant(0)
  reduce.8947 = f32[256]{0} reduce(multiply.8941, constant.8942), dimensions={0,1,2}, to_apply=primitive_computation_add.8943
  broadcast.8948 = f32[256]{0} broadcast(reduce.8947), dimensions={0}
  constant.1633 = f32[] constant(-0.5)
  broadcast.1634 = f32[256]{0} broadcast(constant.1633), dimensions={}
  constant.1630 = f32[] constant(-1.5)
  broadcast.1631 = f32[256]{0} broadcast(constant.1630), dimensions={}
  power.1632 = f32[256]{0} power(add.1628, broadcast.1631)
  multiply.1635 = f32[256]{0} multiply(broadcast.1634, power.1632)
  multiply.8949 = f32[256]{0} multiply(broadcast.8948, multiply.1635)
  broadcast.8952 = f32[256]{0} broadcast(convert.1600), dimensions={}
  divide.8953 = f32[256]{0} divide(multiply.8949, broadcast.8952)
  broadcast.8954 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.8953), dimensions={3}
  constant.1590 = f32[] constant(2)
  broadcast.1591 = f32[128,56,56,256]{3,2,1,0} broadcast(constant.1590), dimensions={}
  multiply.1592 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.1591, convert.1578)
  multiply.8955 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.8954, multiply.1592)
  reshape.8956 = f32[256]{0} reshape(multiply.1638)
  broadcast.8957 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.8956), dimensions={3}
  multiply.8958 = f32[128,56,56,256]{3,2,1,0} multiply(convert.8920, broadcast.8957)
  add.8959 = f32[128,56,56,256]{3,2,1,0} add(multiply.8955, multiply.8958)
  negate.8950 = f32[256]{0} negate(multiply.8949)
  constant.1604 = f32[] constant(2)
  broadcast.1605 = f32[256]{0} broadcast(constant.1604), dimensions={}
  multiply.1606 = f32[256]{0} multiply(broadcast.1605, divide.1588)
  multiply.8951 = f32[256]{0} multiply(negate.8950, multiply.1606)
  constant.8960 = f32[] constant(0)
  reduce.8965 = f32[256]{0} reduce(multiply.8958, constant.8960), dimensions={0,1,2}, to_apply=primitive_computation_add.8961
  broadcast.8966 = f32[256]{0} broadcast(reduce.8965), dimensions={0}
  broadcast.8967 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8966), dimensions={3}
  negate.8968 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.8967)
  reshape.8969 = f32[256]{0} reshape(negate.8968)
  add.8970 = f32[256]{0} add(multiply.8951, reshape.8969)
  broadcast.8971 = f32[256]{0} broadcast(convert.1586), dimensions={}
  divide.8972 = f32[256]{0} divide(add.8970, broadcast.8971)
  broadcast.8973 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.8972), dimensions={3}
  add.8974 = f32[128,56,56,256]{3,2,1,0} add(add.8959, broadcast.8973)
  convert.8975 = bf16[128,56,56,256]{3,2,1,0} convert(add.8974)
  reverse.8979 = bf16[1,1,64,256]{3,2,1,0} reverse(convert.1576), dimensions={0,1}
  convolution.8980 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.8975, reverse.8979), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.8981 = f32[128,56,56,64]{3,2,1,0} convert(convolution.8980)
  convert.8982 = bf16[128,56,56,64]{3,2,1,0} convert(convert.8981)
  constant.8983 = bf16[] constant(0)
  broadcast.8984 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.8983), dimensions={}
  select.8985 = bf16[128,56,56,64]{3,2,1,0} select(compare.1568, convert.8982, broadcast.8984)
  convert.8986 = f32[128,56,56,64]{3,2,1,0} convert(select.8985)
  multiply.8996 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8986, subtract.1538)
  constant.8997 = f32[] constant(0)
  reduce.9002 = f32[64]{0} reduce(multiply.8996, constant.8997), dimensions={0,1,2}, to_apply=primitive_computation_add.8998
  broadcast.9003 = f32[64]{0} broadcast(reduce.9002), dimensions={0}
  broadcast.9004 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9003), dimensions={3}
  multiply.9007 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9004, reshape.1549)
  constant.9008 = f32[] constant(0)
  reduce.9013 = f32[64]{0} reduce(multiply.9007, constant.9008), dimensions={0,1,2}, to_apply=primitive_computation_add.9009
  broadcast.9014 = f32[64]{0} broadcast(reduce.9013), dimensions={0}
  constant.1546 = f32[] constant(-0.5)
  broadcast.1547 = f32[64]{0} broadcast(constant.1546), dimensions={}
  constant.1543 = f32[] constant(-1.5)
  broadcast.1544 = f32[64]{0} broadcast(constant.1543), dimensions={}
  power.1545 = f32[64]{0} power(add.1541, broadcast.1544)
  multiply.1548 = f32[64]{0} multiply(broadcast.1547, power.1545)
  multiply.9015 = f32[64]{0} multiply(broadcast.9014, multiply.1548)
  broadcast.9018 = f32[64]{0} broadcast(convert.1513), dimensions={}
  divide.9019 = f32[64]{0} divide(multiply.9015, broadcast.9018)
  broadcast.9020 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9019), dimensions={3}
  constant.1503 = f32[] constant(2)
  broadcast.1504 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.1503), dimensions={}
  multiply.1505 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.1504, convert.1491)
  multiply.9021 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.9020, multiply.1505)
  reshape.9022 = f32[64]{0} reshape(multiply.1551)
  broadcast.9023 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.9022), dimensions={3}
  multiply.9024 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8986, broadcast.9023)
  add.9025 = f32[128,56,56,64]{3,2,1,0} add(multiply.9021, multiply.9024)
  negate.9016 = f32[64]{0} negate(multiply.9015)
  constant.1517 = f32[] constant(2)
  broadcast.1518 = f32[64]{0} broadcast(constant.1517), dimensions={}
  multiply.1519 = f32[64]{0} multiply(broadcast.1518, divide.1501)
  multiply.9017 = f32[64]{0} multiply(negate.9016, multiply.1519)
  constant.9026 = f32[] constant(0)
  reduce.9031 = f32[64]{0} reduce(multiply.9024, constant.9026), dimensions={0,1,2}, to_apply=primitive_computation_add.9027
  broadcast.9032 = f32[64]{0} broadcast(reduce.9031), dimensions={0}
  broadcast.9033 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9032), dimensions={3}
  negate.9034 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.9033)
  reshape.9035 = f32[64]{0} reshape(negate.9034)
  add.9036 = f32[64]{0} add(multiply.9017, reshape.9035)
  broadcast.9037 = f32[64]{0} broadcast(convert.1499), dimensions={}
  divide.9038 = f32[64]{0} divide(add.9036, broadcast.9037)
  broadcast.9039 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9038), dimensions={3}
  add.9040 = f32[128,56,56,64]{3,2,1,0} add(add.9025, broadcast.9039)
  convert.9041 = bf16[128,56,56,64]{3,2,1,0} convert(add.9040)
  reverse.9045 = bf16[3,3,64,64]{3,2,1,0} reverse(convert.1489), dimensions={0,1}
  convolution.9046 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.9041, reverse.9045), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.9047 = f32[128,56,56,64]{3,2,1,0} convert(convolution.9046)
  convert.9048 = bf16[128,56,56,64]{3,2,1,0} convert(convert.9047)
  constant.9049 = bf16[] constant(0)
  broadcast.9050 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.9049), dimensions={}
  select.9051 = bf16[128,56,56,64]{3,2,1,0} select(compare.1481, convert.9048, broadcast.9050)
  convert.9052 = f32[128,56,56,64]{3,2,1,0} convert(select.9051)
  multiply.9062 = f32[128,56,56,64]{3,2,1,0} multiply(convert.9052, subtract.1451)
  constant.9063 = f32[] constant(0)
  reduce.9068 = f32[64]{0} reduce(multiply.9062, constant.9063), dimensions={0,1,2}, to_apply=primitive_computation_add.9064
  broadcast.9069 = f32[64]{0} broadcast(reduce.9068), dimensions={0}
  broadcast.9070 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9069), dimensions={3}
  multiply.9073 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9070, reshape.1462)
  constant.9074 = f32[] constant(0)
  reduce.9079 = f32[64]{0} reduce(multiply.9073, constant.9074), dimensions={0,1,2}, to_apply=primitive_computation_add.9075
  broadcast.9080 = f32[64]{0} broadcast(reduce.9079), dimensions={0}
  constant.1459 = f32[] constant(-0.5)
  broadcast.1460 = f32[64]{0} broadcast(constant.1459), dimensions={}
  constant.1456 = f32[] constant(-1.5)
  broadcast.1457 = f32[64]{0} broadcast(constant.1456), dimensions={}
  power.1458 = f32[64]{0} power(add.1454, broadcast.1457)
  multiply.1461 = f32[64]{0} multiply(broadcast.1460, power.1458)
  multiply.9081 = f32[64]{0} multiply(broadcast.9080, multiply.1461)
  broadcast.9084 = f32[64]{0} broadcast(convert.1426), dimensions={}
  divide.9085 = f32[64]{0} divide(multiply.9081, broadcast.9084)
  broadcast.9086 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9085), dimensions={3}
  constant.1416 = f32[] constant(2)
  broadcast.1417 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.1416), dimensions={}
  multiply.1418 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.1417, convert.1404)
  multiply.9087 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.9086, multiply.1418)
  reshape.9088 = f32[64]{0} reshape(multiply.1464)
  broadcast.9089 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.9088), dimensions={3}
  multiply.9090 = f32[128,56,56,64]{3,2,1,0} multiply(convert.9052, broadcast.9089)
  add.9091 = f32[128,56,56,64]{3,2,1,0} add(multiply.9087, multiply.9090)
  negate.9082 = f32[64]{0} negate(multiply.9081)
  constant.1430 = f32[] constant(2)
  broadcast.1431 = f32[64]{0} broadcast(constant.1430), dimensions={}
  multiply.1432 = f32[64]{0} multiply(broadcast.1431, divide.1414)
  multiply.9083 = f32[64]{0} multiply(negate.9082, multiply.1432)
  constant.9092 = f32[] constant(0)
  reduce.9097 = f32[64]{0} reduce(multiply.9090, constant.9092), dimensions={0,1,2}, to_apply=primitive_computation_add.9093
  broadcast.9098 = f32[64]{0} broadcast(reduce.9097), dimensions={0}
  broadcast.9099 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9098), dimensions={3}
  negate.9100 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.9099)
  reshape.9101 = f32[64]{0} reshape(negate.9100)
  add.9102 = f32[64]{0} add(multiply.9083, reshape.9101)
  broadcast.9103 = f32[64]{0} broadcast(convert.1412), dimensions={}
  divide.9104 = f32[64]{0} divide(add.9102, broadcast.9103)
  broadcast.9105 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9104), dimensions={3}
  add.9106 = f32[128,56,56,64]{3,2,1,0} add(add.9091, broadcast.9105)
  convert.9107 = bf16[128,56,56,64]{3,2,1,0} convert(add.9106)
  reverse.9111 = bf16[1,1,256,64]{3,2,1,0} reverse(convert.1402), dimensions={0,1}
  convolution.9112 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.9107, reverse.9111), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.9113 = f32[128,56,56,256]{3,2,1,0} convert(convolution.9112)
  convert.9114 = bf16[128,56,56,256]{3,2,1,0} convert(convert.9113)
  add.9115 = bf16[128,56,56,256]{3,2,1,0} add(select.8919, convert.9114)
  constant.9116 = bf16[] constant(0)
  broadcast.9117 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.9116), dimensions={}
  select.9118 = bf16[128,56,56,256]{3,2,1,0} select(compare.1394, add.9115, broadcast.9117)
  constant.1217 = bf16[] constant(0)
  broadcast.1218 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1217), dimensions={}
  compare.1219 = pred[128,56,56,64]{3,2,1,0} compare(convert.1210, broadcast.1218), direction=GT
  constant.1304 = bf16[] constant(0)
  broadcast.1305 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1304), dimensions={}
  compare.1306 = pred[128,56,56,64]{3,2,1,0} compare(convert.1297, broadcast.1305), direction=GT
  convert.9119 = f32[128,56,56,256]{3,2,1,0} convert(select.9118)
  multiply.9129 = f32[128,56,56,256]{3,2,1,0} multiply(convert.9119, subtract.1363)
  constant.9130 = f32[] constant(0)
  reduce.9135 = f32[256]{0} reduce(multiply.9129, constant.9130), dimensions={0,1,2}, to_apply=primitive_computation_add.9131
  broadcast.9136 = f32[256]{0} broadcast(reduce.9135), dimensions={0}
  broadcast.9137 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9136), dimensions={3}
  multiply.9140 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.9137, reshape.1374)
  constant.9141 = f32[] constant(0)
  reduce.9146 = f32[256]{0} reduce(multiply.9140, constant.9141), dimensions={0,1,2}, to_apply=primitive_computation_add.9142
  broadcast.9147 = f32[256]{0} broadcast(reduce.9146), dimensions={0}
  constant.1371 = f32[] constant(-0.5)
  broadcast.1372 = f32[256]{0} broadcast(constant.1371), dimensions={}
  constant.1368 = f32[] constant(-1.5)
  broadcast.1369 = f32[256]{0} broadcast(constant.1368), dimensions={}
  power.1370 = f32[256]{0} power(add.1366, broadcast.1369)
  multiply.1373 = f32[256]{0} multiply(broadcast.1372, power.1370)
  multiply.9148 = f32[256]{0} multiply(broadcast.9147, multiply.1373)
  broadcast.9151 = f32[256]{0} broadcast(convert.1338), dimensions={}
  divide.9152 = f32[256]{0} divide(multiply.9148, broadcast.9151)
  broadcast.9153 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.9152), dimensions={3}
  constant.1328 = f32[] constant(2)
  broadcast.1329 = f32[128,56,56,256]{3,2,1,0} broadcast(constant.1328), dimensions={}
  multiply.1330 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.1329, convert.1316)
  multiply.9154 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.9153, multiply.1330)
  reshape.9155 = f32[256]{0} reshape(multiply.1376)
  broadcast.9156 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.9155), dimensions={3}
  multiply.9157 = f32[128,56,56,256]{3,2,1,0} multiply(convert.9119, broadcast.9156)
  add.9158 = f32[128,56,56,256]{3,2,1,0} add(multiply.9154, multiply.9157)
  negate.9149 = f32[256]{0} negate(multiply.9148)
  constant.1342 = f32[] constant(2)
  broadcast.1343 = f32[256]{0} broadcast(constant.1342), dimensions={}
  multiply.1344 = f32[256]{0} multiply(broadcast.1343, divide.1326)
  multiply.9150 = f32[256]{0} multiply(negate.9149, multiply.1344)
  constant.9159 = f32[] constant(0)
  reduce.9164 = f32[256]{0} reduce(multiply.9157, constant.9159), dimensions={0,1,2}, to_apply=primitive_computation_add.9160
  broadcast.9165 = f32[256]{0} broadcast(reduce.9164), dimensions={0}
  broadcast.9166 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9165), dimensions={3}
  negate.9167 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.9166)
  reshape.9168 = f32[256]{0} reshape(negate.9167)
  add.9169 = f32[256]{0} add(multiply.9150, reshape.9168)
  broadcast.9170 = f32[256]{0} broadcast(convert.1324), dimensions={}
  divide.9171 = f32[256]{0} divide(add.9169, broadcast.9170)
  broadcast.9172 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.9171), dimensions={3}
  add.9173 = f32[128,56,56,256]{3,2,1,0} add(add.9158, broadcast.9172)
  convert.9174 = bf16[128,56,56,256]{3,2,1,0} convert(add.9173)
  reverse.9178 = bf16[1,1,64,256]{3,2,1,0} reverse(convert.1314), dimensions={0,1}
  convolution.9179 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.9174, reverse.9178), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.9180 = f32[128,56,56,64]{3,2,1,0} convert(convolution.9179)
  convert.9181 = bf16[128,56,56,64]{3,2,1,0} convert(convert.9180)
  constant.9182 = bf16[] constant(0)
  broadcast.9183 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.9182), dimensions={}
  select.9184 = bf16[128,56,56,64]{3,2,1,0} select(compare.1306, convert.9181, broadcast.9183)
  convert.9185 = f32[128,56,56,64]{3,2,1,0} convert(select.9184)
  multiply.9195 = f32[128,56,56,64]{3,2,1,0} multiply(convert.9185, subtract.1276)
  constant.9196 = f32[] constant(0)
  reduce.9201 = f32[64]{0} reduce(multiply.9195, constant.9196), dimensions={0,1,2}, to_apply=primitive_computation_add.9197
  broadcast.9202 = f32[64]{0} broadcast(reduce.9201), dimensions={0}
  broadcast.9203 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9202), dimensions={3}
  multiply.9206 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9203, reshape.1287)
  constant.9207 = f32[] constant(0)
  reduce.9212 = f32[64]{0} reduce(multiply.9206, constant.9207), dimensions={0,1,2}, to_apply=primitive_computation_add.9208
  broadcast.9213 = f32[64]{0} broadcast(reduce.9212), dimensions={0}
  constant.1284 = f32[] constant(-0.5)
  broadcast.1285 = f32[64]{0} broadcast(constant.1284), dimensions={}
  constant.1281 = f32[] constant(-1.5)
  broadcast.1282 = f32[64]{0} broadcast(constant.1281), dimensions={}
  power.1283 = f32[64]{0} power(add.1279, broadcast.1282)
  multiply.1286 = f32[64]{0} multiply(broadcast.1285, power.1283)
  multiply.9214 = f32[64]{0} multiply(broadcast.9213, multiply.1286)
  broadcast.9217 = f32[64]{0} broadcast(convert.1251), dimensions={}
  divide.9218 = f32[64]{0} divide(multiply.9214, broadcast.9217)
  broadcast.9219 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9218), dimensions={3}
  constant.1241 = f32[] constant(2)
  broadcast.1242 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.1241), dimensions={}
  multiply.1243 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.1242, convert.1229)
  multiply.9220 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.9219, multiply.1243)
  reshape.9221 = f32[64]{0} reshape(multiply.1289)
  broadcast.9222 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.9221), dimensions={3}
  multiply.9223 = f32[128,56,56,64]{3,2,1,0} multiply(convert.9185, broadcast.9222)
  add.9224 = f32[128,56,56,64]{3,2,1,0} add(multiply.9220, multiply.9223)
  negate.9215 = f32[64]{0} negate(multiply.9214)
  constant.1255 = f32[] constant(2)
  broadcast.1256 = f32[64]{0} broadcast(constant.1255), dimensions={}
  multiply.1257 = f32[64]{0} multiply(broadcast.1256, divide.1239)
  multiply.9216 = f32[64]{0} multiply(negate.9215, multiply.1257)
  constant.9225 = f32[] constant(0)
  reduce.9230 = f32[64]{0} reduce(multiply.9223, constant.9225), dimensions={0,1,2}, to_apply=primitive_computation_add.9226
  broadcast.9231 = f32[64]{0} broadcast(reduce.9230), dimensions={0}
  broadcast.9232 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9231), dimensions={3}
  negate.9233 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.9232)
  reshape.9234 = f32[64]{0} reshape(negate.9233)
  add.9235 = f32[64]{0} add(multiply.9216, reshape.9234)
  broadcast.9236 = f32[64]{0} broadcast(convert.1237), dimensions={}
  divide.9237 = f32[64]{0} divide(add.9235, broadcast.9236)
  broadcast.9238 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9237), dimensions={3}
  add.9239 = f32[128,56,56,64]{3,2,1,0} add(add.9224, broadcast.9238)
  convert.9240 = bf16[128,56,56,64]{3,2,1,0} convert(add.9239)
  reverse.9244 = bf16[3,3,64,64]{3,2,1,0} reverse(convert.1227), dimensions={0,1}
  convolution.9245 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.9240, reverse.9244), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.9246 = f32[128,56,56,64]{3,2,1,0} convert(convolution.9245)
  convert.9247 = bf16[128,56,56,64]{3,2,1,0} convert(convert.9246)
  constant.9248 = bf16[] constant(0)
  broadcast.9249 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.9248), dimensions={}
  select.9250 = bf16[128,56,56,64]{3,2,1,0} select(compare.1219, convert.9247, broadcast.9249)
  convert.9251 = f32[128,56,56,64]{3,2,1,0} convert(select.9250)
  multiply.9261 = f32[128,56,56,64]{3,2,1,0} multiply(convert.9251, subtract.1189)
  constant.9262 = f32[] constant(0)
  reduce.9267 = f32[64]{0} reduce(multiply.9261, constant.9262), dimensions={0,1,2}, to_apply=primitive_computation_add.9263
  broadcast.9268 = f32[64]{0} broadcast(reduce.9267), dimensions={0}
  broadcast.9269 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9268), dimensions={3}
  multiply.9272 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9269, reshape.1200)
  constant.9273 = f32[] constant(0)
  reduce.9278 = f32[64]{0} reduce(multiply.9272, constant.9273), dimensions={0,1,2}, to_apply=primitive_computation_add.9274
  broadcast.9279 = f32[64]{0} broadcast(reduce.9278), dimensions={0}
  constant.1197 = f32[] constant(-0.5)
  broadcast.1198 = f32[64]{0} broadcast(constant.1197), dimensions={}
  constant.1194 = f32[] constant(-1.5)
  broadcast.1195 = f32[64]{0} broadcast(constant.1194), dimensions={}
  power.1196 = f32[64]{0} power(add.1192, broadcast.1195)
  multiply.1199 = f32[64]{0} multiply(broadcast.1198, power.1196)
  multiply.9280 = f32[64]{0} multiply(broadcast.9279, multiply.1199)
  broadcast.9283 = f32[64]{0} broadcast(convert.1164), dimensions={}
  divide.9284 = f32[64]{0} divide(multiply.9280, broadcast.9283)
  broadcast.9285 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9284), dimensions={3}
  constant.1154 = f32[] constant(2)
  broadcast.1155 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.1154), dimensions={}
  multiply.1156 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.1155, convert.1142)
  multiply.9286 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.9285, multiply.1156)
  reshape.9287 = f32[64]{0} reshape(multiply.1202)
  broadcast.9288 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.9287), dimensions={3}
  multiply.9289 = f32[128,56,56,64]{3,2,1,0} multiply(convert.9251, broadcast.9288)
  add.9290 = f32[128,56,56,64]{3,2,1,0} add(multiply.9286, multiply.9289)
  negate.9281 = f32[64]{0} negate(multiply.9280)
  constant.1168 = f32[] constant(2)
  broadcast.1169 = f32[64]{0} broadcast(constant.1168), dimensions={}
  multiply.1170 = f32[64]{0} multiply(broadcast.1169, divide.1152)
  multiply.9282 = f32[64]{0} multiply(negate.9281, multiply.1170)
  constant.9291 = f32[] constant(0)
  reduce.9296 = f32[64]{0} reduce(multiply.9289, constant.9291), dimensions={0,1,2}, to_apply=primitive_computation_add.9292
  broadcast.9297 = f32[64]{0} broadcast(reduce.9296), dimensions={0}
  broadcast.9298 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9297), dimensions={3}
  negate.9299 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.9298)
  reshape.9300 = f32[64]{0} reshape(negate.9299)
  add.9301 = f32[64]{0} add(multiply.9282, reshape.9300)
  broadcast.9302 = f32[64]{0} broadcast(convert.1150), dimensions={}
  divide.9303 = f32[64]{0} divide(add.9301, broadcast.9302)
  broadcast.9304 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9303), dimensions={3}
  add.9305 = f32[128,56,56,64]{3,2,1,0} add(add.9290, broadcast.9304)
  convert.9306 = bf16[128,56,56,64]{3,2,1,0} convert(add.9305)
  reverse.9310 = bf16[1,1,256,64]{3,2,1,0} reverse(convert.1140), dimensions={0,1}
  convolution.9311 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.9306, reverse.9310), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.9312 = f32[128,56,56,256]{3,2,1,0} convert(convolution.9311)
  convert.9313 = bf16[128,56,56,256]{3,2,1,0} convert(convert.9312)
  add.9314 = bf16[128,56,56,256]{3,2,1,0} add(select.9118, convert.9313)
  constant.9315 = bf16[] constant(0)
  broadcast.9316 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.9315), dimensions={}
  select.9317 = bf16[128,56,56,256]{3,2,1,0} select(compare.1132, add.9314, broadcast.9316)
  convert.9318 = f32[128,56,56,256]{3,2,1,0} convert(select.9317)
  multiply.9328 = f32[128,56,56,256]{3,2,1,0} multiply(convert.9318, subtract.1025)
  constant.9329 = f32[] constant(0)
  reduce.9334 = f32[256]{0} reduce(multiply.9328, constant.9329), dimensions={0,1,2}, to_apply=primitive_computation_add.9330
  broadcast.9335 = f32[256]{0} broadcast(reduce.9334), dimensions={0}
  broadcast.9336 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9335), dimensions={3}
  multiply.9339 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.9336, reshape.1036)
  constant.9340 = f32[] constant(0)
  reduce.9345 = f32[256]{0} reduce(multiply.9339, constant.9340), dimensions={0,1,2}, to_apply=primitive_computation_add.9341
  broadcast.9346 = f32[256]{0} broadcast(reduce.9345), dimensions={0}
  constant.1033 = f32[] constant(-0.5)
  broadcast.1034 = f32[256]{0} broadcast(constant.1033), dimensions={}
  constant.1030 = f32[] constant(-1.5)
  broadcast.1031 = f32[256]{0} broadcast(constant.1030), dimensions={}
  power.1032 = f32[256]{0} power(add.1028, broadcast.1031)
  multiply.1035 = f32[256]{0} multiply(broadcast.1034, power.1032)
  multiply.9347 = f32[256]{0} multiply(broadcast.9346, multiply.1035)
  broadcast.9350 = f32[256]{0} broadcast(convert.1000), dimensions={}
  divide.9351 = f32[256]{0} divide(multiply.9347, broadcast.9350)
  broadcast.9352 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.9351), dimensions={3}
  constant.990 = f32[] constant(2)
  broadcast.991 = f32[128,56,56,256]{3,2,1,0} broadcast(constant.990), dimensions={}
  multiply.992 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.991, convert.978)
  multiply.9353 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.9352, multiply.992)
  reshape.9354 = f32[256]{0} reshape(multiply.1038)
  broadcast.9355 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.9354), dimensions={3}
  multiply.9356 = f32[128,56,56,256]{3,2,1,0} multiply(convert.9318, broadcast.9355)
  add.9357 = f32[128,56,56,256]{3,2,1,0} add(multiply.9353, multiply.9356)
  negate.9348 = f32[256]{0} negate(multiply.9347)
  constant.1004 = f32[] constant(2)
  broadcast.1005 = f32[256]{0} broadcast(constant.1004), dimensions={}
  multiply.1006 = f32[256]{0} multiply(broadcast.1005, divide.988)
  multiply.9349 = f32[256]{0} multiply(negate.9348, multiply.1006)
  constant.9358 = f32[] constant(0)
  reduce.9363 = f32[256]{0} reduce(multiply.9356, constant.9358), dimensions={0,1,2}, to_apply=primitive_computation_add.9359
  broadcast.9364 = f32[256]{0} broadcast(reduce.9363), dimensions={0}
  broadcast.9365 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9364), dimensions={3}
  negate.9366 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.9365)
  reshape.9367 = f32[256]{0} reshape(negate.9366)
  add.9368 = f32[256]{0} add(multiply.9349, reshape.9367)
  broadcast.9369 = f32[256]{0} broadcast(convert.986), dimensions={}
  divide.9370 = f32[256]{0} divide(add.9368, broadcast.9369)
  broadcast.9371 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.9370), dimensions={3}
  add.9372 = f32[128,56,56,256]{3,2,1,0} add(add.9357, broadcast.9371)
  convert.9373 = bf16[128,56,56,256]{3,2,1,0} convert(add.9372)
  reverse.9377 = bf16[1,1,64,256]{3,2,1,0} reverse(convert.976), dimensions={0,1}
  convolution.9378 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.9373, reverse.9377), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.9379 = f32[128,56,56,64]{3,2,1,0} convert(convolution.9378)
  convert.9380 = bf16[128,56,56,64]{3,2,1,0} convert(convert.9379)
  constant.9381 = bf16[] constant(0)
  broadcast.9382 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.9381), dimensions={}
  select.9383 = bf16[128,56,56,64]{3,2,1,0} select(compare.968, convert.9380, broadcast.9382)
  convert.9384 = f32[128,56,56,64]{3,2,1,0} convert(select.9383)
  multiply.9394 = f32[128,56,56,64]{3,2,1,0} multiply(convert.9384, subtract.938)
  constant.9395 = f32[] constant(0)
  reduce.9400 = f32[64]{0} reduce(multiply.9394, constant.9395), dimensions={0,1,2}, to_apply=primitive_computation_add.9396
  broadcast.9401 = f32[64]{0} broadcast(reduce.9400), dimensions={0}
  broadcast.9402 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9401), dimensions={3}
  multiply.9405 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9402, reshape.949)
  constant.9406 = f32[] constant(0)
  reduce.9411 = f32[64]{0} reduce(multiply.9405, constant.9406), dimensions={0,1,2}, to_apply=primitive_computation_add.9407
  broadcast.9412 = f32[64]{0} broadcast(reduce.9411), dimensions={0}
  constant.946 = f32[] constant(-0.5)
  broadcast.947 = f32[64]{0} broadcast(constant.946), dimensions={}
  constant.943 = f32[] constant(-1.5)
  broadcast.944 = f32[64]{0} broadcast(constant.943), dimensions={}
  power.945 = f32[64]{0} power(add.941, broadcast.944)
  multiply.948 = f32[64]{0} multiply(broadcast.947, power.945)
  multiply.9413 = f32[64]{0} multiply(broadcast.9412, multiply.948)
  broadcast.9416 = f32[64]{0} broadcast(convert.913), dimensions={}
  divide.9417 = f32[64]{0} divide(multiply.9413, broadcast.9416)
  broadcast.9418 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9417), dimensions={3}
  constant.903 = f32[] constant(2)
  broadcast.904 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.903), dimensions={}
  multiply.905 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.904, convert.891)
  multiply.9419 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.9418, multiply.905)
  reshape.9420 = f32[64]{0} reshape(multiply.951)
  broadcast.9421 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.9420), dimensions={3}
  multiply.9422 = f32[128,56,56,64]{3,2,1,0} multiply(convert.9384, broadcast.9421)
  add.9423 = f32[128,56,56,64]{3,2,1,0} add(multiply.9419, multiply.9422)
  negate.9414 = f32[64]{0} negate(multiply.9413)
  constant.917 = f32[] constant(2)
  broadcast.918 = f32[64]{0} broadcast(constant.917), dimensions={}
  multiply.919 = f32[64]{0} multiply(broadcast.918, divide.901)
  multiply.9415 = f32[64]{0} multiply(negate.9414, multiply.919)
  constant.9424 = f32[] constant(0)
  reduce.9429 = f32[64]{0} reduce(multiply.9422, constant.9424), dimensions={0,1,2}, to_apply=primitive_computation_add.9425
  broadcast.9430 = f32[64]{0} broadcast(reduce.9429), dimensions={0}
  broadcast.9431 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9430), dimensions={3}
  negate.9432 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.9431)
  reshape.9433 = f32[64]{0} reshape(negate.9432)
  add.9434 = f32[64]{0} add(multiply.9415, reshape.9433)
  broadcast.9435 = f32[64]{0} broadcast(convert.899), dimensions={}
  divide.9436 = f32[64]{0} divide(add.9434, broadcast.9435)
  broadcast.9437 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9436), dimensions={3}
  add.9438 = f32[128,56,56,64]{3,2,1,0} add(add.9423, broadcast.9437)
  convert.9439 = bf16[128,56,56,64]{3,2,1,0} convert(add.9438)
  reverse.9443 = bf16[3,3,64,64]{3,2,1,0} reverse(convert.889), dimensions={0,1}
  convolution.9444 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.9439, reverse.9443), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  convert.9445 = f32[128,56,56,64]{3,2,1,0} convert(convolution.9444)
  convert.9446 = bf16[128,56,56,64]{3,2,1,0} convert(convert.9445)
  constant.9447 = bf16[] constant(0)
  broadcast.9448 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.9447), dimensions={}
  select.9449 = bf16[128,56,56,64]{3,2,1,0} select(compare.881, convert.9446, broadcast.9448)
  convert.9450 = f32[128,56,56,64]{3,2,1,0} convert(select.9449)
  constant.9451 = f32[] constant(0)
  reduce.9456 = f32[64]{0} reduce(convert.9450, constant.9451), dimensions={0,1,2}, to_apply=primitive_computation_add.9452
  broadcast.9457 = f32[64]{0} broadcast(reduce.9456), dimensions={0}
  broadcast.9458 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9457), dimensions={3}
  reshape.9459 = f32[64]{0} reshape(broadcast.9458)
  multiply.9460 = f32[128,56,56,64]{3,2,1,0} multiply(convert.9450, subtract.851)
  constant.9461 = f32[] constant(0)
  reduce.9466 = f32[64]{0} reduce(multiply.9460, constant.9461), dimensions={0,1,2}, to_apply=primitive_computation_add.9462
  broadcast.9467 = f32[64]{0} broadcast(reduce.9466), dimensions={0}
  broadcast.9468 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9467), dimensions={3}
  multiply.9469 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9468, broadcast.863)
  reshape.9470 = f32[64]{0} reshape(multiply.9469)
  constant.9385 = f32[] constant(0)
  reduce.9390 = f32[64]{0} reduce(convert.9384, constant.9385), dimensions={0,1,2}, to_apply=primitive_computation_add.9386
  broadcast.9391 = f32[64]{0} broadcast(reduce.9390), dimensions={0}
  broadcast.9392 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9391), dimensions={3}
  reshape.9393 = f32[64]{0} reshape(broadcast.9392)
  multiply.9403 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9402, broadcast.950)
  reshape.9404 = f32[64]{0} reshape(multiply.9403)
  constant.9319 = f32[] constant(0)
  reduce.9324 = f32[256]{0} reduce(convert.9318, constant.9319), dimensions={0,1,2}, to_apply=primitive_computation_add.9320
  broadcast.9325 = f32[256]{0} broadcast(reduce.9324), dimensions={0}
  broadcast.9326 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9325), dimensions={3}
  reshape.9327 = f32[256]{0} reshape(broadcast.9326)
  multiply.9337 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.9336, broadcast.1037)
  reshape.9338 = f32[256]{0} reshape(multiply.9337)
  constant.5975 = f32[] constant(1)
  constant.5976 = f32[] constant(5e-05)
  multiply.5977 = f32[] multiply(constant.5975, constant.5976)
  broadcast.6084 = f32[1,1,64,64]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5378 = f32[] constant(2)
  broadcast.5379 = f32[1,1,64,64]{3,2,1,0} broadcast(constant.5378), dimensions={}
  multiply.5380 = f32[1,1,64,64]{3,2,1,0} multiply(broadcast.5379, parameter.7)
  multiply.6085 = f32[1,1,64,64]{3,2,1,0} multiply(broadcast.6084, multiply.5380)
  multiply.9471 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9468, reshape.862)
  constant.9472 = f32[] constant(0)
  reduce.9477 = f32[64]{0} reduce(multiply.9471, constant.9472), dimensions={0,1,2}, to_apply=primitive_computation_add.9473
  broadcast.9478 = f32[64]{0} broadcast(reduce.9477), dimensions={0}
  constant.859 = f32[] constant(-0.5)
  broadcast.860 = f32[64]{0} broadcast(constant.859), dimensions={}
  constant.856 = f32[] constant(-1.5)
  broadcast.857 = f32[64]{0} broadcast(constant.856), dimensions={}
  power.858 = f32[64]{0} power(add.854, broadcast.857)
  multiply.861 = f32[64]{0} multiply(broadcast.860, power.858)
  multiply.9479 = f32[64]{0} multiply(broadcast.9478, multiply.861)
  broadcast.9482 = f32[64]{0} broadcast(convert.826), dimensions={}
  divide.9483 = f32[64]{0} divide(multiply.9479, broadcast.9482)
  broadcast.9484 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9483), dimensions={3}
  constant.816 = f32[] constant(2)
  broadcast.817 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.816), dimensions={}
  multiply.818 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.817, convert.804)
  multiply.9485 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.9484, multiply.818)
  reshape.9486 = f32[64]{0} reshape(multiply.864)
  broadcast.9487 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.9486), dimensions={3}
  multiply.9488 = f32[128,56,56,64]{3,2,1,0} multiply(convert.9450, broadcast.9487)
  add.9489 = f32[128,56,56,64]{3,2,1,0} add(multiply.9485, multiply.9488)
  negate.9480 = f32[64]{0} negate(multiply.9479)
  constant.830 = f32[] constant(2)
  broadcast.831 = f32[64]{0} broadcast(constant.830), dimensions={}
  multiply.832 = f32[64]{0} multiply(broadcast.831, divide.814)
  multiply.9481 = f32[64]{0} multiply(negate.9480, multiply.832)
  constant.9490 = f32[] constant(0)
  reduce.9495 = f32[64]{0} reduce(multiply.9488, constant.9490), dimensions={0,1,2}, to_apply=primitive_computation_add.9491
  broadcast.9496 = f32[64]{0} broadcast(reduce.9495), dimensions={0}
  broadcast.9497 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9496), dimensions={3}
  negate.9498 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.9497)
  reshape.9499 = f32[64]{0} reshape(negate.9498)
  add.9500 = f32[64]{0} add(multiply.9481, reshape.9499)
  broadcast.9501 = f32[64]{0} broadcast(convert.812), dimensions={}
  divide.9502 = f32[64]{0} divide(add.9500, broadcast.9501)
  broadcast.9503 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9502), dimensions={3}
  add.9504 = f32[128,56,56,64]{3,2,1,0} add(add.9489, broadcast.9503)
  convert.9505 = bf16[128,56,56,64]{3,2,1,0} convert(add.9504)
  convolution.9506 = bf16[1,1,64,64]{3,2,1,0} convolution(convert.801, convert.9505), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.9507 = f32[1,1,64,64]{3,2,1,0} convert(convolution.9506)
  add.9508 = f32[1,1,64,64]{3,2,1,0} add(multiply.6085, convert.9507)
  broadcast.6082 = f32[3,3,64,64]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5388 = f32[] constant(2)
  broadcast.5389 = f32[3,3,64,64]{3,2,1,0} broadcast(constant.5388), dimensions={}
  multiply.5390 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.5389, parameter.8)
  multiply.6083 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.6082, multiply.5390)
  convolution.9440 = bf16[3,3,64,64]{3,2,1,0} convolution(convert.888, convert.9439), window={size=56x56 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.9441 = f32[3,3,64,64]{3,2,1,0} convert(convolution.9440)
  add.9442 = f32[3,3,64,64]{3,2,1,0} add(multiply.6083, convert.9441)
  broadcast.6080 = f32[1,1,64,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5398 = f32[] constant(2)
  broadcast.5399 = f32[1,1,64,256]{3,2,1,0} broadcast(constant.5398), dimensions={}
  multiply.5400 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5399, parameter.9)
  multiply.6081 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.6080, multiply.5400)
  convolution.9374 = bf16[1,1,64,256]{3,2,1,0} convolution(convert.975, convert.9373), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.9375 = f32[1,1,64,256]{3,2,1,0} convert(convolution.9374)
  add.9376 = f32[1,1,64,256]{3,2,1,0} add(multiply.6081, convert.9375)
  broadcast.6078 = f32[1,1,64,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5408 = f32[] constant(2)
  broadcast.5409 = f32[1,1,64,256]{3,2,1,0} broadcast(constant.5408), dimensions={}
  multiply.5410 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5409, parameter.10)
  multiply.6079 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.6078, multiply.5410)
  convert.9513 = f32[128,56,56,256]{3,2,1,0} convert(select.9317)
  multiply.9523 = f32[128,56,56,256]{3,2,1,0} multiply(convert.9513, subtract.1101)
  constant.9524 = f32[] constant(0)
  reduce.9529 = f32[256]{0} reduce(multiply.9523, constant.9524), dimensions={0,1,2}, to_apply=primitive_computation_add.9525
  broadcast.9530 = f32[256]{0} broadcast(reduce.9529), dimensions={0}
  broadcast.9531 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9530), dimensions={3}
  multiply.9534 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.9531, reshape.1112)
  constant.9535 = f32[] constant(0)
  reduce.9540 = f32[256]{0} reduce(multiply.9534, constant.9535), dimensions={0,1,2}, to_apply=primitive_computation_add.9536
  broadcast.9541 = f32[256]{0} broadcast(reduce.9540), dimensions={0}
  constant.1109 = f32[] constant(-0.5)
  broadcast.1110 = f32[256]{0} broadcast(constant.1109), dimensions={}
  constant.1106 = f32[] constant(-1.5)
  broadcast.1107 = f32[256]{0} broadcast(constant.1106), dimensions={}
  power.1108 = f32[256]{0} power(add.1104, broadcast.1107)
  multiply.1111 = f32[256]{0} multiply(broadcast.1110, power.1108)
  multiply.9542 = f32[256]{0} multiply(broadcast.9541, multiply.1111)
  broadcast.9545 = f32[256]{0} broadcast(convert.1076), dimensions={}
  divide.9546 = f32[256]{0} divide(multiply.9542, broadcast.9545)
  broadcast.9547 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.9546), dimensions={3}
  constant.1066 = f32[] constant(2)
  broadcast.1067 = f32[128,56,56,256]{3,2,1,0} broadcast(constant.1066), dimensions={}
  multiply.1068 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.1067, convert.1054)
  multiply.9548 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.9547, multiply.1068)
  reshape.9549 = f32[256]{0} reshape(multiply.1114)
  broadcast.9550 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.9549), dimensions={3}
  multiply.9551 = f32[128,56,56,256]{3,2,1,0} multiply(convert.9513, broadcast.9550)
  add.9552 = f32[128,56,56,256]{3,2,1,0} add(multiply.9548, multiply.9551)
  negate.9543 = f32[256]{0} negate(multiply.9542)
  constant.1080 = f32[] constant(2)
  broadcast.1081 = f32[256]{0} broadcast(constant.1080), dimensions={}
  multiply.1082 = f32[256]{0} multiply(broadcast.1081, divide.1064)
  multiply.9544 = f32[256]{0} multiply(negate.9543, multiply.1082)
  constant.9553 = f32[] constant(0)
  reduce.9558 = f32[256]{0} reduce(multiply.9551, constant.9553), dimensions={0,1,2}, to_apply=primitive_computation_add.9554
  broadcast.9559 = f32[256]{0} broadcast(reduce.9558), dimensions={0}
  broadcast.9560 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9559), dimensions={3}
  negate.9561 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.9560)
  reshape.9562 = f32[256]{0} reshape(negate.9561)
  add.9563 = f32[256]{0} add(multiply.9544, reshape.9562)
  broadcast.9564 = f32[256]{0} broadcast(convert.1062), dimensions={}
  divide.9565 = f32[256]{0} divide(add.9563, broadcast.9564)
  broadcast.9566 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.9565), dimensions={3}
  add.9567 = f32[128,56,56,256]{3,2,1,0} add(add.9552, broadcast.9566)
  convert.9568 = bf16[128,56,56,256]{3,2,1,0} convert(add.9567)
  convolution.9569 = bf16[1,1,64,256]{3,2,1,0} convolution(convert.1051, convert.9568), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.9570 = f32[1,1,64,256]{3,2,1,0} convert(convolution.9569)
  add.9571 = f32[1,1,64,256]{3,2,1,0} add(multiply.6079, convert.9570)
  constant.9514 = f32[] constant(0)
  reduce.9519 = f32[256]{0} reduce(convert.9513, constant.9514), dimensions={0,1,2}, to_apply=primitive_computation_add.9515
  broadcast.9520 = f32[256]{0} broadcast(reduce.9519), dimensions={0}
  broadcast.9521 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9520), dimensions={3}
  reshape.9522 = f32[256]{0} reshape(broadcast.9521)
  multiply.9532 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.9531, broadcast.1113)
  reshape.9533 = f32[256]{0} reshape(multiply.9532)
  constant.9252 = f32[] constant(0)
  reduce.9257 = f32[64]{0} reduce(convert.9251, constant.9252), dimensions={0,1,2}, to_apply=primitive_computation_add.9253
  broadcast.9258 = f32[64]{0} broadcast(reduce.9257), dimensions={0}
  broadcast.9259 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9258), dimensions={3}
  reshape.9260 = f32[64]{0} reshape(broadcast.9259)
  multiply.9270 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9269, broadcast.1201)
  reshape.9271 = f32[64]{0} reshape(multiply.9270)
  constant.9186 = f32[] constant(0)
  reduce.9191 = f32[64]{0} reduce(convert.9185, constant.9186), dimensions={0,1,2}, to_apply=primitive_computation_add.9187
  broadcast.9192 = f32[64]{0} broadcast(reduce.9191), dimensions={0}
  broadcast.9193 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9192), dimensions={3}
  reshape.9194 = f32[64]{0} reshape(broadcast.9193)
  multiply.9204 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9203, broadcast.1288)
  reshape.9205 = f32[64]{0} reshape(multiply.9204)
  constant.9120 = f32[] constant(0)
  reduce.9125 = f32[256]{0} reduce(convert.9119, constant.9120), dimensions={0,1,2}, to_apply=primitive_computation_add.9121
  broadcast.9126 = f32[256]{0} broadcast(reduce.9125), dimensions={0}
  broadcast.9127 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9126), dimensions={3}
  reshape.9128 = f32[256]{0} reshape(broadcast.9127)
  multiply.9138 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.9137, broadcast.1375)
  reshape.9139 = f32[256]{0} reshape(multiply.9138)
  broadcast.6076 = f32[1,1,256,64]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5418 = f32[] constant(2)
  broadcast.5419 = f32[1,1,256,64]{3,2,1,0} broadcast(constant.5418), dimensions={}
  multiply.5420 = f32[1,1,256,64]{3,2,1,0} multiply(broadcast.5419, parameter.19)
  multiply.6077 = f32[1,1,256,64]{3,2,1,0} multiply(broadcast.6076, multiply.5420)
  convolution.9307 = bf16[1,1,256,64]{3,2,1,0} convolution(convert.1139, convert.9306), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.9308 = f32[1,1,256,64]{3,2,1,0} convert(convolution.9307)
  add.9309 = f32[1,1,256,64]{3,2,1,0} add(multiply.6077, convert.9308)
  broadcast.6074 = f32[3,3,64,64]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5428 = f32[] constant(2)
  broadcast.5429 = f32[3,3,64,64]{3,2,1,0} broadcast(constant.5428), dimensions={}
  multiply.5430 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.5429, parameter.20)
  multiply.6075 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.6074, multiply.5430)
  convolution.9241 = bf16[3,3,64,64]{3,2,1,0} convolution(convert.1226, convert.9240), window={size=56x56 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.9242 = f32[3,3,64,64]{3,2,1,0} convert(convolution.9241)
  add.9243 = f32[3,3,64,64]{3,2,1,0} add(multiply.6075, convert.9242)
  broadcast.6072 = f32[1,1,64,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5438 = f32[] constant(2)
  broadcast.5439 = f32[1,1,64,256]{3,2,1,0} broadcast(constant.5438), dimensions={}
  multiply.5440 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5439, parameter.21)
  multiply.6073 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.6072, multiply.5440)
  convolution.9175 = bf16[1,1,64,256]{3,2,1,0} convolution(convert.1313, convert.9174), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.9176 = f32[1,1,64,256]{3,2,1,0} convert(convolution.9175)
  add.9177 = f32[1,1,64,256]{3,2,1,0} add(multiply.6073, convert.9176)
  constant.7335 = f32[] constant(0)
  reduce.7340 = f32[256]{0} reduce(convert.7334, constant.7335), dimensions={0,1,2}, to_apply=primitive_computation_add.7336
  broadcast.7341 = f32[256]{0} broadcast(reduce.7340), dimensions={0}
  broadcast.7342 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7341), dimensions={3}
  reshape.7343 = f32[256]{0} reshape(broadcast.7342)
  multiply.7353 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7352, broadcast.3711)
  reshape.7354 = f32[256]{0} reshape(multiply.7353)
  constant.7269 = f32[] constant(0)
  reduce.7274 = f32[256]{0} reduce(convert.7268, constant.7269), dimensions={0,1,2}, to_apply=primitive_computation_add.7270
  broadcast.7275 = f32[256]{0} broadcast(reduce.7274), dimensions={0}
  broadcast.7276 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7275), dimensions={3}
  reshape.7277 = f32[256]{0} reshape(broadcast.7276)
  multiply.7287 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7286, broadcast.3798)
  reshape.7288 = f32[256]{0} reshape(multiply.7287)
  constant.7203 = f32[] constant(0)
  reduce.7208 = f32[1024]{0} reduce(convert.7202, constant.7203), dimensions={0,1,2}, to_apply=primitive_computation_add.7204
  broadcast.7209 = f32[1024]{0} broadcast(reduce.7208), dimensions={0}
  broadcast.7210 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7209), dimensions={3}
  reshape.7211 = f32[1024]{0} reshape(broadcast.7210)
  multiply.7221 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7220, broadcast.3885)
  reshape.7222 = f32[1024]{0} reshape(multiply.7221)
  broadcast.6070 = f32[1,1,1024,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5448 = f32[] constant(2)
  broadcast.5449 = f32[1,1,1024,256]{3,2,1,0} broadcast(constant.5448), dimensions={}
  multiply.5450 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5449, parameter.28)
  multiply.6071 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.6070, multiply.5450)
  convolution.7390 = bf16[1,1,1024,256]{3,2,1,0} convolution(convert.3649, convert.7389), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7391 = f32[1,1,1024,256]{3,2,1,0} convert(convolution.7390)
  add.7392 = f32[1,1,1024,256]{3,2,1,0} add(multiply.6071, convert.7391)
  broadcast.6068 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5458 = f32[] constant(2)
  broadcast.5459 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5458), dimensions={}
  multiply.5460 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5459, parameter.29)
  multiply.6069 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.6068, multiply.5460)
  convolution.7324 = bf16[3,3,256,256]{3,2,1,0} convolution(convert.3736, convert.7323), window={size=14x14 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.7325 = f32[3,3,256,256]{3,2,1,0} convert(convolution.7324)
  add.7326 = f32[3,3,256,256]{3,2,1,0} add(multiply.6069, convert.7325)
  broadcast.6066 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5468 = f32[] constant(2)
  broadcast.5469 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5468), dimensions={}
  multiply.5470 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5469, parameter.30)
  multiply.6067 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.6066, multiply.5470)
  convolution.7258 = bf16[1,1,256,1024]{3,2,1,0} convolution(convert.3823, convert.7257), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7259 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.7258)
  add.7260 = f32[1,1,256,1024]{3,2,1,0} add(multiply.6067, convert.7259)
  constant.7136 = f32[] constant(0)
  reduce.7141 = f32[256]{0} reduce(convert.7135, constant.7136), dimensions={0,1,2}, to_apply=primitive_computation_add.7137
  broadcast.7142 = f32[256]{0} broadcast(reduce.7141), dimensions={0}
  broadcast.7143 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7142), dimensions={3}
  reshape.7144 = f32[256]{0} reshape(broadcast.7143)
  multiply.7154 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7153, broadcast.3973)
  reshape.7155 = f32[256]{0} reshape(multiply.7154)
  constant.7070 = f32[] constant(0)
  reduce.7075 = f32[256]{0} reduce(convert.7069, constant.7070), dimensions={0,1,2}, to_apply=primitive_computation_add.7071
  broadcast.7076 = f32[256]{0} broadcast(reduce.7075), dimensions={0}
  broadcast.7077 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7076), dimensions={3}
  reshape.7078 = f32[256]{0} reshape(broadcast.7077)
  multiply.7088 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7087, broadcast.4060)
  reshape.7089 = f32[256]{0} reshape(multiply.7088)
  constant.7004 = f32[] constant(0)
  reduce.7009 = f32[1024]{0} reduce(convert.7003, constant.7004), dimensions={0,1,2}, to_apply=primitive_computation_add.7005
  broadcast.7010 = f32[1024]{0} broadcast(reduce.7009), dimensions={0}
  broadcast.7011 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7010), dimensions={3}
  reshape.7012 = f32[1024]{0} reshape(broadcast.7011)
  multiply.7022 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7021, broadcast.4147)
  reshape.7023 = f32[1024]{0} reshape(multiply.7022)
  broadcast.6064 = f32[1,1,1024,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5478 = f32[] constant(2)
  broadcast.5479 = f32[1,1,1024,256]{3,2,1,0} broadcast(constant.5478), dimensions={}
  multiply.5480 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5479, parameter.37)
  multiply.6065 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.6064, multiply.5480)
  convolution.7191 = bf16[1,1,1024,256]{3,2,1,0} convolution(convert.3911, convert.7190), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7192 = f32[1,1,1024,256]{3,2,1,0} convert(convolution.7191)
  add.7193 = f32[1,1,1024,256]{3,2,1,0} add(multiply.6065, convert.7192)
  broadcast.6062 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5488 = f32[] constant(2)
  broadcast.5489 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5488), dimensions={}
  multiply.5490 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5489, parameter.38)
  multiply.6063 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.6062, multiply.5490)
  convolution.7125 = bf16[3,3,256,256]{3,2,1,0} convolution(convert.3998, convert.7124), window={size=14x14 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.7126 = f32[3,3,256,256]{3,2,1,0} convert(convolution.7125)
  add.7127 = f32[3,3,256,256]{3,2,1,0} add(multiply.6063, convert.7126)
  broadcast.6060 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5498 = f32[] constant(2)
  broadcast.5499 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5498), dimensions={}
  multiply.5500 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5499, parameter.39)
  multiply.6061 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.6060, multiply.5500)
  convolution.7059 = bf16[1,1,256,1024]{3,2,1,0} convolution(convert.4085, convert.7058), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7060 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.7059)
  add.7061 = f32[1,1,256,1024]{3,2,1,0} add(multiply.6061, convert.7060)
  constant.6937 = f32[] constant(0)
  reduce.6942 = f32[256]{0} reduce(convert.6936, constant.6937), dimensions={0,1,2}, to_apply=primitive_computation_add.6938
  broadcast.6943 = f32[256]{0} broadcast(reduce.6942), dimensions={0}
  broadcast.6944 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6943), dimensions={3}
  reshape.6945 = f32[256]{0} reshape(broadcast.6944)
  multiply.6955 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6954, broadcast.4235)
  reshape.6956 = f32[256]{0} reshape(multiply.6955)
  constant.6871 = f32[] constant(0)
  reduce.6876 = f32[256]{0} reduce(convert.6870, constant.6871), dimensions={0,1,2}, to_apply=primitive_computation_add.6872
  broadcast.6877 = f32[256]{0} broadcast(reduce.6876), dimensions={0}
  broadcast.6878 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6877), dimensions={3}
  reshape.6879 = f32[256]{0} reshape(broadcast.6878)
  multiply.6889 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6888, broadcast.4322)
  reshape.6890 = f32[256]{0} reshape(multiply.6889)
  constant.6805 = f32[] constant(0)
  reduce.6810 = f32[1024]{0} reduce(convert.6804, constant.6805), dimensions={0,1,2}, to_apply=primitive_computation_add.6806
  broadcast.6811 = f32[1024]{0} broadcast(reduce.6810), dimensions={0}
  broadcast.6812 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6811), dimensions={3}
  reshape.6813 = f32[1024]{0} reshape(broadcast.6812)
  multiply.6823 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.6822, broadcast.4409)
  reshape.6824 = f32[1024]{0} reshape(multiply.6823)
  broadcast.6058 = f32[1,1,1024,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5508 = f32[] constant(2)
  broadcast.5509 = f32[1,1,1024,256]{3,2,1,0} broadcast(constant.5508), dimensions={}
  multiply.5510 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5509, parameter.46)
  multiply.6059 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.6058, multiply.5510)
  convolution.6992 = bf16[1,1,1024,256]{3,2,1,0} convolution(convert.4173, convert.6991), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.6993 = f32[1,1,1024,256]{3,2,1,0} convert(convolution.6992)
  add.6994 = f32[1,1,1024,256]{3,2,1,0} add(multiply.6059, convert.6993)
  broadcast.6056 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5518 = f32[] constant(2)
  broadcast.5519 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5518), dimensions={}
  multiply.5520 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5519, parameter.47)
  multiply.6057 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.6056, multiply.5520)
  convolution.6926 = bf16[3,3,256,256]{3,2,1,0} convolution(convert.4260, convert.6925), window={size=14x14 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.6927 = f32[3,3,256,256]{3,2,1,0} convert(convolution.6926)
  add.6928 = f32[3,3,256,256]{3,2,1,0} add(multiply.6057, convert.6927)
  broadcast.6054 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5528 = f32[] constant(2)
  broadcast.5529 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5528), dimensions={}
  multiply.5530 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5529, parameter.48)
  multiply.6055 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.6054, multiply.5530)
  convolution.6860 = bf16[1,1,256,1024]{3,2,1,0} convolution(convert.4347, convert.6859), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.6861 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.6860)
  add.6862 = f32[1,1,256,1024]{3,2,1,0} add(multiply.6055, convert.6861)
  constant.6675 = f32[] constant(0)
  reduce.6680 = f32[512]{0} reduce(convert.6674, constant.6675), dimensions={0,1,2}, to_apply=primitive_computation_add.6676
  broadcast.6681 = f32[512]{0} broadcast(reduce.6680), dimensions={0}
  broadcast.6682 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6681), dimensions={3}
  reshape.6683 = f32[512]{0} reshape(broadcast.6682)
  multiply.6693 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6692, broadcast.4497)
  reshape.6694 = f32[512]{0} reshape(multiply.6693)
  constant.6609 = f32[] constant(0)
  reduce.6614 = f32[512]{0} reduce(convert.6608, constant.6609), dimensions={0,1,2}, to_apply=primitive_computation_add.6610
  broadcast.6615 = f32[512]{0} broadcast(reduce.6614), dimensions={0}
  broadcast.6616 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6615), dimensions={3}
  reshape.6617 = f32[512]{0} reshape(broadcast.6616)
  multiply.6627 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6626, broadcast.4584)
  reshape.6628 = f32[512]{0} reshape(multiply.6627)
  constant.6543 = f32[] constant(0)
  reduce.6548 = f32[2048]{0} reduce(convert.6542, constant.6543), dimensions={0,1,2}, to_apply=primitive_computation_add.6544
  broadcast.6549 = f32[2048]{0} broadcast(reduce.6548), dimensions={0}
  broadcast.6550 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6549), dimensions={3}
  reshape.6551 = f32[2048]{0} reshape(broadcast.6550)
  multiply.6561 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6560, broadcast.4671)
  reshape.6562 = f32[2048]{0} reshape(multiply.6561)
  broadcast.6052 = f32[1,1,1024,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5538 = f32[] constant(2)
  broadcast.5539 = f32[1,1,1024,512]{3,2,1,0} broadcast(constant.5538), dimensions={}
  multiply.5540 = f32[1,1,1024,512]{3,2,1,0} multiply(broadcast.5539, parameter.55)
  multiply.6053 = f32[1,1,1024,512]{3,2,1,0} multiply(broadcast.6052, multiply.5540)
  convolution.6730 = bf16[1,1,1024,512]{3,2,1,0} convolution(convert.4435, convert.6729), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.6731 = f32[1,1,1024,512]{3,2,1,0} convert(convolution.6730)
  add.6732 = f32[1,1,1024,512]{3,2,1,0} add(multiply.6053, convert.6731)
  broadcast.6050 = f32[3,3,512,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5548 = f32[] constant(2)
  broadcast.5549 = f32[3,3,512,512]{3,2,1,0} broadcast(constant.5548), dimensions={}
  multiply.5550 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.5549, parameter.56)
  multiply.6051 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.6050, multiply.5550)
  convolution.6664 = bf16[3,3,512,512]{3,2,1,0} convolution(convert.4522, convert.6663), window={size=7x7 pad=0_1x0_1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.6665 = f32[3,3,512,512]{3,2,1,0} convert(convolution.6664)
  add.6666 = f32[3,3,512,512]{3,2,1,0} add(multiply.6051, convert.6665)
  broadcast.6048 = f32[1,1,512,2048]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5558 = f32[] constant(2)
  broadcast.5559 = f32[1,1,512,2048]{3,2,1,0} broadcast(constant.5558), dimensions={}
  multiply.5560 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.5559, parameter.57)
  multiply.6049 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.6048, multiply.5560)
  convolution.6598 = bf16[1,1,512,2048]{3,2,1,0} convolution(convert.4609, convert.6597), window={size=7x7}, dim_labels=f01b_i01o->01bf
  convert.6599 = f32[1,1,512,2048]{3,2,1,0} convert(convolution.6598)
  add.6600 = f32[1,1,512,2048]{3,2,1,0} add(multiply.6049, convert.6599)
  broadcast.6046 = f32[1,1,1024,2048]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5568 = f32[] constant(2)
  broadcast.5569 = f32[1,1,1024,2048]{3,2,1,0} broadcast(constant.5568), dimensions={}
  multiply.5570 = f32[1,1,1024,2048]{3,2,1,0} multiply(broadcast.5569, parameter.58)
  multiply.6047 = f32[1,1,1024,2048]{3,2,1,0} multiply(broadcast.6046, multiply.5570)
  convolution.6793 = bf16[1,1,1024,2048]{3,2,1,0} convolution(convert.4685, convert.6792), window={size=7x7 pad=0_-1x0_-1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.6794 = f32[1,1,1024,2048]{3,2,1,0} convert(convolution.6793)
  add.6795 = f32[1,1,1024,2048]{3,2,1,0} add(multiply.6047, convert.6794)
  constant.6738 = f32[] constant(0)
  reduce.6743 = f32[2048]{0} reduce(convert.6737, constant.6738), dimensions={0,1,2}, to_apply=primitive_computation_add.6739
  broadcast.6744 = f32[2048]{0} broadcast(reduce.6743), dimensions={0}
  broadcast.6745 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6744), dimensions={3}
  reshape.6746 = f32[2048]{0} reshape(broadcast.6745)
  multiply.6756 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6755, broadcast.4747)
  reshape.6757 = f32[2048]{0} reshape(multiply.6756)
  constant.6476 = f32[] constant(0)
  reduce.6481 = f32[512]{0} reduce(convert.6475, constant.6476), dimensions={0,1,2}, to_apply=primitive_computation_add.6477
  broadcast.6482 = f32[512]{0} broadcast(reduce.6481), dimensions={0}
  broadcast.6483 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6482), dimensions={3}
  reshape.6484 = f32[512]{0} reshape(broadcast.6483)
  multiply.6494 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6493, broadcast.4835)
  reshape.6495 = f32[512]{0} reshape(multiply.6494)
  constant.6410 = f32[] constant(0)
  reduce.6415 = f32[512]{0} reduce(convert.6409, constant.6410), dimensions={0,1,2}, to_apply=primitive_computation_add.6411
  broadcast.6416 = f32[512]{0} broadcast(reduce.6415), dimensions={0}
  broadcast.6417 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6416), dimensions={3}
  reshape.6418 = f32[512]{0} reshape(broadcast.6417)
  multiply.6428 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6427, broadcast.4922)
  reshape.6429 = f32[512]{0} reshape(multiply.6428)
  constant.6344 = f32[] constant(0)
  reduce.6349 = f32[2048]{0} reduce(convert.6343, constant.6344), dimensions={0,1,2}, to_apply=primitive_computation_add.6345
  broadcast.6350 = f32[2048]{0} broadcast(reduce.6349), dimensions={0}
  broadcast.6351 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6350), dimensions={3}
  reshape.6352 = f32[2048]{0} reshape(broadcast.6351)
  multiply.6362 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6361, broadcast.5009)
  reshape.6363 = f32[2048]{0} reshape(multiply.6362)
  broadcast.6044 = f32[1,1,2048,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5578 = f32[] constant(2)
  broadcast.5579 = f32[1,1,2048,512]{3,2,1,0} broadcast(constant.5578), dimensions={}
  multiply.5580 = f32[1,1,2048,512]{3,2,1,0} multiply(broadcast.5579, parameter.67)
  multiply.6045 = f32[1,1,2048,512]{3,2,1,0} multiply(broadcast.6044, multiply.5580)
  convolution.6531 = bf16[1,1,2048,512]{3,2,1,0} convolution(convert.4773, convert.6530), window={size=7x7}, dim_labels=f01b_i01o->01bf
  convert.6532 = f32[1,1,2048,512]{3,2,1,0} convert(convolution.6531)
  add.6533 = f32[1,1,2048,512]{3,2,1,0} add(multiply.6045, convert.6532)
  broadcast.6042 = f32[3,3,512,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5588 = f32[] constant(2)
  broadcast.5589 = f32[3,3,512,512]{3,2,1,0} broadcast(constant.5588), dimensions={}
  multiply.5590 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.5589, parameter.68)
  multiply.6043 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.6042, multiply.5590)
  convolution.6465 = bf16[3,3,512,512]{3,2,1,0} convolution(convert.4860, convert.6464), window={size=7x7 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.6466 = f32[3,3,512,512]{3,2,1,0} convert(convolution.6465)
  add.6467 = f32[3,3,512,512]{3,2,1,0} add(multiply.6043, convert.6466)
  broadcast.6040 = f32[1,1,512,2048]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5598 = f32[] constant(2)
  broadcast.5599 = f32[1,1,512,2048]{3,2,1,0} broadcast(constant.5598), dimensions={}
  multiply.5600 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.5599, parameter.69)
  multiply.6041 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.6040, multiply.5600)
  convolution.6399 = bf16[1,1,512,2048]{3,2,1,0} convolution(convert.4947, convert.6398), window={size=7x7}, dim_labels=f01b_i01o->01bf
  convert.6400 = f32[1,1,512,2048]{3,2,1,0} convert(convolution.6399)
  add.6401 = f32[1,1,512,2048]{3,2,1,0} add(multiply.6041, convert.6400)
  constant.6277 = f32[] constant(0)
  reduce.6282 = f32[512]{0} reduce(convert.6276, constant.6277), dimensions={0,1,2}, to_apply=primitive_computation_add.6278
  broadcast.6283 = f32[512]{0} broadcast(reduce.6282), dimensions={0}
  broadcast.6284 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6283), dimensions={3}
  reshape.6285 = f32[512]{0} reshape(broadcast.6284)
  multiply.6295 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6294, broadcast.5097)
  reshape.6296 = f32[512]{0} reshape(multiply.6295)
  constant.6211 = f32[] constant(0)
  reduce.6216 = f32[512]{0} reduce(convert.6210, constant.6211), dimensions={0,1,2}, to_apply=primitive_computation_add.6212
  broadcast.6217 = f32[512]{0} broadcast(reduce.6216), dimensions={0}
  broadcast.6218 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6217), dimensions={3}
  reshape.6219 = f32[512]{0} reshape(broadcast.6218)
  multiply.6229 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6228, broadcast.5184)
  reshape.6230 = f32[512]{0} reshape(multiply.6229)
  constant.6145 = f32[] constant(0)
  reduce.6150 = f32[2048]{0} reduce(convert.6144, constant.6145), dimensions={0,1,2}, to_apply=primitive_computation_add.6146
  broadcast.6151 = f32[2048]{0} broadcast(reduce.6150), dimensions={0}
  broadcast.6152 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6151), dimensions={3}
  reshape.6153 = f32[2048]{0} reshape(broadcast.6152)
  multiply.6163 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6162, broadcast.5271)
  reshape.6164 = f32[2048]{0} reshape(multiply.6163)
  broadcast.6038 = f32[1,1,2048,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5608 = f32[] constant(2)
  broadcast.5609 = f32[1,1,2048,512]{3,2,1,0} broadcast(constant.5608), dimensions={}
  multiply.5610 = f32[1,1,2048,512]{3,2,1,0} multiply(broadcast.5609, parameter.76)
  multiply.6039 = f32[1,1,2048,512]{3,2,1,0} multiply(broadcast.6038, multiply.5610)
  convolution.6332 = bf16[1,1,2048,512]{3,2,1,0} convolution(convert.5035, convert.6331), window={size=7x7}, dim_labels=f01b_i01o->01bf
  convert.6333 = f32[1,1,2048,512]{3,2,1,0} convert(convolution.6332)
  add.6334 = f32[1,1,2048,512]{3,2,1,0} add(multiply.6039, convert.6333)
  broadcast.6036 = f32[3,3,512,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5618 = f32[] constant(2)
  broadcast.5619 = f32[3,3,512,512]{3,2,1,0} broadcast(constant.5618), dimensions={}
  multiply.5620 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.5619, parameter.77)
  multiply.6037 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.6036, multiply.5620)
  convolution.6266 = bf16[3,3,512,512]{3,2,1,0} convolution(convert.5122, convert.6265), window={size=7x7 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.6267 = f32[3,3,512,512]{3,2,1,0} convert(convolution.6266)
  add.6268 = f32[3,3,512,512]{3,2,1,0} add(multiply.6037, convert.6267)
  broadcast.6034 = f32[1,1,512,2048]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5628 = f32[] constant(2)
  broadcast.5629 = f32[1,1,512,2048]{3,2,1,0} broadcast(constant.5628), dimensions={}
  multiply.5630 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.5629, parameter.78)
  multiply.6035 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.6034, multiply.5630)
  convolution.6200 = bf16[1,1,512,2048]{3,2,1,0} convolution(convert.5209, convert.6199), window={size=7x7}, dim_labels=f01b_i01o->01bf
  convert.6201 = f32[1,1,512,2048]{3,2,1,0} convert(convolution.6200)
  add.6202 = f32[1,1,512,2048]{3,2,1,0} add(multiply.6035, convert.6201)
  constant.9053 = f32[] constant(0)
  reduce.9058 = f32[64]{0} reduce(convert.9052, constant.9053), dimensions={0,1,2}, to_apply=primitive_computation_add.9054
  broadcast.9059 = f32[64]{0} broadcast(reduce.9058), dimensions={0}
  broadcast.9060 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9059), dimensions={3}
  reshape.9061 = f32[64]{0} reshape(broadcast.9060)
  multiply.9071 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9070, broadcast.1463)
  reshape.9072 = f32[64]{0} reshape(multiply.9071)
  constant.8987 = f32[] constant(0)
  reduce.8992 = f32[64]{0} reduce(convert.8986, constant.8987), dimensions={0,1,2}, to_apply=primitive_computation_add.8988
  broadcast.8993 = f32[64]{0} broadcast(reduce.8992), dimensions={0}
  broadcast.8994 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8993), dimensions={3}
  reshape.8995 = f32[64]{0} reshape(broadcast.8994)
  multiply.9005 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9004, broadcast.1550)
  reshape.9006 = f32[64]{0} reshape(multiply.9005)
  constant.8921 = f32[] constant(0)
  reduce.8926 = f32[256]{0} reduce(convert.8920, constant.8921), dimensions={0,1,2}, to_apply=primitive_computation_add.8922
  broadcast.8927 = f32[256]{0} broadcast(reduce.8926), dimensions={0}
  broadcast.8928 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8927), dimensions={3}
  reshape.8929 = f32[256]{0} reshape(broadcast.8928)
  multiply.8939 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.8938, broadcast.1637)
  reshape.8940 = f32[256]{0} reshape(multiply.8939)
  broadcast.6032 = f32[1,1,256,64]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5638 = f32[] constant(2)
  broadcast.5639 = f32[1,1,256,64]{3,2,1,0} broadcast(constant.5638), dimensions={}
  multiply.5640 = f32[1,1,256,64]{3,2,1,0} multiply(broadcast.5639, parameter.85)
  multiply.6033 = f32[1,1,256,64]{3,2,1,0} multiply(broadcast.6032, multiply.5640)
  convolution.9108 = bf16[1,1,256,64]{3,2,1,0} convolution(convert.1401, convert.9107), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.9109 = f32[1,1,256,64]{3,2,1,0} convert(convolution.9108)
  add.9110 = f32[1,1,256,64]{3,2,1,0} add(multiply.6033, convert.9109)
  broadcast.6030 = f32[3,3,64,64]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5648 = f32[] constant(2)
  broadcast.5649 = f32[3,3,64,64]{3,2,1,0} broadcast(constant.5648), dimensions={}
  multiply.5650 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.5649, parameter.86)
  multiply.6031 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.6030, multiply.5650)
  convolution.9042 = bf16[3,3,64,64]{3,2,1,0} convolution(convert.1488, convert.9041), window={size=56x56 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.9043 = f32[3,3,64,64]{3,2,1,0} convert(convolution.9042)
  add.9044 = f32[3,3,64,64]{3,2,1,0} add(multiply.6031, convert.9043)
  broadcast.6028 = f32[1,1,64,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5658 = f32[] constant(2)
  broadcast.5659 = f32[1,1,64,256]{3,2,1,0} broadcast(constant.5658), dimensions={}
  multiply.5660 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5659, parameter.87)
  multiply.6029 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.6028, multiply.5660)
  convolution.8976 = bf16[1,1,64,256]{3,2,1,0} convolution(convert.1575, convert.8975), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.8977 = f32[1,1,64,256]{3,2,1,0} convert(convolution.8976)
  add.8978 = f32[1,1,64,256]{3,2,1,0} add(multiply.6029, convert.8977)
  constant.8791 = f32[] constant(0)
  reduce.8796 = f32[128]{0} reduce(convert.8790, constant.8791), dimensions={0,1,2}, to_apply=primitive_computation_add.8792
  broadcast.8797 = f32[128]{0} broadcast(reduce.8796), dimensions={0}
  broadcast.8798 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8797), dimensions={3}
  reshape.8799 = f32[128]{0} reshape(broadcast.8798)
  multiply.8809 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8808, broadcast.1725)
  reshape.8810 = f32[128]{0} reshape(multiply.8809)
  constant.8725 = f32[] constant(0)
  reduce.8730 = f32[128]{0} reduce(convert.8724, constant.8725), dimensions={0,1,2}, to_apply=primitive_computation_add.8726
  broadcast.8731 = f32[128]{0} broadcast(reduce.8730), dimensions={0}
  broadcast.8732 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8731), dimensions={3}
  reshape.8733 = f32[128]{0} reshape(broadcast.8732)
  multiply.8743 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8742, broadcast.1812)
  reshape.8744 = f32[128]{0} reshape(multiply.8743)
  constant.8659 = f32[] constant(0)
  reduce.8664 = f32[512]{0} reduce(convert.8658, constant.8659), dimensions={0,1,2}, to_apply=primitive_computation_add.8660
  broadcast.8665 = f32[512]{0} broadcast(reduce.8664), dimensions={0}
  broadcast.8666 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8665), dimensions={3}
  reshape.8667 = f32[512]{0} reshape(broadcast.8666)
  multiply.8677 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8676, broadcast.1899)
  reshape.8678 = f32[512]{0} reshape(multiply.8677)
  broadcast.6026 = f32[1,1,256,128]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5668 = f32[] constant(2)
  broadcast.5669 = f32[1,1,256,128]{3,2,1,0} broadcast(constant.5668), dimensions={}
  multiply.5670 = f32[1,1,256,128]{3,2,1,0} multiply(broadcast.5669, parameter.94)
  multiply.6027 = f32[1,1,256,128]{3,2,1,0} multiply(broadcast.6026, multiply.5670)
  convolution.8846 = bf16[1,1,256,128]{3,2,1,0} convolution(convert.1663, convert.8845), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.8847 = f32[1,1,256,128]{3,2,1,0} convert(convolution.8846)
  add.8848 = f32[1,1,256,128]{3,2,1,0} add(multiply.6027, convert.8847)
  broadcast.6024 = f32[3,3,128,128]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5678 = f32[] constant(2)
  broadcast.5679 = f32[3,3,128,128]{3,2,1,0} broadcast(constant.5678), dimensions={}
  multiply.5680 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5679, parameter.95)
  multiply.6025 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.6024, multiply.5680)
  convolution.8780 = bf16[3,3,128,128]{3,2,1,0} convolution(convert.1750, convert.8779), window={size=28x28 pad=0_1x0_1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.8781 = f32[3,3,128,128]{3,2,1,0} convert(convolution.8780)
  add.8782 = f32[3,3,128,128]{3,2,1,0} add(multiply.6025, convert.8781)
  broadcast.6022 = f32[1,1,128,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5688 = f32[] constant(2)
  broadcast.5689 = f32[1,1,128,512]{3,2,1,0} broadcast(constant.5688), dimensions={}
  multiply.5690 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5689, parameter.96)
  multiply.6023 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.6022, multiply.5690)
  convolution.8714 = bf16[1,1,128,512]{3,2,1,0} convolution(convert.1837, convert.8713), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8715 = f32[1,1,128,512]{3,2,1,0} convert(convolution.8714)
  add.8716 = f32[1,1,128,512]{3,2,1,0} add(multiply.6023, convert.8715)
  broadcast.6020 = f32[1,1,256,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5698 = f32[] constant(2)
  broadcast.5699 = f32[1,1,256,512]{3,2,1,0} broadcast(constant.5698), dimensions={}
  multiply.5700 = f32[1,1,256,512]{3,2,1,0} multiply(broadcast.5699, parameter.97)
  multiply.6021 = f32[1,1,256,512]{3,2,1,0} multiply(broadcast.6020, multiply.5700)
  convolution.8909 = bf16[1,1,256,512]{3,2,1,0} convolution(convert.1913, convert.8908), window={size=28x28 pad=0_-1x0_-1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.8910 = f32[1,1,256,512]{3,2,1,0} convert(convolution.8909)
  add.8911 = f32[1,1,256,512]{3,2,1,0} add(multiply.6021, convert.8910)
  constant.8854 = f32[] constant(0)
  reduce.8859 = f32[512]{0} reduce(convert.8853, constant.8854), dimensions={0,1,2}, to_apply=primitive_computation_add.8855
  broadcast.8860 = f32[512]{0} broadcast(reduce.8859), dimensions={0}
  broadcast.8861 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8860), dimensions={3}
  reshape.8862 = f32[512]{0} reshape(broadcast.8861)
  multiply.8872 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8871, broadcast.1975)
  reshape.8873 = f32[512]{0} reshape(multiply.8872)
  constant.8592 = f32[] constant(0)
  reduce.8597 = f32[128]{0} reduce(convert.8591, constant.8592), dimensions={0,1,2}, to_apply=primitive_computation_add.8593
  broadcast.8598 = f32[128]{0} broadcast(reduce.8597), dimensions={0}
  broadcast.8599 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8598), dimensions={3}
  reshape.8600 = f32[128]{0} reshape(broadcast.8599)
  multiply.8610 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8609, broadcast.2063)
  reshape.8611 = f32[128]{0} reshape(multiply.8610)
  constant.8526 = f32[] constant(0)
  reduce.8531 = f32[128]{0} reduce(convert.8525, constant.8526), dimensions={0,1,2}, to_apply=primitive_computation_add.8527
  broadcast.8532 = f32[128]{0} broadcast(reduce.8531), dimensions={0}
  broadcast.8533 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8532), dimensions={3}
  reshape.8534 = f32[128]{0} reshape(broadcast.8533)
  multiply.8544 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8543, broadcast.2150)
  reshape.8545 = f32[128]{0} reshape(multiply.8544)
  constant.8460 = f32[] constant(0)
  reduce.8465 = f32[512]{0} reduce(convert.8459, constant.8460), dimensions={0,1,2}, to_apply=primitive_computation_add.8461
  broadcast.8466 = f32[512]{0} broadcast(reduce.8465), dimensions={0}
  broadcast.8467 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8466), dimensions={3}
  reshape.8468 = f32[512]{0} reshape(broadcast.8467)
  multiply.8478 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8477, broadcast.2237)
  reshape.8479 = f32[512]{0} reshape(multiply.8478)
  broadcast.6018 = f32[1,1,512,128]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5708 = f32[] constant(2)
  broadcast.5709 = f32[1,1,512,128]{3,2,1,0} broadcast(constant.5708), dimensions={}
  multiply.5710 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.5709, parameter.106)
  multiply.6019 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.6018, multiply.5710)
  convolution.8647 = bf16[1,1,512,128]{3,2,1,0} convolution(convert.2001, convert.8646), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8648 = f32[1,1,512,128]{3,2,1,0} convert(convolution.8647)
  add.8649 = f32[1,1,512,128]{3,2,1,0} add(multiply.6019, convert.8648)
  broadcast.6016 = f32[3,3,128,128]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5718 = f32[] constant(2)
  broadcast.5719 = f32[3,3,128,128]{3,2,1,0} broadcast(constant.5718), dimensions={}
  multiply.5720 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5719, parameter.107)
  multiply.6017 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.6016, multiply.5720)
  convolution.8581 = bf16[3,3,128,128]{3,2,1,0} convolution(convert.2088, convert.8580), window={size=28x28 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.8582 = f32[3,3,128,128]{3,2,1,0} convert(convolution.8581)
  add.8583 = f32[3,3,128,128]{3,2,1,0} add(multiply.6017, convert.8582)
  broadcast.6014 = f32[1,1,128,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5728 = f32[] constant(2)
  broadcast.5729 = f32[1,1,128,512]{3,2,1,0} broadcast(constant.5728), dimensions={}
  multiply.5730 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5729, parameter.108)
  multiply.6015 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.6014, multiply.5730)
  convolution.8515 = bf16[1,1,128,512]{3,2,1,0} convolution(convert.2175, convert.8514), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8516 = f32[1,1,128,512]{3,2,1,0} convert(convolution.8515)
  add.8517 = f32[1,1,128,512]{3,2,1,0} add(multiply.6015, convert.8516)
  constant.8393 = f32[] constant(0)
  reduce.8398 = f32[128]{0} reduce(convert.8392, constant.8393), dimensions={0,1,2}, to_apply=primitive_computation_add.8394
  broadcast.8399 = f32[128]{0} broadcast(reduce.8398), dimensions={0}
  broadcast.8400 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8399), dimensions={3}
  reshape.8401 = f32[128]{0} reshape(broadcast.8400)
  multiply.8411 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8410, broadcast.2325)
  reshape.8412 = f32[128]{0} reshape(multiply.8411)
  constant.8327 = f32[] constant(0)
  reduce.8332 = f32[128]{0} reduce(convert.8326, constant.8327), dimensions={0,1,2}, to_apply=primitive_computation_add.8328
  broadcast.8333 = f32[128]{0} broadcast(reduce.8332), dimensions={0}
  broadcast.8334 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8333), dimensions={3}
  reshape.8335 = f32[128]{0} reshape(broadcast.8334)
  multiply.8345 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8344, broadcast.2412)
  reshape.8346 = f32[128]{0} reshape(multiply.8345)
  constant.8261 = f32[] constant(0)
  reduce.8266 = f32[512]{0} reduce(convert.8260, constant.8261), dimensions={0,1,2}, to_apply=primitive_computation_add.8262
  broadcast.8267 = f32[512]{0} broadcast(reduce.8266), dimensions={0}
  broadcast.8268 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8267), dimensions={3}
  reshape.8269 = f32[512]{0} reshape(broadcast.8268)
  multiply.8279 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8278, broadcast.2499)
  reshape.8280 = f32[512]{0} reshape(multiply.8279)
  broadcast.6012 = f32[1,1,512,128]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5738 = f32[] constant(2)
  broadcast.5739 = f32[1,1,512,128]{3,2,1,0} broadcast(constant.5738), dimensions={}
  multiply.5740 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.5739, parameter.115)
  multiply.6013 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.6012, multiply.5740)
  convolution.8448 = bf16[1,1,512,128]{3,2,1,0} convolution(convert.2263, convert.8447), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8449 = f32[1,1,512,128]{3,2,1,0} convert(convolution.8448)
  add.8450 = f32[1,1,512,128]{3,2,1,0} add(multiply.6013, convert.8449)
  broadcast.6010 = f32[3,3,128,128]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5748 = f32[] constant(2)
  broadcast.5749 = f32[3,3,128,128]{3,2,1,0} broadcast(constant.5748), dimensions={}
  multiply.5750 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5749, parameter.116)
  multiply.6011 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.6010, multiply.5750)
  convolution.8382 = bf16[3,3,128,128]{3,2,1,0} convolution(convert.2350, convert.8381), window={size=28x28 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.8383 = f32[3,3,128,128]{3,2,1,0} convert(convolution.8382)
  add.8384 = f32[3,3,128,128]{3,2,1,0} add(multiply.6011, convert.8383)
  broadcast.6008 = f32[1,1,128,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5758 = f32[] constant(2)
  broadcast.5759 = f32[1,1,128,512]{3,2,1,0} broadcast(constant.5758), dimensions={}
  multiply.5760 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5759, parameter.117)
  multiply.6009 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.6008, multiply.5760)
  convolution.8316 = bf16[1,1,128,512]{3,2,1,0} convolution(convert.2437, convert.8315), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8317 = f32[1,1,128,512]{3,2,1,0} convert(convolution.8316)
  add.8318 = f32[1,1,128,512]{3,2,1,0} add(multiply.6009, convert.8317)
  constant.8194 = f32[] constant(0)
  reduce.8199 = f32[128]{0} reduce(convert.8193, constant.8194), dimensions={0,1,2}, to_apply=primitive_computation_add.8195
  broadcast.8200 = f32[128]{0} broadcast(reduce.8199), dimensions={0}
  broadcast.8201 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8200), dimensions={3}
  reshape.8202 = f32[128]{0} reshape(broadcast.8201)
  multiply.8212 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8211, broadcast.2587)
  reshape.8213 = f32[128]{0} reshape(multiply.8212)
  constant.8128 = f32[] constant(0)
  reduce.8133 = f32[128]{0} reduce(convert.8127, constant.8128), dimensions={0,1,2}, to_apply=primitive_computation_add.8129
  broadcast.8134 = f32[128]{0} broadcast(reduce.8133), dimensions={0}
  broadcast.8135 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8134), dimensions={3}
  reshape.8136 = f32[128]{0} reshape(broadcast.8135)
  multiply.8146 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8145, broadcast.2674)
  reshape.8147 = f32[128]{0} reshape(multiply.8146)
  constant.8062 = f32[] constant(0)
  reduce.8067 = f32[512]{0} reduce(convert.8061, constant.8062), dimensions={0,1,2}, to_apply=primitive_computation_add.8063
  broadcast.8068 = f32[512]{0} broadcast(reduce.8067), dimensions={0}
  broadcast.8069 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8068), dimensions={3}
  reshape.8070 = f32[512]{0} reshape(broadcast.8069)
  multiply.8080 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8079, broadcast.2761)
  reshape.8081 = f32[512]{0} reshape(multiply.8080)
  broadcast.6006 = f32[1,1,512,128]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5768 = f32[] constant(2)
  broadcast.5769 = f32[1,1,512,128]{3,2,1,0} broadcast(constant.5768), dimensions={}
  multiply.5770 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.5769, parameter.124)
  multiply.6007 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.6006, multiply.5770)
  convolution.8249 = bf16[1,1,512,128]{3,2,1,0} convolution(convert.2525, convert.8248), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8250 = f32[1,1,512,128]{3,2,1,0} convert(convolution.8249)
  add.8251 = f32[1,1,512,128]{3,2,1,0} add(multiply.6007, convert.8250)
  broadcast.6004 = f32[3,3,128,128]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5778 = f32[] constant(2)
  broadcast.5779 = f32[3,3,128,128]{3,2,1,0} broadcast(constant.5778), dimensions={}
  multiply.5780 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5779, parameter.125)
  multiply.6005 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.6004, multiply.5780)
  convolution.8183 = bf16[3,3,128,128]{3,2,1,0} convolution(convert.2612, convert.8182), window={size=28x28 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.8184 = f32[3,3,128,128]{3,2,1,0} convert(convolution.8183)
  add.8185 = f32[3,3,128,128]{3,2,1,0} add(multiply.6005, convert.8184)
  broadcast.6002 = f32[1,1,128,512]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5788 = f32[] constant(2)
  broadcast.5789 = f32[1,1,128,512]{3,2,1,0} broadcast(constant.5788), dimensions={}
  multiply.5790 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5789, parameter.126)
  multiply.6003 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.6002, multiply.5790)
  convolution.8117 = bf16[1,1,128,512]{3,2,1,0} convolution(convert.2699, convert.8116), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8118 = f32[1,1,128,512]{3,2,1,0} convert(convolution.8117)
  add.8119 = f32[1,1,128,512]{3,2,1,0} add(multiply.6003, convert.8118)
  constant.7932 = f32[] constant(0)
  reduce.7937 = f32[256]{0} reduce(convert.7931, constant.7932), dimensions={0,1,2}, to_apply=primitive_computation_add.7933
  broadcast.7938 = f32[256]{0} broadcast(reduce.7937), dimensions={0}
  broadcast.7939 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7938), dimensions={3}
  reshape.7940 = f32[256]{0} reshape(broadcast.7939)
  multiply.7950 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7949, broadcast.2849)
  reshape.7951 = f32[256]{0} reshape(multiply.7950)
  constant.7866 = f32[] constant(0)
  reduce.7871 = f32[256]{0} reduce(convert.7865, constant.7866), dimensions={0,1,2}, to_apply=primitive_computation_add.7867
  broadcast.7872 = f32[256]{0} broadcast(reduce.7871), dimensions={0}
  broadcast.7873 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7872), dimensions={3}
  reshape.7874 = f32[256]{0} reshape(broadcast.7873)
  multiply.7884 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7883, broadcast.2936)
  reshape.7885 = f32[256]{0} reshape(multiply.7884)
  constant.7800 = f32[] constant(0)
  reduce.7805 = f32[1024]{0} reduce(convert.7799, constant.7800), dimensions={0,1,2}, to_apply=primitive_computation_add.7801
  broadcast.7806 = f32[1024]{0} broadcast(reduce.7805), dimensions={0}
  broadcast.7807 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7806), dimensions={3}
  reshape.7808 = f32[1024]{0} reshape(broadcast.7807)
  multiply.7818 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7817, broadcast.3023)
  reshape.7819 = f32[1024]{0} reshape(multiply.7818)
  broadcast.6000 = f32[1,1,512,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5798 = f32[] constant(2)
  broadcast.5799 = f32[1,1,512,256]{3,2,1,0} broadcast(constant.5798), dimensions={}
  multiply.5800 = f32[1,1,512,256]{3,2,1,0} multiply(broadcast.5799, parameter.133)
  multiply.6001 = f32[1,1,512,256]{3,2,1,0} multiply(broadcast.6000, multiply.5800)
  convolution.7987 = bf16[1,1,512,256]{3,2,1,0} convolution(convert.2787, convert.7986), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.7988 = f32[1,1,512,256]{3,2,1,0} convert(convolution.7987)
  add.7989 = f32[1,1,512,256]{3,2,1,0} add(multiply.6001, convert.7988)
  broadcast.5998 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5808 = f32[] constant(2)
  broadcast.5809 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5808), dimensions={}
  multiply.5810 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5809, parameter.134)
  multiply.5999 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5998, multiply.5810)
  convolution.7921 = bf16[3,3,256,256]{3,2,1,0} convolution(convert.2874, convert.7920), window={size=14x14 pad=0_1x0_1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.7922 = f32[3,3,256,256]{3,2,1,0} convert(convolution.7921)
  add.7923 = f32[3,3,256,256]{3,2,1,0} add(multiply.5999, convert.7922)
  broadcast.5996 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5818 = f32[] constant(2)
  broadcast.5819 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5818), dimensions={}
  multiply.5820 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5819, parameter.135)
  multiply.5997 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5996, multiply.5820)
  convolution.7855 = bf16[1,1,256,1024]{3,2,1,0} convolution(convert.2961, convert.7854), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7856 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.7855)
  add.7857 = f32[1,1,256,1024]{3,2,1,0} add(multiply.5997, convert.7856)
  broadcast.5994 = f32[1,1,512,1024]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5828 = f32[] constant(2)
  broadcast.5829 = f32[1,1,512,1024]{3,2,1,0} broadcast(constant.5828), dimensions={}
  multiply.5830 = f32[1,1,512,1024]{3,2,1,0} multiply(broadcast.5829, parameter.136)
  multiply.5995 = f32[1,1,512,1024]{3,2,1,0} multiply(broadcast.5994, multiply.5830)
  convolution.8050 = bf16[1,1,512,1024]{3,2,1,0} convolution(convert.3037, convert.8049), window={size=14x14 pad=0_-1x0_-1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.8051 = f32[1,1,512,1024]{3,2,1,0} convert(convolution.8050)
  add.8052 = f32[1,1,512,1024]{3,2,1,0} add(multiply.5995, convert.8051)
  constant.7995 = f32[] constant(0)
  reduce.8000 = f32[1024]{0} reduce(convert.7994, constant.7995), dimensions={0,1,2}, to_apply=primitive_computation_add.7996
  broadcast.8001 = f32[1024]{0} broadcast(reduce.8000), dimensions={0}
  broadcast.8002 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.8001), dimensions={3}
  reshape.8003 = f32[1024]{0} reshape(broadcast.8002)
  multiply.8013 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.8012, broadcast.3099)
  reshape.8014 = f32[1024]{0} reshape(multiply.8013)
  constant.7733 = f32[] constant(0)
  reduce.7738 = f32[256]{0} reduce(convert.7732, constant.7733), dimensions={0,1,2}, to_apply=primitive_computation_add.7734
  broadcast.7739 = f32[256]{0} broadcast(reduce.7738), dimensions={0}
  broadcast.7740 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7739), dimensions={3}
  reshape.7741 = f32[256]{0} reshape(broadcast.7740)
  multiply.7751 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7750, broadcast.3187)
  reshape.7752 = f32[256]{0} reshape(multiply.7751)
  constant.7667 = f32[] constant(0)
  reduce.7672 = f32[256]{0} reduce(convert.7666, constant.7667), dimensions={0,1,2}, to_apply=primitive_computation_add.7668
  broadcast.7673 = f32[256]{0} broadcast(reduce.7672), dimensions={0}
  broadcast.7674 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7673), dimensions={3}
  reshape.7675 = f32[256]{0} reshape(broadcast.7674)
  multiply.7685 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7684, broadcast.3274)
  reshape.7686 = f32[256]{0} reshape(multiply.7685)
  constant.7601 = f32[] constant(0)
  reduce.7606 = f32[1024]{0} reduce(convert.7600, constant.7601), dimensions={0,1,2}, to_apply=primitive_computation_add.7602
  broadcast.7607 = f32[1024]{0} broadcast(reduce.7606), dimensions={0}
  broadcast.7608 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7607), dimensions={3}
  reshape.7609 = f32[1024]{0} reshape(broadcast.7608)
  multiply.7619 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7618, broadcast.3361)
  reshape.7620 = f32[1024]{0} reshape(multiply.7619)
  broadcast.5992 = f32[1,1,1024,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5838 = f32[] constant(2)
  broadcast.5839 = f32[1,1,1024,256]{3,2,1,0} broadcast(constant.5838), dimensions={}
  multiply.5840 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5839, parameter.145)
  multiply.5993 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5992, multiply.5840)
  convolution.7788 = bf16[1,1,1024,256]{3,2,1,0} convolution(convert.3125, convert.7787), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7789 = f32[1,1,1024,256]{3,2,1,0} convert(convolution.7788)
  add.7790 = f32[1,1,1024,256]{3,2,1,0} add(multiply.5993, convert.7789)
  broadcast.5990 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5848 = f32[] constant(2)
  broadcast.5849 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5848), dimensions={}
  multiply.5850 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5849, parameter.146)
  multiply.5991 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5990, multiply.5850)
  convolution.7722 = bf16[3,3,256,256]{3,2,1,0} convolution(convert.3212, convert.7721), window={size=14x14 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.7723 = f32[3,3,256,256]{3,2,1,0} convert(convolution.7722)
  add.7724 = f32[3,3,256,256]{3,2,1,0} add(multiply.5991, convert.7723)
  broadcast.5988 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5858 = f32[] constant(2)
  broadcast.5859 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5858), dimensions={}
  multiply.5860 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5859, parameter.147)
  multiply.5989 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5988, multiply.5860)
  convolution.7656 = bf16[1,1,256,1024]{3,2,1,0} convolution(convert.3299, convert.7655), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7657 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.7656)
  add.7658 = f32[1,1,256,1024]{3,2,1,0} add(multiply.5989, convert.7657)
  constant.7534 = f32[] constant(0)
  reduce.7539 = f32[256]{0} reduce(convert.7533, constant.7534), dimensions={0,1,2}, to_apply=primitive_computation_add.7535
  broadcast.7540 = f32[256]{0} broadcast(reduce.7539), dimensions={0}
  broadcast.7541 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7540), dimensions={3}
  reshape.7542 = f32[256]{0} reshape(broadcast.7541)
  multiply.7552 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7551, broadcast.3449)
  reshape.7553 = f32[256]{0} reshape(multiply.7552)
  constant.7468 = f32[] constant(0)
  reduce.7473 = f32[256]{0} reduce(convert.7467, constant.7468), dimensions={0,1,2}, to_apply=primitive_computation_add.7469
  broadcast.7474 = f32[256]{0} broadcast(reduce.7473), dimensions={0}
  broadcast.7475 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7474), dimensions={3}
  reshape.7476 = f32[256]{0} reshape(broadcast.7475)
  multiply.7486 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7485, broadcast.3536)
  reshape.7487 = f32[256]{0} reshape(multiply.7486)
  constant.7402 = f32[] constant(0)
  reduce.7407 = f32[1024]{0} reduce(convert.7401, constant.7402), dimensions={0,1,2}, to_apply=primitive_computation_add.7403
  broadcast.7408 = f32[1024]{0} broadcast(reduce.7407), dimensions={0}
  broadcast.7409 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7408), dimensions={3}
  reshape.7410 = f32[1024]{0} reshape(broadcast.7409)
  multiply.7420 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7419, broadcast.3623)
  reshape.7421 = f32[1024]{0} reshape(multiply.7420)
  broadcast.5986 = f32[1,1,1024,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5868 = f32[] constant(2)
  broadcast.5869 = f32[1,1,1024,256]{3,2,1,0} broadcast(constant.5868), dimensions={}
  multiply.5870 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5869, parameter.154)
  multiply.5987 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5986, multiply.5870)
  convolution.7589 = bf16[1,1,1024,256]{3,2,1,0} convolution(convert.3387, convert.7588), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7590 = f32[1,1,1024,256]{3,2,1,0} convert(convolution.7589)
  add.7591 = f32[1,1,1024,256]{3,2,1,0} add(multiply.5987, convert.7590)
  broadcast.5984 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5878 = f32[] constant(2)
  broadcast.5879 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5878), dimensions={}
  multiply.5880 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5879, parameter.155)
  multiply.5985 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5984, multiply.5880)
  convolution.7523 = bf16[3,3,256,256]{3,2,1,0} convolution(convert.3474, convert.7522), window={size=14x14 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.7524 = f32[3,3,256,256]{3,2,1,0} convert(convolution.7523)
  add.7525 = f32[3,3,256,256]{3,2,1,0} add(multiply.5985, convert.7524)
  broadcast.5982 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5888 = f32[] constant(2)
  broadcast.5889 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5888), dimensions={}
  multiply.5890 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5889, parameter.156)
  multiply.5983 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5982, multiply.5890)
  convolution.7457 = bf16[1,1,256,1024]{3,2,1,0} convolution(convert.3561, convert.7456), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7458 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.7457)
  add.7459 = f32[1,1,256,1024]{3,2,1,0} add(multiply.5983, convert.7458)
  constant.6113 = bf16[] constant(0)
  reduce.6118 = bf16[1000]{0} reduce(convert.6112, constant.6113), dimensions={0}, to_apply=primitive_computation_add__1.6114
  broadcast.6119 = bf16[1000]{0} broadcast(reduce.6118), dimensions={0}
  broadcast.6120 = bf16[1,1000]{1,0} broadcast(broadcast.6119), dimensions={1}
  constant.6121 = bf16[] constant(0)
  reduce.6126 = bf16[1000]{0} reduce(broadcast.6120, constant.6121), dimensions={0}, to_apply=primitive_computation_add__1.6122
  broadcast.6127 = bf16[1000]{0} broadcast(reduce.6126), dimensions={0}
  convert.6128 = f32[1000]{0} convert(broadcast.6127)
  broadcast.5980 = f32[2048,1000]{1,0} broadcast(multiply.5977), dimensions={}
  constant.5898 = f32[] constant(2)
  broadcast.5899 = f32[2048,1000]{1,0} broadcast(constant.5898), dimensions={}
  multiply.5900 = f32[2048,1000]{1,0} multiply(broadcast.5899, parameter.158)
  multiply.5981 = f32[2048,1000]{1,0} multiply(broadcast.5980, multiply.5900)
  dot.6129 = bf16[1000,2048]{1,0} dot(convert.6112, convert.5309), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  transpose.6130 = bf16[2048,1000]{0,1} transpose(dot.6129), dimensions={1,0}
  convert.6131 = f32[2048,1000]{0,1} convert(transpose.6130)
  add.6132 = f32[2048,1000]{1,0} add(multiply.5981, convert.6131)
  constant.786 = bf16[] constant(0)
  broadcast.787 = bf16[128,112,112,64]{3,2,1,0} broadcast(constant.786), dimensions={}
  compare.788 = pred[128,112,112,64]{3,2,1,0} compare(convert.779, broadcast.787), direction=GT
  reverse.9509 = bf16[1,1,64,64]{3,2,1,0} reverse(convert.802), dimensions={0,1}
  convolution.9510 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.9505, reverse.9509), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.9511 = f32[128,56,56,64]{3,2,1,0} convert(convolution.9510)
  convert.9512 = bf16[128,56,56,64]{3,2,1,0} convert(convert.9511)
  reverse.9572 = bf16[1,1,64,256]{3,2,1,0} reverse(convert.1052), dimensions={0,1}
  convolution.9573 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.9568, reverse.9572), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.9574 = f32[128,56,56,64]{3,2,1,0} convert(convolution.9573)
  convert.9575 = bf16[128,56,56,64]{3,2,1,0} convert(convert.9574)
  add.9576 = bf16[128,56,56,64]{3,2,1,0} add(convert.9512, convert.9575)
  constant.9577 = bf16[] constant(0)
  select-and-scatter.9586 = bf16[128,112,112,64]{3,2,1,0} select-and-scatter(get-tuple-element.785, add.9576, constant.9577), window={size=1x3x3x1 stride=1x2x2x1 pad=0_0x0_1x0_1x0_0}, select=primitive_computation_ge.9578, scatter=primitive_computation_add__1.9582
  constant.9587 = bf16[] constant(0)
  broadcast.9588 = bf16[128,112,112,64]{3,2,1,0} broadcast(constant.9587), dimensions={}
  select.9589 = bf16[128,112,112,64]{3,2,1,0} select(compare.788, select-and-scatter.9586, broadcast.9588)
  convert.9590 = f32[128,112,112,64]{3,2,1,0} convert(select.9589)
  constant.9591 = f32[] constant(0)
  reduce.9596 = f32[64]{0} reduce(convert.9590, constant.9591), dimensions={0,1,2}, to_apply=primitive_computation_add.9592
  broadcast.9597 = f32[64]{0} broadcast(reduce.9596), dimensions={0}
  broadcast.9598 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9597), dimensions={3}
  reshape.9599 = f32[64]{0} reshape(broadcast.9598)
  multiply.9600 = f32[128,112,112,64]{3,2,1,0} multiply(convert.9590, subtract.758)
  constant.9601 = f32[] constant(0)
  reduce.9606 = f32[64]{0} reduce(multiply.9600, constant.9601), dimensions={0,1,2}, to_apply=primitive_computation_add.9602
  broadcast.9607 = f32[64]{0} broadcast(reduce.9606), dimensions={0}
  broadcast.9608 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9607), dimensions={3}
  multiply.9609 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9608, broadcast.770)
  reshape.9610 = f32[64]{0} reshape(multiply.9609)
  broadcast.5978 = f32[7,7,3,64]{3,2,1,0} broadcast(multiply.5977), dimensions={}
  constant.5908 = f32[] constant(2)
  broadcast.5909 = f32[7,7,3,64]{3,2,1,0} broadcast(constant.5908), dimensions={}
  multiply.5910 = f32[7,7,3,64]{3,2,1,0} multiply(broadcast.5909, parameter.161)
  multiply.5979 = f32[7,7,3,64]{3,2,1,0} multiply(broadcast.5978, multiply.5910)
  multiply.9611 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9608, reshape.769)
  constant.9612 = f32[] constant(0)
  reduce.9617 = f32[64]{0} reduce(multiply.9611, constant.9612), dimensions={0,1,2}, to_apply=primitive_computation_add.9613
  broadcast.9618 = f32[64]{0} broadcast(reduce.9617), dimensions={0}
  constant.766 = f32[] constant(-0.5)
  broadcast.767 = f32[64]{0} broadcast(constant.766), dimensions={}
  constant.763 = f32[] constant(-1.5)
  broadcast.764 = f32[64]{0} broadcast(constant.763), dimensions={}
  power.765 = f32[64]{0} power(add.761, broadcast.764)
  multiply.768 = f32[64]{0} multiply(broadcast.767, power.765)
  multiply.9619 = f32[64]{0} multiply(broadcast.9618, multiply.768)
  broadcast.9622 = f32[64]{0} broadcast(convert.733), dimensions={}
  divide.9623 = f32[64]{0} divide(multiply.9619, broadcast.9622)
  broadcast.9624 = f32[128,112,112,64]{3,2,1,0} broadcast(divide.9623), dimensions={3}
  constant.723 = f32[] constant(2)
  broadcast.724 = f32[128,112,112,64]{3,2,1,0} broadcast(constant.723), dimensions={}
  multiply.725 = f32[128,112,112,64]{3,2,1,0} multiply(broadcast.724, convert.711)
  multiply.9625 = f32[128,112,112,64]{3,2,1,0} multiply(broadcast.9624, multiply.725)
  reshape.9626 = f32[64]{0} reshape(multiply.771)
  broadcast.9627 = f32[128,112,112,64]{3,2,1,0} broadcast(reshape.9626), dimensions={3}
  multiply.9628 = f32[128,112,112,64]{3,2,1,0} multiply(convert.9590, broadcast.9627)
  add.9629 = f32[128,112,112,64]{3,2,1,0} add(multiply.9625, multiply.9628)
  negate.9620 = f32[64]{0} negate(multiply.9619)
  constant.737 = f32[] constant(2)
  broadcast.738 = f32[64]{0} broadcast(constant.737), dimensions={}
  multiply.739 = f32[64]{0} multiply(broadcast.738, divide.721)
  multiply.9621 = f32[64]{0} multiply(negate.9620, multiply.739)
  constant.9630 = f32[] constant(0)
  reduce.9635 = f32[64]{0} reduce(multiply.9628, constant.9630), dimensions={0,1,2}, to_apply=primitive_computation_add.9631
  broadcast.9636 = f32[64]{0} broadcast(reduce.9635), dimensions={0}
  broadcast.9637 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9636), dimensions={3}
  negate.9638 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.9637)
  reshape.9639 = f32[64]{0} reshape(negate.9638)
  add.9640 = f32[64]{0} add(multiply.9621, reshape.9639)
  broadcast.9641 = f32[64]{0} broadcast(convert.719), dimensions={}
  divide.9642 = f32[64]{0} divide(add.9640, broadcast.9641)
  broadcast.9643 = f32[128,112,112,64]{3,2,1,0} broadcast(divide.9642), dimensions={3}
  add.9644 = f32[128,112,112,64]{3,2,1,0} add(add.9629, broadcast.9643)
  convert.9645 = bf16[128,112,112,64]{3,2,1,0} convert(add.9644)
  convolution.9646 = bf16[7,7,3,64]{3,2,1,0} convolution(convert.708, convert.9645), window={size=112x112 pad=3_2x3_2 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.9647 = f32[7,7,3,64]{3,2,1,0} convert(convolution.9646)
  add.9648 = f32[7,7,3,64]{3,2,1,0} add(multiply.5979, convert.9647)
  ROOT tuple.9649 = (f32[], f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[2048]{0}, f32[2048]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[64]{0}, f32[64]{0}, f32[128,1000]{1,0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[1,1,64,64]{3,2,1,0}, f32[3,3,64,64]{3,2,1,0}, f32[1,1,64,256]{3,2,1,0}, f32[1,1,64,256]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[1,1,256,64]{3,2,1,0}, f32[3,3,64,64]{3,2,1,0}, f32[1,1,64,256]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,1024,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,1024,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,1024,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[1,1,1024,512]{3,2,1,0}, f32[3,3,512,512]{3,2,1,0}, f32[1,1,512,2048]{3,2,1,0}, f32[1,1,1024,2048]{3,2,1,0}, f32[2048]{0}, f32[2048]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[1,1,2048,512]{3,2,1,0}, f32[3,3,512,512]{3,2,1,0}, f32[1,1,512,2048]{3,2,1,0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[1,1,2048,512]{3,2,1,0}, f32[3,3,512,512]{3,2,1,0}, f32[1,1,512,2048]{3,2,1,0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[1,1,256,64]{3,2,1,0}, f32[3,3,64,64]{3,2,1,0}, f32[1,1,64,256]{3,2,1,0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[1,1,256,128]{3,2,1,0}, f32[3,3,128,128]{3,2,1,0}, f32[1,1,128,512]{3,2,1,0}, f32[1,1,256,512]{3,2,1,0}, f32[512]{0}, f32[512]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[1,1,512,128]{3,2,1,0}, f32[3,3,128,128]{3,2,1,0}, f32[1,1,128,512]{3,2,1,0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[1,1,512,128]{3,2,1,0}, f32[3,3,128,128]{3,2,1,0}, f32[1,1,128,512]{3,2,1,0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[1,1,512,128]{3,2,1,0}, f32[3,3,128,128]{3,2,1,0}, f32[1,1,128,512]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,512,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[1,1,512,1024]{3,2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,1024,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,1024,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[1000]{0}, f32[2048,1000]{1,0}, f32[64]{0}, f32[64]{0}, f32[7,7,3,64]{3,2,1,0}) tuple(add.5974, add.840, add.847, add.927, add.934, add.1014, add.1021, add.1090, add.1097, add.1178, add.1185, add.1265, add.1272, add.1352, add.1359, add.3688, add.3695, add.3775, add.3782, add.3862, add.3869, add.3950, add.3957, add.4037, add.4044, add.4124, add.4131, add.4212, add.4219, add.4299, add.4306, add.4386, add.4393, add.4474, add.4481, add.4561, add.4568, add.4648, add.4655, add.4724, add.4731, add.4812, add.4819, add.4899, add.4906, add.4986, add.4993, add.5074, add.5081, add.5161, add.5168, add.5248, add.5255, add.1440, add.1447, add.1527, add.1534, add.1614, add.1621, add.1702, add.1709, add.1789, add.1796, add.1876, add.1883, add.1952, add.1959, add.2040, add.2047, add.2127, add.2134, add.2214, add.2221, add.2302, add.2309, add.2389, add.2396, add.2476, add.2483, add.2564, add.2571, add.2651, add.2658, add.2738, add.2745, add.2826, add.2833, add.2913, add.2920, add.3000, add.3007, add.3076, add.3083, add.3164, add.3171, add.3251, add.3258, add.3338, add.3345, add.3426, add.3433, add.3513, add.3520, add.3600, add.3607, add.747, add.754, subtract.5353, reshape.9459, reshape.9470, reshape.9393, reshape.9404, reshape.9327, reshape.9338, add.9508, add.9442, add.9376, add.9571, reshape.9522, reshape.9533, reshape.9260, reshape.9271, reshape.9194, reshape.9205, reshape.9128, reshape.9139, add.9309, add.9243, add.9177, reshape.7343, reshape.7354, reshape.7277, reshape.7288, reshape.7211, reshape.7222, add.7392, add.7326, add.7260, reshape.7144, reshape.7155, reshape.7078, reshape.7089, reshape.7012, reshape.7023, add.7193, add.7127, add.7061, reshape.6945, reshape.6956, reshape.6879, reshape.6890, reshape.6813, reshape.6824, add.6994, add.6928, add.6862, reshape.6683, reshape.6694, reshape.6617, reshape.6628, reshape.6551, reshape.6562, add.6732, add.6666, add.6600, add.6795, reshape.6746, reshape.6757, reshape.6484, reshape.6495, reshape.6418, reshape.6429, reshape.6352, reshape.6363, add.6533, add.6467, add.6401, reshape.6285, reshape.6296, reshape.6219, reshape.6230, reshape.6153, reshape.6164, add.6334, add.6268, add.6202, reshape.9061, reshape.9072, reshape.8995, reshape.9006, reshape.8929, reshape.8940, add.9110, add.9044, add.8978, reshape.8799, reshape.8810, reshape.8733, reshape.8744, reshape.8667, reshape.8678, add.8848, add.8782, add.8716, add.8911, reshape.8862, reshape.8873, reshape.8600, reshape.8611, reshape.8534, reshape.8545, reshape.8468, reshape.8479, add.8649, add.8583, add.8517, reshape.8401, reshape.8412, reshape.8335, reshape.8346, reshape.8269, reshape.8280, add.8450, add.8384, add.8318, reshape.8202, reshape.8213, reshape.8136, reshape.8147, reshape.8070, reshape.8081, add.8251, add.8185, add.8119, reshape.7940, reshape.7951, reshape.7874, reshape.7885, reshape.7808, reshape.7819, add.7989, add.7923, add.7857, add.8052, reshape.8003, reshape.8014, reshape.7741, reshape.7752, reshape.7675, reshape.7686, reshape.7609, reshape.7620, add.7790, add.7724, add.7658, reshape.7542, reshape.7553, reshape.7476, reshape.7487, reshape.7410, reshape.7421, add.7591, add.7525, add.7459, convert.6128, add.6132, reshape.9599, reshape.9610, add.9648)
}


