HloModule xla_computation_unknown.9168

primitive_computation_add.602 {
  parameter.603 = f32[] parameter(0)
  parameter.604 = f32[] parameter(1)
  ROOT add.605 = f32[] add(parameter.603, parameter.604)
}

primitive_computation_add.616 {
  parameter.617 = f32[] parameter(0)
  parameter.618 = f32[] parameter(1)
  ROOT add.619 = f32[] add(parameter.617, parameter.618)
}

primitive_computation_max.681 {
  parameter.682 = bf16[] parameter(0)
  parameter.683 = bf16[] parameter(1)
  ROOT maximum.684 = bf16[] maximum(parameter.682, parameter.683)
}

primitive_computation_add.690 {
  parameter.691 = f32[] parameter(0)
  parameter.692 = f32[] parameter(1)
  ROOT add.693 = f32[] add(parameter.691, parameter.692)
}

primitive_computation_add.704 {
  parameter.705 = f32[] parameter(0)
  parameter.706 = f32[] parameter(1)
  ROOT add.707 = f32[] add(parameter.705, parameter.706)
}

primitive_computation_add.772 {
  parameter.773 = f32[] parameter(0)
  parameter.774 = f32[] parameter(1)
  ROOT add.775 = f32[] add(parameter.773, parameter.774)
}

primitive_computation_add.786 {
  parameter.787 = f32[] parameter(0)
  parameter.788 = f32[] parameter(1)
  ROOT add.789 = f32[] add(parameter.787, parameter.788)
}

primitive_computation_add.854 {
  parameter.855 = f32[] parameter(0)
  parameter.856 = f32[] parameter(1)
  ROOT add.857 = f32[] add(parameter.855, parameter.856)
}

primitive_computation_add.868 {
  parameter.869 = f32[] parameter(0)
  parameter.870 = f32[] parameter(1)
  ROOT add.871 = f32[] add(parameter.869, parameter.870)
}

primitive_computation_add.925 {
  parameter.926 = f32[] parameter(0)
  parameter.927 = f32[] parameter(1)
  ROOT add.928 = f32[] add(parameter.926, parameter.927)
}

primitive_computation_add.939 {
  parameter.940 = f32[] parameter(0)
  parameter.941 = f32[] parameter(1)
  ROOT add.942 = f32[] add(parameter.940, parameter.941)
}

primitive_computation_add.1008 {
  parameter.1009 = f32[] parameter(0)
  parameter.1010 = f32[] parameter(1)
  ROOT add.1011 = f32[] add(parameter.1009, parameter.1010)
}

primitive_computation_add.1022 {
  parameter.1023 = f32[] parameter(0)
  parameter.1024 = f32[] parameter(1)
  ROOT add.1025 = f32[] add(parameter.1023, parameter.1024)
}

primitive_computation_add.1090 {
  parameter.1091 = f32[] parameter(0)
  parameter.1092 = f32[] parameter(1)
  ROOT add.1093 = f32[] add(parameter.1091, parameter.1092)
}

primitive_computation_add.1104 {
  parameter.1105 = f32[] parameter(0)
  parameter.1106 = f32[] parameter(1)
  ROOT add.1107 = f32[] add(parameter.1105, parameter.1106)
}

primitive_computation_add.1172 {
  parameter.1173 = f32[] parameter(0)
  parameter.1174 = f32[] parameter(1)
  ROOT add.1175 = f32[] add(parameter.1173, parameter.1174)
}

primitive_computation_add.1186 {
  parameter.1187 = f32[] parameter(0)
  parameter.1188 = f32[] parameter(1)
  ROOT add.1189 = f32[] add(parameter.1187, parameter.1188)
}

primitive_computation_add.1255 {
  parameter.1256 = f32[] parameter(0)
  parameter.1257 = f32[] parameter(1)
  ROOT add.1258 = f32[] add(parameter.1256, parameter.1257)
}

primitive_computation_add.1269 {
  parameter.1270 = f32[] parameter(0)
  parameter.1271 = f32[] parameter(1)
  ROOT add.1272 = f32[] add(parameter.1270, parameter.1271)
}

primitive_computation_add.1337 {
  parameter.1338 = f32[] parameter(0)
  parameter.1339 = f32[] parameter(1)
  ROOT add.1340 = f32[] add(parameter.1338, parameter.1339)
}

primitive_computation_add.1351 {
  parameter.1352 = f32[] parameter(0)
  parameter.1353 = f32[] parameter(1)
  ROOT add.1354 = f32[] add(parameter.1352, parameter.1353)
}

primitive_computation_add.1419 {
  parameter.1420 = f32[] parameter(0)
  parameter.1421 = f32[] parameter(1)
  ROOT add.1422 = f32[] add(parameter.1420, parameter.1421)
}

primitive_computation_add.1433 {
  parameter.1434 = f32[] parameter(0)
  parameter.1435 = f32[] parameter(1)
  ROOT add.1436 = f32[] add(parameter.1434, parameter.1435)
}

primitive_computation_add.1502 {
  parameter.1503 = f32[] parameter(0)
  parameter.1504 = f32[] parameter(1)
  ROOT add.1505 = f32[] add(parameter.1503, parameter.1504)
}

primitive_computation_add.1516 {
  parameter.1517 = f32[] parameter(0)
  parameter.1518 = f32[] parameter(1)
  ROOT add.1519 = f32[] add(parameter.1517, parameter.1518)
}

primitive_computation_add.1584 {
  parameter.1585 = f32[] parameter(0)
  parameter.1586 = f32[] parameter(1)
  ROOT add.1587 = f32[] add(parameter.1585, parameter.1586)
}

primitive_computation_add.1598 {
  parameter.1599 = f32[] parameter(0)
  parameter.1600 = f32[] parameter(1)
  ROOT add.1601 = f32[] add(parameter.1599, parameter.1600)
}

primitive_computation_add.1666 {
  parameter.1667 = f32[] parameter(0)
  parameter.1668 = f32[] parameter(1)
  ROOT add.1669 = f32[] add(parameter.1667, parameter.1668)
}

primitive_computation_add.1680 {
  parameter.1681 = f32[] parameter(0)
  parameter.1682 = f32[] parameter(1)
  ROOT add.1683 = f32[] add(parameter.1681, parameter.1682)
}

primitive_computation_add.1737 {
  parameter.1738 = f32[] parameter(0)
  parameter.1739 = f32[] parameter(1)
  ROOT add.1740 = f32[] add(parameter.1738, parameter.1739)
}

primitive_computation_add.1751 {
  parameter.1752 = f32[] parameter(0)
  parameter.1753 = f32[] parameter(1)
  ROOT add.1754 = f32[] add(parameter.1752, parameter.1753)
}

primitive_computation_add.1820 {
  parameter.1821 = f32[] parameter(0)
  parameter.1822 = f32[] parameter(1)
  ROOT add.1823 = f32[] add(parameter.1821, parameter.1822)
}

primitive_computation_add.1834 {
  parameter.1835 = f32[] parameter(0)
  parameter.1836 = f32[] parameter(1)
  ROOT add.1837 = f32[] add(parameter.1835, parameter.1836)
}

primitive_computation_add.1902 {
  parameter.1903 = f32[] parameter(0)
  parameter.1904 = f32[] parameter(1)
  ROOT add.1905 = f32[] add(parameter.1903, parameter.1904)
}

primitive_computation_add.1916 {
  parameter.1917 = f32[] parameter(0)
  parameter.1918 = f32[] parameter(1)
  ROOT add.1919 = f32[] add(parameter.1917, parameter.1918)
}

primitive_computation_add.1984 {
  parameter.1985 = f32[] parameter(0)
  parameter.1986 = f32[] parameter(1)
  ROOT add.1987 = f32[] add(parameter.1985, parameter.1986)
}

primitive_computation_add.1998 {
  parameter.1999 = f32[] parameter(0)
  parameter.2000 = f32[] parameter(1)
  ROOT add.2001 = f32[] add(parameter.1999, parameter.2000)
}

primitive_computation_add.2067 {
  parameter.2068 = f32[] parameter(0)
  parameter.2069 = f32[] parameter(1)
  ROOT add.2070 = f32[] add(parameter.2068, parameter.2069)
}

primitive_computation_add.2081 {
  parameter.2082 = f32[] parameter(0)
  parameter.2083 = f32[] parameter(1)
  ROOT add.2084 = f32[] add(parameter.2082, parameter.2083)
}

primitive_computation_add.2149 {
  parameter.2150 = f32[] parameter(0)
  parameter.2151 = f32[] parameter(1)
  ROOT add.2152 = f32[] add(parameter.2150, parameter.2151)
}

primitive_computation_add.2163 {
  parameter.2164 = f32[] parameter(0)
  parameter.2165 = f32[] parameter(1)
  ROOT add.2166 = f32[] add(parameter.2164, parameter.2165)
}

primitive_computation_add.2231 {
  parameter.2232 = f32[] parameter(0)
  parameter.2233 = f32[] parameter(1)
  ROOT add.2234 = f32[] add(parameter.2232, parameter.2233)
}

primitive_computation_add.2245 {
  parameter.2246 = f32[] parameter(0)
  parameter.2247 = f32[] parameter(1)
  ROOT add.2248 = f32[] add(parameter.2246, parameter.2247)
}

primitive_computation_add.2314 {
  parameter.2315 = f32[] parameter(0)
  parameter.2316 = f32[] parameter(1)
  ROOT add.2317 = f32[] add(parameter.2315, parameter.2316)
}

primitive_computation_add.2328 {
  parameter.2329 = f32[] parameter(0)
  parameter.2330 = f32[] parameter(1)
  ROOT add.2331 = f32[] add(parameter.2329, parameter.2330)
}

primitive_computation_add.2396 {
  parameter.2397 = f32[] parameter(0)
  parameter.2398 = f32[] parameter(1)
  ROOT add.2399 = f32[] add(parameter.2397, parameter.2398)
}

primitive_computation_add.2410 {
  parameter.2411 = f32[] parameter(0)
  parameter.2412 = f32[] parameter(1)
  ROOT add.2413 = f32[] add(parameter.2411, parameter.2412)
}

primitive_computation_add.2478 {
  parameter.2479 = f32[] parameter(0)
  parameter.2480 = f32[] parameter(1)
  ROOT add.2481 = f32[] add(parameter.2479, parameter.2480)
}

primitive_computation_add.2492 {
  parameter.2493 = f32[] parameter(0)
  parameter.2494 = f32[] parameter(1)
  ROOT add.2495 = f32[] add(parameter.2493, parameter.2494)
}

primitive_computation_add.2561 {
  parameter.2562 = f32[] parameter(0)
  parameter.2563 = f32[] parameter(1)
  ROOT add.2564 = f32[] add(parameter.2562, parameter.2563)
}

primitive_computation_add.2575 {
  parameter.2576 = f32[] parameter(0)
  parameter.2577 = f32[] parameter(1)
  ROOT add.2578 = f32[] add(parameter.2576, parameter.2577)
}

primitive_computation_add.2643 {
  parameter.2644 = f32[] parameter(0)
  parameter.2645 = f32[] parameter(1)
  ROOT add.2646 = f32[] add(parameter.2644, parameter.2645)
}

primitive_computation_add.2657 {
  parameter.2658 = f32[] parameter(0)
  parameter.2659 = f32[] parameter(1)
  ROOT add.2660 = f32[] add(parameter.2658, parameter.2659)
}

primitive_computation_add.2725 {
  parameter.2726 = f32[] parameter(0)
  parameter.2727 = f32[] parameter(1)
  ROOT add.2728 = f32[] add(parameter.2726, parameter.2727)
}

primitive_computation_add.2739 {
  parameter.2740 = f32[] parameter(0)
  parameter.2741 = f32[] parameter(1)
  ROOT add.2742 = f32[] add(parameter.2740, parameter.2741)
}

primitive_computation_add.2796 {
  parameter.2797 = f32[] parameter(0)
  parameter.2798 = f32[] parameter(1)
  ROOT add.2799 = f32[] add(parameter.2797, parameter.2798)
}

primitive_computation_add.2810 {
  parameter.2811 = f32[] parameter(0)
  parameter.2812 = f32[] parameter(1)
  ROOT add.2813 = f32[] add(parameter.2811, parameter.2812)
}

primitive_computation_add.2879 {
  parameter.2880 = f32[] parameter(0)
  parameter.2881 = f32[] parameter(1)
  ROOT add.2882 = f32[] add(parameter.2880, parameter.2881)
}

primitive_computation_add.2893 {
  parameter.2894 = f32[] parameter(0)
  parameter.2895 = f32[] parameter(1)
  ROOT add.2896 = f32[] add(parameter.2894, parameter.2895)
}

primitive_computation_add.2961 {
  parameter.2962 = f32[] parameter(0)
  parameter.2963 = f32[] parameter(1)
  ROOT add.2964 = f32[] add(parameter.2962, parameter.2963)
}

primitive_computation_add.2975 {
  parameter.2976 = f32[] parameter(0)
  parameter.2977 = f32[] parameter(1)
  ROOT add.2978 = f32[] add(parameter.2976, parameter.2977)
}

primitive_computation_add.3043 {
  parameter.3044 = f32[] parameter(0)
  parameter.3045 = f32[] parameter(1)
  ROOT add.3046 = f32[] add(parameter.3044, parameter.3045)
}

primitive_computation_add.3057 {
  parameter.3058 = f32[] parameter(0)
  parameter.3059 = f32[] parameter(1)
  ROOT add.3060 = f32[] add(parameter.3058, parameter.3059)
}

primitive_computation_add.3126 {
  parameter.3127 = f32[] parameter(0)
  parameter.3128 = f32[] parameter(1)
  ROOT add.3129 = f32[] add(parameter.3127, parameter.3128)
}

primitive_computation_add.3140 {
  parameter.3141 = f32[] parameter(0)
  parameter.3142 = f32[] parameter(1)
  ROOT add.3143 = f32[] add(parameter.3141, parameter.3142)
}

primitive_computation_add.3208 {
  parameter.3209 = f32[] parameter(0)
  parameter.3210 = f32[] parameter(1)
  ROOT add.3211 = f32[] add(parameter.3209, parameter.3210)
}

primitive_computation_add.3222 {
  parameter.3223 = f32[] parameter(0)
  parameter.3224 = f32[] parameter(1)
  ROOT add.3225 = f32[] add(parameter.3223, parameter.3224)
}

primitive_computation_add.3290 {
  parameter.3291 = f32[] parameter(0)
  parameter.3292 = f32[] parameter(1)
  ROOT add.3293 = f32[] add(parameter.3291, parameter.3292)
}

primitive_computation_add.3304 {
  parameter.3305 = f32[] parameter(0)
  parameter.3306 = f32[] parameter(1)
  ROOT add.3307 = f32[] add(parameter.3305, parameter.3306)
}

primitive_computation_add.3373 {
  parameter.3374 = f32[] parameter(0)
  parameter.3375 = f32[] parameter(1)
  ROOT add.3376 = f32[] add(parameter.3374, parameter.3375)
}

primitive_computation_add.3387 {
  parameter.3388 = f32[] parameter(0)
  parameter.3389 = f32[] parameter(1)
  ROOT add.3390 = f32[] add(parameter.3388, parameter.3389)
}

primitive_computation_add.3455 {
  parameter.3456 = f32[] parameter(0)
  parameter.3457 = f32[] parameter(1)
  ROOT add.3458 = f32[] add(parameter.3456, parameter.3457)
}

primitive_computation_add.3469 {
  parameter.3470 = f32[] parameter(0)
  parameter.3471 = f32[] parameter(1)
  ROOT add.3472 = f32[] add(parameter.3470, parameter.3471)
}

primitive_computation_add.3537 {
  parameter.3538 = f32[] parameter(0)
  parameter.3539 = f32[] parameter(1)
  ROOT add.3540 = f32[] add(parameter.3538, parameter.3539)
}

primitive_computation_add.3551 {
  parameter.3552 = f32[] parameter(0)
  parameter.3553 = f32[] parameter(1)
  ROOT add.3554 = f32[] add(parameter.3552, parameter.3553)
}

primitive_computation_add.3620 {
  parameter.3621 = f32[] parameter(0)
  parameter.3622 = f32[] parameter(1)
  ROOT add.3623 = f32[] add(parameter.3621, parameter.3622)
}

primitive_computation_add.3634 {
  parameter.3635 = f32[] parameter(0)
  parameter.3636 = f32[] parameter(1)
  ROOT add.3637 = f32[] add(parameter.3635, parameter.3636)
}

primitive_computation_add.3702 {
  parameter.3703 = f32[] parameter(0)
  parameter.3704 = f32[] parameter(1)
  ROOT add.3705 = f32[] add(parameter.3703, parameter.3704)
}

primitive_computation_add.3716 {
  parameter.3717 = f32[] parameter(0)
  parameter.3718 = f32[] parameter(1)
  ROOT add.3719 = f32[] add(parameter.3717, parameter.3718)
}

primitive_computation_add.3784 {
  parameter.3785 = f32[] parameter(0)
  parameter.3786 = f32[] parameter(1)
  ROOT add.3787 = f32[] add(parameter.3785, parameter.3786)
}

primitive_computation_add.3798 {
  parameter.3799 = f32[] parameter(0)
  parameter.3800 = f32[] parameter(1)
  ROOT add.3801 = f32[] add(parameter.3799, parameter.3800)
}

primitive_computation_add.3867 {
  parameter.3868 = f32[] parameter(0)
  parameter.3869 = f32[] parameter(1)
  ROOT add.3870 = f32[] add(parameter.3868, parameter.3869)
}

primitive_computation_add.3881 {
  parameter.3882 = f32[] parameter(0)
  parameter.3883 = f32[] parameter(1)
  ROOT add.3884 = f32[] add(parameter.3882, parameter.3883)
}

primitive_computation_add.3949 {
  parameter.3950 = f32[] parameter(0)
  parameter.3951 = f32[] parameter(1)
  ROOT add.3952 = f32[] add(parameter.3950, parameter.3951)
}

primitive_computation_add.3963 {
  parameter.3964 = f32[] parameter(0)
  parameter.3965 = f32[] parameter(1)
  ROOT add.3966 = f32[] add(parameter.3964, parameter.3965)
}

primitive_computation_add.4031 {
  parameter.4032 = f32[] parameter(0)
  parameter.4033 = f32[] parameter(1)
  ROOT add.4034 = f32[] add(parameter.4032, parameter.4033)
}

primitive_computation_add.4045 {
  parameter.4046 = f32[] parameter(0)
  parameter.4047 = f32[] parameter(1)
  ROOT add.4048 = f32[] add(parameter.4046, parameter.4047)
}

primitive_computation_add.4114 {
  parameter.4115 = f32[] parameter(0)
  parameter.4116 = f32[] parameter(1)
  ROOT add.4117 = f32[] add(parameter.4115, parameter.4116)
}

primitive_computation_add.4128 {
  parameter.4129 = f32[] parameter(0)
  parameter.4130 = f32[] parameter(1)
  ROOT add.4131 = f32[] add(parameter.4129, parameter.4130)
}

primitive_computation_add.4196 {
  parameter.4197 = f32[] parameter(0)
  parameter.4198 = f32[] parameter(1)
  ROOT add.4199 = f32[] add(parameter.4197, parameter.4198)
}

primitive_computation_add.4210 {
  parameter.4211 = f32[] parameter(0)
  parameter.4212 = f32[] parameter(1)
  ROOT add.4213 = f32[] add(parameter.4211, parameter.4212)
}

primitive_computation_add.4278 {
  parameter.4279 = f32[] parameter(0)
  parameter.4280 = f32[] parameter(1)
  ROOT add.4281 = f32[] add(parameter.4279, parameter.4280)
}

primitive_computation_add.4292 {
  parameter.4293 = f32[] parameter(0)
  parameter.4294 = f32[] parameter(1)
  ROOT add.4295 = f32[] add(parameter.4293, parameter.4294)
}

primitive_computation_add.4349 {
  parameter.4350 = f32[] parameter(0)
  parameter.4351 = f32[] parameter(1)
  ROOT add.4352 = f32[] add(parameter.4350, parameter.4351)
}

primitive_computation_add.4363 {
  parameter.4364 = f32[] parameter(0)
  parameter.4365 = f32[] parameter(1)
  ROOT add.4366 = f32[] add(parameter.4364, parameter.4365)
}

primitive_computation_add.4432 {
  parameter.4433 = f32[] parameter(0)
  parameter.4434 = f32[] parameter(1)
  ROOT add.4435 = f32[] add(parameter.4433, parameter.4434)
}

primitive_computation_add.4446 {
  parameter.4447 = f32[] parameter(0)
  parameter.4448 = f32[] parameter(1)
  ROOT add.4449 = f32[] add(parameter.4447, parameter.4448)
}

primitive_computation_add.4514 {
  parameter.4515 = f32[] parameter(0)
  parameter.4516 = f32[] parameter(1)
  ROOT add.4517 = f32[] add(parameter.4515, parameter.4516)
}

primitive_computation_add.4528 {
  parameter.4529 = f32[] parameter(0)
  parameter.4530 = f32[] parameter(1)
  ROOT add.4531 = f32[] add(parameter.4529, parameter.4530)
}

primitive_computation_add.4596 {
  parameter.4597 = f32[] parameter(0)
  parameter.4598 = f32[] parameter(1)
  ROOT add.4599 = f32[] add(parameter.4597, parameter.4598)
}

primitive_computation_add.4610 {
  parameter.4611 = f32[] parameter(0)
  parameter.4612 = f32[] parameter(1)
  ROOT add.4613 = f32[] add(parameter.4611, parameter.4612)
}

primitive_computation_add.4679 {
  parameter.4680 = f32[] parameter(0)
  parameter.4681 = f32[] parameter(1)
  ROOT add.4682 = f32[] add(parameter.4680, parameter.4681)
}

primitive_computation_add.4693 {
  parameter.4694 = f32[] parameter(0)
  parameter.4695 = f32[] parameter(1)
  ROOT add.4696 = f32[] add(parameter.4694, parameter.4695)
}

primitive_computation_add.4761 {
  parameter.4762 = f32[] parameter(0)
  parameter.4763 = f32[] parameter(1)
  ROOT add.4764 = f32[] add(parameter.4762, parameter.4763)
}

primitive_computation_add.4775 {
  parameter.4776 = f32[] parameter(0)
  parameter.4777 = f32[] parameter(1)
  ROOT add.4778 = f32[] add(parameter.4776, parameter.4777)
}

primitive_computation_add.4843 {
  parameter.4844 = f32[] parameter(0)
  parameter.4845 = f32[] parameter(1)
  ROOT add.4846 = f32[] add(parameter.4844, parameter.4845)
}

primitive_computation_add.4857 {
  parameter.4858 = f32[] parameter(0)
  parameter.4859 = f32[] parameter(1)
  ROOT add.4860 = f32[] add(parameter.4858, parameter.4859)
}

primitive_computation_add.4924 {
  parameter.4925 = f32[] parameter(0)
  parameter.4926 = f32[] parameter(1)
  ROOT add.4927 = f32[] add(parameter.4925, parameter.4926)
}

primitive_computation_max__1.4946 {
  parameter.4947 = f32[] parameter(0)
  parameter.4948 = f32[] parameter(1)
  ROOT maximum.4949 = f32[] maximum(parameter.4947, parameter.4948)
}

primitive_computation_add.4957 {
  parameter.4958 = f32[] parameter(0)
  parameter.4959 = f32[] parameter(1)
  ROOT add.4960 = f32[] add(parameter.4958, parameter.4959)
}

primitive_computation_add.4968 {
  parameter.4969 = f32[] parameter(0)
  parameter.4970 = f32[] parameter(1)
  ROOT add.4971 = f32[] add(parameter.4969, parameter.4970)
}

primitive_computation_add.4993 {
  parameter.4994 = f32[] parameter(0)
  parameter.4995 = f32[] parameter(1)
  ROOT add.4996 = f32[] add(parameter.4994, parameter.4995)
}

primitive_computation_add.5006 {
  parameter.5007 = f32[] parameter(0)
  parameter.5008 = f32[] parameter(1)
  ROOT add.5009 = f32[] add(parameter.5007, parameter.5008)
}

primitive_computation_add.5016 {
  parameter.5017 = f32[] parameter(0)
  parameter.5018 = f32[] parameter(1)
  ROOT add.5019 = f32[] add(parameter.5017, parameter.5018)
}

primitive_computation_add.5026 {
  parameter.5027 = f32[] parameter(0)
  parameter.5028 = f32[] parameter(1)
  ROOT add.5029 = f32[] add(parameter.5027, parameter.5028)
}

primitive_computation_add.5036 {
  parameter.5037 = f32[] parameter(0)
  parameter.5038 = f32[] parameter(1)
  ROOT add.5039 = f32[] add(parameter.5037, parameter.5038)
}

primitive_computation_add.5046 {
  parameter.5047 = f32[] parameter(0)
  parameter.5048 = f32[] parameter(1)
  ROOT add.5049 = f32[] add(parameter.5047, parameter.5048)
}

primitive_computation_add.5056 {
  parameter.5057 = f32[] parameter(0)
  parameter.5058 = f32[] parameter(1)
  ROOT add.5059 = f32[] add(parameter.5057, parameter.5058)
}

primitive_computation_add.5066 {
  parameter.5067 = f32[] parameter(0)
  parameter.5068 = f32[] parameter(1)
  ROOT add.5069 = f32[] add(parameter.5067, parameter.5068)
}

primitive_computation_add.5076 {
  parameter.5077 = f32[] parameter(0)
  parameter.5078 = f32[] parameter(1)
  ROOT add.5079 = f32[] add(parameter.5077, parameter.5078)
}

primitive_computation_add.5086 {
  parameter.5087 = f32[] parameter(0)
  parameter.5088 = f32[] parameter(1)
  ROOT add.5089 = f32[] add(parameter.5087, parameter.5088)
}

primitive_computation_add.5096 {
  parameter.5097 = f32[] parameter(0)
  parameter.5098 = f32[] parameter(1)
  ROOT add.5099 = f32[] add(parameter.5097, parameter.5098)
}

primitive_computation_add.5106 {
  parameter.5107 = f32[] parameter(0)
  parameter.5108 = f32[] parameter(1)
  ROOT add.5109 = f32[] add(parameter.5107, parameter.5108)
}

primitive_computation_add.5116 {
  parameter.5117 = f32[] parameter(0)
  parameter.5118 = f32[] parameter(1)
  ROOT add.5119 = f32[] add(parameter.5117, parameter.5118)
}

primitive_computation_add.5126 {
  parameter.5127 = f32[] parameter(0)
  parameter.5128 = f32[] parameter(1)
  ROOT add.5129 = f32[] add(parameter.5127, parameter.5128)
}

primitive_computation_add.5136 {
  parameter.5137 = f32[] parameter(0)
  parameter.5138 = f32[] parameter(1)
  ROOT add.5139 = f32[] add(parameter.5137, parameter.5138)
}

primitive_computation_add.5146 {
  parameter.5147 = f32[] parameter(0)
  parameter.5148 = f32[] parameter(1)
  ROOT add.5149 = f32[] add(parameter.5147, parameter.5148)
}

primitive_computation_add.5156 {
  parameter.5157 = f32[] parameter(0)
  parameter.5158 = f32[] parameter(1)
  ROOT add.5159 = f32[] add(parameter.5157, parameter.5158)
}

primitive_computation_add.5166 {
  parameter.5167 = f32[] parameter(0)
  parameter.5168 = f32[] parameter(1)
  ROOT add.5169 = f32[] add(parameter.5167, parameter.5168)
}

primitive_computation_add.5176 {
  parameter.5177 = f32[] parameter(0)
  parameter.5178 = f32[] parameter(1)
  ROOT add.5179 = f32[] add(parameter.5177, parameter.5178)
}

primitive_computation_add.5186 {
  parameter.5187 = f32[] parameter(0)
  parameter.5188 = f32[] parameter(1)
  ROOT add.5189 = f32[] add(parameter.5187, parameter.5188)
}

primitive_computation_add.5196 {
  parameter.5197 = f32[] parameter(0)
  parameter.5198 = f32[] parameter(1)
  ROOT add.5199 = f32[] add(parameter.5197, parameter.5198)
}

primitive_computation_add.5206 {
  parameter.5207 = f32[] parameter(0)
  parameter.5208 = f32[] parameter(1)
  ROOT add.5209 = f32[] add(parameter.5207, parameter.5208)
}

primitive_computation_add.5216 {
  parameter.5217 = f32[] parameter(0)
  parameter.5218 = f32[] parameter(1)
  ROOT add.5219 = f32[] add(parameter.5217, parameter.5218)
}

primitive_computation_add.5226 {
  parameter.5227 = f32[] parameter(0)
  parameter.5228 = f32[] parameter(1)
  ROOT add.5229 = f32[] add(parameter.5227, parameter.5228)
}

primitive_computation_add.5236 {
  parameter.5237 = f32[] parameter(0)
  parameter.5238 = f32[] parameter(1)
  ROOT add.5239 = f32[] add(parameter.5237, parameter.5238)
}

primitive_computation_add.5246 {
  parameter.5247 = f32[] parameter(0)
  parameter.5248 = f32[] parameter(1)
  ROOT add.5249 = f32[] add(parameter.5247, parameter.5248)
}

primitive_computation_add.5256 {
  parameter.5257 = f32[] parameter(0)
  parameter.5258 = f32[] parameter(1)
  ROOT add.5259 = f32[] add(parameter.5257, parameter.5258)
}

primitive_computation_add.5266 {
  parameter.5267 = f32[] parameter(0)
  parameter.5268 = f32[] parameter(1)
  ROOT add.5269 = f32[] add(parameter.5267, parameter.5268)
}

primitive_computation_add.5276 {
  parameter.5277 = f32[] parameter(0)
  parameter.5278 = f32[] parameter(1)
  ROOT add.5279 = f32[] add(parameter.5277, parameter.5278)
}

primitive_computation_add.5286 {
  parameter.5287 = f32[] parameter(0)
  parameter.5288 = f32[] parameter(1)
  ROOT add.5289 = f32[] add(parameter.5287, parameter.5288)
}

primitive_computation_add.5296 {
  parameter.5297 = f32[] parameter(0)
  parameter.5298 = f32[] parameter(1)
  ROOT add.5299 = f32[] add(parameter.5297, parameter.5298)
}

primitive_computation_add.5306 {
  parameter.5307 = f32[] parameter(0)
  parameter.5308 = f32[] parameter(1)
  ROOT add.5309 = f32[] add(parameter.5307, parameter.5308)
}

primitive_computation_add.5316 {
  parameter.5317 = f32[] parameter(0)
  parameter.5318 = f32[] parameter(1)
  ROOT add.5319 = f32[] add(parameter.5317, parameter.5318)
}

primitive_computation_add.5326 {
  parameter.5327 = f32[] parameter(0)
  parameter.5328 = f32[] parameter(1)
  ROOT add.5329 = f32[] add(parameter.5327, parameter.5328)
}

primitive_computation_add.5336 {
  parameter.5337 = f32[] parameter(0)
  parameter.5338 = f32[] parameter(1)
  ROOT add.5339 = f32[] add(parameter.5337, parameter.5338)
}

primitive_computation_add.5346 {
  parameter.5347 = f32[] parameter(0)
  parameter.5348 = f32[] parameter(1)
  ROOT add.5349 = f32[] add(parameter.5347, parameter.5348)
}

primitive_computation_add.5356 {
  parameter.5357 = f32[] parameter(0)
  parameter.5358 = f32[] parameter(1)
  ROOT add.5359 = f32[] add(parameter.5357, parameter.5358)
}

primitive_computation_add.5366 {
  parameter.5367 = f32[] parameter(0)
  parameter.5368 = f32[] parameter(1)
  ROOT add.5369 = f32[] add(parameter.5367, parameter.5368)
}

primitive_computation_add.5376 {
  parameter.5377 = f32[] parameter(0)
  parameter.5378 = f32[] parameter(1)
  ROOT add.5379 = f32[] add(parameter.5377, parameter.5378)
}

primitive_computation_add.5386 {
  parameter.5387 = f32[] parameter(0)
  parameter.5388 = f32[] parameter(1)
  ROOT add.5389 = f32[] add(parameter.5387, parameter.5388)
}

primitive_computation_add.5396 {
  parameter.5397 = f32[] parameter(0)
  parameter.5398 = f32[] parameter(1)
  ROOT add.5399 = f32[] add(parameter.5397, parameter.5398)
}

primitive_computation_add.5406 {
  parameter.5407 = f32[] parameter(0)
  parameter.5408 = f32[] parameter(1)
  ROOT add.5409 = f32[] add(parameter.5407, parameter.5408)
}

primitive_computation_add.5416 {
  parameter.5417 = f32[] parameter(0)
  parameter.5418 = f32[] parameter(1)
  ROOT add.5419 = f32[] add(parameter.5417, parameter.5418)
}

primitive_computation_add.5426 {
  parameter.5427 = f32[] parameter(0)
  parameter.5428 = f32[] parameter(1)
  ROOT add.5429 = f32[] add(parameter.5427, parameter.5428)
}

primitive_computation_add.5436 {
  parameter.5437 = f32[] parameter(0)
  parameter.5438 = f32[] parameter(1)
  ROOT add.5439 = f32[] add(parameter.5437, parameter.5438)
}

primitive_computation_add.5446 {
  parameter.5447 = f32[] parameter(0)
  parameter.5448 = f32[] parameter(1)
  ROOT add.5449 = f32[] add(parameter.5447, parameter.5448)
}

primitive_computation_add.5456 {
  parameter.5457 = f32[] parameter(0)
  parameter.5458 = f32[] parameter(1)
  ROOT add.5459 = f32[] add(parameter.5457, parameter.5458)
}

primitive_computation_add.5466 {
  parameter.5467 = f32[] parameter(0)
  parameter.5468 = f32[] parameter(1)
  ROOT add.5469 = f32[] add(parameter.5467, parameter.5468)
}

primitive_computation_add.5476 {
  parameter.5477 = f32[] parameter(0)
  parameter.5478 = f32[] parameter(1)
  ROOT add.5479 = f32[] add(parameter.5477, parameter.5478)
}

primitive_computation_add.5486 {
  parameter.5487 = f32[] parameter(0)
  parameter.5488 = f32[] parameter(1)
  ROOT add.5489 = f32[] add(parameter.5487, parameter.5488)
}

primitive_computation_add.5496 {
  parameter.5497 = f32[] parameter(0)
  parameter.5498 = f32[] parameter(1)
  ROOT add.5499 = f32[] add(parameter.5497, parameter.5498)
}

primitive_computation_add.5506 {
  parameter.5507 = f32[] parameter(0)
  parameter.5508 = f32[] parameter(1)
  ROOT add.5509 = f32[] add(parameter.5507, parameter.5508)
}

primitive_computation_add.5516 {
  parameter.5517 = f32[] parameter(0)
  parameter.5518 = f32[] parameter(1)
  ROOT add.5519 = f32[] add(parameter.5517, parameter.5518)
}

primitive_computation_add.5526 {
  parameter.5527 = f32[] parameter(0)
  parameter.5528 = f32[] parameter(1)
  ROOT add.5529 = f32[] add(parameter.5527, parameter.5528)
}

primitive_computation_add.5536 {
  parameter.5537 = f32[] parameter(0)
  parameter.5538 = f32[] parameter(1)
  ROOT add.5539 = f32[] add(parameter.5537, parameter.5538)
}

primitive_computation_add.5717 {
  parameter.5718 = f32[] parameter(0)
  parameter.5719 = f32[] parameter(1)
  ROOT add.5720 = f32[] add(parameter.5718, parameter.5719)
}

primitive_computation_add.5727 {
  parameter.5728 = f32[] parameter(0)
  parameter.5729 = f32[] parameter(1)
  ROOT add.5730 = f32[] add(parameter.5728, parameter.5729)
}

primitive_computation_add__1.5738 {
  parameter.5739 = bf16[] parameter(0)
  parameter.5740 = bf16[] parameter(1)
  ROOT add.5741 = bf16[] add(parameter.5739, parameter.5740)
}

primitive_computation_add__1.5746 {
  parameter.5747 = bf16[] parameter(0)
  parameter.5748 = bf16[] parameter(1)
  ROOT add.5749 = bf16[] add(parameter.5747, parameter.5748)
}

primitive_computation_add.5768 {
  parameter.5769 = f32[] parameter(0)
  parameter.5770 = f32[] parameter(1)
  ROOT add.5771 = f32[] add(parameter.5769, parameter.5770)
}

primitive_computation_add.5778 {
  parameter.5779 = f32[] parameter(0)
  parameter.5780 = f32[] parameter(1)
  ROOT add.5781 = f32[] add(parameter.5779, parameter.5780)
}

primitive_computation_add.5789 {
  parameter.5790 = f32[] parameter(0)
  parameter.5791 = f32[] parameter(1)
  ROOT add.5792 = f32[] add(parameter.5790, parameter.5791)
}

primitive_computation_add.5807 {
  parameter.5808 = f32[] parameter(0)
  parameter.5809 = f32[] parameter(1)
  ROOT add.5810 = f32[] add(parameter.5808, parameter.5809)
}

primitive_computation_add.5832 {
  parameter.5833 = f32[] parameter(0)
  parameter.5834 = f32[] parameter(1)
  ROOT add.5835 = f32[] add(parameter.5833, parameter.5834)
}

primitive_computation_add.5842 {
  parameter.5843 = f32[] parameter(0)
  parameter.5844 = f32[] parameter(1)
  ROOT add.5845 = f32[] add(parameter.5843, parameter.5844)
}

primitive_computation_add.5853 {
  parameter.5854 = f32[] parameter(0)
  parameter.5855 = f32[] parameter(1)
  ROOT add.5856 = f32[] add(parameter.5854, parameter.5855)
}

primitive_computation_add.5871 {
  parameter.5872 = f32[] parameter(0)
  parameter.5873 = f32[] parameter(1)
  ROOT add.5874 = f32[] add(parameter.5872, parameter.5873)
}

primitive_computation_add.5896 {
  parameter.5897 = f32[] parameter(0)
  parameter.5898 = f32[] parameter(1)
  ROOT add.5899 = f32[] add(parameter.5897, parameter.5898)
}

primitive_computation_add.5906 {
  parameter.5907 = f32[] parameter(0)
  parameter.5908 = f32[] parameter(1)
  ROOT add.5909 = f32[] add(parameter.5907, parameter.5908)
}

primitive_computation_add.5917 {
  parameter.5918 = f32[] parameter(0)
  parameter.5919 = f32[] parameter(1)
  ROOT add.5920 = f32[] add(parameter.5918, parameter.5919)
}

primitive_computation_add.5935 {
  parameter.5936 = f32[] parameter(0)
  parameter.5937 = f32[] parameter(1)
  ROOT add.5938 = f32[] add(parameter.5936, parameter.5937)
}

primitive_computation_add.5961 {
  parameter.5962 = f32[] parameter(0)
  parameter.5963 = f32[] parameter(1)
  ROOT add.5964 = f32[] add(parameter.5962, parameter.5963)
}

primitive_computation_add.5971 {
  parameter.5972 = f32[] parameter(0)
  parameter.5973 = f32[] parameter(1)
  ROOT add.5974 = f32[] add(parameter.5972, parameter.5973)
}

primitive_computation_add.5982 {
  parameter.5983 = f32[] parameter(0)
  parameter.5984 = f32[] parameter(1)
  ROOT add.5985 = f32[] add(parameter.5983, parameter.5984)
}

primitive_computation_add.6000 {
  parameter.6001 = f32[] parameter(0)
  parameter.6002 = f32[] parameter(1)
  ROOT add.6003 = f32[] add(parameter.6001, parameter.6002)
}

primitive_computation_add.6025 {
  parameter.6026 = f32[] parameter(0)
  parameter.6027 = f32[] parameter(1)
  ROOT add.6028 = f32[] add(parameter.6026, parameter.6027)
}

primitive_computation_add.6035 {
  parameter.6036 = f32[] parameter(0)
  parameter.6037 = f32[] parameter(1)
  ROOT add.6038 = f32[] add(parameter.6036, parameter.6037)
}

primitive_computation_add.6046 {
  parameter.6047 = f32[] parameter(0)
  parameter.6048 = f32[] parameter(1)
  ROOT add.6049 = f32[] add(parameter.6047, parameter.6048)
}

primitive_computation_add.6064 {
  parameter.6065 = f32[] parameter(0)
  parameter.6066 = f32[] parameter(1)
  ROOT add.6067 = f32[] add(parameter.6065, parameter.6066)
}

primitive_computation_add.6089 {
  parameter.6090 = f32[] parameter(0)
  parameter.6091 = f32[] parameter(1)
  ROOT add.6092 = f32[] add(parameter.6090, parameter.6091)
}

primitive_computation_add.6099 {
  parameter.6100 = f32[] parameter(0)
  parameter.6101 = f32[] parameter(1)
  ROOT add.6102 = f32[] add(parameter.6100, parameter.6101)
}

primitive_computation_add.6110 {
  parameter.6111 = f32[] parameter(0)
  parameter.6112 = f32[] parameter(1)
  ROOT add.6113 = f32[] add(parameter.6111, parameter.6112)
}

primitive_computation_add.6128 {
  parameter.6129 = f32[] parameter(0)
  parameter.6130 = f32[] parameter(1)
  ROOT add.6131 = f32[] add(parameter.6129, parameter.6130)
}

primitive_computation_add.6154 {
  parameter.6155 = f32[] parameter(0)
  parameter.6156 = f32[] parameter(1)
  ROOT add.6157 = f32[] add(parameter.6155, parameter.6156)
}

primitive_computation_add.6164 {
  parameter.6165 = f32[] parameter(0)
  parameter.6166 = f32[] parameter(1)
  ROOT add.6167 = f32[] add(parameter.6165, parameter.6166)
}

primitive_computation_add.6175 {
  parameter.6176 = f32[] parameter(0)
  parameter.6177 = f32[] parameter(1)
  ROOT add.6178 = f32[] add(parameter.6176, parameter.6177)
}

primitive_computation_add.6193 {
  parameter.6194 = f32[] parameter(0)
  parameter.6195 = f32[] parameter(1)
  ROOT add.6196 = f32[] add(parameter.6194, parameter.6195)
}

primitive_computation_add.6218 {
  parameter.6219 = f32[] parameter(0)
  parameter.6220 = f32[] parameter(1)
  ROOT add.6221 = f32[] add(parameter.6219, parameter.6220)
}

primitive_computation_add.6228 {
  parameter.6229 = f32[] parameter(0)
  parameter.6230 = f32[] parameter(1)
  ROOT add.6231 = f32[] add(parameter.6229, parameter.6230)
}

primitive_computation_add.6239 {
  parameter.6240 = f32[] parameter(0)
  parameter.6241 = f32[] parameter(1)
  ROOT add.6242 = f32[] add(parameter.6240, parameter.6241)
}

primitive_computation_add.6257 {
  parameter.6258 = f32[] parameter(0)
  parameter.6259 = f32[] parameter(1)
  ROOT add.6260 = f32[] add(parameter.6258, parameter.6259)
}

primitive_computation_add.6282 {
  parameter.6283 = f32[] parameter(0)
  parameter.6284 = f32[] parameter(1)
  ROOT add.6285 = f32[] add(parameter.6283, parameter.6284)
}

primitive_computation_add.6292 {
  parameter.6293 = f32[] parameter(0)
  parameter.6294 = f32[] parameter(1)
  ROOT add.6295 = f32[] add(parameter.6293, parameter.6294)
}

primitive_computation_add.6303 {
  parameter.6304 = f32[] parameter(0)
  parameter.6305 = f32[] parameter(1)
  ROOT add.6306 = f32[] add(parameter.6304, parameter.6305)
}

primitive_computation_add.6321 {
  parameter.6322 = f32[] parameter(0)
  parameter.6323 = f32[] parameter(1)
  ROOT add.6324 = f32[] add(parameter.6322, parameter.6323)
}

primitive_computation_add.6343 {
  parameter.6344 = f32[] parameter(0)
  parameter.6345 = f32[] parameter(1)
  ROOT add.6346 = f32[] add(parameter.6344, parameter.6345)
}

primitive_computation_add.6353 {
  parameter.6354 = f32[] parameter(0)
  parameter.6355 = f32[] parameter(1)
  ROOT add.6356 = f32[] add(parameter.6354, parameter.6355)
}

primitive_computation_add.6364 {
  parameter.6365 = f32[] parameter(0)
  parameter.6366 = f32[] parameter(1)
  ROOT add.6367 = f32[] add(parameter.6365, parameter.6366)
}

primitive_computation_add.6382 {
  parameter.6383 = f32[] parameter(0)
  parameter.6384 = f32[] parameter(1)
  ROOT add.6385 = f32[] add(parameter.6383, parameter.6384)
}

primitive_computation_add.6408 {
  parameter.6409 = f32[] parameter(0)
  parameter.6410 = f32[] parameter(1)
  ROOT add.6411 = f32[] add(parameter.6409, parameter.6410)
}

primitive_computation_add.6418 {
  parameter.6419 = f32[] parameter(0)
  parameter.6420 = f32[] parameter(1)
  ROOT add.6421 = f32[] add(parameter.6419, parameter.6420)
}

primitive_computation_add.6429 {
  parameter.6430 = f32[] parameter(0)
  parameter.6431 = f32[] parameter(1)
  ROOT add.6432 = f32[] add(parameter.6430, parameter.6431)
}

primitive_computation_add.6447 {
  parameter.6448 = f32[] parameter(0)
  parameter.6449 = f32[] parameter(1)
  ROOT add.6450 = f32[] add(parameter.6448, parameter.6449)
}

primitive_computation_add.6472 {
  parameter.6473 = f32[] parameter(0)
  parameter.6474 = f32[] parameter(1)
  ROOT add.6475 = f32[] add(parameter.6473, parameter.6474)
}

primitive_computation_add.6482 {
  parameter.6483 = f32[] parameter(0)
  parameter.6484 = f32[] parameter(1)
  ROOT add.6485 = f32[] add(parameter.6483, parameter.6484)
}

primitive_computation_add.6493 {
  parameter.6494 = f32[] parameter(0)
  parameter.6495 = f32[] parameter(1)
  ROOT add.6496 = f32[] add(parameter.6494, parameter.6495)
}

primitive_computation_add.6511 {
  parameter.6512 = f32[] parameter(0)
  parameter.6513 = f32[] parameter(1)
  ROOT add.6514 = f32[] add(parameter.6512, parameter.6513)
}

primitive_computation_add.6536 {
  parameter.6537 = f32[] parameter(0)
  parameter.6538 = f32[] parameter(1)
  ROOT add.6539 = f32[] add(parameter.6537, parameter.6538)
}

primitive_computation_add.6546 {
  parameter.6547 = f32[] parameter(0)
  parameter.6548 = f32[] parameter(1)
  ROOT add.6549 = f32[] add(parameter.6547, parameter.6548)
}

primitive_computation_add.6557 {
  parameter.6558 = f32[] parameter(0)
  parameter.6559 = f32[] parameter(1)
  ROOT add.6560 = f32[] add(parameter.6558, parameter.6559)
}

primitive_computation_add.6575 {
  parameter.6576 = f32[] parameter(0)
  parameter.6577 = f32[] parameter(1)
  ROOT add.6578 = f32[] add(parameter.6576, parameter.6577)
}

primitive_computation_add.6601 {
  parameter.6602 = f32[] parameter(0)
  parameter.6603 = f32[] parameter(1)
  ROOT add.6604 = f32[] add(parameter.6602, parameter.6603)
}

primitive_computation_add.6611 {
  parameter.6612 = f32[] parameter(0)
  parameter.6613 = f32[] parameter(1)
  ROOT add.6614 = f32[] add(parameter.6612, parameter.6613)
}

primitive_computation_add.6622 {
  parameter.6623 = f32[] parameter(0)
  parameter.6624 = f32[] parameter(1)
  ROOT add.6625 = f32[] add(parameter.6623, parameter.6624)
}

primitive_computation_add.6640 {
  parameter.6641 = f32[] parameter(0)
  parameter.6642 = f32[] parameter(1)
  ROOT add.6643 = f32[] add(parameter.6641, parameter.6642)
}

primitive_computation_add.6665 {
  parameter.6666 = f32[] parameter(0)
  parameter.6667 = f32[] parameter(1)
  ROOT add.6668 = f32[] add(parameter.6666, parameter.6667)
}

primitive_computation_add.6675 {
  parameter.6676 = f32[] parameter(0)
  parameter.6677 = f32[] parameter(1)
  ROOT add.6678 = f32[] add(parameter.6676, parameter.6677)
}

primitive_computation_add.6686 {
  parameter.6687 = f32[] parameter(0)
  parameter.6688 = f32[] parameter(1)
  ROOT add.6689 = f32[] add(parameter.6687, parameter.6688)
}

primitive_computation_add.6704 {
  parameter.6705 = f32[] parameter(0)
  parameter.6706 = f32[] parameter(1)
  ROOT add.6707 = f32[] add(parameter.6705, parameter.6706)
}

primitive_computation_add.6729 {
  parameter.6730 = f32[] parameter(0)
  parameter.6731 = f32[] parameter(1)
  ROOT add.6732 = f32[] add(parameter.6730, parameter.6731)
}

primitive_computation_add.6739 {
  parameter.6740 = f32[] parameter(0)
  parameter.6741 = f32[] parameter(1)
  ROOT add.6742 = f32[] add(parameter.6740, parameter.6741)
}

primitive_computation_add.6750 {
  parameter.6751 = f32[] parameter(0)
  parameter.6752 = f32[] parameter(1)
  ROOT add.6753 = f32[] add(parameter.6751, parameter.6752)
}

primitive_computation_add.6768 {
  parameter.6769 = f32[] parameter(0)
  parameter.6770 = f32[] parameter(1)
  ROOT add.6771 = f32[] add(parameter.6769, parameter.6770)
}

primitive_computation_add.6794 {
  parameter.6795 = f32[] parameter(0)
  parameter.6796 = f32[] parameter(1)
  ROOT add.6797 = f32[] add(parameter.6795, parameter.6796)
}

primitive_computation_add.6804 {
  parameter.6805 = f32[] parameter(0)
  parameter.6806 = f32[] parameter(1)
  ROOT add.6807 = f32[] add(parameter.6805, parameter.6806)
}

primitive_computation_add.6815 {
  parameter.6816 = f32[] parameter(0)
  parameter.6817 = f32[] parameter(1)
  ROOT add.6818 = f32[] add(parameter.6816, parameter.6817)
}

primitive_computation_add.6833 {
  parameter.6834 = f32[] parameter(0)
  parameter.6835 = f32[] parameter(1)
  ROOT add.6836 = f32[] add(parameter.6834, parameter.6835)
}

primitive_computation_add.6858 {
  parameter.6859 = f32[] parameter(0)
  parameter.6860 = f32[] parameter(1)
  ROOT add.6861 = f32[] add(parameter.6859, parameter.6860)
}

primitive_computation_add.6868 {
  parameter.6869 = f32[] parameter(0)
  parameter.6870 = f32[] parameter(1)
  ROOT add.6871 = f32[] add(parameter.6869, parameter.6870)
}

primitive_computation_add.6879 {
  parameter.6880 = f32[] parameter(0)
  parameter.6881 = f32[] parameter(1)
  ROOT add.6882 = f32[] add(parameter.6880, parameter.6881)
}

primitive_computation_add.6897 {
  parameter.6898 = f32[] parameter(0)
  parameter.6899 = f32[] parameter(1)
  ROOT add.6900 = f32[] add(parameter.6898, parameter.6899)
}

primitive_computation_add.6922 {
  parameter.6923 = f32[] parameter(0)
  parameter.6924 = f32[] parameter(1)
  ROOT add.6925 = f32[] add(parameter.6923, parameter.6924)
}

primitive_computation_add.6932 {
  parameter.6933 = f32[] parameter(0)
  parameter.6934 = f32[] parameter(1)
  ROOT add.6935 = f32[] add(parameter.6933, parameter.6934)
}

primitive_computation_add.6943 {
  parameter.6944 = f32[] parameter(0)
  parameter.6945 = f32[] parameter(1)
  ROOT add.6946 = f32[] add(parameter.6944, parameter.6945)
}

primitive_computation_add.6961 {
  parameter.6962 = f32[] parameter(0)
  parameter.6963 = f32[] parameter(1)
  ROOT add.6964 = f32[] add(parameter.6962, parameter.6963)
}

primitive_computation_add.6987 {
  parameter.6988 = f32[] parameter(0)
  parameter.6989 = f32[] parameter(1)
  ROOT add.6990 = f32[] add(parameter.6988, parameter.6989)
}

primitive_computation_add.6997 {
  parameter.6998 = f32[] parameter(0)
  parameter.6999 = f32[] parameter(1)
  ROOT add.7000 = f32[] add(parameter.6998, parameter.6999)
}

primitive_computation_add.7008 {
  parameter.7009 = f32[] parameter(0)
  parameter.7010 = f32[] parameter(1)
  ROOT add.7011 = f32[] add(parameter.7009, parameter.7010)
}

primitive_computation_add.7026 {
  parameter.7027 = f32[] parameter(0)
  parameter.7028 = f32[] parameter(1)
  ROOT add.7029 = f32[] add(parameter.7027, parameter.7028)
}

primitive_computation_add.7051 {
  parameter.7052 = f32[] parameter(0)
  parameter.7053 = f32[] parameter(1)
  ROOT add.7054 = f32[] add(parameter.7052, parameter.7053)
}

primitive_computation_add.7061 {
  parameter.7062 = f32[] parameter(0)
  parameter.7063 = f32[] parameter(1)
  ROOT add.7064 = f32[] add(parameter.7062, parameter.7063)
}

primitive_computation_add.7072 {
  parameter.7073 = f32[] parameter(0)
  parameter.7074 = f32[] parameter(1)
  ROOT add.7075 = f32[] add(parameter.7073, parameter.7074)
}

primitive_computation_add.7090 {
  parameter.7091 = f32[] parameter(0)
  parameter.7092 = f32[] parameter(1)
  ROOT add.7093 = f32[] add(parameter.7091, parameter.7092)
}

primitive_computation_add.7115 {
  parameter.7116 = f32[] parameter(0)
  parameter.7117 = f32[] parameter(1)
  ROOT add.7118 = f32[] add(parameter.7116, parameter.7117)
}

primitive_computation_add.7125 {
  parameter.7126 = f32[] parameter(0)
  parameter.7127 = f32[] parameter(1)
  ROOT add.7128 = f32[] add(parameter.7126, parameter.7127)
}

primitive_computation_add.7136 {
  parameter.7137 = f32[] parameter(0)
  parameter.7138 = f32[] parameter(1)
  ROOT add.7139 = f32[] add(parameter.7137, parameter.7138)
}

primitive_computation_add.7154 {
  parameter.7155 = f32[] parameter(0)
  parameter.7156 = f32[] parameter(1)
  ROOT add.7157 = f32[] add(parameter.7155, parameter.7156)
}

primitive_computation_add.7180 {
  parameter.7181 = f32[] parameter(0)
  parameter.7182 = f32[] parameter(1)
  ROOT add.7183 = f32[] add(parameter.7181, parameter.7182)
}

primitive_computation_add.7190 {
  parameter.7191 = f32[] parameter(0)
  parameter.7192 = f32[] parameter(1)
  ROOT add.7193 = f32[] add(parameter.7191, parameter.7192)
}

primitive_computation_add.7201 {
  parameter.7202 = f32[] parameter(0)
  parameter.7203 = f32[] parameter(1)
  ROOT add.7204 = f32[] add(parameter.7202, parameter.7203)
}

primitive_computation_add.7219 {
  parameter.7220 = f32[] parameter(0)
  parameter.7221 = f32[] parameter(1)
  ROOT add.7222 = f32[] add(parameter.7220, parameter.7221)
}

primitive_computation_add.7244 {
  parameter.7245 = f32[] parameter(0)
  parameter.7246 = f32[] parameter(1)
  ROOT add.7247 = f32[] add(parameter.7245, parameter.7246)
}

primitive_computation_add.7254 {
  parameter.7255 = f32[] parameter(0)
  parameter.7256 = f32[] parameter(1)
  ROOT add.7257 = f32[] add(parameter.7255, parameter.7256)
}

primitive_computation_add.7265 {
  parameter.7266 = f32[] parameter(0)
  parameter.7267 = f32[] parameter(1)
  ROOT add.7268 = f32[] add(parameter.7266, parameter.7267)
}

primitive_computation_add.7283 {
  parameter.7284 = f32[] parameter(0)
  parameter.7285 = f32[] parameter(1)
  ROOT add.7286 = f32[] add(parameter.7284, parameter.7285)
}

primitive_computation_add.7308 {
  parameter.7309 = f32[] parameter(0)
  parameter.7310 = f32[] parameter(1)
  ROOT add.7311 = f32[] add(parameter.7309, parameter.7310)
}

primitive_computation_add.7318 {
  parameter.7319 = f32[] parameter(0)
  parameter.7320 = f32[] parameter(1)
  ROOT add.7321 = f32[] add(parameter.7319, parameter.7320)
}

primitive_computation_add.7329 {
  parameter.7330 = f32[] parameter(0)
  parameter.7331 = f32[] parameter(1)
  ROOT add.7332 = f32[] add(parameter.7330, parameter.7331)
}

primitive_computation_add.7347 {
  parameter.7348 = f32[] parameter(0)
  parameter.7349 = f32[] parameter(1)
  ROOT add.7350 = f32[] add(parameter.7348, parameter.7349)
}

primitive_computation_add.7373 {
  parameter.7374 = f32[] parameter(0)
  parameter.7375 = f32[] parameter(1)
  ROOT add.7376 = f32[] add(parameter.7374, parameter.7375)
}

primitive_computation_add.7383 {
  parameter.7384 = f32[] parameter(0)
  parameter.7385 = f32[] parameter(1)
  ROOT add.7386 = f32[] add(parameter.7384, parameter.7385)
}

primitive_computation_add.7394 {
  parameter.7395 = f32[] parameter(0)
  parameter.7396 = f32[] parameter(1)
  ROOT add.7397 = f32[] add(parameter.7395, parameter.7396)
}

primitive_computation_add.7412 {
  parameter.7413 = f32[] parameter(0)
  parameter.7414 = f32[] parameter(1)
  ROOT add.7415 = f32[] add(parameter.7413, parameter.7414)
}

primitive_computation_add.7437 {
  parameter.7438 = f32[] parameter(0)
  parameter.7439 = f32[] parameter(1)
  ROOT add.7440 = f32[] add(parameter.7438, parameter.7439)
}

primitive_computation_add.7447 {
  parameter.7448 = f32[] parameter(0)
  parameter.7449 = f32[] parameter(1)
  ROOT add.7450 = f32[] add(parameter.7448, parameter.7449)
}

primitive_computation_add.7458 {
  parameter.7459 = f32[] parameter(0)
  parameter.7460 = f32[] parameter(1)
  ROOT add.7461 = f32[] add(parameter.7459, parameter.7460)
}

primitive_computation_add.7476 {
  parameter.7477 = f32[] parameter(0)
  parameter.7478 = f32[] parameter(1)
  ROOT add.7479 = f32[] add(parameter.7477, parameter.7478)
}

primitive_computation_add.7501 {
  parameter.7502 = f32[] parameter(0)
  parameter.7503 = f32[] parameter(1)
  ROOT add.7504 = f32[] add(parameter.7502, parameter.7503)
}

primitive_computation_add.7511 {
  parameter.7512 = f32[] parameter(0)
  parameter.7513 = f32[] parameter(1)
  ROOT add.7514 = f32[] add(parameter.7512, parameter.7513)
}

primitive_computation_add.7522 {
  parameter.7523 = f32[] parameter(0)
  parameter.7524 = f32[] parameter(1)
  ROOT add.7525 = f32[] add(parameter.7523, parameter.7524)
}

primitive_computation_add.7540 {
  parameter.7541 = f32[] parameter(0)
  parameter.7542 = f32[] parameter(1)
  ROOT add.7543 = f32[] add(parameter.7541, parameter.7542)
}

primitive_computation_add.7562 {
  parameter.7563 = f32[] parameter(0)
  parameter.7564 = f32[] parameter(1)
  ROOT add.7565 = f32[] add(parameter.7563, parameter.7564)
}

primitive_computation_add.7572 {
  parameter.7573 = f32[] parameter(0)
  parameter.7574 = f32[] parameter(1)
  ROOT add.7575 = f32[] add(parameter.7573, parameter.7574)
}

primitive_computation_add.7583 {
  parameter.7584 = f32[] parameter(0)
  parameter.7585 = f32[] parameter(1)
  ROOT add.7586 = f32[] add(parameter.7584, parameter.7585)
}

primitive_computation_add.7601 {
  parameter.7602 = f32[] parameter(0)
  parameter.7603 = f32[] parameter(1)
  ROOT add.7604 = f32[] add(parameter.7602, parameter.7603)
}

primitive_computation_add.7627 {
  parameter.7628 = f32[] parameter(0)
  parameter.7629 = f32[] parameter(1)
  ROOT add.7630 = f32[] add(parameter.7628, parameter.7629)
}

primitive_computation_add.7637 {
  parameter.7638 = f32[] parameter(0)
  parameter.7639 = f32[] parameter(1)
  ROOT add.7640 = f32[] add(parameter.7638, parameter.7639)
}

primitive_computation_add.7648 {
  parameter.7649 = f32[] parameter(0)
  parameter.7650 = f32[] parameter(1)
  ROOT add.7651 = f32[] add(parameter.7649, parameter.7650)
}

primitive_computation_add.7666 {
  parameter.7667 = f32[] parameter(0)
  parameter.7668 = f32[] parameter(1)
  ROOT add.7669 = f32[] add(parameter.7667, parameter.7668)
}

primitive_computation_add.7691 {
  parameter.7692 = f32[] parameter(0)
  parameter.7693 = f32[] parameter(1)
  ROOT add.7694 = f32[] add(parameter.7692, parameter.7693)
}

primitive_computation_add.7701 {
  parameter.7702 = f32[] parameter(0)
  parameter.7703 = f32[] parameter(1)
  ROOT add.7704 = f32[] add(parameter.7702, parameter.7703)
}

primitive_computation_add.7712 {
  parameter.7713 = f32[] parameter(0)
  parameter.7714 = f32[] parameter(1)
  ROOT add.7715 = f32[] add(parameter.7713, parameter.7714)
}

primitive_computation_add.7730 {
  parameter.7731 = f32[] parameter(0)
  parameter.7732 = f32[] parameter(1)
  ROOT add.7733 = f32[] add(parameter.7731, parameter.7732)
}

primitive_computation_add.7755 {
  parameter.7756 = f32[] parameter(0)
  parameter.7757 = f32[] parameter(1)
  ROOT add.7758 = f32[] add(parameter.7756, parameter.7757)
}

primitive_computation_add.7765 {
  parameter.7766 = f32[] parameter(0)
  parameter.7767 = f32[] parameter(1)
  ROOT add.7768 = f32[] add(parameter.7766, parameter.7767)
}

primitive_computation_add.7776 {
  parameter.7777 = f32[] parameter(0)
  parameter.7778 = f32[] parameter(1)
  ROOT add.7779 = f32[] add(parameter.7777, parameter.7778)
}

primitive_computation_add.7794 {
  parameter.7795 = f32[] parameter(0)
  parameter.7796 = f32[] parameter(1)
  ROOT add.7797 = f32[] add(parameter.7795, parameter.7796)
}

primitive_computation_add.7820 {
  parameter.7821 = f32[] parameter(0)
  parameter.7822 = f32[] parameter(1)
  ROOT add.7823 = f32[] add(parameter.7821, parameter.7822)
}

primitive_computation_add.7830 {
  parameter.7831 = f32[] parameter(0)
  parameter.7832 = f32[] parameter(1)
  ROOT add.7833 = f32[] add(parameter.7831, parameter.7832)
}

primitive_computation_add.7841 {
  parameter.7842 = f32[] parameter(0)
  parameter.7843 = f32[] parameter(1)
  ROOT add.7844 = f32[] add(parameter.7842, parameter.7843)
}

primitive_computation_add.7859 {
  parameter.7860 = f32[] parameter(0)
  parameter.7861 = f32[] parameter(1)
  ROOT add.7862 = f32[] add(parameter.7860, parameter.7861)
}

primitive_computation_add.7884 {
  parameter.7885 = f32[] parameter(0)
  parameter.7886 = f32[] parameter(1)
  ROOT add.7887 = f32[] add(parameter.7885, parameter.7886)
}

primitive_computation_add.7894 {
  parameter.7895 = f32[] parameter(0)
  parameter.7896 = f32[] parameter(1)
  ROOT add.7897 = f32[] add(parameter.7895, parameter.7896)
}

primitive_computation_add.7905 {
  parameter.7906 = f32[] parameter(0)
  parameter.7907 = f32[] parameter(1)
  ROOT add.7908 = f32[] add(parameter.7906, parameter.7907)
}

primitive_computation_add.7923 {
  parameter.7924 = f32[] parameter(0)
  parameter.7925 = f32[] parameter(1)
  ROOT add.7926 = f32[] add(parameter.7924, parameter.7925)
}

primitive_computation_add.7948 {
  parameter.7949 = f32[] parameter(0)
  parameter.7950 = f32[] parameter(1)
  ROOT add.7951 = f32[] add(parameter.7949, parameter.7950)
}

primitive_computation_add.7958 {
  parameter.7959 = f32[] parameter(0)
  parameter.7960 = f32[] parameter(1)
  ROOT add.7961 = f32[] add(parameter.7959, parameter.7960)
}

primitive_computation_add.7969 {
  parameter.7970 = f32[] parameter(0)
  parameter.7971 = f32[] parameter(1)
  ROOT add.7972 = f32[] add(parameter.7970, parameter.7971)
}

primitive_computation_add.7987 {
  parameter.7988 = f32[] parameter(0)
  parameter.7989 = f32[] parameter(1)
  ROOT add.7990 = f32[] add(parameter.7988, parameter.7989)
}

primitive_computation_add.8013 {
  parameter.8014 = f32[] parameter(0)
  parameter.8015 = f32[] parameter(1)
  ROOT add.8016 = f32[] add(parameter.8014, parameter.8015)
}

primitive_computation_add.8023 {
  parameter.8024 = f32[] parameter(0)
  parameter.8025 = f32[] parameter(1)
  ROOT add.8026 = f32[] add(parameter.8024, parameter.8025)
}

primitive_computation_add.8034 {
  parameter.8035 = f32[] parameter(0)
  parameter.8036 = f32[] parameter(1)
  ROOT add.8037 = f32[] add(parameter.8035, parameter.8036)
}

primitive_computation_add.8052 {
  parameter.8053 = f32[] parameter(0)
  parameter.8054 = f32[] parameter(1)
  ROOT add.8055 = f32[] add(parameter.8053, parameter.8054)
}

primitive_computation_add.8077 {
  parameter.8078 = f32[] parameter(0)
  parameter.8079 = f32[] parameter(1)
  ROOT add.8080 = f32[] add(parameter.8078, parameter.8079)
}

primitive_computation_add.8087 {
  parameter.8088 = f32[] parameter(0)
  parameter.8089 = f32[] parameter(1)
  ROOT add.8090 = f32[] add(parameter.8088, parameter.8089)
}

primitive_computation_add.8098 {
  parameter.8099 = f32[] parameter(0)
  parameter.8100 = f32[] parameter(1)
  ROOT add.8101 = f32[] add(parameter.8099, parameter.8100)
}

primitive_computation_add.8116 {
  parameter.8117 = f32[] parameter(0)
  parameter.8118 = f32[] parameter(1)
  ROOT add.8119 = f32[] add(parameter.8117, parameter.8118)
}

primitive_computation_add.8141 {
  parameter.8142 = f32[] parameter(0)
  parameter.8143 = f32[] parameter(1)
  ROOT add.8144 = f32[] add(parameter.8142, parameter.8143)
}

primitive_computation_add.8151 {
  parameter.8152 = f32[] parameter(0)
  parameter.8153 = f32[] parameter(1)
  ROOT add.8154 = f32[] add(parameter.8152, parameter.8153)
}

primitive_computation_add.8162 {
  parameter.8163 = f32[] parameter(0)
  parameter.8164 = f32[] parameter(1)
  ROOT add.8165 = f32[] add(parameter.8163, parameter.8164)
}

primitive_computation_add.8180 {
  parameter.8181 = f32[] parameter(0)
  parameter.8182 = f32[] parameter(1)
  ROOT add.8183 = f32[] add(parameter.8181, parameter.8182)
}

primitive_computation_add.8206 {
  parameter.8207 = f32[] parameter(0)
  parameter.8208 = f32[] parameter(1)
  ROOT add.8209 = f32[] add(parameter.8207, parameter.8208)
}

primitive_computation_add.8216 {
  parameter.8217 = f32[] parameter(0)
  parameter.8218 = f32[] parameter(1)
  ROOT add.8219 = f32[] add(parameter.8217, parameter.8218)
}

primitive_computation_add.8227 {
  parameter.8228 = f32[] parameter(0)
  parameter.8229 = f32[] parameter(1)
  ROOT add.8230 = f32[] add(parameter.8228, parameter.8229)
}

primitive_computation_add.8245 {
  parameter.8246 = f32[] parameter(0)
  parameter.8247 = f32[] parameter(1)
  ROOT add.8248 = f32[] add(parameter.8246, parameter.8247)
}

primitive_computation_add.8270 {
  parameter.8271 = f32[] parameter(0)
  parameter.8272 = f32[] parameter(1)
  ROOT add.8273 = f32[] add(parameter.8271, parameter.8272)
}

primitive_computation_add.8280 {
  parameter.8281 = f32[] parameter(0)
  parameter.8282 = f32[] parameter(1)
  ROOT add.8283 = f32[] add(parameter.8281, parameter.8282)
}

primitive_computation_add.8291 {
  parameter.8292 = f32[] parameter(0)
  parameter.8293 = f32[] parameter(1)
  ROOT add.8294 = f32[] add(parameter.8292, parameter.8293)
}

primitive_computation_add.8309 {
  parameter.8310 = f32[] parameter(0)
  parameter.8311 = f32[] parameter(1)
  ROOT add.8312 = f32[] add(parameter.8310, parameter.8311)
}

primitive_computation_add.8334 {
  parameter.8335 = f32[] parameter(0)
  parameter.8336 = f32[] parameter(1)
  ROOT add.8337 = f32[] add(parameter.8335, parameter.8336)
}

primitive_computation_add.8344 {
  parameter.8345 = f32[] parameter(0)
  parameter.8346 = f32[] parameter(1)
  ROOT add.8347 = f32[] add(parameter.8345, parameter.8346)
}

primitive_computation_add.8355 {
  parameter.8356 = f32[] parameter(0)
  parameter.8357 = f32[] parameter(1)
  ROOT add.8358 = f32[] add(parameter.8356, parameter.8357)
}

primitive_computation_add.8373 {
  parameter.8374 = f32[] parameter(0)
  parameter.8375 = f32[] parameter(1)
  ROOT add.8376 = f32[] add(parameter.8374, parameter.8375)
}

primitive_computation_add.8395 {
  parameter.8396 = f32[] parameter(0)
  parameter.8397 = f32[] parameter(1)
  ROOT add.8398 = f32[] add(parameter.8396, parameter.8397)
}

primitive_computation_add.8405 {
  parameter.8406 = f32[] parameter(0)
  parameter.8407 = f32[] parameter(1)
  ROOT add.8408 = f32[] add(parameter.8406, parameter.8407)
}

primitive_computation_add.8416 {
  parameter.8417 = f32[] parameter(0)
  parameter.8418 = f32[] parameter(1)
  ROOT add.8419 = f32[] add(parameter.8417, parameter.8418)
}

primitive_computation_add.8434 {
  parameter.8435 = f32[] parameter(0)
  parameter.8436 = f32[] parameter(1)
  ROOT add.8437 = f32[] add(parameter.8435, parameter.8436)
}

primitive_computation_add.8460 {
  parameter.8461 = f32[] parameter(0)
  parameter.8462 = f32[] parameter(1)
  ROOT add.8463 = f32[] add(parameter.8461, parameter.8462)
}

primitive_computation_add.8470 {
  parameter.8471 = f32[] parameter(0)
  parameter.8472 = f32[] parameter(1)
  ROOT add.8473 = f32[] add(parameter.8471, parameter.8472)
}

primitive_computation_add.8481 {
  parameter.8482 = f32[] parameter(0)
  parameter.8483 = f32[] parameter(1)
  ROOT add.8484 = f32[] add(parameter.8482, parameter.8483)
}

primitive_computation_add.8499 {
  parameter.8500 = f32[] parameter(0)
  parameter.8501 = f32[] parameter(1)
  ROOT add.8502 = f32[] add(parameter.8500, parameter.8501)
}

primitive_computation_add.8524 {
  parameter.8525 = f32[] parameter(0)
  parameter.8526 = f32[] parameter(1)
  ROOT add.8527 = f32[] add(parameter.8525, parameter.8526)
}

primitive_computation_add.8534 {
  parameter.8535 = f32[] parameter(0)
  parameter.8536 = f32[] parameter(1)
  ROOT add.8537 = f32[] add(parameter.8535, parameter.8536)
}

primitive_computation_add.8545 {
  parameter.8546 = f32[] parameter(0)
  parameter.8547 = f32[] parameter(1)
  ROOT add.8548 = f32[] add(parameter.8546, parameter.8547)
}

primitive_computation_add.8563 {
  parameter.8564 = f32[] parameter(0)
  parameter.8565 = f32[] parameter(1)
  ROOT add.8566 = f32[] add(parameter.8564, parameter.8565)
}

primitive_computation_add.8588 {
  parameter.8589 = f32[] parameter(0)
  parameter.8590 = f32[] parameter(1)
  ROOT add.8591 = f32[] add(parameter.8589, parameter.8590)
}

primitive_computation_add.8598 {
  parameter.8599 = f32[] parameter(0)
  parameter.8600 = f32[] parameter(1)
  ROOT add.8601 = f32[] add(parameter.8599, parameter.8600)
}

primitive_computation_add.8609 {
  parameter.8610 = f32[] parameter(0)
  parameter.8611 = f32[] parameter(1)
  ROOT add.8612 = f32[] add(parameter.8610, parameter.8611)
}

primitive_computation_add.8627 {
  parameter.8628 = f32[] parameter(0)
  parameter.8629 = f32[] parameter(1)
  ROOT add.8630 = f32[] add(parameter.8628, parameter.8629)
}

primitive_computation_add.8653 {
  parameter.8654 = f32[] parameter(0)
  parameter.8655 = f32[] parameter(1)
  ROOT add.8656 = f32[] add(parameter.8654, parameter.8655)
}

primitive_computation_add.8663 {
  parameter.8664 = f32[] parameter(0)
  parameter.8665 = f32[] parameter(1)
  ROOT add.8666 = f32[] add(parameter.8664, parameter.8665)
}

primitive_computation_add.8674 {
  parameter.8675 = f32[] parameter(0)
  parameter.8676 = f32[] parameter(1)
  ROOT add.8677 = f32[] add(parameter.8675, parameter.8676)
}

primitive_computation_add.8692 {
  parameter.8693 = f32[] parameter(0)
  parameter.8694 = f32[] parameter(1)
  ROOT add.8695 = f32[] add(parameter.8693, parameter.8694)
}

primitive_computation_add.8717 {
  parameter.8718 = f32[] parameter(0)
  parameter.8719 = f32[] parameter(1)
  ROOT add.8720 = f32[] add(parameter.8718, parameter.8719)
}

primitive_computation_add.8727 {
  parameter.8728 = f32[] parameter(0)
  parameter.8729 = f32[] parameter(1)
  ROOT add.8730 = f32[] add(parameter.8728, parameter.8729)
}

primitive_computation_add.8738 {
  parameter.8739 = f32[] parameter(0)
  parameter.8740 = f32[] parameter(1)
  ROOT add.8741 = f32[] add(parameter.8739, parameter.8740)
}

primitive_computation_add.8756 {
  parameter.8757 = f32[] parameter(0)
  parameter.8758 = f32[] parameter(1)
  ROOT add.8759 = f32[] add(parameter.8757, parameter.8758)
}

primitive_computation_add.8781 {
  parameter.8782 = f32[] parameter(0)
  parameter.8783 = f32[] parameter(1)
  ROOT add.8784 = f32[] add(parameter.8782, parameter.8783)
}

primitive_computation_add.8791 {
  parameter.8792 = f32[] parameter(0)
  parameter.8793 = f32[] parameter(1)
  ROOT add.8794 = f32[] add(parameter.8792, parameter.8793)
}

primitive_computation_add.8802 {
  parameter.8803 = f32[] parameter(0)
  parameter.8804 = f32[] parameter(1)
  ROOT add.8805 = f32[] add(parameter.8803, parameter.8804)
}

primitive_computation_add.8820 {
  parameter.8821 = f32[] parameter(0)
  parameter.8822 = f32[] parameter(1)
  ROOT add.8823 = f32[] add(parameter.8821, parameter.8822)
}

primitive_computation_add.8846 {
  parameter.8847 = f32[] parameter(0)
  parameter.8848 = f32[] parameter(1)
  ROOT add.8849 = f32[] add(parameter.8847, parameter.8848)
}

primitive_computation_add.8856 {
  parameter.8857 = f32[] parameter(0)
  parameter.8858 = f32[] parameter(1)
  ROOT add.8859 = f32[] add(parameter.8857, parameter.8858)
}

primitive_computation_add.8867 {
  parameter.8868 = f32[] parameter(0)
  parameter.8869 = f32[] parameter(1)
  ROOT add.8870 = f32[] add(parameter.8868, parameter.8869)
}

primitive_computation_add.8885 {
  parameter.8886 = f32[] parameter(0)
  parameter.8887 = f32[] parameter(1)
  ROOT add.8888 = f32[] add(parameter.8886, parameter.8887)
}

primitive_computation_add.8910 {
  parameter.8911 = f32[] parameter(0)
  parameter.8912 = f32[] parameter(1)
  ROOT add.8913 = f32[] add(parameter.8911, parameter.8912)
}

primitive_computation_add.8920 {
  parameter.8921 = f32[] parameter(0)
  parameter.8922 = f32[] parameter(1)
  ROOT add.8923 = f32[] add(parameter.8921, parameter.8922)
}

primitive_computation_add.8931 {
  parameter.8932 = f32[] parameter(0)
  parameter.8933 = f32[] parameter(1)
  ROOT add.8934 = f32[] add(parameter.8932, parameter.8933)
}

primitive_computation_add.8949 {
  parameter.8950 = f32[] parameter(0)
  parameter.8951 = f32[] parameter(1)
  ROOT add.8952 = f32[] add(parameter.8950, parameter.8951)
}

primitive_computation_add.8974 {
  parameter.8975 = f32[] parameter(0)
  parameter.8976 = f32[] parameter(1)
  ROOT add.8977 = f32[] add(parameter.8975, parameter.8976)
}

primitive_computation_add.8984 {
  parameter.8985 = f32[] parameter(0)
  parameter.8986 = f32[] parameter(1)
  ROOT add.8987 = f32[] add(parameter.8985, parameter.8986)
}

primitive_computation_add.8995 {
  parameter.8996 = f32[] parameter(0)
  parameter.8997 = f32[] parameter(1)
  ROOT add.8998 = f32[] add(parameter.8996, parameter.8997)
}

primitive_computation_add.9013 {
  parameter.9014 = f32[] parameter(0)
  parameter.9015 = f32[] parameter(1)
  ROOT add.9016 = f32[] add(parameter.9014, parameter.9015)
}

primitive_computation_add.9035 {
  parameter.9036 = f32[] parameter(0)
  parameter.9037 = f32[] parameter(1)
  ROOT add.9038 = f32[] add(parameter.9036, parameter.9037)
}

primitive_computation_add.9045 {
  parameter.9046 = f32[] parameter(0)
  parameter.9047 = f32[] parameter(1)
  ROOT add.9048 = f32[] add(parameter.9046, parameter.9047)
}

primitive_computation_add.9056 {
  parameter.9057 = f32[] parameter(0)
  parameter.9058 = f32[] parameter(1)
  ROOT add.9059 = f32[] add(parameter.9057, parameter.9058)
}

primitive_computation_add.9074 {
  parameter.9075 = f32[] parameter(0)
  parameter.9076 = f32[] parameter(1)
  ROOT add.9077 = f32[] add(parameter.9075, parameter.9076)
}

primitive_computation_ge.9096 {
  parameter.9097 = bf16[] parameter(0)
  parameter.9098 = bf16[] parameter(1)
  ROOT compare.9099 = pred[] compare(parameter.9097, parameter.9098), direction=GE
}

primitive_computation_add__1.9100 {
  parameter.9101 = bf16[] parameter(0)
  parameter.9102 = bf16[] parameter(1)
  ROOT add.9103 = bf16[] add(parameter.9101, parameter.9102)
}

primitive_computation_add.9110 {
  parameter.9111 = f32[] parameter(0)
  parameter.9112 = f32[] parameter(1)
  ROOT add.9113 = f32[] add(parameter.9111, parameter.9112)
}

primitive_computation_add.9120 {
  parameter.9121 = f32[] parameter(0)
  parameter.9122 = f32[] parameter(1)
  ROOT add.9123 = f32[] add(parameter.9121, parameter.9122)
}

primitive_computation_add.9131 {
  parameter.9132 = f32[] parameter(0)
  parameter.9133 = f32[] parameter(1)
  ROOT add.9134 = f32[] add(parameter.9132, parameter.9133)
}

primitive_computation_add.9149 {
  parameter.9150 = f32[] parameter(0)
  parameter.9151 = f32[] parameter(1)
  ROOT add.9152 = f32[] add(parameter.9150, parameter.9151)
}

ENTRY xla_computation_unknown.9168 {
  parameter.165 = s32[] parameter(164)
  parameter.166 = s32[] parameter(165)
  parameter.167 = f32[64]{0} parameter(166)
  parameter.168 = f32[64]{0} parameter(167)
  parameter.169 = f32[64]{0} parameter(168)
  parameter.170 = f32[64]{0} parameter(169)
  parameter.171 = f32[256]{0} parameter(170)
  parameter.172 = f32[256]{0} parameter(171)
  parameter.173 = f32[1,1,64,64]{3,2,1,0} parameter(172)
  parameter.174 = f32[3,3,64,64]{3,2,1,0} parameter(173)
  parameter.175 = f32[1,1,64,256]{3,2,1,0} parameter(174)
  parameter.176 = f32[1,1,64,256]{3,2,1,0} parameter(175)
  parameter.177 = f32[256]{0} parameter(176)
  parameter.178 = f32[256]{0} parameter(177)
  parameter.179 = f32[64]{0} parameter(178)
  parameter.180 = f32[64]{0} parameter(179)
  parameter.181 = f32[64]{0} parameter(180)
  parameter.182 = f32[64]{0} parameter(181)
  parameter.183 = f32[256]{0} parameter(182)
  parameter.184 = f32[256]{0} parameter(183)
  parameter.185 = f32[1,1,256,64]{3,2,1,0} parameter(184)
  parameter.186 = f32[3,3,64,64]{3,2,1,0} parameter(185)
  parameter.187 = f32[1,1,64,256]{3,2,1,0} parameter(186)
  parameter.188 = f32[256]{0} parameter(187)
  parameter.189 = f32[256]{0} parameter(188)
  parameter.190 = f32[256]{0} parameter(189)
  parameter.191 = f32[256]{0} parameter(190)
  parameter.192 = f32[1024]{0} parameter(191)
  parameter.193 = f32[1024]{0} parameter(192)
  parameter.194 = f32[1,1,1024,256]{3,2,1,0} parameter(193)
  parameter.195 = f32[3,3,256,256]{3,2,1,0} parameter(194)
  parameter.196 = f32[1,1,256,1024]{3,2,1,0} parameter(195)
  parameter.197 = f32[256]{0} parameter(196)
  parameter.198 = f32[256]{0} parameter(197)
  parameter.199 = f32[256]{0} parameter(198)
  parameter.200 = f32[256]{0} parameter(199)
  parameter.201 = f32[1024]{0} parameter(200)
  parameter.202 = f32[1024]{0} parameter(201)
  parameter.203 = f32[1,1,1024,256]{3,2,1,0} parameter(202)
  parameter.204 = f32[3,3,256,256]{3,2,1,0} parameter(203)
  parameter.205 = f32[1,1,256,1024]{3,2,1,0} parameter(204)
  parameter.206 = f32[256]{0} parameter(205)
  parameter.207 = f32[256]{0} parameter(206)
  parameter.208 = f32[256]{0} parameter(207)
  parameter.209 = f32[256]{0} parameter(208)
  parameter.210 = f32[1024]{0} parameter(209)
  parameter.211 = f32[1024]{0} parameter(210)
  parameter.212 = f32[1,1,1024,256]{3,2,1,0} parameter(211)
  parameter.213 = f32[3,3,256,256]{3,2,1,0} parameter(212)
  parameter.214 = f32[1,1,256,1024]{3,2,1,0} parameter(213)
  parameter.215 = f32[512]{0} parameter(214)
  parameter.216 = f32[512]{0} parameter(215)
  parameter.217 = f32[512]{0} parameter(216)
  parameter.218 = f32[512]{0} parameter(217)
  parameter.219 = f32[2048]{0} parameter(218)
  parameter.220 = f32[2048]{0} parameter(219)
  parameter.221 = f32[1,1,1024,512]{3,2,1,0} parameter(220)
  parameter.222 = f32[3,3,512,512]{3,2,1,0} parameter(221)
  parameter.223 = f32[1,1,512,2048]{3,2,1,0} parameter(222)
  parameter.224 = f32[1,1,1024,2048]{3,2,1,0} parameter(223)
  parameter.225 = f32[2048]{0} parameter(224)
  parameter.226 = f32[2048]{0} parameter(225)
  parameter.227 = f32[512]{0} parameter(226)
  parameter.228 = f32[512]{0} parameter(227)
  parameter.229 = f32[512]{0} parameter(228)
  parameter.230 = f32[512]{0} parameter(229)
  parameter.231 = f32[2048]{0} parameter(230)
  parameter.232 = f32[2048]{0} parameter(231)
  parameter.233 = f32[1,1,2048,512]{3,2,1,0} parameter(232)
  parameter.234 = f32[3,3,512,512]{3,2,1,0} parameter(233)
  parameter.235 = f32[1,1,512,2048]{3,2,1,0} parameter(234)
  parameter.236 = f32[512]{0} parameter(235)
  parameter.237 = f32[512]{0} parameter(236)
  parameter.238 = f32[512]{0} parameter(237)
  parameter.239 = f32[512]{0} parameter(238)
  parameter.240 = f32[2048]{0} parameter(239)
  parameter.241 = f32[2048]{0} parameter(240)
  parameter.242 = f32[1,1,2048,512]{3,2,1,0} parameter(241)
  parameter.243 = f32[3,3,512,512]{3,2,1,0} parameter(242)
  parameter.244 = f32[1,1,512,2048]{3,2,1,0} parameter(243)
  parameter.245 = f32[64]{0} parameter(244)
  parameter.246 = f32[64]{0} parameter(245)
  parameter.247 = f32[64]{0} parameter(246)
  parameter.248 = f32[64]{0} parameter(247)
  parameter.249 = f32[256]{0} parameter(248)
  parameter.250 = f32[256]{0} parameter(249)
  parameter.251 = f32[1,1,256,64]{3,2,1,0} parameter(250)
  parameter.252 = f32[3,3,64,64]{3,2,1,0} parameter(251)
  parameter.253 = f32[1,1,64,256]{3,2,1,0} parameter(252)
  parameter.254 = f32[128]{0} parameter(253)
  parameter.255 = f32[128]{0} parameter(254)
  parameter.256 = f32[128]{0} parameter(255)
  parameter.257 = f32[128]{0} parameter(256)
  parameter.258 = f32[512]{0} parameter(257)
  parameter.259 = f32[512]{0} parameter(258)
  parameter.260 = f32[1,1,256,128]{3,2,1,0} parameter(259)
  parameter.261 = f32[3,3,128,128]{3,2,1,0} parameter(260)
  parameter.262 = f32[1,1,128,512]{3,2,1,0} parameter(261)
  parameter.263 = f32[1,1,256,512]{3,2,1,0} parameter(262)
  parameter.264 = f32[512]{0} parameter(263)
  parameter.265 = f32[512]{0} parameter(264)
  parameter.266 = f32[128]{0} parameter(265)
  parameter.267 = f32[128]{0} parameter(266)
  parameter.268 = f32[128]{0} parameter(267)
  parameter.269 = f32[128]{0} parameter(268)
  parameter.270 = f32[512]{0} parameter(269)
  parameter.271 = f32[512]{0} parameter(270)
  parameter.272 = f32[1,1,512,128]{3,2,1,0} parameter(271)
  parameter.273 = f32[3,3,128,128]{3,2,1,0} parameter(272)
  parameter.274 = f32[1,1,128,512]{3,2,1,0} parameter(273)
  parameter.275 = f32[128]{0} parameter(274)
  parameter.276 = f32[128]{0} parameter(275)
  parameter.277 = f32[128]{0} parameter(276)
  parameter.278 = f32[128]{0} parameter(277)
  parameter.279 = f32[512]{0} parameter(278)
  parameter.280 = f32[512]{0} parameter(279)
  parameter.281 = f32[1,1,512,128]{3,2,1,0} parameter(280)
  parameter.282 = f32[3,3,128,128]{3,2,1,0} parameter(281)
  parameter.283 = f32[1,1,128,512]{3,2,1,0} parameter(282)
  parameter.284 = f32[128]{0} parameter(283)
  parameter.285 = f32[128]{0} parameter(284)
  parameter.286 = f32[128]{0} parameter(285)
  parameter.287 = f32[128]{0} parameter(286)
  parameter.288 = f32[512]{0} parameter(287)
  parameter.289 = f32[512]{0} parameter(288)
  parameter.290 = f32[1,1,512,128]{3,2,1,0} parameter(289)
  parameter.291 = f32[3,3,128,128]{3,2,1,0} parameter(290)
  parameter.292 = f32[1,1,128,512]{3,2,1,0} parameter(291)
  parameter.293 = f32[256]{0} parameter(292)
  parameter.294 = f32[256]{0} parameter(293)
  parameter.295 = f32[256]{0} parameter(294)
  parameter.296 = f32[256]{0} parameter(295)
  parameter.297 = f32[1024]{0} parameter(296)
  parameter.298 = f32[1024]{0} parameter(297)
  parameter.299 = f32[1,1,512,256]{3,2,1,0} parameter(298)
  parameter.300 = f32[3,3,256,256]{3,2,1,0} parameter(299)
  parameter.301 = f32[1,1,256,1024]{3,2,1,0} parameter(300)
  parameter.302 = f32[1,1,512,1024]{3,2,1,0} parameter(301)
  parameter.303 = f32[1024]{0} parameter(302)
  parameter.304 = f32[1024]{0} parameter(303)
  parameter.305 = f32[256]{0} parameter(304)
  parameter.306 = f32[256]{0} parameter(305)
  parameter.307 = f32[256]{0} parameter(306)
  parameter.308 = f32[256]{0} parameter(307)
  parameter.309 = f32[1024]{0} parameter(308)
  parameter.310 = f32[1024]{0} parameter(309)
  parameter.311 = f32[1,1,1024,256]{3,2,1,0} parameter(310)
  parameter.312 = f32[3,3,256,256]{3,2,1,0} parameter(311)
  parameter.313 = f32[1,1,256,1024]{3,2,1,0} parameter(312)
  parameter.314 = f32[256]{0} parameter(313)
  parameter.315 = f32[256]{0} parameter(314)
  parameter.316 = f32[256]{0} parameter(315)
  parameter.317 = f32[256]{0} parameter(316)
  parameter.318 = f32[1024]{0} parameter(317)
  parameter.319 = f32[1024]{0} parameter(318)
  parameter.320 = f32[1,1,1024,256]{3,2,1,0} parameter(319)
  parameter.321 = f32[3,3,256,256]{3,2,1,0} parameter(320)
  parameter.322 = f32[1,1,256,1024]{3,2,1,0} parameter(321)
  parameter.323 = f32[1000]{0} parameter(322)
  parameter.324 = f32[2048,1000]{1,0} parameter(323)
  parameter.325 = f32[64]{0} parameter(324)
  parameter.326 = f32[64]{0} parameter(325)
  parameter.327 = f32[7,7,3,64]{3,2,1,0} parameter(326)
  parameter.328 = f32[64]{0} parameter(327)
  parameter.329 = f32[64]{0} parameter(328)
  parameter.330 = f32[64]{0} parameter(329)
  parameter.331 = f32[64]{0} parameter(330)
  parameter.332 = f32[256]{0} parameter(331)
  parameter.333 = f32[256]{0} parameter(332)
  parameter.334 = f32[1,1,64,64]{3,2,1,0} parameter(333)
  parameter.335 = f32[3,3,64,64]{3,2,1,0} parameter(334)
  parameter.336 = f32[1,1,64,256]{3,2,1,0} parameter(335)
  parameter.337 = f32[1,1,64,256]{3,2,1,0} parameter(336)
  parameter.338 = f32[256]{0} parameter(337)
  parameter.339 = f32[256]{0} parameter(338)
  parameter.340 = f32[64]{0} parameter(339)
  parameter.341 = f32[64]{0} parameter(340)
  parameter.342 = f32[64]{0} parameter(341)
  parameter.343 = f32[64]{0} parameter(342)
  parameter.344 = f32[256]{0} parameter(343)
  parameter.345 = f32[256]{0} parameter(344)
  parameter.346 = f32[1,1,256,64]{3,2,1,0} parameter(345)
  parameter.347 = f32[3,3,64,64]{3,2,1,0} parameter(346)
  parameter.348 = f32[1,1,64,256]{3,2,1,0} parameter(347)
  parameter.349 = f32[256]{0} parameter(348)
  parameter.350 = f32[256]{0} parameter(349)
  parameter.351 = f32[256]{0} parameter(350)
  parameter.352 = f32[256]{0} parameter(351)
  parameter.353 = f32[1024]{0} parameter(352)
  parameter.354 = f32[1024]{0} parameter(353)
  parameter.355 = f32[1,1,1024,256]{3,2,1,0} parameter(354)
  parameter.356 = f32[3,3,256,256]{3,2,1,0} parameter(355)
  parameter.357 = f32[1,1,256,1024]{3,2,1,0} parameter(356)
  parameter.358 = f32[256]{0} parameter(357)
  parameter.359 = f32[256]{0} parameter(358)
  parameter.360 = f32[256]{0} parameter(359)
  parameter.361 = f32[256]{0} parameter(360)
  parameter.362 = f32[1024]{0} parameter(361)
  parameter.363 = f32[1024]{0} parameter(362)
  parameter.364 = f32[1,1,1024,256]{3,2,1,0} parameter(363)
  parameter.365 = f32[3,3,256,256]{3,2,1,0} parameter(364)
  parameter.366 = f32[1,1,256,1024]{3,2,1,0} parameter(365)
  parameter.367 = f32[256]{0} parameter(366)
  parameter.368 = f32[256]{0} parameter(367)
  parameter.369 = f32[256]{0} parameter(368)
  parameter.370 = f32[256]{0} parameter(369)
  parameter.371 = f32[1024]{0} parameter(370)
  parameter.372 = f32[1024]{0} parameter(371)
  parameter.373 = f32[1,1,1024,256]{3,2,1,0} parameter(372)
  parameter.374 = f32[3,3,256,256]{3,2,1,0} parameter(373)
  parameter.375 = f32[1,1,256,1024]{3,2,1,0} parameter(374)
  parameter.376 = f32[512]{0} parameter(375)
  parameter.377 = f32[512]{0} parameter(376)
  parameter.378 = f32[512]{0} parameter(377)
  parameter.379 = f32[512]{0} parameter(378)
  parameter.380 = f32[2048]{0} parameter(379)
  parameter.381 = f32[2048]{0} parameter(380)
  parameter.382 = f32[1,1,1024,512]{3,2,1,0} parameter(381)
  parameter.383 = f32[3,3,512,512]{3,2,1,0} parameter(382)
  parameter.384 = f32[1,1,512,2048]{3,2,1,0} parameter(383)
  parameter.385 = f32[1,1,1024,2048]{3,2,1,0} parameter(384)
  parameter.386 = f32[2048]{0} parameter(385)
  parameter.387 = f32[2048]{0} parameter(386)
  parameter.388 = f32[512]{0} parameter(387)
  parameter.389 = f32[512]{0} parameter(388)
  parameter.390 = f32[512]{0} parameter(389)
  parameter.391 = f32[512]{0} parameter(390)
  parameter.392 = f32[2048]{0} parameter(391)
  parameter.393 = f32[2048]{0} parameter(392)
  parameter.394 = f32[1,1,2048,512]{3,2,1,0} parameter(393)
  parameter.395 = f32[3,3,512,512]{3,2,1,0} parameter(394)
  parameter.396 = f32[1,1,512,2048]{3,2,1,0} parameter(395)
  parameter.397 = f32[512]{0} parameter(396)
  parameter.398 = f32[512]{0} parameter(397)
  parameter.399 = f32[512]{0} parameter(398)
  parameter.400 = f32[512]{0} parameter(399)
  parameter.401 = f32[2048]{0} parameter(400)
  parameter.402 = f32[2048]{0} parameter(401)
  parameter.403 = f32[1,1,2048,512]{3,2,1,0} parameter(402)
  parameter.404 = f32[3,3,512,512]{3,2,1,0} parameter(403)
  parameter.405 = f32[1,1,512,2048]{3,2,1,0} parameter(404)
  parameter.406 = f32[64]{0} parameter(405)
  parameter.407 = f32[64]{0} parameter(406)
  parameter.408 = f32[64]{0} parameter(407)
  parameter.409 = f32[64]{0} parameter(408)
  parameter.410 = f32[256]{0} parameter(409)
  parameter.411 = f32[256]{0} parameter(410)
  parameter.412 = f32[1,1,256,64]{3,2,1,0} parameter(411)
  parameter.413 = f32[3,3,64,64]{3,2,1,0} parameter(412)
  parameter.414 = f32[1,1,64,256]{3,2,1,0} parameter(413)
  parameter.415 = f32[128]{0} parameter(414)
  parameter.416 = f32[128]{0} parameter(415)
  parameter.417 = f32[128]{0} parameter(416)
  parameter.418 = f32[128]{0} parameter(417)
  parameter.419 = f32[512]{0} parameter(418)
  parameter.420 = f32[512]{0} parameter(419)
  parameter.421 = f32[1,1,256,128]{3,2,1,0} parameter(420)
  parameter.422 = f32[3,3,128,128]{3,2,1,0} parameter(421)
  parameter.423 = f32[1,1,128,512]{3,2,1,0} parameter(422)
  parameter.424 = f32[1,1,256,512]{3,2,1,0} parameter(423)
  parameter.425 = f32[512]{0} parameter(424)
  parameter.426 = f32[512]{0} parameter(425)
  parameter.427 = f32[128]{0} parameter(426)
  parameter.428 = f32[128]{0} parameter(427)
  parameter.429 = f32[128]{0} parameter(428)
  parameter.430 = f32[128]{0} parameter(429)
  parameter.431 = f32[512]{0} parameter(430)
  parameter.432 = f32[512]{0} parameter(431)
  parameter.433 = f32[1,1,512,128]{3,2,1,0} parameter(432)
  parameter.434 = f32[3,3,128,128]{3,2,1,0} parameter(433)
  parameter.435 = f32[1,1,128,512]{3,2,1,0} parameter(434)
  parameter.436 = f32[128]{0} parameter(435)
  parameter.437 = f32[128]{0} parameter(436)
  parameter.438 = f32[128]{0} parameter(437)
  parameter.439 = f32[128]{0} parameter(438)
  parameter.440 = f32[512]{0} parameter(439)
  parameter.441 = f32[512]{0} parameter(440)
  parameter.442 = f32[1,1,512,128]{3,2,1,0} parameter(441)
  parameter.443 = f32[3,3,128,128]{3,2,1,0} parameter(442)
  parameter.444 = f32[1,1,128,512]{3,2,1,0} parameter(443)
  parameter.445 = f32[128]{0} parameter(444)
  parameter.446 = f32[128]{0} parameter(445)
  parameter.447 = f32[128]{0} parameter(446)
  parameter.448 = f32[128]{0} parameter(447)
  parameter.449 = f32[512]{0} parameter(448)
  parameter.450 = f32[512]{0} parameter(449)
  parameter.451 = f32[1,1,512,128]{3,2,1,0} parameter(450)
  parameter.452 = f32[3,3,128,128]{3,2,1,0} parameter(451)
  parameter.453 = f32[1,1,128,512]{3,2,1,0} parameter(452)
  parameter.454 = f32[256]{0} parameter(453)
  parameter.455 = f32[256]{0} parameter(454)
  parameter.456 = f32[256]{0} parameter(455)
  parameter.457 = f32[256]{0} parameter(456)
  parameter.458 = f32[1024]{0} parameter(457)
  parameter.459 = f32[1024]{0} parameter(458)
  parameter.460 = f32[1,1,512,256]{3,2,1,0} parameter(459)
  parameter.461 = f32[3,3,256,256]{3,2,1,0} parameter(460)
  parameter.462 = f32[1,1,256,1024]{3,2,1,0} parameter(461)
  parameter.463 = f32[1,1,512,1024]{3,2,1,0} parameter(462)
  parameter.464 = f32[1024]{0} parameter(463)
  parameter.465 = f32[1024]{0} parameter(464)
  parameter.466 = f32[256]{0} parameter(465)
  parameter.467 = f32[256]{0} parameter(466)
  parameter.468 = f32[256]{0} parameter(467)
  parameter.469 = f32[256]{0} parameter(468)
  parameter.470 = f32[1024]{0} parameter(469)
  parameter.471 = f32[1024]{0} parameter(470)
  parameter.472 = f32[1,1,1024,256]{3,2,1,0} parameter(471)
  parameter.473 = f32[3,3,256,256]{3,2,1,0} parameter(472)
  parameter.474 = f32[1,1,256,1024]{3,2,1,0} parameter(473)
  parameter.475 = f32[256]{0} parameter(474)
  parameter.476 = f32[256]{0} parameter(475)
  parameter.477 = f32[256]{0} parameter(476)
  parameter.478 = f32[256]{0} parameter(477)
  parameter.479 = f32[1024]{0} parameter(478)
  parameter.480 = f32[1024]{0} parameter(479)
  parameter.481 = f32[1,1,1024,256]{3,2,1,0} parameter(480)
  parameter.482 = f32[3,3,256,256]{3,2,1,0} parameter(481)
  parameter.483 = f32[1,1,256,1024]{3,2,1,0} parameter(482)
  parameter.484 = f32[1000]{0} parameter(483)
  parameter.485 = f32[2048,1000]{1,0} parameter(484)
  parameter.486 = f32[64]{0} parameter(485)
  parameter.487 = f32[64]{0} parameter(486)
  parameter.488 = f32[7,7,3,64]{3,2,1,0} parameter(487)
  parameter.595 = f32[1,1000]{1,0} parameter(594)
  constant.596 = pred[] constant(false)
  constant.669 = pred[] constant(false)
  constant.678 = bf16[] constant(0)
  broadcast.679 = bf16[128,112,112,64]{3,2,1,0} broadcast(constant.678), dimensions={}
  constant.757 = pred[] constant(false)
  constant.766 = bf16[] constant(0)
  broadcast.767 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.766), dimensions={}
  constant.839 = pred[] constant(false)
  constant.848 = bf16[] constant(0)
  broadcast.849 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.848), dimensions={}
  constant.993 = pred[] constant(false)
  constant.1002 = bf16[] constant(0)
  broadcast.1003 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1002), dimensions={}
  constant.1075 = pred[] constant(false)
  constant.1084 = bf16[] constant(0)
  broadcast.1085 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1084), dimensions={}
  constant.1157 = pred[] constant(false)
  constant.1166 = bf16[] constant(0)
  broadcast.1167 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1166), dimensions={}
  constant.1240 = pred[] constant(false)
  constant.1249 = bf16[] constant(0)
  broadcast.1250 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1249), dimensions={}
  constant.1322 = pred[] constant(false)
  constant.1331 = bf16[] constant(0)
  broadcast.1332 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1331), dimensions={}
  constant.1404 = pred[] constant(false)
  constant.1413 = bf16[] constant(0)
  broadcast.1414 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1413), dimensions={}
  constant.1487 = pred[] constant(false)
  constant.1496 = bf16[] constant(0)
  broadcast.1497 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1496), dimensions={}
  constant.1569 = pred[] constant(false)
  constant.1578 = bf16[] constant(0)
  broadcast.1579 = bf16[128,56,56,128]{3,2,1,0} broadcast(constant.1578), dimensions={}
  constant.1651 = pred[] constant(false)
  constant.1660 = bf16[] constant(0)
  broadcast.1661 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1660), dimensions={}
  constant.1805 = pred[] constant(false)
  constant.1814 = bf16[] constant(0)
  broadcast.1815 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.1814), dimensions={}
  constant.1887 = pred[] constant(false)
  constant.1896 = bf16[] constant(0)
  broadcast.1897 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1896), dimensions={}
  constant.1969 = pred[] constant(false)
  constant.1978 = bf16[] constant(0)
  broadcast.1979 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1978), dimensions={}
  constant.2052 = pred[] constant(false)
  constant.2061 = bf16[] constant(0)
  broadcast.2062 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2061), dimensions={}
  constant.2134 = pred[] constant(false)
  constant.2143 = bf16[] constant(0)
  broadcast.2144 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2143), dimensions={}
  constant.2216 = pred[] constant(false)
  constant.2225 = bf16[] constant(0)
  broadcast.2226 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2225), dimensions={}
  constant.2299 = pred[] constant(false)
  constant.2308 = bf16[] constant(0)
  broadcast.2309 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2308), dimensions={}
  constant.2381 = pred[] constant(false)
  constant.2390 = bf16[] constant(0)
  broadcast.2391 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2390), dimensions={}
  constant.2463 = pred[] constant(false)
  constant.2472 = bf16[] constant(0)
  broadcast.2473 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2472), dimensions={}
  constant.2546 = pred[] constant(false)
  constant.2555 = bf16[] constant(0)
  broadcast.2556 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2555), dimensions={}
  constant.2628 = pred[] constant(false)
  constant.2637 = bf16[] constant(0)
  broadcast.2638 = bf16[128,28,28,256]{3,2,1,0} broadcast(constant.2637), dimensions={}
  constant.2710 = pred[] constant(false)
  constant.2719 = bf16[] constant(0)
  broadcast.2720 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.2719), dimensions={}
  constant.2864 = pred[] constant(false)
  constant.2873 = bf16[] constant(0)
  broadcast.2874 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.2873), dimensions={}
  constant.2946 = pred[] constant(false)
  constant.2955 = bf16[] constant(0)
  broadcast.2956 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.2955), dimensions={}
  constant.3028 = pred[] constant(false)
  constant.3037 = bf16[] constant(0)
  broadcast.3038 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3037), dimensions={}
  constant.3111 = pred[] constant(false)
  constant.3120 = bf16[] constant(0)
  broadcast.3121 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3120), dimensions={}
  constant.3193 = pred[] constant(false)
  constant.3202 = bf16[] constant(0)
  broadcast.3203 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3202), dimensions={}
  constant.3275 = pred[] constant(false)
  constant.3284 = bf16[] constant(0)
  broadcast.3285 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3284), dimensions={}
  constant.3358 = pred[] constant(false)
  constant.3367 = bf16[] constant(0)
  broadcast.3368 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3367), dimensions={}
  constant.3440 = pred[] constant(false)
  constant.3449 = bf16[] constant(0)
  broadcast.3450 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3449), dimensions={}
  constant.3522 = pred[] constant(false)
  constant.3531 = bf16[] constant(0)
  broadcast.3532 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3531), dimensions={}
  constant.3605 = pred[] constant(false)
  constant.3614 = bf16[] constant(0)
  broadcast.3615 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3614), dimensions={}
  constant.3687 = pred[] constant(false)
  constant.3696 = bf16[] constant(0)
  broadcast.3697 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3696), dimensions={}
  constant.3769 = pred[] constant(false)
  constant.3778 = bf16[] constant(0)
  broadcast.3779 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3778), dimensions={}
  constant.3852 = pred[] constant(false)
  constant.3861 = bf16[] constant(0)
  broadcast.3862 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3861), dimensions={}
  constant.3934 = pred[] constant(false)
  constant.3943 = bf16[] constant(0)
  broadcast.3944 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3943), dimensions={}
  constant.4016 = pred[] constant(false)
  constant.4025 = bf16[] constant(0)
  broadcast.4026 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4025), dimensions={}
  constant.4099 = pred[] constant(false)
  constant.4108 = bf16[] constant(0)
  broadcast.4109 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.4108), dimensions={}
  constant.4181 = pred[] constant(false)
  constant.4190 = bf16[] constant(0)
  broadcast.4191 = bf16[128,14,14,512]{3,2,1,0} broadcast(constant.4190), dimensions={}
  constant.4263 = pred[] constant(false)
  constant.4272 = bf16[] constant(0)
  broadcast.4273 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4272), dimensions={}
  constant.4417 = pred[] constant(false)
  constant.4426 = bf16[] constant(0)
  broadcast.4427 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4426), dimensions={}
  constant.4499 = pred[] constant(false)
  constant.4508 = bf16[] constant(0)
  broadcast.4509 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4508), dimensions={}
  constant.4581 = pred[] constant(false)
  constant.4590 = bf16[] constant(0)
  broadcast.4591 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4590), dimensions={}
  constant.4664 = pred[] constant(false)
  constant.4673 = bf16[] constant(0)
  broadcast.4674 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4673), dimensions={}
  constant.4746 = pred[] constant(false)
  constant.4755 = bf16[] constant(0)
  broadcast.4756 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4755), dimensions={}
  constant.4828 = pred[] constant(false)
  constant.4837 = bf16[] constant(0)
  broadcast.4838 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4837), dimensions={}
  constant.4911 = pred[] constant(false)
  constant.4920 = bf16[] constant(0)
  broadcast.4921 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4920), dimensions={}
  parameter.163 = f32[128,224,224,3]{3,2,1,0} parameter(162)
  convert.597 = bf16[128,224,224,3]{3,2,1,0} convert(parameter.163)
  parameter.161 = f32[7,7,3,64]{3,2,1,0} parameter(160)
  convert.598 = bf16[7,7,3,64]{3,2,1,0} convert(parameter.161)
  convolution.599 = bf16[128,112,112,64]{3,2,1,0} convolution(convert.597, convert.598), window={size=7x7 stride=2x2 pad=3_3x3_3}, dim_labels=b01f_01io->b01f
  convert.600 = f32[128,112,112,64]{3,2,1,0} convert(convolution.599)
  constant.601 = f32[] constant(0)
  reduce.606 = f32[64]{0} reduce(convert.600, constant.601), dimensions={0,1,2}, to_apply=primitive_computation_add.602
  constant.607 = s32[] constant(1605632)
  convert.608 = f32[] convert(constant.607)
  broadcast.609 = f32[64]{0} broadcast(convert.608), dimensions={}
  divide.610 = f32[64]{0} divide(reduce.606, broadcast.609)
  reshape.644 = f32[1,1,1,64]{3,2,1,0} reshape(divide.610)
  reshape.645 = f32[64]{0} reshape(reshape.644)
  broadcast.646 = f32[128,112,112,64]{3,2,1,0} broadcast(reshape.645), dimensions={3}
  subtract.647 = f32[128,112,112,64]{3,2,1,0} subtract(convert.600, broadcast.646)
  multiply.611 = f32[128,112,112,64]{3,2,1,0} multiply(convert.600, convert.600)
  constant.615 = f32[] constant(0)
  reduce.620 = f32[64]{0} reduce(multiply.611, constant.615), dimensions={0,1,2}, to_apply=primitive_computation_add.616
  constant.621 = s32[] constant(1605632)
  convert.622 = f32[] convert(constant.621)
  broadcast.623 = f32[64]{0} broadcast(convert.622), dimensions={}
  divide.624 = f32[64]{0} divide(reduce.620, broadcast.623)
  multiply.625 = f32[64]{0} multiply(divide.610, divide.610)
  subtract.629 = f32[64]{0} subtract(divide.624, multiply.625)
  constant.648 = f32[] constant(1e-05)
  broadcast.649 = f32[64]{0} broadcast(constant.648), dimensions={}
  add.650 = f32[64]{0} add(subtract.629, broadcast.649)
  rsqrt.651 = f32[64]{0} rsqrt(add.650)
  broadcast.659 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.651), dimensions={3}
  parameter.160 = f32[64]{0} parameter(159)
  reshape.658 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.160)
  multiply.660 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.659, reshape.658)
  reshape.661 = f32[64]{0} reshape(multiply.660)
  broadcast.662 = f32[128,112,112,64]{3,2,1,0} broadcast(reshape.661), dimensions={3}
  multiply.663 = f32[128,112,112,64]{3,2,1,0} multiply(subtract.647, broadcast.662)
  parameter.159 = f32[64]{0} parameter(158)
  reshape.664 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.159)
  reshape.665 = f32[64]{0} reshape(reshape.664)
  broadcast.666 = f32[128,112,112,64]{3,2,1,0} broadcast(reshape.665), dimensions={3}
  add.667 = f32[128,112,112,64]{3,2,1,0} add(multiply.663, broadcast.666)
  convert.668 = bf16[128,112,112,64]{3,2,1,0} convert(add.667)
  constant.670 = bf16[] constant(0)
  broadcast.671 = bf16[128,112,112,64]{3,2,1,0} broadcast(constant.670), dimensions={}
  maximum.672 = bf16[128,112,112,64]{3,2,1,0} maximum(convert.668, broadcast.671)
  tuple.673 = (bf16[128,112,112,64]{3,2,1,0}) tuple(maximum.672)
  get-tuple-element.674 = bf16[128,112,112,64]{3,2,1,0} get-tuple-element(tuple.673), index=0
  constant.680 = bf16[] constant(-inf)
  reduce-window.685 = bf16[128,56,56,64]{3,2,1,0} reduce-window(get-tuple-element.674, constant.680), window={size=1x3x3x1 stride=1x2x2x1 pad=0_0x0_1x0_1x0_0}, to_apply=primitive_computation_max.681
  parameter.10 = f32[1,1,64,256]{3,2,1,0} parameter(9)
  convert.921 = bf16[1,1,64,256]{3,2,1,0} convert(parameter.10)
  convolution.922 = bf16[128,56,56,256]{3,2,1,0} convolution(reduce-window.685, convert.921), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.923 = f32[128,56,56,256]{3,2,1,0} convert(convolution.922)
  constant.924 = f32[] constant(0)
  reduce.929 = f32[256]{0} reduce(convert.923, constant.924), dimensions={0,1,2}, to_apply=primitive_computation_add.925
  constant.930 = s32[] constant(401408)
  convert.931 = f32[] convert(constant.930)
  broadcast.932 = f32[256]{0} broadcast(convert.931), dimensions={}
  divide.933 = f32[256]{0} divide(reduce.929, broadcast.932)
  reshape.967 = f32[1,1,1,256]{3,2,1,0} reshape(divide.933)
  reshape.968 = f32[256]{0} reshape(reshape.967)
  broadcast.969 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.968), dimensions={3}
  subtract.970 = f32[128,56,56,256]{3,2,1,0} subtract(convert.923, broadcast.969)
  multiply.934 = f32[128,56,56,256]{3,2,1,0} multiply(convert.923, convert.923)
  constant.938 = f32[] constant(0)
  reduce.943 = f32[256]{0} reduce(multiply.934, constant.938), dimensions={0,1,2}, to_apply=primitive_computation_add.939
  constant.944 = s32[] constant(401408)
  convert.945 = f32[] convert(constant.944)
  broadcast.946 = f32[256]{0} broadcast(convert.945), dimensions={}
  divide.947 = f32[256]{0} divide(reduce.943, broadcast.946)
  multiply.948 = f32[256]{0} multiply(divide.933, divide.933)
  subtract.952 = f32[256]{0} subtract(divide.947, multiply.948)
  constant.971 = f32[] constant(1e-05)
  broadcast.972 = f32[256]{0} broadcast(constant.971), dimensions={}
  add.973 = f32[256]{0} add(subtract.952, broadcast.972)
  rsqrt.974 = f32[256]{0} rsqrt(add.973)
  broadcast.982 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.974), dimensions={3}
  parameter.12 = f32[256]{0} parameter(11)
  reshape.981 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.12)
  multiply.983 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.982, reshape.981)
  reshape.984 = f32[256]{0} reshape(multiply.983)
  broadcast.985 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.984), dimensions={3}
  multiply.986 = f32[128,56,56,256]{3,2,1,0} multiply(subtract.970, broadcast.985)
  parameter.11 = f32[256]{0} parameter(10)
  reshape.987 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.11)
  reshape.988 = f32[256]{0} reshape(reshape.987)
  broadcast.989 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.988), dimensions={3}
  add.990 = f32[128,56,56,256]{3,2,1,0} add(multiply.986, broadcast.989)
  convert.991 = bf16[128,56,56,256]{3,2,1,0} convert(add.990)
  parameter.7 = f32[1,1,64,64]{3,2,1,0} parameter(6)
  convert.686 = bf16[1,1,64,64]{3,2,1,0} convert(parameter.7)
  convolution.687 = bf16[128,56,56,64]{3,2,1,0} convolution(reduce-window.685, convert.686), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.688 = f32[128,56,56,64]{3,2,1,0} convert(convolution.687)
  constant.689 = f32[] constant(0)
  reduce.694 = f32[64]{0} reduce(convert.688, constant.689), dimensions={0,1,2}, to_apply=primitive_computation_add.690
  constant.695 = s32[] constant(401408)
  convert.696 = f32[] convert(constant.695)
  broadcast.697 = f32[64]{0} broadcast(convert.696), dimensions={}
  divide.698 = f32[64]{0} divide(reduce.694, broadcast.697)
  reshape.732 = f32[1,1,1,64]{3,2,1,0} reshape(divide.698)
  reshape.733 = f32[64]{0} reshape(reshape.732)
  broadcast.734 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.733), dimensions={3}
  subtract.735 = f32[128,56,56,64]{3,2,1,0} subtract(convert.688, broadcast.734)
  multiply.699 = f32[128,56,56,64]{3,2,1,0} multiply(convert.688, convert.688)
  constant.703 = f32[] constant(0)
  reduce.708 = f32[64]{0} reduce(multiply.699, constant.703), dimensions={0,1,2}, to_apply=primitive_computation_add.704
  constant.709 = s32[] constant(401408)
  convert.710 = f32[] convert(constant.709)
  broadcast.711 = f32[64]{0} broadcast(convert.710), dimensions={}
  divide.712 = f32[64]{0} divide(reduce.708, broadcast.711)
  multiply.713 = f32[64]{0} multiply(divide.698, divide.698)
  subtract.717 = f32[64]{0} subtract(divide.712, multiply.713)
  constant.736 = f32[] constant(1e-05)
  broadcast.737 = f32[64]{0} broadcast(constant.736), dimensions={}
  add.738 = f32[64]{0} add(subtract.717, broadcast.737)
  rsqrt.739 = f32[64]{0} rsqrt(add.738)
  broadcast.747 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.739), dimensions={3}
  parameter.2 = f32[64]{0} parameter(1)
  reshape.746 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.2)
  multiply.748 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.747, reshape.746)
  reshape.749 = f32[64]{0} reshape(multiply.748)
  broadcast.750 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.749), dimensions={3}
  multiply.751 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.735, broadcast.750)
  parameter.1 = f32[64]{0} parameter(0)
  reshape.752 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.1)
  reshape.753 = f32[64]{0} reshape(reshape.752)
  broadcast.754 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.753), dimensions={3}
  add.755 = f32[128,56,56,64]{3,2,1,0} add(multiply.751, broadcast.754)
  convert.756 = bf16[128,56,56,64]{3,2,1,0} convert(add.755)
  constant.758 = bf16[] constant(0)
  broadcast.759 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.758), dimensions={}
  maximum.760 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.756, broadcast.759)
  tuple.761 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.760)
  get-tuple-element.762 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.761), index=0
  parameter.8 = f32[3,3,64,64]{3,2,1,0} parameter(7)
  convert.768 = bf16[3,3,64,64]{3,2,1,0} convert(parameter.8)
  convolution.769 = bf16[128,56,56,64]{3,2,1,0} convolution(get-tuple-element.762, convert.768), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.770 = f32[128,56,56,64]{3,2,1,0} convert(convolution.769)
  constant.771 = f32[] constant(0)
  reduce.776 = f32[64]{0} reduce(convert.770, constant.771), dimensions={0,1,2}, to_apply=primitive_computation_add.772
  constant.777 = s32[] constant(401408)
  convert.778 = f32[] convert(constant.777)
  broadcast.779 = f32[64]{0} broadcast(convert.778), dimensions={}
  divide.780 = f32[64]{0} divide(reduce.776, broadcast.779)
  reshape.814 = f32[1,1,1,64]{3,2,1,0} reshape(divide.780)
  reshape.815 = f32[64]{0} reshape(reshape.814)
  broadcast.816 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.815), dimensions={3}
  subtract.817 = f32[128,56,56,64]{3,2,1,0} subtract(convert.770, broadcast.816)
  multiply.781 = f32[128,56,56,64]{3,2,1,0} multiply(convert.770, convert.770)
  constant.785 = f32[] constant(0)
  reduce.790 = f32[64]{0} reduce(multiply.781, constant.785), dimensions={0,1,2}, to_apply=primitive_computation_add.786
  constant.791 = s32[] constant(401408)
  convert.792 = f32[] convert(constant.791)
  broadcast.793 = f32[64]{0} broadcast(convert.792), dimensions={}
  divide.794 = f32[64]{0} divide(reduce.790, broadcast.793)
  multiply.795 = f32[64]{0} multiply(divide.780, divide.780)
  subtract.799 = f32[64]{0} subtract(divide.794, multiply.795)
  constant.818 = f32[] constant(1e-05)
  broadcast.819 = f32[64]{0} broadcast(constant.818), dimensions={}
  add.820 = f32[64]{0} add(subtract.799, broadcast.819)
  rsqrt.821 = f32[64]{0} rsqrt(add.820)
  broadcast.829 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.821), dimensions={3}
  parameter.4 = f32[64]{0} parameter(3)
  reshape.828 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.4)
  multiply.830 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.829, reshape.828)
  reshape.831 = f32[64]{0} reshape(multiply.830)
  broadcast.832 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.831), dimensions={3}
  multiply.833 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.817, broadcast.832)
  parameter.3 = f32[64]{0} parameter(2)
  reshape.834 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.3)
  reshape.835 = f32[64]{0} reshape(reshape.834)
  broadcast.836 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.835), dimensions={3}
  add.837 = f32[128,56,56,64]{3,2,1,0} add(multiply.833, broadcast.836)
  convert.838 = bf16[128,56,56,64]{3,2,1,0} convert(add.837)
  constant.840 = bf16[] constant(0)
  broadcast.841 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.840), dimensions={}
  maximum.842 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.838, broadcast.841)
  tuple.843 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.842)
  get-tuple-element.844 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.843), index=0
  parameter.9 = f32[1,1,64,256]{3,2,1,0} parameter(8)
  convert.850 = bf16[1,1,64,256]{3,2,1,0} convert(parameter.9)
  convolution.851 = bf16[128,56,56,256]{3,2,1,0} convolution(get-tuple-element.844, convert.850), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.852 = f32[128,56,56,256]{3,2,1,0} convert(convolution.851)
  constant.853 = f32[] constant(0)
  reduce.858 = f32[256]{0} reduce(convert.852, constant.853), dimensions={0,1,2}, to_apply=primitive_computation_add.854
  constant.859 = s32[] constant(401408)
  convert.860 = f32[] convert(constant.859)
  broadcast.861 = f32[256]{0} broadcast(convert.860), dimensions={}
  divide.862 = f32[256]{0} divide(reduce.858, broadcast.861)
  reshape.896 = f32[1,1,1,256]{3,2,1,0} reshape(divide.862)
  reshape.897 = f32[256]{0} reshape(reshape.896)
  broadcast.898 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.897), dimensions={3}
  subtract.899 = f32[128,56,56,256]{3,2,1,0} subtract(convert.852, broadcast.898)
  multiply.863 = f32[128,56,56,256]{3,2,1,0} multiply(convert.852, convert.852)
  constant.867 = f32[] constant(0)
  reduce.872 = f32[256]{0} reduce(multiply.863, constant.867), dimensions={0,1,2}, to_apply=primitive_computation_add.868
  constant.873 = s32[] constant(401408)
  convert.874 = f32[] convert(constant.873)
  broadcast.875 = f32[256]{0} broadcast(convert.874), dimensions={}
  divide.876 = f32[256]{0} divide(reduce.872, broadcast.875)
  multiply.877 = f32[256]{0} multiply(divide.862, divide.862)
  subtract.881 = f32[256]{0} subtract(divide.876, multiply.877)
  constant.900 = f32[] constant(1e-05)
  broadcast.901 = f32[256]{0} broadcast(constant.900), dimensions={}
  add.902 = f32[256]{0} add(subtract.881, broadcast.901)
  rsqrt.903 = f32[256]{0} rsqrt(add.902)
  broadcast.911 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.903), dimensions={3}
  parameter.6 = f32[256]{0} parameter(5)
  reshape.910 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.6)
  multiply.912 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.911, reshape.910)
  reshape.913 = f32[256]{0} reshape(multiply.912)
  broadcast.914 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.913), dimensions={3}
  multiply.915 = f32[128,56,56,256]{3,2,1,0} multiply(subtract.899, broadcast.914)
  parameter.5 = f32[256]{0} parameter(4)
  reshape.916 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.5)
  reshape.917 = f32[256]{0} reshape(reshape.916)
  broadcast.918 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.917), dimensions={3}
  add.919 = f32[128,56,56,256]{3,2,1,0} add(multiply.915, broadcast.918)
  convert.920 = bf16[128,56,56,256]{3,2,1,0} convert(add.919)
  add.992 = bf16[128,56,56,256]{3,2,1,0} add(convert.991, convert.920)
  constant.994 = bf16[] constant(0)
  broadcast.995 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.994), dimensions={}
  maximum.996 = bf16[128,56,56,256]{3,2,1,0} maximum(add.992, broadcast.995)
  tuple.997 = (bf16[128,56,56,256]{3,2,1,0}) tuple(maximum.996)
  get-tuple-element.998 = bf16[128,56,56,256]{3,2,1,0} get-tuple-element(tuple.997), index=0
  parameter.19 = f32[1,1,256,64]{3,2,1,0} parameter(18)
  convert.1004 = bf16[1,1,256,64]{3,2,1,0} convert(parameter.19)
  convolution.1005 = bf16[128,56,56,64]{3,2,1,0} convolution(get-tuple-element.998, convert.1004), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1006 = f32[128,56,56,64]{3,2,1,0} convert(convolution.1005)
  constant.1007 = f32[] constant(0)
  reduce.1012 = f32[64]{0} reduce(convert.1006, constant.1007), dimensions={0,1,2}, to_apply=primitive_computation_add.1008
  constant.1013 = s32[] constant(401408)
  convert.1014 = f32[] convert(constant.1013)
  broadcast.1015 = f32[64]{0} broadcast(convert.1014), dimensions={}
  divide.1016 = f32[64]{0} divide(reduce.1012, broadcast.1015)
  reshape.1050 = f32[1,1,1,64]{3,2,1,0} reshape(divide.1016)
  reshape.1051 = f32[64]{0} reshape(reshape.1050)
  broadcast.1052 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1051), dimensions={3}
  subtract.1053 = f32[128,56,56,64]{3,2,1,0} subtract(convert.1006, broadcast.1052)
  multiply.1017 = f32[128,56,56,64]{3,2,1,0} multiply(convert.1006, convert.1006)
  constant.1021 = f32[] constant(0)
  reduce.1026 = f32[64]{0} reduce(multiply.1017, constant.1021), dimensions={0,1,2}, to_apply=primitive_computation_add.1022
  constant.1027 = s32[] constant(401408)
  convert.1028 = f32[] convert(constant.1027)
  broadcast.1029 = f32[64]{0} broadcast(convert.1028), dimensions={}
  divide.1030 = f32[64]{0} divide(reduce.1026, broadcast.1029)
  multiply.1031 = f32[64]{0} multiply(divide.1016, divide.1016)
  subtract.1035 = f32[64]{0} subtract(divide.1030, multiply.1031)
  constant.1054 = f32[] constant(1e-05)
  broadcast.1055 = f32[64]{0} broadcast(constant.1054), dimensions={}
  add.1056 = f32[64]{0} add(subtract.1035, broadcast.1055)
  rsqrt.1057 = f32[64]{0} rsqrt(add.1056)
  broadcast.1065 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.1057), dimensions={3}
  parameter.14 = f32[64]{0} parameter(13)
  reshape.1064 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.14)
  multiply.1066 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.1065, reshape.1064)
  reshape.1067 = f32[64]{0} reshape(multiply.1066)
  broadcast.1068 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1067), dimensions={3}
  multiply.1069 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.1053, broadcast.1068)
  parameter.13 = f32[64]{0} parameter(12)
  reshape.1070 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.13)
  reshape.1071 = f32[64]{0} reshape(reshape.1070)
  broadcast.1072 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1071), dimensions={3}
  add.1073 = f32[128,56,56,64]{3,2,1,0} add(multiply.1069, broadcast.1072)
  convert.1074 = bf16[128,56,56,64]{3,2,1,0} convert(add.1073)
  constant.1076 = bf16[] constant(0)
  broadcast.1077 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1076), dimensions={}
  maximum.1078 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.1074, broadcast.1077)
  tuple.1079 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.1078)
  get-tuple-element.1080 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.1079), index=0
  parameter.20 = f32[3,3,64,64]{3,2,1,0} parameter(19)
  convert.1086 = bf16[3,3,64,64]{3,2,1,0} convert(parameter.20)
  convolution.1087 = bf16[128,56,56,64]{3,2,1,0} convolution(get-tuple-element.1080, convert.1086), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.1088 = f32[128,56,56,64]{3,2,1,0} convert(convolution.1087)
  constant.1089 = f32[] constant(0)
  reduce.1094 = f32[64]{0} reduce(convert.1088, constant.1089), dimensions={0,1,2}, to_apply=primitive_computation_add.1090
  constant.1095 = s32[] constant(401408)
  convert.1096 = f32[] convert(constant.1095)
  broadcast.1097 = f32[64]{0} broadcast(convert.1096), dimensions={}
  divide.1098 = f32[64]{0} divide(reduce.1094, broadcast.1097)
  reshape.1132 = f32[1,1,1,64]{3,2,1,0} reshape(divide.1098)
  reshape.1133 = f32[64]{0} reshape(reshape.1132)
  broadcast.1134 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1133), dimensions={3}
  subtract.1135 = f32[128,56,56,64]{3,2,1,0} subtract(convert.1088, broadcast.1134)
  multiply.1099 = f32[128,56,56,64]{3,2,1,0} multiply(convert.1088, convert.1088)
  constant.1103 = f32[] constant(0)
  reduce.1108 = f32[64]{0} reduce(multiply.1099, constant.1103), dimensions={0,1,2}, to_apply=primitive_computation_add.1104
  constant.1109 = s32[] constant(401408)
  convert.1110 = f32[] convert(constant.1109)
  broadcast.1111 = f32[64]{0} broadcast(convert.1110), dimensions={}
  divide.1112 = f32[64]{0} divide(reduce.1108, broadcast.1111)
  multiply.1113 = f32[64]{0} multiply(divide.1098, divide.1098)
  subtract.1117 = f32[64]{0} subtract(divide.1112, multiply.1113)
  constant.1136 = f32[] constant(1e-05)
  broadcast.1137 = f32[64]{0} broadcast(constant.1136), dimensions={}
  add.1138 = f32[64]{0} add(subtract.1117, broadcast.1137)
  rsqrt.1139 = f32[64]{0} rsqrt(add.1138)
  broadcast.1147 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.1139), dimensions={3}
  parameter.16 = f32[64]{0} parameter(15)
  reshape.1146 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.16)
  multiply.1148 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.1147, reshape.1146)
  reshape.1149 = f32[64]{0} reshape(multiply.1148)
  broadcast.1150 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1149), dimensions={3}
  multiply.1151 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.1135, broadcast.1150)
  parameter.15 = f32[64]{0} parameter(14)
  reshape.1152 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.15)
  reshape.1153 = f32[64]{0} reshape(reshape.1152)
  broadcast.1154 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1153), dimensions={3}
  add.1155 = f32[128,56,56,64]{3,2,1,0} add(multiply.1151, broadcast.1154)
  convert.1156 = bf16[128,56,56,64]{3,2,1,0} convert(add.1155)
  constant.1158 = bf16[] constant(0)
  broadcast.1159 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1158), dimensions={}
  maximum.1160 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.1156, broadcast.1159)
  tuple.1161 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.1160)
  get-tuple-element.1162 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.1161), index=0
  parameter.21 = f32[1,1,64,256]{3,2,1,0} parameter(20)
  convert.1168 = bf16[1,1,64,256]{3,2,1,0} convert(parameter.21)
  convolution.1169 = bf16[128,56,56,256]{3,2,1,0} convolution(get-tuple-element.1162, convert.1168), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1170 = f32[128,56,56,256]{3,2,1,0} convert(convolution.1169)
  constant.1171 = f32[] constant(0)
  reduce.1176 = f32[256]{0} reduce(convert.1170, constant.1171), dimensions={0,1,2}, to_apply=primitive_computation_add.1172
  constant.1177 = s32[] constant(401408)
  convert.1178 = f32[] convert(constant.1177)
  broadcast.1179 = f32[256]{0} broadcast(convert.1178), dimensions={}
  divide.1180 = f32[256]{0} divide(reduce.1176, broadcast.1179)
  reshape.1214 = f32[1,1,1,256]{3,2,1,0} reshape(divide.1180)
  reshape.1215 = f32[256]{0} reshape(reshape.1214)
  broadcast.1216 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1215), dimensions={3}
  subtract.1217 = f32[128,56,56,256]{3,2,1,0} subtract(convert.1170, broadcast.1216)
  multiply.1181 = f32[128,56,56,256]{3,2,1,0} multiply(convert.1170, convert.1170)
  constant.1185 = f32[] constant(0)
  reduce.1190 = f32[256]{0} reduce(multiply.1181, constant.1185), dimensions={0,1,2}, to_apply=primitive_computation_add.1186
  constant.1191 = s32[] constant(401408)
  convert.1192 = f32[] convert(constant.1191)
  broadcast.1193 = f32[256]{0} broadcast(convert.1192), dimensions={}
  divide.1194 = f32[256]{0} divide(reduce.1190, broadcast.1193)
  multiply.1195 = f32[256]{0} multiply(divide.1180, divide.1180)
  subtract.1199 = f32[256]{0} subtract(divide.1194, multiply.1195)
  constant.1218 = f32[] constant(1e-05)
  broadcast.1219 = f32[256]{0} broadcast(constant.1218), dimensions={}
  add.1220 = f32[256]{0} add(subtract.1199, broadcast.1219)
  rsqrt.1221 = f32[256]{0} rsqrt(add.1220)
  broadcast.1229 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.1221), dimensions={3}
  parameter.18 = f32[256]{0} parameter(17)
  reshape.1228 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.18)
  multiply.1230 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.1229, reshape.1228)
  reshape.1231 = f32[256]{0} reshape(multiply.1230)
  broadcast.1232 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1231), dimensions={3}
  multiply.1233 = f32[128,56,56,256]{3,2,1,0} multiply(subtract.1217, broadcast.1232)
  parameter.17 = f32[256]{0} parameter(16)
  reshape.1234 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.17)
  reshape.1235 = f32[256]{0} reshape(reshape.1234)
  broadcast.1236 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1235), dimensions={3}
  add.1237 = f32[128,56,56,256]{3,2,1,0} add(multiply.1233, broadcast.1236)
  convert.1238 = bf16[128,56,56,256]{3,2,1,0} convert(add.1237)
  add.1239 = bf16[128,56,56,256]{3,2,1,0} add(get-tuple-element.998, convert.1238)
  constant.1241 = bf16[] constant(0)
  broadcast.1242 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1241), dimensions={}
  maximum.1243 = bf16[128,56,56,256]{3,2,1,0} maximum(add.1239, broadcast.1242)
  tuple.1244 = (bf16[128,56,56,256]{3,2,1,0}) tuple(maximum.1243)
  get-tuple-element.1245 = bf16[128,56,56,256]{3,2,1,0} get-tuple-element(tuple.1244), index=0
  parameter.85 = f32[1,1,256,64]{3,2,1,0} parameter(84)
  convert.1251 = bf16[1,1,256,64]{3,2,1,0} convert(parameter.85)
  convolution.1252 = bf16[128,56,56,64]{3,2,1,0} convolution(get-tuple-element.1245, convert.1251), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1253 = f32[128,56,56,64]{3,2,1,0} convert(convolution.1252)
  constant.1254 = f32[] constant(0)
  reduce.1259 = f32[64]{0} reduce(convert.1253, constant.1254), dimensions={0,1,2}, to_apply=primitive_computation_add.1255
  constant.1260 = s32[] constant(401408)
  convert.1261 = f32[] convert(constant.1260)
  broadcast.1262 = f32[64]{0} broadcast(convert.1261), dimensions={}
  divide.1263 = f32[64]{0} divide(reduce.1259, broadcast.1262)
  reshape.1297 = f32[1,1,1,64]{3,2,1,0} reshape(divide.1263)
  reshape.1298 = f32[64]{0} reshape(reshape.1297)
  broadcast.1299 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1298), dimensions={3}
  subtract.1300 = f32[128,56,56,64]{3,2,1,0} subtract(convert.1253, broadcast.1299)
  multiply.1264 = f32[128,56,56,64]{3,2,1,0} multiply(convert.1253, convert.1253)
  constant.1268 = f32[] constant(0)
  reduce.1273 = f32[64]{0} reduce(multiply.1264, constant.1268), dimensions={0,1,2}, to_apply=primitive_computation_add.1269
  constant.1274 = s32[] constant(401408)
  convert.1275 = f32[] convert(constant.1274)
  broadcast.1276 = f32[64]{0} broadcast(convert.1275), dimensions={}
  divide.1277 = f32[64]{0} divide(reduce.1273, broadcast.1276)
  multiply.1278 = f32[64]{0} multiply(divide.1263, divide.1263)
  subtract.1282 = f32[64]{0} subtract(divide.1277, multiply.1278)
  constant.1301 = f32[] constant(1e-05)
  broadcast.1302 = f32[64]{0} broadcast(constant.1301), dimensions={}
  add.1303 = f32[64]{0} add(subtract.1282, broadcast.1302)
  rsqrt.1304 = f32[64]{0} rsqrt(add.1303)
  broadcast.1312 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.1304), dimensions={3}
  parameter.80 = f32[64]{0} parameter(79)
  reshape.1311 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.80)
  multiply.1313 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.1312, reshape.1311)
  reshape.1314 = f32[64]{0} reshape(multiply.1313)
  broadcast.1315 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1314), dimensions={3}
  multiply.1316 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.1300, broadcast.1315)
  parameter.79 = f32[64]{0} parameter(78)
  reshape.1317 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.79)
  reshape.1318 = f32[64]{0} reshape(reshape.1317)
  broadcast.1319 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1318), dimensions={3}
  add.1320 = f32[128,56,56,64]{3,2,1,0} add(multiply.1316, broadcast.1319)
  convert.1321 = bf16[128,56,56,64]{3,2,1,0} convert(add.1320)
  constant.1323 = bf16[] constant(0)
  broadcast.1324 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1323), dimensions={}
  maximum.1325 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.1321, broadcast.1324)
  tuple.1326 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.1325)
  get-tuple-element.1327 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.1326), index=0
  parameter.86 = f32[3,3,64,64]{3,2,1,0} parameter(85)
  convert.1333 = bf16[3,3,64,64]{3,2,1,0} convert(parameter.86)
  convolution.1334 = bf16[128,56,56,64]{3,2,1,0} convolution(get-tuple-element.1327, convert.1333), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.1335 = f32[128,56,56,64]{3,2,1,0} convert(convolution.1334)
  constant.1336 = f32[] constant(0)
  reduce.1341 = f32[64]{0} reduce(convert.1335, constant.1336), dimensions={0,1,2}, to_apply=primitive_computation_add.1337
  constant.1342 = s32[] constant(401408)
  convert.1343 = f32[] convert(constant.1342)
  broadcast.1344 = f32[64]{0} broadcast(convert.1343), dimensions={}
  divide.1345 = f32[64]{0} divide(reduce.1341, broadcast.1344)
  reshape.1379 = f32[1,1,1,64]{3,2,1,0} reshape(divide.1345)
  reshape.1380 = f32[64]{0} reshape(reshape.1379)
  broadcast.1381 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1380), dimensions={3}
  subtract.1382 = f32[128,56,56,64]{3,2,1,0} subtract(convert.1335, broadcast.1381)
  multiply.1346 = f32[128,56,56,64]{3,2,1,0} multiply(convert.1335, convert.1335)
  constant.1350 = f32[] constant(0)
  reduce.1355 = f32[64]{0} reduce(multiply.1346, constant.1350), dimensions={0,1,2}, to_apply=primitive_computation_add.1351
  constant.1356 = s32[] constant(401408)
  convert.1357 = f32[] convert(constant.1356)
  broadcast.1358 = f32[64]{0} broadcast(convert.1357), dimensions={}
  divide.1359 = f32[64]{0} divide(reduce.1355, broadcast.1358)
  multiply.1360 = f32[64]{0} multiply(divide.1345, divide.1345)
  subtract.1364 = f32[64]{0} subtract(divide.1359, multiply.1360)
  constant.1383 = f32[] constant(1e-05)
  broadcast.1384 = f32[64]{0} broadcast(constant.1383), dimensions={}
  add.1385 = f32[64]{0} add(subtract.1364, broadcast.1384)
  rsqrt.1386 = f32[64]{0} rsqrt(add.1385)
  broadcast.1394 = f32[1,1,1,64]{3,2,1,0} broadcast(rsqrt.1386), dimensions={3}
  parameter.82 = f32[64]{0} parameter(81)
  reshape.1393 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.82)
  multiply.1395 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.1394, reshape.1393)
  reshape.1396 = f32[64]{0} reshape(multiply.1395)
  broadcast.1397 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1396), dimensions={3}
  multiply.1398 = f32[128,56,56,64]{3,2,1,0} multiply(subtract.1382, broadcast.1397)
  parameter.81 = f32[64]{0} parameter(80)
  reshape.1399 = f32[1,1,1,64]{3,2,1,0} reshape(parameter.81)
  reshape.1400 = f32[64]{0} reshape(reshape.1399)
  broadcast.1401 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.1400), dimensions={3}
  add.1402 = f32[128,56,56,64]{3,2,1,0} add(multiply.1398, broadcast.1401)
  convert.1403 = bf16[128,56,56,64]{3,2,1,0} convert(add.1402)
  constant.1405 = bf16[] constant(0)
  broadcast.1406 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1405), dimensions={}
  maximum.1407 = bf16[128,56,56,64]{3,2,1,0} maximum(convert.1403, broadcast.1406)
  tuple.1408 = (bf16[128,56,56,64]{3,2,1,0}) tuple(maximum.1407)
  get-tuple-element.1409 = bf16[128,56,56,64]{3,2,1,0} get-tuple-element(tuple.1408), index=0
  parameter.87 = f32[1,1,64,256]{3,2,1,0} parameter(86)
  convert.1415 = bf16[1,1,64,256]{3,2,1,0} convert(parameter.87)
  convolution.1416 = bf16[128,56,56,256]{3,2,1,0} convolution(get-tuple-element.1409, convert.1415), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1417 = f32[128,56,56,256]{3,2,1,0} convert(convolution.1416)
  constant.1418 = f32[] constant(0)
  reduce.1423 = f32[256]{0} reduce(convert.1417, constant.1418), dimensions={0,1,2}, to_apply=primitive_computation_add.1419
  constant.1424 = s32[] constant(401408)
  convert.1425 = f32[] convert(constant.1424)
  broadcast.1426 = f32[256]{0} broadcast(convert.1425), dimensions={}
  divide.1427 = f32[256]{0} divide(reduce.1423, broadcast.1426)
  reshape.1461 = f32[1,1,1,256]{3,2,1,0} reshape(divide.1427)
  reshape.1462 = f32[256]{0} reshape(reshape.1461)
  broadcast.1463 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1462), dimensions={3}
  subtract.1464 = f32[128,56,56,256]{3,2,1,0} subtract(convert.1417, broadcast.1463)
  multiply.1428 = f32[128,56,56,256]{3,2,1,0} multiply(convert.1417, convert.1417)
  constant.1432 = f32[] constant(0)
  reduce.1437 = f32[256]{0} reduce(multiply.1428, constant.1432), dimensions={0,1,2}, to_apply=primitive_computation_add.1433
  constant.1438 = s32[] constant(401408)
  convert.1439 = f32[] convert(constant.1438)
  broadcast.1440 = f32[256]{0} broadcast(convert.1439), dimensions={}
  divide.1441 = f32[256]{0} divide(reduce.1437, broadcast.1440)
  multiply.1442 = f32[256]{0} multiply(divide.1427, divide.1427)
  subtract.1446 = f32[256]{0} subtract(divide.1441, multiply.1442)
  constant.1465 = f32[] constant(1e-05)
  broadcast.1466 = f32[256]{0} broadcast(constant.1465), dimensions={}
  add.1467 = f32[256]{0} add(subtract.1446, broadcast.1466)
  rsqrt.1468 = f32[256]{0} rsqrt(add.1467)
  broadcast.1476 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.1468), dimensions={3}
  parameter.84 = f32[256]{0} parameter(83)
  reshape.1475 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.84)
  multiply.1477 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.1476, reshape.1475)
  reshape.1478 = f32[256]{0} reshape(multiply.1477)
  broadcast.1479 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1478), dimensions={3}
  multiply.1480 = f32[128,56,56,256]{3,2,1,0} multiply(subtract.1464, broadcast.1479)
  parameter.83 = f32[256]{0} parameter(82)
  reshape.1481 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.83)
  reshape.1482 = f32[256]{0} reshape(reshape.1481)
  broadcast.1483 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.1482), dimensions={3}
  add.1484 = f32[128,56,56,256]{3,2,1,0} add(multiply.1480, broadcast.1483)
  convert.1485 = bf16[128,56,56,256]{3,2,1,0} convert(add.1484)
  add.1486 = bf16[128,56,56,256]{3,2,1,0} add(get-tuple-element.1245, convert.1485)
  constant.1488 = bf16[] constant(0)
  broadcast.1489 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1488), dimensions={}
  maximum.1490 = bf16[128,56,56,256]{3,2,1,0} maximum(add.1486, broadcast.1489)
  tuple.1491 = (bf16[128,56,56,256]{3,2,1,0}) tuple(maximum.1490)
  get-tuple-element.1492 = bf16[128,56,56,256]{3,2,1,0} get-tuple-element(tuple.1491), index=0
  parameter.97 = f32[1,1,256,512]{3,2,1,0} parameter(96)
  convert.1733 = bf16[1,1,256,512]{3,2,1,0} convert(parameter.97)
  convolution.1734 = bf16[128,28,28,512]{3,2,1,0} convolution(get-tuple-element.1492, convert.1733), window={size=1x1 stride=2x2}, dim_labels=b01f_01io->b01f
  convert.1735 = f32[128,28,28,512]{3,2,1,0} convert(convolution.1734)
  constant.1736 = f32[] constant(0)
  reduce.1741 = f32[512]{0} reduce(convert.1735, constant.1736), dimensions={0,1,2}, to_apply=primitive_computation_add.1737
  constant.1742 = s32[] constant(100352)
  convert.1743 = f32[] convert(constant.1742)
  broadcast.1744 = f32[512]{0} broadcast(convert.1743), dimensions={}
  divide.1745 = f32[512]{0} divide(reduce.1741, broadcast.1744)
  reshape.1779 = f32[1,1,1,512]{3,2,1,0} reshape(divide.1745)
  reshape.1780 = f32[512]{0} reshape(reshape.1779)
  broadcast.1781 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1780), dimensions={3}
  subtract.1782 = f32[128,28,28,512]{3,2,1,0} subtract(convert.1735, broadcast.1781)
  multiply.1746 = f32[128,28,28,512]{3,2,1,0} multiply(convert.1735, convert.1735)
  constant.1750 = f32[] constant(0)
  reduce.1755 = f32[512]{0} reduce(multiply.1746, constant.1750), dimensions={0,1,2}, to_apply=primitive_computation_add.1751
  constant.1756 = s32[] constant(100352)
  convert.1757 = f32[] convert(constant.1756)
  broadcast.1758 = f32[512]{0} broadcast(convert.1757), dimensions={}
  divide.1759 = f32[512]{0} divide(reduce.1755, broadcast.1758)
  multiply.1760 = f32[512]{0} multiply(divide.1745, divide.1745)
  subtract.1764 = f32[512]{0} subtract(divide.1759, multiply.1760)
  constant.1783 = f32[] constant(1e-05)
  broadcast.1784 = f32[512]{0} broadcast(constant.1783), dimensions={}
  add.1785 = f32[512]{0} add(subtract.1764, broadcast.1784)
  rsqrt.1786 = f32[512]{0} rsqrt(add.1785)
  broadcast.1794 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.1786), dimensions={3}
  parameter.99 = f32[512]{0} parameter(98)
  reshape.1793 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.99)
  multiply.1795 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.1794, reshape.1793)
  reshape.1796 = f32[512]{0} reshape(multiply.1795)
  broadcast.1797 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1796), dimensions={3}
  multiply.1798 = f32[128,28,28,512]{3,2,1,0} multiply(subtract.1782, broadcast.1797)
  parameter.98 = f32[512]{0} parameter(97)
  reshape.1799 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.98)
  reshape.1800 = f32[512]{0} reshape(reshape.1799)
  broadcast.1801 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1800), dimensions={3}
  add.1802 = f32[128,28,28,512]{3,2,1,0} add(multiply.1798, broadcast.1801)
  convert.1803 = bf16[128,28,28,512]{3,2,1,0} convert(add.1802)
  parameter.94 = f32[1,1,256,128]{3,2,1,0} parameter(93)
  convert.1498 = bf16[1,1,256,128]{3,2,1,0} convert(parameter.94)
  convolution.1499 = bf16[128,56,56,128]{3,2,1,0} convolution(get-tuple-element.1492, convert.1498), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1500 = f32[128,56,56,128]{3,2,1,0} convert(convolution.1499)
  constant.1501 = f32[] constant(0)
  reduce.1506 = f32[128]{0} reduce(convert.1500, constant.1501), dimensions={0,1,2}, to_apply=primitive_computation_add.1502
  constant.1507 = s32[] constant(401408)
  convert.1508 = f32[] convert(constant.1507)
  broadcast.1509 = f32[128]{0} broadcast(convert.1508), dimensions={}
  divide.1510 = f32[128]{0} divide(reduce.1506, broadcast.1509)
  reshape.1544 = f32[1,1,1,128]{3,2,1,0} reshape(divide.1510)
  reshape.1545 = f32[128]{0} reshape(reshape.1544)
  broadcast.1546 = f32[128,56,56,128]{3,2,1,0} broadcast(reshape.1545), dimensions={3}
  subtract.1547 = f32[128,56,56,128]{3,2,1,0} subtract(convert.1500, broadcast.1546)
  multiply.1511 = f32[128,56,56,128]{3,2,1,0} multiply(convert.1500, convert.1500)
  constant.1515 = f32[] constant(0)
  reduce.1520 = f32[128]{0} reduce(multiply.1511, constant.1515), dimensions={0,1,2}, to_apply=primitive_computation_add.1516
  constant.1521 = s32[] constant(401408)
  convert.1522 = f32[] convert(constant.1521)
  broadcast.1523 = f32[128]{0} broadcast(convert.1522), dimensions={}
  divide.1524 = f32[128]{0} divide(reduce.1520, broadcast.1523)
  multiply.1525 = f32[128]{0} multiply(divide.1510, divide.1510)
  subtract.1529 = f32[128]{0} subtract(divide.1524, multiply.1525)
  constant.1548 = f32[] constant(1e-05)
  broadcast.1549 = f32[128]{0} broadcast(constant.1548), dimensions={}
  add.1550 = f32[128]{0} add(subtract.1529, broadcast.1549)
  rsqrt.1551 = f32[128]{0} rsqrt(add.1550)
  broadcast.1559 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.1551), dimensions={3}
  parameter.89 = f32[128]{0} parameter(88)
  reshape.1558 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.89)
  multiply.1560 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.1559, reshape.1558)
  reshape.1561 = f32[128]{0} reshape(multiply.1560)
  broadcast.1562 = f32[128,56,56,128]{3,2,1,0} broadcast(reshape.1561), dimensions={3}
  multiply.1563 = f32[128,56,56,128]{3,2,1,0} multiply(subtract.1547, broadcast.1562)
  parameter.88 = f32[128]{0} parameter(87)
  reshape.1564 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.88)
  reshape.1565 = f32[128]{0} reshape(reshape.1564)
  broadcast.1566 = f32[128,56,56,128]{3,2,1,0} broadcast(reshape.1565), dimensions={3}
  add.1567 = f32[128,56,56,128]{3,2,1,0} add(multiply.1563, broadcast.1566)
  convert.1568 = bf16[128,56,56,128]{3,2,1,0} convert(add.1567)
  constant.1570 = bf16[] constant(0)
  broadcast.1571 = bf16[128,56,56,128]{3,2,1,0} broadcast(constant.1570), dimensions={}
  maximum.1572 = bf16[128,56,56,128]{3,2,1,0} maximum(convert.1568, broadcast.1571)
  tuple.1573 = (bf16[128,56,56,128]{3,2,1,0}) tuple(maximum.1572)
  get-tuple-element.1574 = bf16[128,56,56,128]{3,2,1,0} get-tuple-element(tuple.1573), index=0
  parameter.95 = f32[3,3,128,128]{3,2,1,0} parameter(94)
  convert.1580 = bf16[3,3,128,128]{3,2,1,0} convert(parameter.95)
  convolution.1581 = bf16[128,28,28,128]{3,2,1,0} convolution(get-tuple-element.1574, convert.1580), window={size=3x3 stride=2x2 pad=0_1x0_1}, dim_labels=b01f_01io->b01f
  convert.1582 = f32[128,28,28,128]{3,2,1,0} convert(convolution.1581)
  constant.1583 = f32[] constant(0)
  reduce.1588 = f32[128]{0} reduce(convert.1582, constant.1583), dimensions={0,1,2}, to_apply=primitive_computation_add.1584
  constant.1589 = s32[] constant(100352)
  convert.1590 = f32[] convert(constant.1589)
  broadcast.1591 = f32[128]{0} broadcast(convert.1590), dimensions={}
  divide.1592 = f32[128]{0} divide(reduce.1588, broadcast.1591)
  reshape.1626 = f32[1,1,1,128]{3,2,1,0} reshape(divide.1592)
  reshape.1627 = f32[128]{0} reshape(reshape.1626)
  broadcast.1628 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1627), dimensions={3}
  subtract.1629 = f32[128,28,28,128]{3,2,1,0} subtract(convert.1582, broadcast.1628)
  multiply.1593 = f32[128,28,28,128]{3,2,1,0} multiply(convert.1582, convert.1582)
  constant.1597 = f32[] constant(0)
  reduce.1602 = f32[128]{0} reduce(multiply.1593, constant.1597), dimensions={0,1,2}, to_apply=primitive_computation_add.1598
  constant.1603 = s32[] constant(100352)
  convert.1604 = f32[] convert(constant.1603)
  broadcast.1605 = f32[128]{0} broadcast(convert.1604), dimensions={}
  divide.1606 = f32[128]{0} divide(reduce.1602, broadcast.1605)
  multiply.1607 = f32[128]{0} multiply(divide.1592, divide.1592)
  subtract.1611 = f32[128]{0} subtract(divide.1606, multiply.1607)
  constant.1630 = f32[] constant(1e-05)
  broadcast.1631 = f32[128]{0} broadcast(constant.1630), dimensions={}
  add.1632 = f32[128]{0} add(subtract.1611, broadcast.1631)
  rsqrt.1633 = f32[128]{0} rsqrt(add.1632)
  broadcast.1641 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.1633), dimensions={3}
  parameter.91 = f32[128]{0} parameter(90)
  reshape.1640 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.91)
  multiply.1642 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.1641, reshape.1640)
  reshape.1643 = f32[128]{0} reshape(multiply.1642)
  broadcast.1644 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1643), dimensions={3}
  multiply.1645 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.1629, broadcast.1644)
  parameter.90 = f32[128]{0} parameter(89)
  reshape.1646 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.90)
  reshape.1647 = f32[128]{0} reshape(reshape.1646)
  broadcast.1648 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1647), dimensions={3}
  add.1649 = f32[128,28,28,128]{3,2,1,0} add(multiply.1645, broadcast.1648)
  convert.1650 = bf16[128,28,28,128]{3,2,1,0} convert(add.1649)
  constant.1652 = bf16[] constant(0)
  broadcast.1653 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1652), dimensions={}
  maximum.1654 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.1650, broadcast.1653)
  tuple.1655 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.1654)
  get-tuple-element.1656 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.1655), index=0
  parameter.96 = f32[1,1,128,512]{3,2,1,0} parameter(95)
  convert.1662 = bf16[1,1,128,512]{3,2,1,0} convert(parameter.96)
  convolution.1663 = bf16[128,28,28,512]{3,2,1,0} convolution(get-tuple-element.1656, convert.1662), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1664 = f32[128,28,28,512]{3,2,1,0} convert(convolution.1663)
  constant.1665 = f32[] constant(0)
  reduce.1670 = f32[512]{0} reduce(convert.1664, constant.1665), dimensions={0,1,2}, to_apply=primitive_computation_add.1666
  constant.1671 = s32[] constant(100352)
  convert.1672 = f32[] convert(constant.1671)
  broadcast.1673 = f32[512]{0} broadcast(convert.1672), dimensions={}
  divide.1674 = f32[512]{0} divide(reduce.1670, broadcast.1673)
  reshape.1708 = f32[1,1,1,512]{3,2,1,0} reshape(divide.1674)
  reshape.1709 = f32[512]{0} reshape(reshape.1708)
  broadcast.1710 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1709), dimensions={3}
  subtract.1711 = f32[128,28,28,512]{3,2,1,0} subtract(convert.1664, broadcast.1710)
  multiply.1675 = f32[128,28,28,512]{3,2,1,0} multiply(convert.1664, convert.1664)
  constant.1679 = f32[] constant(0)
  reduce.1684 = f32[512]{0} reduce(multiply.1675, constant.1679), dimensions={0,1,2}, to_apply=primitive_computation_add.1680
  constant.1685 = s32[] constant(100352)
  convert.1686 = f32[] convert(constant.1685)
  broadcast.1687 = f32[512]{0} broadcast(convert.1686), dimensions={}
  divide.1688 = f32[512]{0} divide(reduce.1684, broadcast.1687)
  multiply.1689 = f32[512]{0} multiply(divide.1674, divide.1674)
  subtract.1693 = f32[512]{0} subtract(divide.1688, multiply.1689)
  constant.1712 = f32[] constant(1e-05)
  broadcast.1713 = f32[512]{0} broadcast(constant.1712), dimensions={}
  add.1714 = f32[512]{0} add(subtract.1693, broadcast.1713)
  rsqrt.1715 = f32[512]{0} rsqrt(add.1714)
  broadcast.1723 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.1715), dimensions={3}
  parameter.93 = f32[512]{0} parameter(92)
  reshape.1722 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.93)
  multiply.1724 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.1723, reshape.1722)
  reshape.1725 = f32[512]{0} reshape(multiply.1724)
  broadcast.1726 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1725), dimensions={3}
  multiply.1727 = f32[128,28,28,512]{3,2,1,0} multiply(subtract.1711, broadcast.1726)
  parameter.92 = f32[512]{0} parameter(91)
  reshape.1728 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.92)
  reshape.1729 = f32[512]{0} reshape(reshape.1728)
  broadcast.1730 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.1729), dimensions={3}
  add.1731 = f32[128,28,28,512]{3,2,1,0} add(multiply.1727, broadcast.1730)
  convert.1732 = bf16[128,28,28,512]{3,2,1,0} convert(add.1731)
  add.1804 = bf16[128,28,28,512]{3,2,1,0} add(convert.1803, convert.1732)
  constant.1806 = bf16[] constant(0)
  broadcast.1807 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.1806), dimensions={}
  maximum.1808 = bf16[128,28,28,512]{3,2,1,0} maximum(add.1804, broadcast.1807)
  tuple.1809 = (bf16[128,28,28,512]{3,2,1,0}) tuple(maximum.1808)
  get-tuple-element.1810 = bf16[128,28,28,512]{3,2,1,0} get-tuple-element(tuple.1809), index=0
  parameter.106 = f32[1,1,512,128]{3,2,1,0} parameter(105)
  convert.1816 = bf16[1,1,512,128]{3,2,1,0} convert(parameter.106)
  convolution.1817 = bf16[128,28,28,128]{3,2,1,0} convolution(get-tuple-element.1810, convert.1816), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1818 = f32[128,28,28,128]{3,2,1,0} convert(convolution.1817)
  constant.1819 = f32[] constant(0)
  reduce.1824 = f32[128]{0} reduce(convert.1818, constant.1819), dimensions={0,1,2}, to_apply=primitive_computation_add.1820
  constant.1825 = s32[] constant(100352)
  convert.1826 = f32[] convert(constant.1825)
  broadcast.1827 = f32[128]{0} broadcast(convert.1826), dimensions={}
  divide.1828 = f32[128]{0} divide(reduce.1824, broadcast.1827)
  reshape.1862 = f32[1,1,1,128]{3,2,1,0} reshape(divide.1828)
  reshape.1863 = f32[128]{0} reshape(reshape.1862)
  broadcast.1864 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1863), dimensions={3}
  subtract.1865 = f32[128,28,28,128]{3,2,1,0} subtract(convert.1818, broadcast.1864)
  multiply.1829 = f32[128,28,28,128]{3,2,1,0} multiply(convert.1818, convert.1818)
  constant.1833 = f32[] constant(0)
  reduce.1838 = f32[128]{0} reduce(multiply.1829, constant.1833), dimensions={0,1,2}, to_apply=primitive_computation_add.1834
  constant.1839 = s32[] constant(100352)
  convert.1840 = f32[] convert(constant.1839)
  broadcast.1841 = f32[128]{0} broadcast(convert.1840), dimensions={}
  divide.1842 = f32[128]{0} divide(reduce.1838, broadcast.1841)
  multiply.1843 = f32[128]{0} multiply(divide.1828, divide.1828)
  subtract.1847 = f32[128]{0} subtract(divide.1842, multiply.1843)
  constant.1866 = f32[] constant(1e-05)
  broadcast.1867 = f32[128]{0} broadcast(constant.1866), dimensions={}
  add.1868 = f32[128]{0} add(subtract.1847, broadcast.1867)
  rsqrt.1869 = f32[128]{0} rsqrt(add.1868)
  broadcast.1877 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.1869), dimensions={3}
  parameter.101 = f32[128]{0} parameter(100)
  reshape.1876 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.101)
  multiply.1878 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.1877, reshape.1876)
  reshape.1879 = f32[128]{0} reshape(multiply.1878)
  broadcast.1880 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1879), dimensions={3}
  multiply.1881 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.1865, broadcast.1880)
  parameter.100 = f32[128]{0} parameter(99)
  reshape.1882 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.100)
  reshape.1883 = f32[128]{0} reshape(reshape.1882)
  broadcast.1884 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1883), dimensions={3}
  add.1885 = f32[128,28,28,128]{3,2,1,0} add(multiply.1881, broadcast.1884)
  convert.1886 = bf16[128,28,28,128]{3,2,1,0} convert(add.1885)
  constant.1888 = bf16[] constant(0)
  broadcast.1889 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1888), dimensions={}
  maximum.1890 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.1886, broadcast.1889)
  tuple.1891 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.1890)
  get-tuple-element.1892 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.1891), index=0
  parameter.107 = f32[3,3,128,128]{3,2,1,0} parameter(106)
  convert.1898 = bf16[3,3,128,128]{3,2,1,0} convert(parameter.107)
  convolution.1899 = bf16[128,28,28,128]{3,2,1,0} convolution(get-tuple-element.1892, convert.1898), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.1900 = f32[128,28,28,128]{3,2,1,0} convert(convolution.1899)
  constant.1901 = f32[] constant(0)
  reduce.1906 = f32[128]{0} reduce(convert.1900, constant.1901), dimensions={0,1,2}, to_apply=primitive_computation_add.1902
  constant.1907 = s32[] constant(100352)
  convert.1908 = f32[] convert(constant.1907)
  broadcast.1909 = f32[128]{0} broadcast(convert.1908), dimensions={}
  divide.1910 = f32[128]{0} divide(reduce.1906, broadcast.1909)
  reshape.1944 = f32[1,1,1,128]{3,2,1,0} reshape(divide.1910)
  reshape.1945 = f32[128]{0} reshape(reshape.1944)
  broadcast.1946 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1945), dimensions={3}
  subtract.1947 = f32[128,28,28,128]{3,2,1,0} subtract(convert.1900, broadcast.1946)
  multiply.1911 = f32[128,28,28,128]{3,2,1,0} multiply(convert.1900, convert.1900)
  constant.1915 = f32[] constant(0)
  reduce.1920 = f32[128]{0} reduce(multiply.1911, constant.1915), dimensions={0,1,2}, to_apply=primitive_computation_add.1916
  constant.1921 = s32[] constant(100352)
  convert.1922 = f32[] convert(constant.1921)
  broadcast.1923 = f32[128]{0} broadcast(convert.1922), dimensions={}
  divide.1924 = f32[128]{0} divide(reduce.1920, broadcast.1923)
  multiply.1925 = f32[128]{0} multiply(divide.1910, divide.1910)
  subtract.1929 = f32[128]{0} subtract(divide.1924, multiply.1925)
  constant.1948 = f32[] constant(1e-05)
  broadcast.1949 = f32[128]{0} broadcast(constant.1948), dimensions={}
  add.1950 = f32[128]{0} add(subtract.1929, broadcast.1949)
  rsqrt.1951 = f32[128]{0} rsqrt(add.1950)
  broadcast.1959 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.1951), dimensions={3}
  parameter.103 = f32[128]{0} parameter(102)
  reshape.1958 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.103)
  multiply.1960 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.1959, reshape.1958)
  reshape.1961 = f32[128]{0} reshape(multiply.1960)
  broadcast.1962 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1961), dimensions={3}
  multiply.1963 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.1947, broadcast.1962)
  parameter.102 = f32[128]{0} parameter(101)
  reshape.1964 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.102)
  reshape.1965 = f32[128]{0} reshape(reshape.1964)
  broadcast.1966 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.1965), dimensions={3}
  add.1967 = f32[128,28,28,128]{3,2,1,0} add(multiply.1963, broadcast.1966)
  convert.1968 = bf16[128,28,28,128]{3,2,1,0} convert(add.1967)
  constant.1970 = bf16[] constant(0)
  broadcast.1971 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1970), dimensions={}
  maximum.1972 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.1968, broadcast.1971)
  tuple.1973 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.1972)
  get-tuple-element.1974 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.1973), index=0
  parameter.108 = f32[1,1,128,512]{3,2,1,0} parameter(107)
  convert.1980 = bf16[1,1,128,512]{3,2,1,0} convert(parameter.108)
  convolution.1981 = bf16[128,28,28,512]{3,2,1,0} convolution(get-tuple-element.1974, convert.1980), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.1982 = f32[128,28,28,512]{3,2,1,0} convert(convolution.1981)
  constant.1983 = f32[] constant(0)
  reduce.1988 = f32[512]{0} reduce(convert.1982, constant.1983), dimensions={0,1,2}, to_apply=primitive_computation_add.1984
  constant.1989 = s32[] constant(100352)
  convert.1990 = f32[] convert(constant.1989)
  broadcast.1991 = f32[512]{0} broadcast(convert.1990), dimensions={}
  divide.1992 = f32[512]{0} divide(reduce.1988, broadcast.1991)
  reshape.2026 = f32[1,1,1,512]{3,2,1,0} reshape(divide.1992)
  reshape.2027 = f32[512]{0} reshape(reshape.2026)
  broadcast.2028 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2027), dimensions={3}
  subtract.2029 = f32[128,28,28,512]{3,2,1,0} subtract(convert.1982, broadcast.2028)
  multiply.1993 = f32[128,28,28,512]{3,2,1,0} multiply(convert.1982, convert.1982)
  constant.1997 = f32[] constant(0)
  reduce.2002 = f32[512]{0} reduce(multiply.1993, constant.1997), dimensions={0,1,2}, to_apply=primitive_computation_add.1998
  constant.2003 = s32[] constant(100352)
  convert.2004 = f32[] convert(constant.2003)
  broadcast.2005 = f32[512]{0} broadcast(convert.2004), dimensions={}
  divide.2006 = f32[512]{0} divide(reduce.2002, broadcast.2005)
  multiply.2007 = f32[512]{0} multiply(divide.1992, divide.1992)
  subtract.2011 = f32[512]{0} subtract(divide.2006, multiply.2007)
  constant.2030 = f32[] constant(1e-05)
  broadcast.2031 = f32[512]{0} broadcast(constant.2030), dimensions={}
  add.2032 = f32[512]{0} add(subtract.2011, broadcast.2031)
  rsqrt.2033 = f32[512]{0} rsqrt(add.2032)
  broadcast.2041 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.2033), dimensions={3}
  parameter.105 = f32[512]{0} parameter(104)
  reshape.2040 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.105)
  multiply.2042 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.2041, reshape.2040)
  reshape.2043 = f32[512]{0} reshape(multiply.2042)
  broadcast.2044 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2043), dimensions={3}
  multiply.2045 = f32[128,28,28,512]{3,2,1,0} multiply(subtract.2029, broadcast.2044)
  parameter.104 = f32[512]{0} parameter(103)
  reshape.2046 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.104)
  reshape.2047 = f32[512]{0} reshape(reshape.2046)
  broadcast.2048 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2047), dimensions={3}
  add.2049 = f32[128,28,28,512]{3,2,1,0} add(multiply.2045, broadcast.2048)
  convert.2050 = bf16[128,28,28,512]{3,2,1,0} convert(add.2049)
  add.2051 = bf16[128,28,28,512]{3,2,1,0} add(get-tuple-element.1810, convert.2050)
  constant.2053 = bf16[] constant(0)
  broadcast.2054 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2053), dimensions={}
  maximum.2055 = bf16[128,28,28,512]{3,2,1,0} maximum(add.2051, broadcast.2054)
  tuple.2056 = (bf16[128,28,28,512]{3,2,1,0}) tuple(maximum.2055)
  get-tuple-element.2057 = bf16[128,28,28,512]{3,2,1,0} get-tuple-element(tuple.2056), index=0
  parameter.115 = f32[1,1,512,128]{3,2,1,0} parameter(114)
  convert.2063 = bf16[1,1,512,128]{3,2,1,0} convert(parameter.115)
  convolution.2064 = bf16[128,28,28,128]{3,2,1,0} convolution(get-tuple-element.2057, convert.2063), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2065 = f32[128,28,28,128]{3,2,1,0} convert(convolution.2064)
  constant.2066 = f32[] constant(0)
  reduce.2071 = f32[128]{0} reduce(convert.2065, constant.2066), dimensions={0,1,2}, to_apply=primitive_computation_add.2067
  constant.2072 = s32[] constant(100352)
  convert.2073 = f32[] convert(constant.2072)
  broadcast.2074 = f32[128]{0} broadcast(convert.2073), dimensions={}
  divide.2075 = f32[128]{0} divide(reduce.2071, broadcast.2074)
  reshape.2109 = f32[1,1,1,128]{3,2,1,0} reshape(divide.2075)
  reshape.2110 = f32[128]{0} reshape(reshape.2109)
  broadcast.2111 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2110), dimensions={3}
  subtract.2112 = f32[128,28,28,128]{3,2,1,0} subtract(convert.2065, broadcast.2111)
  multiply.2076 = f32[128,28,28,128]{3,2,1,0} multiply(convert.2065, convert.2065)
  constant.2080 = f32[] constant(0)
  reduce.2085 = f32[128]{0} reduce(multiply.2076, constant.2080), dimensions={0,1,2}, to_apply=primitive_computation_add.2081
  constant.2086 = s32[] constant(100352)
  convert.2087 = f32[] convert(constant.2086)
  broadcast.2088 = f32[128]{0} broadcast(convert.2087), dimensions={}
  divide.2089 = f32[128]{0} divide(reduce.2085, broadcast.2088)
  multiply.2090 = f32[128]{0} multiply(divide.2075, divide.2075)
  subtract.2094 = f32[128]{0} subtract(divide.2089, multiply.2090)
  constant.2113 = f32[] constant(1e-05)
  broadcast.2114 = f32[128]{0} broadcast(constant.2113), dimensions={}
  add.2115 = f32[128]{0} add(subtract.2094, broadcast.2114)
  rsqrt.2116 = f32[128]{0} rsqrt(add.2115)
  broadcast.2124 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.2116), dimensions={3}
  parameter.110 = f32[128]{0} parameter(109)
  reshape.2123 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.110)
  multiply.2125 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.2124, reshape.2123)
  reshape.2126 = f32[128]{0} reshape(multiply.2125)
  broadcast.2127 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2126), dimensions={3}
  multiply.2128 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.2112, broadcast.2127)
  parameter.109 = f32[128]{0} parameter(108)
  reshape.2129 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.109)
  reshape.2130 = f32[128]{0} reshape(reshape.2129)
  broadcast.2131 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2130), dimensions={3}
  add.2132 = f32[128,28,28,128]{3,2,1,0} add(multiply.2128, broadcast.2131)
  convert.2133 = bf16[128,28,28,128]{3,2,1,0} convert(add.2132)
  constant.2135 = bf16[] constant(0)
  broadcast.2136 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2135), dimensions={}
  maximum.2137 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.2133, broadcast.2136)
  tuple.2138 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.2137)
  get-tuple-element.2139 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.2138), index=0
  parameter.116 = f32[3,3,128,128]{3,2,1,0} parameter(115)
  convert.2145 = bf16[3,3,128,128]{3,2,1,0} convert(parameter.116)
  convolution.2146 = bf16[128,28,28,128]{3,2,1,0} convolution(get-tuple-element.2139, convert.2145), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.2147 = f32[128,28,28,128]{3,2,1,0} convert(convolution.2146)
  constant.2148 = f32[] constant(0)
  reduce.2153 = f32[128]{0} reduce(convert.2147, constant.2148), dimensions={0,1,2}, to_apply=primitive_computation_add.2149
  constant.2154 = s32[] constant(100352)
  convert.2155 = f32[] convert(constant.2154)
  broadcast.2156 = f32[128]{0} broadcast(convert.2155), dimensions={}
  divide.2157 = f32[128]{0} divide(reduce.2153, broadcast.2156)
  reshape.2191 = f32[1,1,1,128]{3,2,1,0} reshape(divide.2157)
  reshape.2192 = f32[128]{0} reshape(reshape.2191)
  broadcast.2193 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2192), dimensions={3}
  subtract.2194 = f32[128,28,28,128]{3,2,1,0} subtract(convert.2147, broadcast.2193)
  multiply.2158 = f32[128,28,28,128]{3,2,1,0} multiply(convert.2147, convert.2147)
  constant.2162 = f32[] constant(0)
  reduce.2167 = f32[128]{0} reduce(multiply.2158, constant.2162), dimensions={0,1,2}, to_apply=primitive_computation_add.2163
  constant.2168 = s32[] constant(100352)
  convert.2169 = f32[] convert(constant.2168)
  broadcast.2170 = f32[128]{0} broadcast(convert.2169), dimensions={}
  divide.2171 = f32[128]{0} divide(reduce.2167, broadcast.2170)
  multiply.2172 = f32[128]{0} multiply(divide.2157, divide.2157)
  subtract.2176 = f32[128]{0} subtract(divide.2171, multiply.2172)
  constant.2195 = f32[] constant(1e-05)
  broadcast.2196 = f32[128]{0} broadcast(constant.2195), dimensions={}
  add.2197 = f32[128]{0} add(subtract.2176, broadcast.2196)
  rsqrt.2198 = f32[128]{0} rsqrt(add.2197)
  broadcast.2206 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.2198), dimensions={3}
  parameter.112 = f32[128]{0} parameter(111)
  reshape.2205 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.112)
  multiply.2207 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.2206, reshape.2205)
  reshape.2208 = f32[128]{0} reshape(multiply.2207)
  broadcast.2209 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2208), dimensions={3}
  multiply.2210 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.2194, broadcast.2209)
  parameter.111 = f32[128]{0} parameter(110)
  reshape.2211 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.111)
  reshape.2212 = f32[128]{0} reshape(reshape.2211)
  broadcast.2213 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2212), dimensions={3}
  add.2214 = f32[128,28,28,128]{3,2,1,0} add(multiply.2210, broadcast.2213)
  convert.2215 = bf16[128,28,28,128]{3,2,1,0} convert(add.2214)
  constant.2217 = bf16[] constant(0)
  broadcast.2218 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2217), dimensions={}
  maximum.2219 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.2215, broadcast.2218)
  tuple.2220 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.2219)
  get-tuple-element.2221 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.2220), index=0
  parameter.117 = f32[1,1,128,512]{3,2,1,0} parameter(116)
  convert.2227 = bf16[1,1,128,512]{3,2,1,0} convert(parameter.117)
  convolution.2228 = bf16[128,28,28,512]{3,2,1,0} convolution(get-tuple-element.2221, convert.2227), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2229 = f32[128,28,28,512]{3,2,1,0} convert(convolution.2228)
  constant.2230 = f32[] constant(0)
  reduce.2235 = f32[512]{0} reduce(convert.2229, constant.2230), dimensions={0,1,2}, to_apply=primitive_computation_add.2231
  constant.2236 = s32[] constant(100352)
  convert.2237 = f32[] convert(constant.2236)
  broadcast.2238 = f32[512]{0} broadcast(convert.2237), dimensions={}
  divide.2239 = f32[512]{0} divide(reduce.2235, broadcast.2238)
  reshape.2273 = f32[1,1,1,512]{3,2,1,0} reshape(divide.2239)
  reshape.2274 = f32[512]{0} reshape(reshape.2273)
  broadcast.2275 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2274), dimensions={3}
  subtract.2276 = f32[128,28,28,512]{3,2,1,0} subtract(convert.2229, broadcast.2275)
  multiply.2240 = f32[128,28,28,512]{3,2,1,0} multiply(convert.2229, convert.2229)
  constant.2244 = f32[] constant(0)
  reduce.2249 = f32[512]{0} reduce(multiply.2240, constant.2244), dimensions={0,1,2}, to_apply=primitive_computation_add.2245
  constant.2250 = s32[] constant(100352)
  convert.2251 = f32[] convert(constant.2250)
  broadcast.2252 = f32[512]{0} broadcast(convert.2251), dimensions={}
  divide.2253 = f32[512]{0} divide(reduce.2249, broadcast.2252)
  multiply.2254 = f32[512]{0} multiply(divide.2239, divide.2239)
  subtract.2258 = f32[512]{0} subtract(divide.2253, multiply.2254)
  constant.2277 = f32[] constant(1e-05)
  broadcast.2278 = f32[512]{0} broadcast(constant.2277), dimensions={}
  add.2279 = f32[512]{0} add(subtract.2258, broadcast.2278)
  rsqrt.2280 = f32[512]{0} rsqrt(add.2279)
  broadcast.2288 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.2280), dimensions={3}
  parameter.114 = f32[512]{0} parameter(113)
  reshape.2287 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.114)
  multiply.2289 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.2288, reshape.2287)
  reshape.2290 = f32[512]{0} reshape(multiply.2289)
  broadcast.2291 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2290), dimensions={3}
  multiply.2292 = f32[128,28,28,512]{3,2,1,0} multiply(subtract.2276, broadcast.2291)
  parameter.113 = f32[512]{0} parameter(112)
  reshape.2293 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.113)
  reshape.2294 = f32[512]{0} reshape(reshape.2293)
  broadcast.2295 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2294), dimensions={3}
  add.2296 = f32[128,28,28,512]{3,2,1,0} add(multiply.2292, broadcast.2295)
  convert.2297 = bf16[128,28,28,512]{3,2,1,0} convert(add.2296)
  add.2298 = bf16[128,28,28,512]{3,2,1,0} add(get-tuple-element.2057, convert.2297)
  constant.2300 = bf16[] constant(0)
  broadcast.2301 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2300), dimensions={}
  maximum.2302 = bf16[128,28,28,512]{3,2,1,0} maximum(add.2298, broadcast.2301)
  tuple.2303 = (bf16[128,28,28,512]{3,2,1,0}) tuple(maximum.2302)
  get-tuple-element.2304 = bf16[128,28,28,512]{3,2,1,0} get-tuple-element(tuple.2303), index=0
  parameter.124 = f32[1,1,512,128]{3,2,1,0} parameter(123)
  convert.2310 = bf16[1,1,512,128]{3,2,1,0} convert(parameter.124)
  convolution.2311 = bf16[128,28,28,128]{3,2,1,0} convolution(get-tuple-element.2304, convert.2310), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2312 = f32[128,28,28,128]{3,2,1,0} convert(convolution.2311)
  constant.2313 = f32[] constant(0)
  reduce.2318 = f32[128]{0} reduce(convert.2312, constant.2313), dimensions={0,1,2}, to_apply=primitive_computation_add.2314
  constant.2319 = s32[] constant(100352)
  convert.2320 = f32[] convert(constant.2319)
  broadcast.2321 = f32[128]{0} broadcast(convert.2320), dimensions={}
  divide.2322 = f32[128]{0} divide(reduce.2318, broadcast.2321)
  reshape.2356 = f32[1,1,1,128]{3,2,1,0} reshape(divide.2322)
  reshape.2357 = f32[128]{0} reshape(reshape.2356)
  broadcast.2358 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2357), dimensions={3}
  subtract.2359 = f32[128,28,28,128]{3,2,1,0} subtract(convert.2312, broadcast.2358)
  multiply.2323 = f32[128,28,28,128]{3,2,1,0} multiply(convert.2312, convert.2312)
  constant.2327 = f32[] constant(0)
  reduce.2332 = f32[128]{0} reduce(multiply.2323, constant.2327), dimensions={0,1,2}, to_apply=primitive_computation_add.2328
  constant.2333 = s32[] constant(100352)
  convert.2334 = f32[] convert(constant.2333)
  broadcast.2335 = f32[128]{0} broadcast(convert.2334), dimensions={}
  divide.2336 = f32[128]{0} divide(reduce.2332, broadcast.2335)
  multiply.2337 = f32[128]{0} multiply(divide.2322, divide.2322)
  subtract.2341 = f32[128]{0} subtract(divide.2336, multiply.2337)
  constant.2360 = f32[] constant(1e-05)
  broadcast.2361 = f32[128]{0} broadcast(constant.2360), dimensions={}
  add.2362 = f32[128]{0} add(subtract.2341, broadcast.2361)
  rsqrt.2363 = f32[128]{0} rsqrt(add.2362)
  broadcast.2371 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.2363), dimensions={3}
  parameter.119 = f32[128]{0} parameter(118)
  reshape.2370 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.119)
  multiply.2372 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.2371, reshape.2370)
  reshape.2373 = f32[128]{0} reshape(multiply.2372)
  broadcast.2374 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2373), dimensions={3}
  multiply.2375 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.2359, broadcast.2374)
  parameter.118 = f32[128]{0} parameter(117)
  reshape.2376 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.118)
  reshape.2377 = f32[128]{0} reshape(reshape.2376)
  broadcast.2378 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2377), dimensions={3}
  add.2379 = f32[128,28,28,128]{3,2,1,0} add(multiply.2375, broadcast.2378)
  convert.2380 = bf16[128,28,28,128]{3,2,1,0} convert(add.2379)
  constant.2382 = bf16[] constant(0)
  broadcast.2383 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2382), dimensions={}
  maximum.2384 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.2380, broadcast.2383)
  tuple.2385 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.2384)
  get-tuple-element.2386 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.2385), index=0
  parameter.125 = f32[3,3,128,128]{3,2,1,0} parameter(124)
  convert.2392 = bf16[3,3,128,128]{3,2,1,0} convert(parameter.125)
  convolution.2393 = bf16[128,28,28,128]{3,2,1,0} convolution(get-tuple-element.2386, convert.2392), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.2394 = f32[128,28,28,128]{3,2,1,0} convert(convolution.2393)
  constant.2395 = f32[] constant(0)
  reduce.2400 = f32[128]{0} reduce(convert.2394, constant.2395), dimensions={0,1,2}, to_apply=primitive_computation_add.2396
  constant.2401 = s32[] constant(100352)
  convert.2402 = f32[] convert(constant.2401)
  broadcast.2403 = f32[128]{0} broadcast(convert.2402), dimensions={}
  divide.2404 = f32[128]{0} divide(reduce.2400, broadcast.2403)
  reshape.2438 = f32[1,1,1,128]{3,2,1,0} reshape(divide.2404)
  reshape.2439 = f32[128]{0} reshape(reshape.2438)
  broadcast.2440 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2439), dimensions={3}
  subtract.2441 = f32[128,28,28,128]{3,2,1,0} subtract(convert.2394, broadcast.2440)
  multiply.2405 = f32[128,28,28,128]{3,2,1,0} multiply(convert.2394, convert.2394)
  constant.2409 = f32[] constant(0)
  reduce.2414 = f32[128]{0} reduce(multiply.2405, constant.2409), dimensions={0,1,2}, to_apply=primitive_computation_add.2410
  constant.2415 = s32[] constant(100352)
  convert.2416 = f32[] convert(constant.2415)
  broadcast.2417 = f32[128]{0} broadcast(convert.2416), dimensions={}
  divide.2418 = f32[128]{0} divide(reduce.2414, broadcast.2417)
  multiply.2419 = f32[128]{0} multiply(divide.2404, divide.2404)
  subtract.2423 = f32[128]{0} subtract(divide.2418, multiply.2419)
  constant.2442 = f32[] constant(1e-05)
  broadcast.2443 = f32[128]{0} broadcast(constant.2442), dimensions={}
  add.2444 = f32[128]{0} add(subtract.2423, broadcast.2443)
  rsqrt.2445 = f32[128]{0} rsqrt(add.2444)
  broadcast.2453 = f32[1,1,1,128]{3,2,1,0} broadcast(rsqrt.2445), dimensions={3}
  parameter.121 = f32[128]{0} parameter(120)
  reshape.2452 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.121)
  multiply.2454 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.2453, reshape.2452)
  reshape.2455 = f32[128]{0} reshape(multiply.2454)
  broadcast.2456 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2455), dimensions={3}
  multiply.2457 = f32[128,28,28,128]{3,2,1,0} multiply(subtract.2441, broadcast.2456)
  parameter.120 = f32[128]{0} parameter(119)
  reshape.2458 = f32[1,1,1,128]{3,2,1,0} reshape(parameter.120)
  reshape.2459 = f32[128]{0} reshape(reshape.2458)
  broadcast.2460 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.2459), dimensions={3}
  add.2461 = f32[128,28,28,128]{3,2,1,0} add(multiply.2457, broadcast.2460)
  convert.2462 = bf16[128,28,28,128]{3,2,1,0} convert(add.2461)
  constant.2464 = bf16[] constant(0)
  broadcast.2465 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2464), dimensions={}
  maximum.2466 = bf16[128,28,28,128]{3,2,1,0} maximum(convert.2462, broadcast.2465)
  tuple.2467 = (bf16[128,28,28,128]{3,2,1,0}) tuple(maximum.2466)
  get-tuple-element.2468 = bf16[128,28,28,128]{3,2,1,0} get-tuple-element(tuple.2467), index=0
  parameter.126 = f32[1,1,128,512]{3,2,1,0} parameter(125)
  convert.2474 = bf16[1,1,128,512]{3,2,1,0} convert(parameter.126)
  convolution.2475 = bf16[128,28,28,512]{3,2,1,0} convolution(get-tuple-element.2468, convert.2474), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2476 = f32[128,28,28,512]{3,2,1,0} convert(convolution.2475)
  constant.2477 = f32[] constant(0)
  reduce.2482 = f32[512]{0} reduce(convert.2476, constant.2477), dimensions={0,1,2}, to_apply=primitive_computation_add.2478
  constant.2483 = s32[] constant(100352)
  convert.2484 = f32[] convert(constant.2483)
  broadcast.2485 = f32[512]{0} broadcast(convert.2484), dimensions={}
  divide.2486 = f32[512]{0} divide(reduce.2482, broadcast.2485)
  reshape.2520 = f32[1,1,1,512]{3,2,1,0} reshape(divide.2486)
  reshape.2521 = f32[512]{0} reshape(reshape.2520)
  broadcast.2522 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2521), dimensions={3}
  subtract.2523 = f32[128,28,28,512]{3,2,1,0} subtract(convert.2476, broadcast.2522)
  multiply.2487 = f32[128,28,28,512]{3,2,1,0} multiply(convert.2476, convert.2476)
  constant.2491 = f32[] constant(0)
  reduce.2496 = f32[512]{0} reduce(multiply.2487, constant.2491), dimensions={0,1,2}, to_apply=primitive_computation_add.2492
  constant.2497 = s32[] constant(100352)
  convert.2498 = f32[] convert(constant.2497)
  broadcast.2499 = f32[512]{0} broadcast(convert.2498), dimensions={}
  divide.2500 = f32[512]{0} divide(reduce.2496, broadcast.2499)
  multiply.2501 = f32[512]{0} multiply(divide.2486, divide.2486)
  subtract.2505 = f32[512]{0} subtract(divide.2500, multiply.2501)
  constant.2524 = f32[] constant(1e-05)
  broadcast.2525 = f32[512]{0} broadcast(constant.2524), dimensions={}
  add.2526 = f32[512]{0} add(subtract.2505, broadcast.2525)
  rsqrt.2527 = f32[512]{0} rsqrt(add.2526)
  broadcast.2535 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.2527), dimensions={3}
  parameter.123 = f32[512]{0} parameter(122)
  reshape.2534 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.123)
  multiply.2536 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.2535, reshape.2534)
  reshape.2537 = f32[512]{0} reshape(multiply.2536)
  broadcast.2538 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2537), dimensions={3}
  multiply.2539 = f32[128,28,28,512]{3,2,1,0} multiply(subtract.2523, broadcast.2538)
  parameter.122 = f32[512]{0} parameter(121)
  reshape.2540 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.122)
  reshape.2541 = f32[512]{0} reshape(reshape.2540)
  broadcast.2542 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.2541), dimensions={3}
  add.2543 = f32[128,28,28,512]{3,2,1,0} add(multiply.2539, broadcast.2542)
  convert.2544 = bf16[128,28,28,512]{3,2,1,0} convert(add.2543)
  add.2545 = bf16[128,28,28,512]{3,2,1,0} add(get-tuple-element.2304, convert.2544)
  constant.2547 = bf16[] constant(0)
  broadcast.2548 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2547), dimensions={}
  maximum.2549 = bf16[128,28,28,512]{3,2,1,0} maximum(add.2545, broadcast.2548)
  tuple.2550 = (bf16[128,28,28,512]{3,2,1,0}) tuple(maximum.2549)
  get-tuple-element.2551 = bf16[128,28,28,512]{3,2,1,0} get-tuple-element(tuple.2550), index=0
  parameter.136 = f32[1,1,512,1024]{3,2,1,0} parameter(135)
  convert.2792 = bf16[1,1,512,1024]{3,2,1,0} convert(parameter.136)
  convolution.2793 = bf16[128,14,14,1024]{3,2,1,0} convolution(get-tuple-element.2551, convert.2792), window={size=1x1 stride=2x2}, dim_labels=b01f_01io->b01f
  convert.2794 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.2793)
  constant.2795 = f32[] constant(0)
  reduce.2800 = f32[1024]{0} reduce(convert.2794, constant.2795), dimensions={0,1,2}, to_apply=primitive_computation_add.2796
  constant.2801 = s32[] constant(25088)
  convert.2802 = f32[] convert(constant.2801)
  broadcast.2803 = f32[1024]{0} broadcast(convert.2802), dimensions={}
  divide.2804 = f32[1024]{0} divide(reduce.2800, broadcast.2803)
  reshape.2838 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.2804)
  reshape.2839 = f32[1024]{0} reshape(reshape.2838)
  broadcast.2840 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.2839), dimensions={3}
  subtract.2841 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.2794, broadcast.2840)
  multiply.2805 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.2794, convert.2794)
  constant.2809 = f32[] constant(0)
  reduce.2814 = f32[1024]{0} reduce(multiply.2805, constant.2809), dimensions={0,1,2}, to_apply=primitive_computation_add.2810
  constant.2815 = s32[] constant(25088)
  convert.2816 = f32[] convert(constant.2815)
  broadcast.2817 = f32[1024]{0} broadcast(convert.2816), dimensions={}
  divide.2818 = f32[1024]{0} divide(reduce.2814, broadcast.2817)
  multiply.2819 = f32[1024]{0} multiply(divide.2804, divide.2804)
  subtract.2823 = f32[1024]{0} subtract(divide.2818, multiply.2819)
  constant.2842 = f32[] constant(1e-05)
  broadcast.2843 = f32[1024]{0} broadcast(constant.2842), dimensions={}
  add.2844 = f32[1024]{0} add(subtract.2823, broadcast.2843)
  rsqrt.2845 = f32[1024]{0} rsqrt(add.2844)
  broadcast.2853 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.2845), dimensions={3}
  parameter.138 = f32[1024]{0} parameter(137)
  reshape.2852 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.138)
  multiply.2854 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.2853, reshape.2852)
  reshape.2855 = f32[1024]{0} reshape(multiply.2854)
  broadcast.2856 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.2855), dimensions={3}
  multiply.2857 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.2841, broadcast.2856)
  parameter.137 = f32[1024]{0} parameter(136)
  reshape.2858 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.137)
  reshape.2859 = f32[1024]{0} reshape(reshape.2858)
  broadcast.2860 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.2859), dimensions={3}
  add.2861 = f32[128,14,14,1024]{3,2,1,0} add(multiply.2857, broadcast.2860)
  convert.2862 = bf16[128,14,14,1024]{3,2,1,0} convert(add.2861)
  parameter.133 = f32[1,1,512,256]{3,2,1,0} parameter(132)
  convert.2557 = bf16[1,1,512,256]{3,2,1,0} convert(parameter.133)
  convolution.2558 = bf16[128,28,28,256]{3,2,1,0} convolution(get-tuple-element.2551, convert.2557), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2559 = f32[128,28,28,256]{3,2,1,0} convert(convolution.2558)
  constant.2560 = f32[] constant(0)
  reduce.2565 = f32[256]{0} reduce(convert.2559, constant.2560), dimensions={0,1,2}, to_apply=primitive_computation_add.2561
  constant.2566 = s32[] constant(100352)
  convert.2567 = f32[] convert(constant.2566)
  broadcast.2568 = f32[256]{0} broadcast(convert.2567), dimensions={}
  divide.2569 = f32[256]{0} divide(reduce.2565, broadcast.2568)
  reshape.2603 = f32[1,1,1,256]{3,2,1,0} reshape(divide.2569)
  reshape.2604 = f32[256]{0} reshape(reshape.2603)
  broadcast.2605 = f32[128,28,28,256]{3,2,1,0} broadcast(reshape.2604), dimensions={3}
  subtract.2606 = f32[128,28,28,256]{3,2,1,0} subtract(convert.2559, broadcast.2605)
  multiply.2570 = f32[128,28,28,256]{3,2,1,0} multiply(convert.2559, convert.2559)
  constant.2574 = f32[] constant(0)
  reduce.2579 = f32[256]{0} reduce(multiply.2570, constant.2574), dimensions={0,1,2}, to_apply=primitive_computation_add.2575
  constant.2580 = s32[] constant(100352)
  convert.2581 = f32[] convert(constant.2580)
  broadcast.2582 = f32[256]{0} broadcast(convert.2581), dimensions={}
  divide.2583 = f32[256]{0} divide(reduce.2579, broadcast.2582)
  multiply.2584 = f32[256]{0} multiply(divide.2569, divide.2569)
  subtract.2588 = f32[256]{0} subtract(divide.2583, multiply.2584)
  constant.2607 = f32[] constant(1e-05)
  broadcast.2608 = f32[256]{0} broadcast(constant.2607), dimensions={}
  add.2609 = f32[256]{0} add(subtract.2588, broadcast.2608)
  rsqrt.2610 = f32[256]{0} rsqrt(add.2609)
  broadcast.2618 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.2610), dimensions={3}
  parameter.128 = f32[256]{0} parameter(127)
  reshape.2617 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.128)
  multiply.2619 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.2618, reshape.2617)
  reshape.2620 = f32[256]{0} reshape(multiply.2619)
  broadcast.2621 = f32[128,28,28,256]{3,2,1,0} broadcast(reshape.2620), dimensions={3}
  multiply.2622 = f32[128,28,28,256]{3,2,1,0} multiply(subtract.2606, broadcast.2621)
  parameter.127 = f32[256]{0} parameter(126)
  reshape.2623 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.127)
  reshape.2624 = f32[256]{0} reshape(reshape.2623)
  broadcast.2625 = f32[128,28,28,256]{3,2,1,0} broadcast(reshape.2624), dimensions={3}
  add.2626 = f32[128,28,28,256]{3,2,1,0} add(multiply.2622, broadcast.2625)
  convert.2627 = bf16[128,28,28,256]{3,2,1,0} convert(add.2626)
  constant.2629 = bf16[] constant(0)
  broadcast.2630 = bf16[128,28,28,256]{3,2,1,0} broadcast(constant.2629), dimensions={}
  maximum.2631 = bf16[128,28,28,256]{3,2,1,0} maximum(convert.2627, broadcast.2630)
  tuple.2632 = (bf16[128,28,28,256]{3,2,1,0}) tuple(maximum.2631)
  get-tuple-element.2633 = bf16[128,28,28,256]{3,2,1,0} get-tuple-element(tuple.2632), index=0
  parameter.134 = f32[3,3,256,256]{3,2,1,0} parameter(133)
  convert.2639 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.134)
  convolution.2640 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.2633, convert.2639), window={size=3x3 stride=2x2 pad=0_1x0_1}, dim_labels=b01f_01io->b01f
  convert.2641 = f32[128,14,14,256]{3,2,1,0} convert(convolution.2640)
  constant.2642 = f32[] constant(0)
  reduce.2647 = f32[256]{0} reduce(convert.2641, constant.2642), dimensions={0,1,2}, to_apply=primitive_computation_add.2643
  constant.2648 = s32[] constant(25088)
  convert.2649 = f32[] convert(constant.2648)
  broadcast.2650 = f32[256]{0} broadcast(convert.2649), dimensions={}
  divide.2651 = f32[256]{0} divide(reduce.2647, broadcast.2650)
  reshape.2685 = f32[1,1,1,256]{3,2,1,0} reshape(divide.2651)
  reshape.2686 = f32[256]{0} reshape(reshape.2685)
  broadcast.2687 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.2686), dimensions={3}
  subtract.2688 = f32[128,14,14,256]{3,2,1,0} subtract(convert.2641, broadcast.2687)
  multiply.2652 = f32[128,14,14,256]{3,2,1,0} multiply(convert.2641, convert.2641)
  constant.2656 = f32[] constant(0)
  reduce.2661 = f32[256]{0} reduce(multiply.2652, constant.2656), dimensions={0,1,2}, to_apply=primitive_computation_add.2657
  constant.2662 = s32[] constant(25088)
  convert.2663 = f32[] convert(constant.2662)
  broadcast.2664 = f32[256]{0} broadcast(convert.2663), dimensions={}
  divide.2665 = f32[256]{0} divide(reduce.2661, broadcast.2664)
  multiply.2666 = f32[256]{0} multiply(divide.2651, divide.2651)
  subtract.2670 = f32[256]{0} subtract(divide.2665, multiply.2666)
  constant.2689 = f32[] constant(1e-05)
  broadcast.2690 = f32[256]{0} broadcast(constant.2689), dimensions={}
  add.2691 = f32[256]{0} add(subtract.2670, broadcast.2690)
  rsqrt.2692 = f32[256]{0} rsqrt(add.2691)
  broadcast.2700 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.2692), dimensions={3}
  parameter.130 = f32[256]{0} parameter(129)
  reshape.2699 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.130)
  multiply.2701 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.2700, reshape.2699)
  reshape.2702 = f32[256]{0} reshape(multiply.2701)
  broadcast.2703 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.2702), dimensions={3}
  multiply.2704 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.2688, broadcast.2703)
  parameter.129 = f32[256]{0} parameter(128)
  reshape.2705 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.129)
  reshape.2706 = f32[256]{0} reshape(reshape.2705)
  broadcast.2707 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.2706), dimensions={3}
  add.2708 = f32[128,14,14,256]{3,2,1,0} add(multiply.2704, broadcast.2707)
  convert.2709 = bf16[128,14,14,256]{3,2,1,0} convert(add.2708)
  constant.2711 = bf16[] constant(0)
  broadcast.2712 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.2711), dimensions={}
  maximum.2713 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.2709, broadcast.2712)
  tuple.2714 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.2713)
  get-tuple-element.2715 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.2714), index=0
  parameter.135 = f32[1,1,256,1024]{3,2,1,0} parameter(134)
  convert.2721 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.135)
  convolution.2722 = bf16[128,14,14,1024]{3,2,1,0} convolution(get-tuple-element.2715, convert.2721), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2723 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.2722)
  constant.2724 = f32[] constant(0)
  reduce.2729 = f32[1024]{0} reduce(convert.2723, constant.2724), dimensions={0,1,2}, to_apply=primitive_computation_add.2725
  constant.2730 = s32[] constant(25088)
  convert.2731 = f32[] convert(constant.2730)
  broadcast.2732 = f32[1024]{0} broadcast(convert.2731), dimensions={}
  divide.2733 = f32[1024]{0} divide(reduce.2729, broadcast.2732)
  reshape.2767 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.2733)
  reshape.2768 = f32[1024]{0} reshape(reshape.2767)
  broadcast.2769 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.2768), dimensions={3}
  subtract.2770 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.2723, broadcast.2769)
  multiply.2734 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.2723, convert.2723)
  constant.2738 = f32[] constant(0)
  reduce.2743 = f32[1024]{0} reduce(multiply.2734, constant.2738), dimensions={0,1,2}, to_apply=primitive_computation_add.2739
  constant.2744 = s32[] constant(25088)
  convert.2745 = f32[] convert(constant.2744)
  broadcast.2746 = f32[1024]{0} broadcast(convert.2745), dimensions={}
  divide.2747 = f32[1024]{0} divide(reduce.2743, broadcast.2746)
  multiply.2748 = f32[1024]{0} multiply(divide.2733, divide.2733)
  subtract.2752 = f32[1024]{0} subtract(divide.2747, multiply.2748)
  constant.2771 = f32[] constant(1e-05)
  broadcast.2772 = f32[1024]{0} broadcast(constant.2771), dimensions={}
  add.2773 = f32[1024]{0} add(subtract.2752, broadcast.2772)
  rsqrt.2774 = f32[1024]{0} rsqrt(add.2773)
  broadcast.2782 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.2774), dimensions={3}
  parameter.132 = f32[1024]{0} parameter(131)
  reshape.2781 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.132)
  multiply.2783 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.2782, reshape.2781)
  reshape.2784 = f32[1024]{0} reshape(multiply.2783)
  broadcast.2785 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.2784), dimensions={3}
  multiply.2786 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.2770, broadcast.2785)
  parameter.131 = f32[1024]{0} parameter(130)
  reshape.2787 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.131)
  reshape.2788 = f32[1024]{0} reshape(reshape.2787)
  broadcast.2789 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.2788), dimensions={3}
  add.2790 = f32[128,14,14,1024]{3,2,1,0} add(multiply.2786, broadcast.2789)
  convert.2791 = bf16[128,14,14,1024]{3,2,1,0} convert(add.2790)
  add.2863 = bf16[128,14,14,1024]{3,2,1,0} add(convert.2862, convert.2791)
  constant.2865 = bf16[] constant(0)
  broadcast.2866 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.2865), dimensions={}
  maximum.2867 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.2863, broadcast.2866)
  tuple.2868 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.2867)
  get-tuple-element.2869 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.2868), index=0
  parameter.145 = f32[1,1,1024,256]{3,2,1,0} parameter(144)
  convert.2875 = bf16[1,1,1024,256]{3,2,1,0} convert(parameter.145)
  convolution.2876 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.2869, convert.2875), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.2877 = f32[128,14,14,256]{3,2,1,0} convert(convolution.2876)
  constant.2878 = f32[] constant(0)
  reduce.2883 = f32[256]{0} reduce(convert.2877, constant.2878), dimensions={0,1,2}, to_apply=primitive_computation_add.2879
  constant.2884 = s32[] constant(25088)
  convert.2885 = f32[] convert(constant.2884)
  broadcast.2886 = f32[256]{0} broadcast(convert.2885), dimensions={}
  divide.2887 = f32[256]{0} divide(reduce.2883, broadcast.2886)
  reshape.2921 = f32[1,1,1,256]{3,2,1,0} reshape(divide.2887)
  reshape.2922 = f32[256]{0} reshape(reshape.2921)
  broadcast.2923 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.2922), dimensions={3}
  subtract.2924 = f32[128,14,14,256]{3,2,1,0} subtract(convert.2877, broadcast.2923)
  multiply.2888 = f32[128,14,14,256]{3,2,1,0} multiply(convert.2877, convert.2877)
  constant.2892 = f32[] constant(0)
  reduce.2897 = f32[256]{0} reduce(multiply.2888, constant.2892), dimensions={0,1,2}, to_apply=primitive_computation_add.2893
  constant.2898 = s32[] constant(25088)
  convert.2899 = f32[] convert(constant.2898)
  broadcast.2900 = f32[256]{0} broadcast(convert.2899), dimensions={}
  divide.2901 = f32[256]{0} divide(reduce.2897, broadcast.2900)
  multiply.2902 = f32[256]{0} multiply(divide.2887, divide.2887)
  subtract.2906 = f32[256]{0} subtract(divide.2901, multiply.2902)
  constant.2925 = f32[] constant(1e-05)
  broadcast.2926 = f32[256]{0} broadcast(constant.2925), dimensions={}
  add.2927 = f32[256]{0} add(subtract.2906, broadcast.2926)
  rsqrt.2928 = f32[256]{0} rsqrt(add.2927)
  broadcast.2936 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.2928), dimensions={3}
  parameter.140 = f32[256]{0} parameter(139)
  reshape.2935 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.140)
  multiply.2937 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.2936, reshape.2935)
  reshape.2938 = f32[256]{0} reshape(multiply.2937)
  broadcast.2939 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.2938), dimensions={3}
  multiply.2940 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.2924, broadcast.2939)
  parameter.139 = f32[256]{0} parameter(138)
  reshape.2941 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.139)
  reshape.2942 = f32[256]{0} reshape(reshape.2941)
  broadcast.2943 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.2942), dimensions={3}
  add.2944 = f32[128,14,14,256]{3,2,1,0} add(multiply.2940, broadcast.2943)
  convert.2945 = bf16[128,14,14,256]{3,2,1,0} convert(add.2944)
  constant.2947 = bf16[] constant(0)
  broadcast.2948 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.2947), dimensions={}
  maximum.2949 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.2945, broadcast.2948)
  tuple.2950 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.2949)
  get-tuple-element.2951 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.2950), index=0
  parameter.146 = f32[3,3,256,256]{3,2,1,0} parameter(145)
  convert.2957 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.146)
  convolution.2958 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.2951, convert.2957), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.2959 = f32[128,14,14,256]{3,2,1,0} convert(convolution.2958)
  constant.2960 = f32[] constant(0)
  reduce.2965 = f32[256]{0} reduce(convert.2959, constant.2960), dimensions={0,1,2}, to_apply=primitive_computation_add.2961
  constant.2966 = s32[] constant(25088)
  convert.2967 = f32[] convert(constant.2966)
  broadcast.2968 = f32[256]{0} broadcast(convert.2967), dimensions={}
  divide.2969 = f32[256]{0} divide(reduce.2965, broadcast.2968)
  reshape.3003 = f32[1,1,1,256]{3,2,1,0} reshape(divide.2969)
  reshape.3004 = f32[256]{0} reshape(reshape.3003)
  broadcast.3005 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3004), dimensions={3}
  subtract.3006 = f32[128,14,14,256]{3,2,1,0} subtract(convert.2959, broadcast.3005)
  multiply.2970 = f32[128,14,14,256]{3,2,1,0} multiply(convert.2959, convert.2959)
  constant.2974 = f32[] constant(0)
  reduce.2979 = f32[256]{0} reduce(multiply.2970, constant.2974), dimensions={0,1,2}, to_apply=primitive_computation_add.2975
  constant.2980 = s32[] constant(25088)
  convert.2981 = f32[] convert(constant.2980)
  broadcast.2982 = f32[256]{0} broadcast(convert.2981), dimensions={}
  divide.2983 = f32[256]{0} divide(reduce.2979, broadcast.2982)
  multiply.2984 = f32[256]{0} multiply(divide.2969, divide.2969)
  subtract.2988 = f32[256]{0} subtract(divide.2983, multiply.2984)
  constant.3007 = f32[] constant(1e-05)
  broadcast.3008 = f32[256]{0} broadcast(constant.3007), dimensions={}
  add.3009 = f32[256]{0} add(subtract.2988, broadcast.3008)
  rsqrt.3010 = f32[256]{0} rsqrt(add.3009)
  broadcast.3018 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3010), dimensions={3}
  parameter.142 = f32[256]{0} parameter(141)
  reshape.3017 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.142)
  multiply.3019 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3018, reshape.3017)
  reshape.3020 = f32[256]{0} reshape(multiply.3019)
  broadcast.3021 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3020), dimensions={3}
  multiply.3022 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3006, broadcast.3021)
  parameter.141 = f32[256]{0} parameter(140)
  reshape.3023 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.141)
  reshape.3024 = f32[256]{0} reshape(reshape.3023)
  broadcast.3025 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3024), dimensions={3}
  add.3026 = f32[128,14,14,256]{3,2,1,0} add(multiply.3022, broadcast.3025)
  convert.3027 = bf16[128,14,14,256]{3,2,1,0} convert(add.3026)
  constant.3029 = bf16[] constant(0)
  broadcast.3030 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3029), dimensions={}
  maximum.3031 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3027, broadcast.3030)
  tuple.3032 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3031)
  get-tuple-element.3033 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3032), index=0
  parameter.147 = f32[1,1,256,1024]{3,2,1,0} parameter(146)
  convert.3039 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.147)
  convolution.3040 = bf16[128,14,14,1024]{3,2,1,0} convolution(get-tuple-element.3033, convert.3039), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3041 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.3040)
  constant.3042 = f32[] constant(0)
  reduce.3047 = f32[1024]{0} reduce(convert.3041, constant.3042), dimensions={0,1,2}, to_apply=primitive_computation_add.3043
  constant.3048 = s32[] constant(25088)
  convert.3049 = f32[] convert(constant.3048)
  broadcast.3050 = f32[1024]{0} broadcast(convert.3049), dimensions={}
  divide.3051 = f32[1024]{0} divide(reduce.3047, broadcast.3050)
  reshape.3085 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.3051)
  reshape.3086 = f32[1024]{0} reshape(reshape.3085)
  broadcast.3087 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3086), dimensions={3}
  subtract.3088 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.3041, broadcast.3087)
  multiply.3052 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.3041, convert.3041)
  constant.3056 = f32[] constant(0)
  reduce.3061 = f32[1024]{0} reduce(multiply.3052, constant.3056), dimensions={0,1,2}, to_apply=primitive_computation_add.3057
  constant.3062 = s32[] constant(25088)
  convert.3063 = f32[] convert(constant.3062)
  broadcast.3064 = f32[1024]{0} broadcast(convert.3063), dimensions={}
  divide.3065 = f32[1024]{0} divide(reduce.3061, broadcast.3064)
  multiply.3066 = f32[1024]{0} multiply(divide.3051, divide.3051)
  subtract.3070 = f32[1024]{0} subtract(divide.3065, multiply.3066)
  constant.3089 = f32[] constant(1e-05)
  broadcast.3090 = f32[1024]{0} broadcast(constant.3089), dimensions={}
  add.3091 = f32[1024]{0} add(subtract.3070, broadcast.3090)
  rsqrt.3092 = f32[1024]{0} rsqrt(add.3091)
  broadcast.3100 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.3092), dimensions={3}
  parameter.144 = f32[1024]{0} parameter(143)
  reshape.3099 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.144)
  multiply.3101 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.3100, reshape.3099)
  reshape.3102 = f32[1024]{0} reshape(multiply.3101)
  broadcast.3103 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3102), dimensions={3}
  multiply.3104 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.3088, broadcast.3103)
  parameter.143 = f32[1024]{0} parameter(142)
  reshape.3105 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.143)
  reshape.3106 = f32[1024]{0} reshape(reshape.3105)
  broadcast.3107 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3106), dimensions={3}
  add.3108 = f32[128,14,14,1024]{3,2,1,0} add(multiply.3104, broadcast.3107)
  convert.3109 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3108)
  add.3110 = bf16[128,14,14,1024]{3,2,1,0} add(get-tuple-element.2869, convert.3109)
  constant.3112 = bf16[] constant(0)
  broadcast.3113 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3112), dimensions={}
  maximum.3114 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.3110, broadcast.3113)
  tuple.3115 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.3114)
  get-tuple-element.3116 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.3115), index=0
  parameter.154 = f32[1,1,1024,256]{3,2,1,0} parameter(153)
  convert.3122 = bf16[1,1,1024,256]{3,2,1,0} convert(parameter.154)
  convolution.3123 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.3116, convert.3122), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3124 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3123)
  constant.3125 = f32[] constant(0)
  reduce.3130 = f32[256]{0} reduce(convert.3124, constant.3125), dimensions={0,1,2}, to_apply=primitive_computation_add.3126
  constant.3131 = s32[] constant(25088)
  convert.3132 = f32[] convert(constant.3131)
  broadcast.3133 = f32[256]{0} broadcast(convert.3132), dimensions={}
  divide.3134 = f32[256]{0} divide(reduce.3130, broadcast.3133)
  reshape.3168 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3134)
  reshape.3169 = f32[256]{0} reshape(reshape.3168)
  broadcast.3170 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3169), dimensions={3}
  subtract.3171 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3124, broadcast.3170)
  multiply.3135 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3124, convert.3124)
  constant.3139 = f32[] constant(0)
  reduce.3144 = f32[256]{0} reduce(multiply.3135, constant.3139), dimensions={0,1,2}, to_apply=primitive_computation_add.3140
  constant.3145 = s32[] constant(25088)
  convert.3146 = f32[] convert(constant.3145)
  broadcast.3147 = f32[256]{0} broadcast(convert.3146), dimensions={}
  divide.3148 = f32[256]{0} divide(reduce.3144, broadcast.3147)
  multiply.3149 = f32[256]{0} multiply(divide.3134, divide.3134)
  subtract.3153 = f32[256]{0} subtract(divide.3148, multiply.3149)
  constant.3172 = f32[] constant(1e-05)
  broadcast.3173 = f32[256]{0} broadcast(constant.3172), dimensions={}
  add.3174 = f32[256]{0} add(subtract.3153, broadcast.3173)
  rsqrt.3175 = f32[256]{0} rsqrt(add.3174)
  broadcast.3183 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3175), dimensions={3}
  parameter.149 = f32[256]{0} parameter(148)
  reshape.3182 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.149)
  multiply.3184 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3183, reshape.3182)
  reshape.3185 = f32[256]{0} reshape(multiply.3184)
  broadcast.3186 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3185), dimensions={3}
  multiply.3187 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3171, broadcast.3186)
  parameter.148 = f32[256]{0} parameter(147)
  reshape.3188 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.148)
  reshape.3189 = f32[256]{0} reshape(reshape.3188)
  broadcast.3190 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3189), dimensions={3}
  add.3191 = f32[128,14,14,256]{3,2,1,0} add(multiply.3187, broadcast.3190)
  convert.3192 = bf16[128,14,14,256]{3,2,1,0} convert(add.3191)
  constant.3194 = bf16[] constant(0)
  broadcast.3195 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3194), dimensions={}
  maximum.3196 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3192, broadcast.3195)
  tuple.3197 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3196)
  get-tuple-element.3198 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3197), index=0
  parameter.155 = f32[3,3,256,256]{3,2,1,0} parameter(154)
  convert.3204 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.155)
  convolution.3205 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.3198, convert.3204), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.3206 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3205)
  constant.3207 = f32[] constant(0)
  reduce.3212 = f32[256]{0} reduce(convert.3206, constant.3207), dimensions={0,1,2}, to_apply=primitive_computation_add.3208
  constant.3213 = s32[] constant(25088)
  convert.3214 = f32[] convert(constant.3213)
  broadcast.3215 = f32[256]{0} broadcast(convert.3214), dimensions={}
  divide.3216 = f32[256]{0} divide(reduce.3212, broadcast.3215)
  reshape.3250 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3216)
  reshape.3251 = f32[256]{0} reshape(reshape.3250)
  broadcast.3252 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3251), dimensions={3}
  subtract.3253 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3206, broadcast.3252)
  multiply.3217 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3206, convert.3206)
  constant.3221 = f32[] constant(0)
  reduce.3226 = f32[256]{0} reduce(multiply.3217, constant.3221), dimensions={0,1,2}, to_apply=primitive_computation_add.3222
  constant.3227 = s32[] constant(25088)
  convert.3228 = f32[] convert(constant.3227)
  broadcast.3229 = f32[256]{0} broadcast(convert.3228), dimensions={}
  divide.3230 = f32[256]{0} divide(reduce.3226, broadcast.3229)
  multiply.3231 = f32[256]{0} multiply(divide.3216, divide.3216)
  subtract.3235 = f32[256]{0} subtract(divide.3230, multiply.3231)
  constant.3254 = f32[] constant(1e-05)
  broadcast.3255 = f32[256]{0} broadcast(constant.3254), dimensions={}
  add.3256 = f32[256]{0} add(subtract.3235, broadcast.3255)
  rsqrt.3257 = f32[256]{0} rsqrt(add.3256)
  broadcast.3265 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3257), dimensions={3}
  parameter.151 = f32[256]{0} parameter(150)
  reshape.3264 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.151)
  multiply.3266 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3265, reshape.3264)
  reshape.3267 = f32[256]{0} reshape(multiply.3266)
  broadcast.3268 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3267), dimensions={3}
  multiply.3269 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3253, broadcast.3268)
  parameter.150 = f32[256]{0} parameter(149)
  reshape.3270 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.150)
  reshape.3271 = f32[256]{0} reshape(reshape.3270)
  broadcast.3272 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3271), dimensions={3}
  add.3273 = f32[128,14,14,256]{3,2,1,0} add(multiply.3269, broadcast.3272)
  convert.3274 = bf16[128,14,14,256]{3,2,1,0} convert(add.3273)
  constant.3276 = bf16[] constant(0)
  broadcast.3277 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3276), dimensions={}
  maximum.3278 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3274, broadcast.3277)
  tuple.3279 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3278)
  get-tuple-element.3280 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3279), index=0
  parameter.156 = f32[1,1,256,1024]{3,2,1,0} parameter(155)
  convert.3286 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.156)
  convolution.3287 = bf16[128,14,14,1024]{3,2,1,0} convolution(get-tuple-element.3280, convert.3286), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3288 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.3287)
  constant.3289 = f32[] constant(0)
  reduce.3294 = f32[1024]{0} reduce(convert.3288, constant.3289), dimensions={0,1,2}, to_apply=primitive_computation_add.3290
  constant.3295 = s32[] constant(25088)
  convert.3296 = f32[] convert(constant.3295)
  broadcast.3297 = f32[1024]{0} broadcast(convert.3296), dimensions={}
  divide.3298 = f32[1024]{0} divide(reduce.3294, broadcast.3297)
  reshape.3332 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.3298)
  reshape.3333 = f32[1024]{0} reshape(reshape.3332)
  broadcast.3334 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3333), dimensions={3}
  subtract.3335 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.3288, broadcast.3334)
  multiply.3299 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.3288, convert.3288)
  constant.3303 = f32[] constant(0)
  reduce.3308 = f32[1024]{0} reduce(multiply.3299, constant.3303), dimensions={0,1,2}, to_apply=primitive_computation_add.3304
  constant.3309 = s32[] constant(25088)
  convert.3310 = f32[] convert(constant.3309)
  broadcast.3311 = f32[1024]{0} broadcast(convert.3310), dimensions={}
  divide.3312 = f32[1024]{0} divide(reduce.3308, broadcast.3311)
  multiply.3313 = f32[1024]{0} multiply(divide.3298, divide.3298)
  subtract.3317 = f32[1024]{0} subtract(divide.3312, multiply.3313)
  constant.3336 = f32[] constant(1e-05)
  broadcast.3337 = f32[1024]{0} broadcast(constant.3336), dimensions={}
  add.3338 = f32[1024]{0} add(subtract.3317, broadcast.3337)
  rsqrt.3339 = f32[1024]{0} rsqrt(add.3338)
  broadcast.3347 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.3339), dimensions={3}
  parameter.153 = f32[1024]{0} parameter(152)
  reshape.3346 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.153)
  multiply.3348 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.3347, reshape.3346)
  reshape.3349 = f32[1024]{0} reshape(multiply.3348)
  broadcast.3350 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3349), dimensions={3}
  multiply.3351 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.3335, broadcast.3350)
  parameter.152 = f32[1024]{0} parameter(151)
  reshape.3352 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.152)
  reshape.3353 = f32[1024]{0} reshape(reshape.3352)
  broadcast.3354 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3353), dimensions={3}
  add.3355 = f32[128,14,14,1024]{3,2,1,0} add(multiply.3351, broadcast.3354)
  convert.3356 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3355)
  add.3357 = bf16[128,14,14,1024]{3,2,1,0} add(get-tuple-element.3116, convert.3356)
  constant.3359 = bf16[] constant(0)
  broadcast.3360 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3359), dimensions={}
  maximum.3361 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.3357, broadcast.3360)
  tuple.3362 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.3361)
  get-tuple-element.3363 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.3362), index=0
  parameter.28 = f32[1,1,1024,256]{3,2,1,0} parameter(27)
  convert.3369 = bf16[1,1,1024,256]{3,2,1,0} convert(parameter.28)
  convolution.3370 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.3363, convert.3369), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3371 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3370)
  constant.3372 = f32[] constant(0)
  reduce.3377 = f32[256]{0} reduce(convert.3371, constant.3372), dimensions={0,1,2}, to_apply=primitive_computation_add.3373
  constant.3378 = s32[] constant(25088)
  convert.3379 = f32[] convert(constant.3378)
  broadcast.3380 = f32[256]{0} broadcast(convert.3379), dimensions={}
  divide.3381 = f32[256]{0} divide(reduce.3377, broadcast.3380)
  reshape.3415 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3381)
  reshape.3416 = f32[256]{0} reshape(reshape.3415)
  broadcast.3417 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3416), dimensions={3}
  subtract.3418 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3371, broadcast.3417)
  multiply.3382 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3371, convert.3371)
  constant.3386 = f32[] constant(0)
  reduce.3391 = f32[256]{0} reduce(multiply.3382, constant.3386), dimensions={0,1,2}, to_apply=primitive_computation_add.3387
  constant.3392 = s32[] constant(25088)
  convert.3393 = f32[] convert(constant.3392)
  broadcast.3394 = f32[256]{0} broadcast(convert.3393), dimensions={}
  divide.3395 = f32[256]{0} divide(reduce.3391, broadcast.3394)
  multiply.3396 = f32[256]{0} multiply(divide.3381, divide.3381)
  subtract.3400 = f32[256]{0} subtract(divide.3395, multiply.3396)
  constant.3419 = f32[] constant(1e-05)
  broadcast.3420 = f32[256]{0} broadcast(constant.3419), dimensions={}
  add.3421 = f32[256]{0} add(subtract.3400, broadcast.3420)
  rsqrt.3422 = f32[256]{0} rsqrt(add.3421)
  broadcast.3430 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3422), dimensions={3}
  parameter.23 = f32[256]{0} parameter(22)
  reshape.3429 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.23)
  multiply.3431 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3430, reshape.3429)
  reshape.3432 = f32[256]{0} reshape(multiply.3431)
  broadcast.3433 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3432), dimensions={3}
  multiply.3434 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3418, broadcast.3433)
  parameter.22 = f32[256]{0} parameter(21)
  reshape.3435 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.22)
  reshape.3436 = f32[256]{0} reshape(reshape.3435)
  broadcast.3437 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3436), dimensions={3}
  add.3438 = f32[128,14,14,256]{3,2,1,0} add(multiply.3434, broadcast.3437)
  convert.3439 = bf16[128,14,14,256]{3,2,1,0} convert(add.3438)
  constant.3441 = bf16[] constant(0)
  broadcast.3442 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3441), dimensions={}
  maximum.3443 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3439, broadcast.3442)
  tuple.3444 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3443)
  get-tuple-element.3445 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3444), index=0
  parameter.29 = f32[3,3,256,256]{3,2,1,0} parameter(28)
  convert.3451 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.29)
  convolution.3452 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.3445, convert.3451), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.3453 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3452)
  constant.3454 = f32[] constant(0)
  reduce.3459 = f32[256]{0} reduce(convert.3453, constant.3454), dimensions={0,1,2}, to_apply=primitive_computation_add.3455
  constant.3460 = s32[] constant(25088)
  convert.3461 = f32[] convert(constant.3460)
  broadcast.3462 = f32[256]{0} broadcast(convert.3461), dimensions={}
  divide.3463 = f32[256]{0} divide(reduce.3459, broadcast.3462)
  reshape.3497 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3463)
  reshape.3498 = f32[256]{0} reshape(reshape.3497)
  broadcast.3499 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3498), dimensions={3}
  subtract.3500 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3453, broadcast.3499)
  multiply.3464 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3453, convert.3453)
  constant.3468 = f32[] constant(0)
  reduce.3473 = f32[256]{0} reduce(multiply.3464, constant.3468), dimensions={0,1,2}, to_apply=primitive_computation_add.3469
  constant.3474 = s32[] constant(25088)
  convert.3475 = f32[] convert(constant.3474)
  broadcast.3476 = f32[256]{0} broadcast(convert.3475), dimensions={}
  divide.3477 = f32[256]{0} divide(reduce.3473, broadcast.3476)
  multiply.3478 = f32[256]{0} multiply(divide.3463, divide.3463)
  subtract.3482 = f32[256]{0} subtract(divide.3477, multiply.3478)
  constant.3501 = f32[] constant(1e-05)
  broadcast.3502 = f32[256]{0} broadcast(constant.3501), dimensions={}
  add.3503 = f32[256]{0} add(subtract.3482, broadcast.3502)
  rsqrt.3504 = f32[256]{0} rsqrt(add.3503)
  broadcast.3512 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3504), dimensions={3}
  parameter.25 = f32[256]{0} parameter(24)
  reshape.3511 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.25)
  multiply.3513 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3512, reshape.3511)
  reshape.3514 = f32[256]{0} reshape(multiply.3513)
  broadcast.3515 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3514), dimensions={3}
  multiply.3516 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3500, broadcast.3515)
  parameter.24 = f32[256]{0} parameter(23)
  reshape.3517 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.24)
  reshape.3518 = f32[256]{0} reshape(reshape.3517)
  broadcast.3519 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3518), dimensions={3}
  add.3520 = f32[128,14,14,256]{3,2,1,0} add(multiply.3516, broadcast.3519)
  convert.3521 = bf16[128,14,14,256]{3,2,1,0} convert(add.3520)
  constant.3523 = bf16[] constant(0)
  broadcast.3524 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3523), dimensions={}
  maximum.3525 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3521, broadcast.3524)
  tuple.3526 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3525)
  get-tuple-element.3527 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3526), index=0
  parameter.30 = f32[1,1,256,1024]{3,2,1,0} parameter(29)
  convert.3533 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.30)
  convolution.3534 = bf16[128,14,14,1024]{3,2,1,0} convolution(get-tuple-element.3527, convert.3533), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3535 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.3534)
  constant.3536 = f32[] constant(0)
  reduce.3541 = f32[1024]{0} reduce(convert.3535, constant.3536), dimensions={0,1,2}, to_apply=primitive_computation_add.3537
  constant.3542 = s32[] constant(25088)
  convert.3543 = f32[] convert(constant.3542)
  broadcast.3544 = f32[1024]{0} broadcast(convert.3543), dimensions={}
  divide.3545 = f32[1024]{0} divide(reduce.3541, broadcast.3544)
  reshape.3579 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.3545)
  reshape.3580 = f32[1024]{0} reshape(reshape.3579)
  broadcast.3581 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3580), dimensions={3}
  subtract.3582 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.3535, broadcast.3581)
  multiply.3546 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.3535, convert.3535)
  constant.3550 = f32[] constant(0)
  reduce.3555 = f32[1024]{0} reduce(multiply.3546, constant.3550), dimensions={0,1,2}, to_apply=primitive_computation_add.3551
  constant.3556 = s32[] constant(25088)
  convert.3557 = f32[] convert(constant.3556)
  broadcast.3558 = f32[1024]{0} broadcast(convert.3557), dimensions={}
  divide.3559 = f32[1024]{0} divide(reduce.3555, broadcast.3558)
  multiply.3560 = f32[1024]{0} multiply(divide.3545, divide.3545)
  subtract.3564 = f32[1024]{0} subtract(divide.3559, multiply.3560)
  constant.3583 = f32[] constant(1e-05)
  broadcast.3584 = f32[1024]{0} broadcast(constant.3583), dimensions={}
  add.3585 = f32[1024]{0} add(subtract.3564, broadcast.3584)
  rsqrt.3586 = f32[1024]{0} rsqrt(add.3585)
  broadcast.3594 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.3586), dimensions={3}
  parameter.27 = f32[1024]{0} parameter(26)
  reshape.3593 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.27)
  multiply.3595 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.3594, reshape.3593)
  reshape.3596 = f32[1024]{0} reshape(multiply.3595)
  broadcast.3597 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3596), dimensions={3}
  multiply.3598 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.3582, broadcast.3597)
  parameter.26 = f32[1024]{0} parameter(25)
  reshape.3599 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.26)
  reshape.3600 = f32[1024]{0} reshape(reshape.3599)
  broadcast.3601 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3600), dimensions={3}
  add.3602 = f32[128,14,14,1024]{3,2,1,0} add(multiply.3598, broadcast.3601)
  convert.3603 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3602)
  add.3604 = bf16[128,14,14,1024]{3,2,1,0} add(get-tuple-element.3363, convert.3603)
  constant.3606 = bf16[] constant(0)
  broadcast.3607 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3606), dimensions={}
  maximum.3608 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.3604, broadcast.3607)
  tuple.3609 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.3608)
  get-tuple-element.3610 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.3609), index=0
  parameter.37 = f32[1,1,1024,256]{3,2,1,0} parameter(36)
  convert.3616 = bf16[1,1,1024,256]{3,2,1,0} convert(parameter.37)
  convolution.3617 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.3610, convert.3616), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3618 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3617)
  constant.3619 = f32[] constant(0)
  reduce.3624 = f32[256]{0} reduce(convert.3618, constant.3619), dimensions={0,1,2}, to_apply=primitive_computation_add.3620
  constant.3625 = s32[] constant(25088)
  convert.3626 = f32[] convert(constant.3625)
  broadcast.3627 = f32[256]{0} broadcast(convert.3626), dimensions={}
  divide.3628 = f32[256]{0} divide(reduce.3624, broadcast.3627)
  reshape.3662 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3628)
  reshape.3663 = f32[256]{0} reshape(reshape.3662)
  broadcast.3664 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3663), dimensions={3}
  subtract.3665 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3618, broadcast.3664)
  multiply.3629 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3618, convert.3618)
  constant.3633 = f32[] constant(0)
  reduce.3638 = f32[256]{0} reduce(multiply.3629, constant.3633), dimensions={0,1,2}, to_apply=primitive_computation_add.3634
  constant.3639 = s32[] constant(25088)
  convert.3640 = f32[] convert(constant.3639)
  broadcast.3641 = f32[256]{0} broadcast(convert.3640), dimensions={}
  divide.3642 = f32[256]{0} divide(reduce.3638, broadcast.3641)
  multiply.3643 = f32[256]{0} multiply(divide.3628, divide.3628)
  subtract.3647 = f32[256]{0} subtract(divide.3642, multiply.3643)
  constant.3666 = f32[] constant(1e-05)
  broadcast.3667 = f32[256]{0} broadcast(constant.3666), dimensions={}
  add.3668 = f32[256]{0} add(subtract.3647, broadcast.3667)
  rsqrt.3669 = f32[256]{0} rsqrt(add.3668)
  broadcast.3677 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3669), dimensions={3}
  parameter.32 = f32[256]{0} parameter(31)
  reshape.3676 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.32)
  multiply.3678 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3677, reshape.3676)
  reshape.3679 = f32[256]{0} reshape(multiply.3678)
  broadcast.3680 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3679), dimensions={3}
  multiply.3681 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3665, broadcast.3680)
  parameter.31 = f32[256]{0} parameter(30)
  reshape.3682 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.31)
  reshape.3683 = f32[256]{0} reshape(reshape.3682)
  broadcast.3684 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3683), dimensions={3}
  add.3685 = f32[128,14,14,256]{3,2,1,0} add(multiply.3681, broadcast.3684)
  convert.3686 = bf16[128,14,14,256]{3,2,1,0} convert(add.3685)
  constant.3688 = bf16[] constant(0)
  broadcast.3689 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3688), dimensions={}
  maximum.3690 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3686, broadcast.3689)
  tuple.3691 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3690)
  get-tuple-element.3692 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3691), index=0
  parameter.38 = f32[3,3,256,256]{3,2,1,0} parameter(37)
  convert.3698 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.38)
  convolution.3699 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.3692, convert.3698), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.3700 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3699)
  constant.3701 = f32[] constant(0)
  reduce.3706 = f32[256]{0} reduce(convert.3700, constant.3701), dimensions={0,1,2}, to_apply=primitive_computation_add.3702
  constant.3707 = s32[] constant(25088)
  convert.3708 = f32[] convert(constant.3707)
  broadcast.3709 = f32[256]{0} broadcast(convert.3708), dimensions={}
  divide.3710 = f32[256]{0} divide(reduce.3706, broadcast.3709)
  reshape.3744 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3710)
  reshape.3745 = f32[256]{0} reshape(reshape.3744)
  broadcast.3746 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3745), dimensions={3}
  subtract.3747 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3700, broadcast.3746)
  multiply.3711 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3700, convert.3700)
  constant.3715 = f32[] constant(0)
  reduce.3720 = f32[256]{0} reduce(multiply.3711, constant.3715), dimensions={0,1,2}, to_apply=primitive_computation_add.3716
  constant.3721 = s32[] constant(25088)
  convert.3722 = f32[] convert(constant.3721)
  broadcast.3723 = f32[256]{0} broadcast(convert.3722), dimensions={}
  divide.3724 = f32[256]{0} divide(reduce.3720, broadcast.3723)
  multiply.3725 = f32[256]{0} multiply(divide.3710, divide.3710)
  subtract.3729 = f32[256]{0} subtract(divide.3724, multiply.3725)
  constant.3748 = f32[] constant(1e-05)
  broadcast.3749 = f32[256]{0} broadcast(constant.3748), dimensions={}
  add.3750 = f32[256]{0} add(subtract.3729, broadcast.3749)
  rsqrt.3751 = f32[256]{0} rsqrt(add.3750)
  broadcast.3759 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3751), dimensions={3}
  parameter.34 = f32[256]{0} parameter(33)
  reshape.3758 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.34)
  multiply.3760 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3759, reshape.3758)
  reshape.3761 = f32[256]{0} reshape(multiply.3760)
  broadcast.3762 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3761), dimensions={3}
  multiply.3763 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3747, broadcast.3762)
  parameter.33 = f32[256]{0} parameter(32)
  reshape.3764 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.33)
  reshape.3765 = f32[256]{0} reshape(reshape.3764)
  broadcast.3766 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3765), dimensions={3}
  add.3767 = f32[128,14,14,256]{3,2,1,0} add(multiply.3763, broadcast.3766)
  convert.3768 = bf16[128,14,14,256]{3,2,1,0} convert(add.3767)
  constant.3770 = bf16[] constant(0)
  broadcast.3771 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3770), dimensions={}
  maximum.3772 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3768, broadcast.3771)
  tuple.3773 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3772)
  get-tuple-element.3774 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3773), index=0
  parameter.39 = f32[1,1,256,1024]{3,2,1,0} parameter(38)
  convert.3780 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.39)
  convolution.3781 = bf16[128,14,14,1024]{3,2,1,0} convolution(get-tuple-element.3774, convert.3780), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3782 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.3781)
  constant.3783 = f32[] constant(0)
  reduce.3788 = f32[1024]{0} reduce(convert.3782, constant.3783), dimensions={0,1,2}, to_apply=primitive_computation_add.3784
  constant.3789 = s32[] constant(25088)
  convert.3790 = f32[] convert(constant.3789)
  broadcast.3791 = f32[1024]{0} broadcast(convert.3790), dimensions={}
  divide.3792 = f32[1024]{0} divide(reduce.3788, broadcast.3791)
  reshape.3826 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.3792)
  reshape.3827 = f32[1024]{0} reshape(reshape.3826)
  broadcast.3828 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3827), dimensions={3}
  subtract.3829 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.3782, broadcast.3828)
  multiply.3793 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.3782, convert.3782)
  constant.3797 = f32[] constant(0)
  reduce.3802 = f32[1024]{0} reduce(multiply.3793, constant.3797), dimensions={0,1,2}, to_apply=primitive_computation_add.3798
  constant.3803 = s32[] constant(25088)
  convert.3804 = f32[] convert(constant.3803)
  broadcast.3805 = f32[1024]{0} broadcast(convert.3804), dimensions={}
  divide.3806 = f32[1024]{0} divide(reduce.3802, broadcast.3805)
  multiply.3807 = f32[1024]{0} multiply(divide.3792, divide.3792)
  subtract.3811 = f32[1024]{0} subtract(divide.3806, multiply.3807)
  constant.3830 = f32[] constant(1e-05)
  broadcast.3831 = f32[1024]{0} broadcast(constant.3830), dimensions={}
  add.3832 = f32[1024]{0} add(subtract.3811, broadcast.3831)
  rsqrt.3833 = f32[1024]{0} rsqrt(add.3832)
  broadcast.3841 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.3833), dimensions={3}
  parameter.36 = f32[1024]{0} parameter(35)
  reshape.3840 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.36)
  multiply.3842 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.3841, reshape.3840)
  reshape.3843 = f32[1024]{0} reshape(multiply.3842)
  broadcast.3844 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3843), dimensions={3}
  multiply.3845 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.3829, broadcast.3844)
  parameter.35 = f32[1024]{0} parameter(34)
  reshape.3846 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.35)
  reshape.3847 = f32[1024]{0} reshape(reshape.3846)
  broadcast.3848 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.3847), dimensions={3}
  add.3849 = f32[128,14,14,1024]{3,2,1,0} add(multiply.3845, broadcast.3848)
  convert.3850 = bf16[128,14,14,1024]{3,2,1,0} convert(add.3849)
  add.3851 = bf16[128,14,14,1024]{3,2,1,0} add(get-tuple-element.3610, convert.3850)
  constant.3853 = bf16[] constant(0)
  broadcast.3854 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3853), dimensions={}
  maximum.3855 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.3851, broadcast.3854)
  tuple.3856 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.3855)
  get-tuple-element.3857 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.3856), index=0
  parameter.46 = f32[1,1,1024,256]{3,2,1,0} parameter(45)
  convert.3863 = bf16[1,1,1024,256]{3,2,1,0} convert(parameter.46)
  convolution.3864 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.3857, convert.3863), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.3865 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3864)
  constant.3866 = f32[] constant(0)
  reduce.3871 = f32[256]{0} reduce(convert.3865, constant.3866), dimensions={0,1,2}, to_apply=primitive_computation_add.3867
  constant.3872 = s32[] constant(25088)
  convert.3873 = f32[] convert(constant.3872)
  broadcast.3874 = f32[256]{0} broadcast(convert.3873), dimensions={}
  divide.3875 = f32[256]{0} divide(reduce.3871, broadcast.3874)
  reshape.3909 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3875)
  reshape.3910 = f32[256]{0} reshape(reshape.3909)
  broadcast.3911 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3910), dimensions={3}
  subtract.3912 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3865, broadcast.3911)
  multiply.3876 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3865, convert.3865)
  constant.3880 = f32[] constant(0)
  reduce.3885 = f32[256]{0} reduce(multiply.3876, constant.3880), dimensions={0,1,2}, to_apply=primitive_computation_add.3881
  constant.3886 = s32[] constant(25088)
  convert.3887 = f32[] convert(constant.3886)
  broadcast.3888 = f32[256]{0} broadcast(convert.3887), dimensions={}
  divide.3889 = f32[256]{0} divide(reduce.3885, broadcast.3888)
  multiply.3890 = f32[256]{0} multiply(divide.3875, divide.3875)
  subtract.3894 = f32[256]{0} subtract(divide.3889, multiply.3890)
  constant.3913 = f32[] constant(1e-05)
  broadcast.3914 = f32[256]{0} broadcast(constant.3913), dimensions={}
  add.3915 = f32[256]{0} add(subtract.3894, broadcast.3914)
  rsqrt.3916 = f32[256]{0} rsqrt(add.3915)
  broadcast.3924 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3916), dimensions={3}
  parameter.41 = f32[256]{0} parameter(40)
  reshape.3923 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.41)
  multiply.3925 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.3924, reshape.3923)
  reshape.3926 = f32[256]{0} reshape(multiply.3925)
  broadcast.3927 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3926), dimensions={3}
  multiply.3928 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3912, broadcast.3927)
  parameter.40 = f32[256]{0} parameter(39)
  reshape.3929 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.40)
  reshape.3930 = f32[256]{0} reshape(reshape.3929)
  broadcast.3931 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3930), dimensions={3}
  add.3932 = f32[128,14,14,256]{3,2,1,0} add(multiply.3928, broadcast.3931)
  convert.3933 = bf16[128,14,14,256]{3,2,1,0} convert(add.3932)
  constant.3935 = bf16[] constant(0)
  broadcast.3936 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3935), dimensions={}
  maximum.3937 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.3933, broadcast.3936)
  tuple.3938 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.3937)
  get-tuple-element.3939 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.3938), index=0
  parameter.47 = f32[3,3,256,256]{3,2,1,0} parameter(46)
  convert.3945 = bf16[3,3,256,256]{3,2,1,0} convert(parameter.47)
  convolution.3946 = bf16[128,14,14,256]{3,2,1,0} convolution(get-tuple-element.3939, convert.3945), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.3947 = f32[128,14,14,256]{3,2,1,0} convert(convolution.3946)
  constant.3948 = f32[] constant(0)
  reduce.3953 = f32[256]{0} reduce(convert.3947, constant.3948), dimensions={0,1,2}, to_apply=primitive_computation_add.3949
  constant.3954 = s32[] constant(25088)
  convert.3955 = f32[] convert(constant.3954)
  broadcast.3956 = f32[256]{0} broadcast(convert.3955), dimensions={}
  divide.3957 = f32[256]{0} divide(reduce.3953, broadcast.3956)
  reshape.3991 = f32[1,1,1,256]{3,2,1,0} reshape(divide.3957)
  reshape.3992 = f32[256]{0} reshape(reshape.3991)
  broadcast.3993 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.3992), dimensions={3}
  subtract.3994 = f32[128,14,14,256]{3,2,1,0} subtract(convert.3947, broadcast.3993)
  multiply.3958 = f32[128,14,14,256]{3,2,1,0} multiply(convert.3947, convert.3947)
  constant.3962 = f32[] constant(0)
  reduce.3967 = f32[256]{0} reduce(multiply.3958, constant.3962), dimensions={0,1,2}, to_apply=primitive_computation_add.3963
  constant.3968 = s32[] constant(25088)
  convert.3969 = f32[] convert(constant.3968)
  broadcast.3970 = f32[256]{0} broadcast(convert.3969), dimensions={}
  divide.3971 = f32[256]{0} divide(reduce.3967, broadcast.3970)
  multiply.3972 = f32[256]{0} multiply(divide.3957, divide.3957)
  subtract.3976 = f32[256]{0} subtract(divide.3971, multiply.3972)
  constant.3995 = f32[] constant(1e-05)
  broadcast.3996 = f32[256]{0} broadcast(constant.3995), dimensions={}
  add.3997 = f32[256]{0} add(subtract.3976, broadcast.3996)
  rsqrt.3998 = f32[256]{0} rsqrt(add.3997)
  broadcast.4006 = f32[1,1,1,256]{3,2,1,0} broadcast(rsqrt.3998), dimensions={3}
  parameter.43 = f32[256]{0} parameter(42)
  reshape.4005 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.43)
  multiply.4007 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.4006, reshape.4005)
  reshape.4008 = f32[256]{0} reshape(multiply.4007)
  broadcast.4009 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4008), dimensions={3}
  multiply.4010 = f32[128,14,14,256]{3,2,1,0} multiply(subtract.3994, broadcast.4009)
  parameter.42 = f32[256]{0} parameter(41)
  reshape.4011 = f32[1,1,1,256]{3,2,1,0} reshape(parameter.42)
  reshape.4012 = f32[256]{0} reshape(reshape.4011)
  broadcast.4013 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.4012), dimensions={3}
  add.4014 = f32[128,14,14,256]{3,2,1,0} add(multiply.4010, broadcast.4013)
  convert.4015 = bf16[128,14,14,256]{3,2,1,0} convert(add.4014)
  constant.4017 = bf16[] constant(0)
  broadcast.4018 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4017), dimensions={}
  maximum.4019 = bf16[128,14,14,256]{3,2,1,0} maximum(convert.4015, broadcast.4018)
  tuple.4020 = (bf16[128,14,14,256]{3,2,1,0}) tuple(maximum.4019)
  get-tuple-element.4021 = bf16[128,14,14,256]{3,2,1,0} get-tuple-element(tuple.4020), index=0
  parameter.48 = f32[1,1,256,1024]{3,2,1,0} parameter(47)
  convert.4027 = bf16[1,1,256,1024]{3,2,1,0} convert(parameter.48)
  convolution.4028 = bf16[128,14,14,1024]{3,2,1,0} convolution(get-tuple-element.4021, convert.4027), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4029 = f32[128,14,14,1024]{3,2,1,0} convert(convolution.4028)
  constant.4030 = f32[] constant(0)
  reduce.4035 = f32[1024]{0} reduce(convert.4029, constant.4030), dimensions={0,1,2}, to_apply=primitive_computation_add.4031
  constant.4036 = s32[] constant(25088)
  convert.4037 = f32[] convert(constant.4036)
  broadcast.4038 = f32[1024]{0} broadcast(convert.4037), dimensions={}
  divide.4039 = f32[1024]{0} divide(reduce.4035, broadcast.4038)
  reshape.4073 = f32[1,1,1,1024]{3,2,1,0} reshape(divide.4039)
  reshape.4074 = f32[1024]{0} reshape(reshape.4073)
  broadcast.4075 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4074), dimensions={3}
  subtract.4076 = f32[128,14,14,1024]{3,2,1,0} subtract(convert.4029, broadcast.4075)
  multiply.4040 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.4029, convert.4029)
  constant.4044 = f32[] constant(0)
  reduce.4049 = f32[1024]{0} reduce(multiply.4040, constant.4044), dimensions={0,1,2}, to_apply=primitive_computation_add.4045
  constant.4050 = s32[] constant(25088)
  convert.4051 = f32[] convert(constant.4050)
  broadcast.4052 = f32[1024]{0} broadcast(convert.4051), dimensions={}
  divide.4053 = f32[1024]{0} divide(reduce.4049, broadcast.4052)
  multiply.4054 = f32[1024]{0} multiply(divide.4039, divide.4039)
  subtract.4058 = f32[1024]{0} subtract(divide.4053, multiply.4054)
  constant.4077 = f32[] constant(1e-05)
  broadcast.4078 = f32[1024]{0} broadcast(constant.4077), dimensions={}
  add.4079 = f32[1024]{0} add(subtract.4058, broadcast.4078)
  rsqrt.4080 = f32[1024]{0} rsqrt(add.4079)
  broadcast.4088 = f32[1,1,1,1024]{3,2,1,0} broadcast(rsqrt.4080), dimensions={3}
  parameter.45 = f32[1024]{0} parameter(44)
  reshape.4087 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.45)
  multiply.4089 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.4088, reshape.4087)
  reshape.4090 = f32[1024]{0} reshape(multiply.4089)
  broadcast.4091 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4090), dimensions={3}
  multiply.4092 = f32[128,14,14,1024]{3,2,1,0} multiply(subtract.4076, broadcast.4091)
  parameter.44 = f32[1024]{0} parameter(43)
  reshape.4093 = f32[1,1,1,1024]{3,2,1,0} reshape(parameter.44)
  reshape.4094 = f32[1024]{0} reshape(reshape.4093)
  broadcast.4095 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.4094), dimensions={3}
  add.4096 = f32[128,14,14,1024]{3,2,1,0} add(multiply.4092, broadcast.4095)
  convert.4097 = bf16[128,14,14,1024]{3,2,1,0} convert(add.4096)
  add.4098 = bf16[128,14,14,1024]{3,2,1,0} add(get-tuple-element.3857, convert.4097)
  constant.4100 = bf16[] constant(0)
  broadcast.4101 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.4100), dimensions={}
  maximum.4102 = bf16[128,14,14,1024]{3,2,1,0} maximum(add.4098, broadcast.4101)
  tuple.4103 = (bf16[128,14,14,1024]{3,2,1,0}) tuple(maximum.4102)
  get-tuple-element.4104 = bf16[128,14,14,1024]{3,2,1,0} get-tuple-element(tuple.4103), index=0
  parameter.58 = f32[1,1,1024,2048]{3,2,1,0} parameter(57)
  convert.4345 = bf16[1,1,1024,2048]{3,2,1,0} convert(parameter.58)
  convolution.4346 = bf16[128,7,7,2048]{3,2,1,0} convolution(get-tuple-element.4104, convert.4345), window={size=1x1 stride=2x2}, dim_labels=b01f_01io->b01f
  convert.4347 = f32[128,7,7,2048]{3,2,1,0} convert(convolution.4346)
  constant.4348 = f32[] constant(0)
  reduce.4353 = f32[2048]{0} reduce(convert.4347, constant.4348), dimensions={0,1,2}, to_apply=primitive_computation_add.4349
  constant.4354 = s32[] constant(6272)
  convert.4355 = f32[] convert(constant.4354)
  broadcast.4356 = f32[2048]{0} broadcast(convert.4355), dimensions={}
  divide.4357 = f32[2048]{0} divide(reduce.4353, broadcast.4356)
  reshape.4391 = f32[1,1,1,2048]{3,2,1,0} reshape(divide.4357)
  reshape.4392 = f32[2048]{0} reshape(reshape.4391)
  broadcast.4393 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4392), dimensions={3}
  subtract.4394 = f32[128,7,7,2048]{3,2,1,0} subtract(convert.4347, broadcast.4393)
  multiply.4358 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.4347, convert.4347)
  constant.4362 = f32[] constant(0)
  reduce.4367 = f32[2048]{0} reduce(multiply.4358, constant.4362), dimensions={0,1,2}, to_apply=primitive_computation_add.4363
  constant.4368 = s32[] constant(6272)
  convert.4369 = f32[] convert(constant.4368)
  broadcast.4370 = f32[2048]{0} broadcast(convert.4369), dimensions={}
  divide.4371 = f32[2048]{0} divide(reduce.4367, broadcast.4370)
  multiply.4372 = f32[2048]{0} multiply(divide.4357, divide.4357)
  subtract.4376 = f32[2048]{0} subtract(divide.4371, multiply.4372)
  constant.4395 = f32[] constant(1e-05)
  broadcast.4396 = f32[2048]{0} broadcast(constant.4395), dimensions={}
  add.4397 = f32[2048]{0} add(subtract.4376, broadcast.4396)
  rsqrt.4398 = f32[2048]{0} rsqrt(add.4397)
  broadcast.4406 = f32[1,1,1,2048]{3,2,1,0} broadcast(rsqrt.4398), dimensions={3}
  parameter.60 = f32[2048]{0} parameter(59)
  reshape.4405 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.60)
  multiply.4407 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.4406, reshape.4405)
  reshape.4408 = f32[2048]{0} reshape(multiply.4407)
  broadcast.4409 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4408), dimensions={3}
  multiply.4410 = f32[128,7,7,2048]{3,2,1,0} multiply(subtract.4394, broadcast.4409)
  parameter.59 = f32[2048]{0} parameter(58)
  reshape.4411 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.59)
  reshape.4412 = f32[2048]{0} reshape(reshape.4411)
  broadcast.4413 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4412), dimensions={3}
  add.4414 = f32[128,7,7,2048]{3,2,1,0} add(multiply.4410, broadcast.4413)
  convert.4415 = bf16[128,7,7,2048]{3,2,1,0} convert(add.4414)
  parameter.55 = f32[1,1,1024,512]{3,2,1,0} parameter(54)
  convert.4110 = bf16[1,1,1024,512]{3,2,1,0} convert(parameter.55)
  convolution.4111 = bf16[128,14,14,512]{3,2,1,0} convolution(get-tuple-element.4104, convert.4110), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4112 = f32[128,14,14,512]{3,2,1,0} convert(convolution.4111)
  constant.4113 = f32[] constant(0)
  reduce.4118 = f32[512]{0} reduce(convert.4112, constant.4113), dimensions={0,1,2}, to_apply=primitive_computation_add.4114
  constant.4119 = s32[] constant(25088)
  convert.4120 = f32[] convert(constant.4119)
  broadcast.4121 = f32[512]{0} broadcast(convert.4120), dimensions={}
  divide.4122 = f32[512]{0} divide(reduce.4118, broadcast.4121)
  reshape.4156 = f32[1,1,1,512]{3,2,1,0} reshape(divide.4122)
  reshape.4157 = f32[512]{0} reshape(reshape.4156)
  broadcast.4158 = f32[128,14,14,512]{3,2,1,0} broadcast(reshape.4157), dimensions={3}
  subtract.4159 = f32[128,14,14,512]{3,2,1,0} subtract(convert.4112, broadcast.4158)
  multiply.4123 = f32[128,14,14,512]{3,2,1,0} multiply(convert.4112, convert.4112)
  constant.4127 = f32[] constant(0)
  reduce.4132 = f32[512]{0} reduce(multiply.4123, constant.4127), dimensions={0,1,2}, to_apply=primitive_computation_add.4128
  constant.4133 = s32[] constant(25088)
  convert.4134 = f32[] convert(constant.4133)
  broadcast.4135 = f32[512]{0} broadcast(convert.4134), dimensions={}
  divide.4136 = f32[512]{0} divide(reduce.4132, broadcast.4135)
  multiply.4137 = f32[512]{0} multiply(divide.4122, divide.4122)
  subtract.4141 = f32[512]{0} subtract(divide.4136, multiply.4137)
  constant.4160 = f32[] constant(1e-05)
  broadcast.4161 = f32[512]{0} broadcast(constant.4160), dimensions={}
  add.4162 = f32[512]{0} add(subtract.4141, broadcast.4161)
  rsqrt.4163 = f32[512]{0} rsqrt(add.4162)
  broadcast.4171 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.4163), dimensions={3}
  parameter.50 = f32[512]{0} parameter(49)
  reshape.4170 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.50)
  multiply.4172 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.4171, reshape.4170)
  reshape.4173 = f32[512]{0} reshape(multiply.4172)
  broadcast.4174 = f32[128,14,14,512]{3,2,1,0} broadcast(reshape.4173), dimensions={3}
  multiply.4175 = f32[128,14,14,512]{3,2,1,0} multiply(subtract.4159, broadcast.4174)
  parameter.49 = f32[512]{0} parameter(48)
  reshape.4176 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.49)
  reshape.4177 = f32[512]{0} reshape(reshape.4176)
  broadcast.4178 = f32[128,14,14,512]{3,2,1,0} broadcast(reshape.4177), dimensions={3}
  add.4179 = f32[128,14,14,512]{3,2,1,0} add(multiply.4175, broadcast.4178)
  convert.4180 = bf16[128,14,14,512]{3,2,1,0} convert(add.4179)
  constant.4182 = bf16[] constant(0)
  broadcast.4183 = bf16[128,14,14,512]{3,2,1,0} broadcast(constant.4182), dimensions={}
  maximum.4184 = bf16[128,14,14,512]{3,2,1,0} maximum(convert.4180, broadcast.4183)
  tuple.4185 = (bf16[128,14,14,512]{3,2,1,0}) tuple(maximum.4184)
  get-tuple-element.4186 = bf16[128,14,14,512]{3,2,1,0} get-tuple-element(tuple.4185), index=0
  parameter.56 = f32[3,3,512,512]{3,2,1,0} parameter(55)
  convert.4192 = bf16[3,3,512,512]{3,2,1,0} convert(parameter.56)
  convolution.4193 = bf16[128,7,7,512]{3,2,1,0} convolution(get-tuple-element.4186, convert.4192), window={size=3x3 stride=2x2 pad=0_1x0_1}, dim_labels=b01f_01io->b01f
  convert.4194 = f32[128,7,7,512]{3,2,1,0} convert(convolution.4193)
  constant.4195 = f32[] constant(0)
  reduce.4200 = f32[512]{0} reduce(convert.4194, constant.4195), dimensions={0,1,2}, to_apply=primitive_computation_add.4196
  constant.4201 = s32[] constant(6272)
  convert.4202 = f32[] convert(constant.4201)
  broadcast.4203 = f32[512]{0} broadcast(convert.4202), dimensions={}
  divide.4204 = f32[512]{0} divide(reduce.4200, broadcast.4203)
  reshape.4238 = f32[1,1,1,512]{3,2,1,0} reshape(divide.4204)
  reshape.4239 = f32[512]{0} reshape(reshape.4238)
  broadcast.4240 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4239), dimensions={3}
  subtract.4241 = f32[128,7,7,512]{3,2,1,0} subtract(convert.4194, broadcast.4240)
  multiply.4205 = f32[128,7,7,512]{3,2,1,0} multiply(convert.4194, convert.4194)
  constant.4209 = f32[] constant(0)
  reduce.4214 = f32[512]{0} reduce(multiply.4205, constant.4209), dimensions={0,1,2}, to_apply=primitive_computation_add.4210
  constant.4215 = s32[] constant(6272)
  convert.4216 = f32[] convert(constant.4215)
  broadcast.4217 = f32[512]{0} broadcast(convert.4216), dimensions={}
  divide.4218 = f32[512]{0} divide(reduce.4214, broadcast.4217)
  multiply.4219 = f32[512]{0} multiply(divide.4204, divide.4204)
  subtract.4223 = f32[512]{0} subtract(divide.4218, multiply.4219)
  constant.4242 = f32[] constant(1e-05)
  broadcast.4243 = f32[512]{0} broadcast(constant.4242), dimensions={}
  add.4244 = f32[512]{0} add(subtract.4223, broadcast.4243)
  rsqrt.4245 = f32[512]{0} rsqrt(add.4244)
  broadcast.4253 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.4245), dimensions={3}
  parameter.52 = f32[512]{0} parameter(51)
  reshape.4252 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.52)
  multiply.4254 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.4253, reshape.4252)
  reshape.4255 = f32[512]{0} reshape(multiply.4254)
  broadcast.4256 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4255), dimensions={3}
  multiply.4257 = f32[128,7,7,512]{3,2,1,0} multiply(subtract.4241, broadcast.4256)
  parameter.51 = f32[512]{0} parameter(50)
  reshape.4258 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.51)
  reshape.4259 = f32[512]{0} reshape(reshape.4258)
  broadcast.4260 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4259), dimensions={3}
  add.4261 = f32[128,7,7,512]{3,2,1,0} add(multiply.4257, broadcast.4260)
  convert.4262 = bf16[128,7,7,512]{3,2,1,0} convert(add.4261)
  constant.4264 = bf16[] constant(0)
  broadcast.4265 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4264), dimensions={}
  maximum.4266 = bf16[128,7,7,512]{3,2,1,0} maximum(convert.4262, broadcast.4265)
  tuple.4267 = (bf16[128,7,7,512]{3,2,1,0}) tuple(maximum.4266)
  get-tuple-element.4268 = bf16[128,7,7,512]{3,2,1,0} get-tuple-element(tuple.4267), index=0
  parameter.57 = f32[1,1,512,2048]{3,2,1,0} parameter(56)
  convert.4274 = bf16[1,1,512,2048]{3,2,1,0} convert(parameter.57)
  convolution.4275 = bf16[128,7,7,2048]{3,2,1,0} convolution(get-tuple-element.4268, convert.4274), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4276 = f32[128,7,7,2048]{3,2,1,0} convert(convolution.4275)
  constant.4277 = f32[] constant(0)
  reduce.4282 = f32[2048]{0} reduce(convert.4276, constant.4277), dimensions={0,1,2}, to_apply=primitive_computation_add.4278
  constant.4283 = s32[] constant(6272)
  convert.4284 = f32[] convert(constant.4283)
  broadcast.4285 = f32[2048]{0} broadcast(convert.4284), dimensions={}
  divide.4286 = f32[2048]{0} divide(reduce.4282, broadcast.4285)
  reshape.4320 = f32[1,1,1,2048]{3,2,1,0} reshape(divide.4286)
  reshape.4321 = f32[2048]{0} reshape(reshape.4320)
  broadcast.4322 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4321), dimensions={3}
  subtract.4323 = f32[128,7,7,2048]{3,2,1,0} subtract(convert.4276, broadcast.4322)
  multiply.4287 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.4276, convert.4276)
  constant.4291 = f32[] constant(0)
  reduce.4296 = f32[2048]{0} reduce(multiply.4287, constant.4291), dimensions={0,1,2}, to_apply=primitive_computation_add.4292
  constant.4297 = s32[] constant(6272)
  convert.4298 = f32[] convert(constant.4297)
  broadcast.4299 = f32[2048]{0} broadcast(convert.4298), dimensions={}
  divide.4300 = f32[2048]{0} divide(reduce.4296, broadcast.4299)
  multiply.4301 = f32[2048]{0} multiply(divide.4286, divide.4286)
  subtract.4305 = f32[2048]{0} subtract(divide.4300, multiply.4301)
  constant.4324 = f32[] constant(1e-05)
  broadcast.4325 = f32[2048]{0} broadcast(constant.4324), dimensions={}
  add.4326 = f32[2048]{0} add(subtract.4305, broadcast.4325)
  rsqrt.4327 = f32[2048]{0} rsqrt(add.4326)
  broadcast.4335 = f32[1,1,1,2048]{3,2,1,0} broadcast(rsqrt.4327), dimensions={3}
  parameter.54 = f32[2048]{0} parameter(53)
  reshape.4334 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.54)
  multiply.4336 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.4335, reshape.4334)
  reshape.4337 = f32[2048]{0} reshape(multiply.4336)
  broadcast.4338 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4337), dimensions={3}
  multiply.4339 = f32[128,7,7,2048]{3,2,1,0} multiply(subtract.4323, broadcast.4338)
  parameter.53 = f32[2048]{0} parameter(52)
  reshape.4340 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.53)
  reshape.4341 = f32[2048]{0} reshape(reshape.4340)
  broadcast.4342 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4341), dimensions={3}
  add.4343 = f32[128,7,7,2048]{3,2,1,0} add(multiply.4339, broadcast.4342)
  convert.4344 = bf16[128,7,7,2048]{3,2,1,0} convert(add.4343)
  add.4416 = bf16[128,7,7,2048]{3,2,1,0} add(convert.4415, convert.4344)
  constant.4418 = bf16[] constant(0)
  broadcast.4419 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4418), dimensions={}
  maximum.4420 = bf16[128,7,7,2048]{3,2,1,0} maximum(add.4416, broadcast.4419)
  tuple.4421 = (bf16[128,7,7,2048]{3,2,1,0}) tuple(maximum.4420)
  get-tuple-element.4422 = bf16[128,7,7,2048]{3,2,1,0} get-tuple-element(tuple.4421), index=0
  parameter.67 = f32[1,1,2048,512]{3,2,1,0} parameter(66)
  convert.4428 = bf16[1,1,2048,512]{3,2,1,0} convert(parameter.67)
  convolution.4429 = bf16[128,7,7,512]{3,2,1,0} convolution(get-tuple-element.4422, convert.4428), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4430 = f32[128,7,7,512]{3,2,1,0} convert(convolution.4429)
  constant.4431 = f32[] constant(0)
  reduce.4436 = f32[512]{0} reduce(convert.4430, constant.4431), dimensions={0,1,2}, to_apply=primitive_computation_add.4432
  constant.4437 = s32[] constant(6272)
  convert.4438 = f32[] convert(constant.4437)
  broadcast.4439 = f32[512]{0} broadcast(convert.4438), dimensions={}
  divide.4440 = f32[512]{0} divide(reduce.4436, broadcast.4439)
  reshape.4474 = f32[1,1,1,512]{3,2,1,0} reshape(divide.4440)
  reshape.4475 = f32[512]{0} reshape(reshape.4474)
  broadcast.4476 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4475), dimensions={3}
  subtract.4477 = f32[128,7,7,512]{3,2,1,0} subtract(convert.4430, broadcast.4476)
  multiply.4441 = f32[128,7,7,512]{3,2,1,0} multiply(convert.4430, convert.4430)
  constant.4445 = f32[] constant(0)
  reduce.4450 = f32[512]{0} reduce(multiply.4441, constant.4445), dimensions={0,1,2}, to_apply=primitive_computation_add.4446
  constant.4451 = s32[] constant(6272)
  convert.4452 = f32[] convert(constant.4451)
  broadcast.4453 = f32[512]{0} broadcast(convert.4452), dimensions={}
  divide.4454 = f32[512]{0} divide(reduce.4450, broadcast.4453)
  multiply.4455 = f32[512]{0} multiply(divide.4440, divide.4440)
  subtract.4459 = f32[512]{0} subtract(divide.4454, multiply.4455)
  constant.4478 = f32[] constant(1e-05)
  broadcast.4479 = f32[512]{0} broadcast(constant.4478), dimensions={}
  add.4480 = f32[512]{0} add(subtract.4459, broadcast.4479)
  rsqrt.4481 = f32[512]{0} rsqrt(add.4480)
  broadcast.4489 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.4481), dimensions={3}
  parameter.62 = f32[512]{0} parameter(61)
  reshape.4488 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.62)
  multiply.4490 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.4489, reshape.4488)
  reshape.4491 = f32[512]{0} reshape(multiply.4490)
  broadcast.4492 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4491), dimensions={3}
  multiply.4493 = f32[128,7,7,512]{3,2,1,0} multiply(subtract.4477, broadcast.4492)
  parameter.61 = f32[512]{0} parameter(60)
  reshape.4494 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.61)
  reshape.4495 = f32[512]{0} reshape(reshape.4494)
  broadcast.4496 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4495), dimensions={3}
  add.4497 = f32[128,7,7,512]{3,2,1,0} add(multiply.4493, broadcast.4496)
  convert.4498 = bf16[128,7,7,512]{3,2,1,0} convert(add.4497)
  constant.4500 = bf16[] constant(0)
  broadcast.4501 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4500), dimensions={}
  maximum.4502 = bf16[128,7,7,512]{3,2,1,0} maximum(convert.4498, broadcast.4501)
  tuple.4503 = (bf16[128,7,7,512]{3,2,1,0}) tuple(maximum.4502)
  get-tuple-element.4504 = bf16[128,7,7,512]{3,2,1,0} get-tuple-element(tuple.4503), index=0
  parameter.68 = f32[3,3,512,512]{3,2,1,0} parameter(67)
  convert.4510 = bf16[3,3,512,512]{3,2,1,0} convert(parameter.68)
  convolution.4511 = bf16[128,7,7,512]{3,2,1,0} convolution(get-tuple-element.4504, convert.4510), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.4512 = f32[128,7,7,512]{3,2,1,0} convert(convolution.4511)
  constant.4513 = f32[] constant(0)
  reduce.4518 = f32[512]{0} reduce(convert.4512, constant.4513), dimensions={0,1,2}, to_apply=primitive_computation_add.4514
  constant.4519 = s32[] constant(6272)
  convert.4520 = f32[] convert(constant.4519)
  broadcast.4521 = f32[512]{0} broadcast(convert.4520), dimensions={}
  divide.4522 = f32[512]{0} divide(reduce.4518, broadcast.4521)
  reshape.4556 = f32[1,1,1,512]{3,2,1,0} reshape(divide.4522)
  reshape.4557 = f32[512]{0} reshape(reshape.4556)
  broadcast.4558 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4557), dimensions={3}
  subtract.4559 = f32[128,7,7,512]{3,2,1,0} subtract(convert.4512, broadcast.4558)
  multiply.4523 = f32[128,7,7,512]{3,2,1,0} multiply(convert.4512, convert.4512)
  constant.4527 = f32[] constant(0)
  reduce.4532 = f32[512]{0} reduce(multiply.4523, constant.4527), dimensions={0,1,2}, to_apply=primitive_computation_add.4528
  constant.4533 = s32[] constant(6272)
  convert.4534 = f32[] convert(constant.4533)
  broadcast.4535 = f32[512]{0} broadcast(convert.4534), dimensions={}
  divide.4536 = f32[512]{0} divide(reduce.4532, broadcast.4535)
  multiply.4537 = f32[512]{0} multiply(divide.4522, divide.4522)
  subtract.4541 = f32[512]{0} subtract(divide.4536, multiply.4537)
  constant.4560 = f32[] constant(1e-05)
  broadcast.4561 = f32[512]{0} broadcast(constant.4560), dimensions={}
  add.4562 = f32[512]{0} add(subtract.4541, broadcast.4561)
  rsqrt.4563 = f32[512]{0} rsqrt(add.4562)
  broadcast.4571 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.4563), dimensions={3}
  parameter.64 = f32[512]{0} parameter(63)
  reshape.4570 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.64)
  multiply.4572 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.4571, reshape.4570)
  reshape.4573 = f32[512]{0} reshape(multiply.4572)
  broadcast.4574 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4573), dimensions={3}
  multiply.4575 = f32[128,7,7,512]{3,2,1,0} multiply(subtract.4559, broadcast.4574)
  parameter.63 = f32[512]{0} parameter(62)
  reshape.4576 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.63)
  reshape.4577 = f32[512]{0} reshape(reshape.4576)
  broadcast.4578 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4577), dimensions={3}
  add.4579 = f32[128,7,7,512]{3,2,1,0} add(multiply.4575, broadcast.4578)
  convert.4580 = bf16[128,7,7,512]{3,2,1,0} convert(add.4579)
  constant.4582 = bf16[] constant(0)
  broadcast.4583 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4582), dimensions={}
  maximum.4584 = bf16[128,7,7,512]{3,2,1,0} maximum(convert.4580, broadcast.4583)
  tuple.4585 = (bf16[128,7,7,512]{3,2,1,0}) tuple(maximum.4584)
  get-tuple-element.4586 = bf16[128,7,7,512]{3,2,1,0} get-tuple-element(tuple.4585), index=0
  parameter.69 = f32[1,1,512,2048]{3,2,1,0} parameter(68)
  convert.4592 = bf16[1,1,512,2048]{3,2,1,0} convert(parameter.69)
  convolution.4593 = bf16[128,7,7,2048]{3,2,1,0} convolution(get-tuple-element.4586, convert.4592), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4594 = f32[128,7,7,2048]{3,2,1,0} convert(convolution.4593)
  constant.4595 = f32[] constant(0)
  reduce.4600 = f32[2048]{0} reduce(convert.4594, constant.4595), dimensions={0,1,2}, to_apply=primitive_computation_add.4596
  constant.4601 = s32[] constant(6272)
  convert.4602 = f32[] convert(constant.4601)
  broadcast.4603 = f32[2048]{0} broadcast(convert.4602), dimensions={}
  divide.4604 = f32[2048]{0} divide(reduce.4600, broadcast.4603)
  reshape.4638 = f32[1,1,1,2048]{3,2,1,0} reshape(divide.4604)
  reshape.4639 = f32[2048]{0} reshape(reshape.4638)
  broadcast.4640 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4639), dimensions={3}
  subtract.4641 = f32[128,7,7,2048]{3,2,1,0} subtract(convert.4594, broadcast.4640)
  multiply.4605 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.4594, convert.4594)
  constant.4609 = f32[] constant(0)
  reduce.4614 = f32[2048]{0} reduce(multiply.4605, constant.4609), dimensions={0,1,2}, to_apply=primitive_computation_add.4610
  constant.4615 = s32[] constant(6272)
  convert.4616 = f32[] convert(constant.4615)
  broadcast.4617 = f32[2048]{0} broadcast(convert.4616), dimensions={}
  divide.4618 = f32[2048]{0} divide(reduce.4614, broadcast.4617)
  multiply.4619 = f32[2048]{0} multiply(divide.4604, divide.4604)
  subtract.4623 = f32[2048]{0} subtract(divide.4618, multiply.4619)
  constant.4642 = f32[] constant(1e-05)
  broadcast.4643 = f32[2048]{0} broadcast(constant.4642), dimensions={}
  add.4644 = f32[2048]{0} add(subtract.4623, broadcast.4643)
  rsqrt.4645 = f32[2048]{0} rsqrt(add.4644)
  broadcast.4653 = f32[1,1,1,2048]{3,2,1,0} broadcast(rsqrt.4645), dimensions={3}
  parameter.66 = f32[2048]{0} parameter(65)
  reshape.4652 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.66)
  multiply.4654 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.4653, reshape.4652)
  reshape.4655 = f32[2048]{0} reshape(multiply.4654)
  broadcast.4656 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4655), dimensions={3}
  multiply.4657 = f32[128,7,7,2048]{3,2,1,0} multiply(subtract.4641, broadcast.4656)
  parameter.65 = f32[2048]{0} parameter(64)
  reshape.4658 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.65)
  reshape.4659 = f32[2048]{0} reshape(reshape.4658)
  broadcast.4660 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4659), dimensions={3}
  add.4661 = f32[128,7,7,2048]{3,2,1,0} add(multiply.4657, broadcast.4660)
  convert.4662 = bf16[128,7,7,2048]{3,2,1,0} convert(add.4661)
  add.4663 = bf16[128,7,7,2048]{3,2,1,0} add(get-tuple-element.4422, convert.4662)
  constant.4665 = bf16[] constant(0)
  broadcast.4666 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4665), dimensions={}
  maximum.4667 = bf16[128,7,7,2048]{3,2,1,0} maximum(add.4663, broadcast.4666)
  tuple.4668 = (bf16[128,7,7,2048]{3,2,1,0}) tuple(maximum.4667)
  get-tuple-element.4669 = bf16[128,7,7,2048]{3,2,1,0} get-tuple-element(tuple.4668), index=0
  parameter.76 = f32[1,1,2048,512]{3,2,1,0} parameter(75)
  convert.4675 = bf16[1,1,2048,512]{3,2,1,0} convert(parameter.76)
  convolution.4676 = bf16[128,7,7,512]{3,2,1,0} convolution(get-tuple-element.4669, convert.4675), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4677 = f32[128,7,7,512]{3,2,1,0} convert(convolution.4676)
  constant.4678 = f32[] constant(0)
  reduce.4683 = f32[512]{0} reduce(convert.4677, constant.4678), dimensions={0,1,2}, to_apply=primitive_computation_add.4679
  constant.4684 = s32[] constant(6272)
  convert.4685 = f32[] convert(constant.4684)
  broadcast.4686 = f32[512]{0} broadcast(convert.4685), dimensions={}
  divide.4687 = f32[512]{0} divide(reduce.4683, broadcast.4686)
  reshape.4721 = f32[1,1,1,512]{3,2,1,0} reshape(divide.4687)
  reshape.4722 = f32[512]{0} reshape(reshape.4721)
  broadcast.4723 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4722), dimensions={3}
  subtract.4724 = f32[128,7,7,512]{3,2,1,0} subtract(convert.4677, broadcast.4723)
  multiply.4688 = f32[128,7,7,512]{3,2,1,0} multiply(convert.4677, convert.4677)
  constant.4692 = f32[] constant(0)
  reduce.4697 = f32[512]{0} reduce(multiply.4688, constant.4692), dimensions={0,1,2}, to_apply=primitive_computation_add.4693
  constant.4698 = s32[] constant(6272)
  convert.4699 = f32[] convert(constant.4698)
  broadcast.4700 = f32[512]{0} broadcast(convert.4699), dimensions={}
  divide.4701 = f32[512]{0} divide(reduce.4697, broadcast.4700)
  multiply.4702 = f32[512]{0} multiply(divide.4687, divide.4687)
  subtract.4706 = f32[512]{0} subtract(divide.4701, multiply.4702)
  constant.4725 = f32[] constant(1e-05)
  broadcast.4726 = f32[512]{0} broadcast(constant.4725), dimensions={}
  add.4727 = f32[512]{0} add(subtract.4706, broadcast.4726)
  rsqrt.4728 = f32[512]{0} rsqrt(add.4727)
  broadcast.4736 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.4728), dimensions={3}
  parameter.71 = f32[512]{0} parameter(70)
  reshape.4735 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.71)
  multiply.4737 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.4736, reshape.4735)
  reshape.4738 = f32[512]{0} reshape(multiply.4737)
  broadcast.4739 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4738), dimensions={3}
  multiply.4740 = f32[128,7,7,512]{3,2,1,0} multiply(subtract.4724, broadcast.4739)
  parameter.70 = f32[512]{0} parameter(69)
  reshape.4741 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.70)
  reshape.4742 = f32[512]{0} reshape(reshape.4741)
  broadcast.4743 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4742), dimensions={3}
  add.4744 = f32[128,7,7,512]{3,2,1,0} add(multiply.4740, broadcast.4743)
  convert.4745 = bf16[128,7,7,512]{3,2,1,0} convert(add.4744)
  constant.4747 = bf16[] constant(0)
  broadcast.4748 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4747), dimensions={}
  maximum.4749 = bf16[128,7,7,512]{3,2,1,0} maximum(convert.4745, broadcast.4748)
  tuple.4750 = (bf16[128,7,7,512]{3,2,1,0}) tuple(maximum.4749)
  get-tuple-element.4751 = bf16[128,7,7,512]{3,2,1,0} get-tuple-element(tuple.4750), index=0
  parameter.77 = f32[3,3,512,512]{3,2,1,0} parameter(76)
  convert.4757 = bf16[3,3,512,512]{3,2,1,0} convert(parameter.77)
  convolution.4758 = bf16[128,7,7,512]{3,2,1,0} convolution(get-tuple-element.4751, convert.4757), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01io->b01f
  convert.4759 = f32[128,7,7,512]{3,2,1,0} convert(convolution.4758)
  constant.4760 = f32[] constant(0)
  reduce.4765 = f32[512]{0} reduce(convert.4759, constant.4760), dimensions={0,1,2}, to_apply=primitive_computation_add.4761
  constant.4766 = s32[] constant(6272)
  convert.4767 = f32[] convert(constant.4766)
  broadcast.4768 = f32[512]{0} broadcast(convert.4767), dimensions={}
  divide.4769 = f32[512]{0} divide(reduce.4765, broadcast.4768)
  reshape.4803 = f32[1,1,1,512]{3,2,1,0} reshape(divide.4769)
  reshape.4804 = f32[512]{0} reshape(reshape.4803)
  broadcast.4805 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4804), dimensions={3}
  subtract.4806 = f32[128,7,7,512]{3,2,1,0} subtract(convert.4759, broadcast.4805)
  multiply.4770 = f32[128,7,7,512]{3,2,1,0} multiply(convert.4759, convert.4759)
  constant.4774 = f32[] constant(0)
  reduce.4779 = f32[512]{0} reduce(multiply.4770, constant.4774), dimensions={0,1,2}, to_apply=primitive_computation_add.4775
  constant.4780 = s32[] constant(6272)
  convert.4781 = f32[] convert(constant.4780)
  broadcast.4782 = f32[512]{0} broadcast(convert.4781), dimensions={}
  divide.4783 = f32[512]{0} divide(reduce.4779, broadcast.4782)
  multiply.4784 = f32[512]{0} multiply(divide.4769, divide.4769)
  subtract.4788 = f32[512]{0} subtract(divide.4783, multiply.4784)
  constant.4807 = f32[] constant(1e-05)
  broadcast.4808 = f32[512]{0} broadcast(constant.4807), dimensions={}
  add.4809 = f32[512]{0} add(subtract.4788, broadcast.4808)
  rsqrt.4810 = f32[512]{0} rsqrt(add.4809)
  broadcast.4818 = f32[1,1,1,512]{3,2,1,0} broadcast(rsqrt.4810), dimensions={3}
  parameter.73 = f32[512]{0} parameter(72)
  reshape.4817 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.73)
  multiply.4819 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.4818, reshape.4817)
  reshape.4820 = f32[512]{0} reshape(multiply.4819)
  broadcast.4821 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4820), dimensions={3}
  multiply.4822 = f32[128,7,7,512]{3,2,1,0} multiply(subtract.4806, broadcast.4821)
  parameter.72 = f32[512]{0} parameter(71)
  reshape.4823 = f32[1,1,1,512]{3,2,1,0} reshape(parameter.72)
  reshape.4824 = f32[512]{0} reshape(reshape.4823)
  broadcast.4825 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.4824), dimensions={3}
  add.4826 = f32[128,7,7,512]{3,2,1,0} add(multiply.4822, broadcast.4825)
  convert.4827 = bf16[128,7,7,512]{3,2,1,0} convert(add.4826)
  constant.4829 = bf16[] constant(0)
  broadcast.4830 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4829), dimensions={}
  maximum.4831 = bf16[128,7,7,512]{3,2,1,0} maximum(convert.4827, broadcast.4830)
  tuple.4832 = (bf16[128,7,7,512]{3,2,1,0}) tuple(maximum.4831)
  get-tuple-element.4833 = bf16[128,7,7,512]{3,2,1,0} get-tuple-element(tuple.4832), index=0
  parameter.78 = f32[1,1,512,2048]{3,2,1,0} parameter(77)
  convert.4839 = bf16[1,1,512,2048]{3,2,1,0} convert(parameter.78)
  convolution.4840 = bf16[128,7,7,2048]{3,2,1,0} convolution(get-tuple-element.4833, convert.4839), window={size=1x1}, dim_labels=b01f_01io->b01f
  convert.4841 = f32[128,7,7,2048]{3,2,1,0} convert(convolution.4840)
  constant.4842 = f32[] constant(0)
  reduce.4847 = f32[2048]{0} reduce(convert.4841, constant.4842), dimensions={0,1,2}, to_apply=primitive_computation_add.4843
  constant.4848 = s32[] constant(6272)
  convert.4849 = f32[] convert(constant.4848)
  broadcast.4850 = f32[2048]{0} broadcast(convert.4849), dimensions={}
  divide.4851 = f32[2048]{0} divide(reduce.4847, broadcast.4850)
  reshape.4885 = f32[1,1,1,2048]{3,2,1,0} reshape(divide.4851)
  reshape.4886 = f32[2048]{0} reshape(reshape.4885)
  broadcast.4887 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4886), dimensions={3}
  subtract.4888 = f32[128,7,7,2048]{3,2,1,0} subtract(convert.4841, broadcast.4887)
  multiply.4852 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.4841, convert.4841)
  constant.4856 = f32[] constant(0)
  reduce.4861 = f32[2048]{0} reduce(multiply.4852, constant.4856), dimensions={0,1,2}, to_apply=primitive_computation_add.4857
  constant.4862 = s32[] constant(6272)
  convert.4863 = f32[] convert(constant.4862)
  broadcast.4864 = f32[2048]{0} broadcast(convert.4863), dimensions={}
  divide.4865 = f32[2048]{0} divide(reduce.4861, broadcast.4864)
  multiply.4866 = f32[2048]{0} multiply(divide.4851, divide.4851)
  subtract.4870 = f32[2048]{0} subtract(divide.4865, multiply.4866)
  constant.4889 = f32[] constant(1e-05)
  broadcast.4890 = f32[2048]{0} broadcast(constant.4889), dimensions={}
  add.4891 = f32[2048]{0} add(subtract.4870, broadcast.4890)
  rsqrt.4892 = f32[2048]{0} rsqrt(add.4891)
  broadcast.4900 = f32[1,1,1,2048]{3,2,1,0} broadcast(rsqrt.4892), dimensions={3}
  parameter.75 = f32[2048]{0} parameter(74)
  reshape.4899 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.75)
  multiply.4901 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.4900, reshape.4899)
  reshape.4902 = f32[2048]{0} reshape(multiply.4901)
  broadcast.4903 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4902), dimensions={3}
  multiply.4904 = f32[128,7,7,2048]{3,2,1,0} multiply(subtract.4888, broadcast.4903)
  parameter.74 = f32[2048]{0} parameter(73)
  reshape.4905 = f32[1,1,1,2048]{3,2,1,0} reshape(parameter.74)
  reshape.4906 = f32[2048]{0} reshape(reshape.4905)
  broadcast.4907 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.4906), dimensions={3}
  add.4908 = f32[128,7,7,2048]{3,2,1,0} add(multiply.4904, broadcast.4907)
  convert.4909 = bf16[128,7,7,2048]{3,2,1,0} convert(add.4908)
  add.4910 = bf16[128,7,7,2048]{3,2,1,0} add(get-tuple-element.4669, convert.4909)
  constant.4912 = bf16[] constant(0)
  broadcast.4913 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4912), dimensions={}
  maximum.4914 = bf16[128,7,7,2048]{3,2,1,0} maximum(add.4910, broadcast.4913)
  tuple.4915 = (bf16[128,7,7,2048]{3,2,1,0}) tuple(maximum.4914)
  get-tuple-element.4916 = bf16[128,7,7,2048]{3,2,1,0} get-tuple-element(tuple.4915), index=0
  convert.4922 = f32[128,7,7,2048]{3,2,1,0} convert(get-tuple-element.4916)
  constant.4923 = f32[] constant(0)
  reduce.4928 = f32[128,2048]{1,0} reduce(convert.4922, constant.4923), dimensions={1,2}, to_apply=primitive_computation_add.4924
  convert.4929 = bf16[128,2048]{1,0} convert(reduce.4928)
  constant.4930 = s32[] constant(49)
  convert.4931 = bf16[] convert(constant.4930)
  broadcast.4932 = bf16[128,2048]{1,0} broadcast(convert.4931), dimensions={}
  divide.4933 = bf16[128,2048]{1,0} divide(convert.4929, broadcast.4932)
  parameter.158 = f32[2048,1000]{1,0} parameter(157)
  convert.4934 = bf16[2048,1000]{1,0} convert(parameter.158)
  dot.4935 = bf16[128,1000]{1,0} dot(divide.4933, convert.4934), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  parameter.157 = f32[1000]{0} parameter(156)
  convert.4936 = bf16[1000]{0} convert(parameter.157)
  broadcast.4937 = bf16[1,1000]{1,0} broadcast(convert.4936), dimensions={1}
  reshape.4938 = bf16[1000]{0} reshape(broadcast.4937)
  broadcast.4939 = bf16[128,1000]{1,0} broadcast(reshape.4938), dimensions={1}
  add.4940 = bf16[128,1000]{1,0} add(dot.4935, broadcast.4939)
  convert.4941 = f32[128,1000]{1,0} convert(add.4940)
  parameter.162 = f32[1,1000]{1,0} parameter(161)
  reshape.4942 = f32[1000]{0} reshape(parameter.162)
  broadcast.4943 = f32[128,1000]{1,0} broadcast(reshape.4942), dimensions={1}
  add.4944 = f32[128,1000]{1,0} add(convert.4941, broadcast.4943)
  constant.4945 = f32[] constant(-inf)
  reduce.4950 = f32[128]{0} reduce(add.4944, constant.4945), dimensions={1}, to_apply=primitive_computation_max__1.4946
  reshape.4951 = f32[128,1]{1,0} reshape(reduce.4950)
  reshape.4952 = f32[128]{0} reshape(reshape.4951)
  broadcast.4953 = f32[128,1000]{1,0} broadcast(reshape.4952), dimensions={0}
  compare.4954 = pred[128,1000]{1,0} compare(add.4944, broadcast.4953), direction=EQ
  convert.4955 = f32[128,1000]{1,0} convert(compare.4954)
  constant.4956 = f32[] constant(0)
  reduce.4961 = f32[128]{0} reduce(convert.4955, constant.4956), dimensions={1}, to_apply=primitive_computation_add.4957
  parameter.164 = s32[128]{0} parameter(163)
  broadcast.4978 = s32[128,1]{1,0} broadcast(parameter.164), dimensions={0}
  reshape.4981 = s32[128]{0} reshape(broadcast.4978)
  broadcast.4982 = s32[128,1000]{1,0} broadcast(reshape.4981), dimensions={0}
  iota.4979 = s32[1000] iota(), iota_dimension=0
  broadcast.4980 = s32[1,1000]{1,0} broadcast(iota.4979), dimensions={1}
  reshape.4983 = s32[1000]{0} reshape(broadcast.4980)
  broadcast.4984 = s32[128,1000]{1,0} broadcast(reshape.4983), dimensions={1}
  compare.4985 = pred[128,1000]{1,0} compare(broadcast.4982, broadcast.4984), direction=EQ
  constant.4986 = f32[] constant(1)
  broadcast.4987 = f32[128,1000]{1,0} broadcast(constant.4986), dimensions={}
  constant.4988 = f32[] constant(0)
  broadcast.4989 = f32[128,1000]{1,0} broadcast(constant.4988), dimensions={}
  select.4990 = f32[128,1000]{1,0} select(compare.4985, broadcast.4987, broadcast.4989)
  broadcast.4962 = f32[128,1]{1,0} broadcast(reduce.4950), dimensions={0}
  reshape.4963 = f32[128]{0} reshape(broadcast.4962)
  broadcast.4964 = f32[128,1000]{1,0} broadcast(reshape.4963), dimensions={0}
  subtract.4965 = f32[128,1000]{1,0} subtract(add.4944, broadcast.4964)
  exponential.4966 = f32[128,1000]{1,0} exponential(subtract.4965)
  constant.4967 = f32[] constant(0)
  reduce.4972 = f32[128]{0} reduce(exponential.4966, constant.4967), dimensions={1}, to_apply=primitive_computation_add.4968
  broadcast.4973 = f32[128,1]{1,0} broadcast(reduce.4972), dimensions={0}
  log.4974 = f32[128,1]{1,0} log(broadcast.4973)
  reshape.4975 = f32[128]{0} reshape(log.4974)
  broadcast.4976 = f32[128,1000]{1,0} broadcast(reshape.4975), dimensions={0}
  subtract.4977 = f32[128,1000]{1,0} subtract(subtract.4965, broadcast.4976)
  multiply.4991 = f32[128,1000]{1,0} multiply(select.4990, subtract.4977)
  constant.4992 = f32[] constant(0)
  reduce.4997 = f32[] reduce(multiply.4991, constant.4992), dimensions={0,1}, to_apply=primitive_computation_add.4993
  negate.4998 = f32[] negate(reduce.4997)
  constant.4999 = f32[] constant(128)
  divide.5000 = f32[] divide(negate.4998, constant.4999)
  multiply.5001 = f32[1,1,64,64]{3,2,1,0} multiply(parameter.7, parameter.7)
  constant.5005 = f32[] constant(0)
  reduce.5010 = f32[] reduce(multiply.5001, constant.5005), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5006
  constant.5541 = f32[] constant(0)
  add.5542 = f32[] add(reduce.5010, constant.5541)
  multiply.5011 = f32[3,3,64,64]{3,2,1,0} multiply(parameter.8, parameter.8)
  constant.5015 = f32[] constant(0)
  reduce.5020 = f32[] reduce(multiply.5011, constant.5015), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5016
  add.5543 = f32[] add(add.5542, reduce.5020)
  multiply.5021 = f32[1,1,64,256]{3,2,1,0} multiply(parameter.9, parameter.9)
  constant.5025 = f32[] constant(0)
  reduce.5030 = f32[] reduce(multiply.5021, constant.5025), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5026
  add.5544 = f32[] add(add.5543, reduce.5030)
  multiply.5031 = f32[1,1,64,256]{3,2,1,0} multiply(parameter.10, parameter.10)
  constant.5035 = f32[] constant(0)
  reduce.5040 = f32[] reduce(multiply.5031, constant.5035), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5036
  add.5545 = f32[] add(add.5544, reduce.5040)
  multiply.5041 = f32[1,1,256,64]{3,2,1,0} multiply(parameter.19, parameter.19)
  constant.5045 = f32[] constant(0)
  reduce.5050 = f32[] reduce(multiply.5041, constant.5045), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5046
  add.5546 = f32[] add(add.5545, reduce.5050)
  multiply.5051 = f32[3,3,64,64]{3,2,1,0} multiply(parameter.20, parameter.20)
  constant.5055 = f32[] constant(0)
  reduce.5060 = f32[] reduce(multiply.5051, constant.5055), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5056
  add.5547 = f32[] add(add.5546, reduce.5060)
  multiply.5061 = f32[1,1,64,256]{3,2,1,0} multiply(parameter.21, parameter.21)
  constant.5065 = f32[] constant(0)
  reduce.5070 = f32[] reduce(multiply.5061, constant.5065), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5066
  add.5548 = f32[] add(add.5547, reduce.5070)
  multiply.5071 = f32[1,1,1024,256]{3,2,1,0} multiply(parameter.28, parameter.28)
  constant.5075 = f32[] constant(0)
  reduce.5080 = f32[] reduce(multiply.5071, constant.5075), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5076
  add.5549 = f32[] add(add.5548, reduce.5080)
  multiply.5081 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.29, parameter.29)
  constant.5085 = f32[] constant(0)
  reduce.5090 = f32[] reduce(multiply.5081, constant.5085), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5086
  add.5550 = f32[] add(add.5549, reduce.5090)
  multiply.5091 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.30, parameter.30)
  constant.5095 = f32[] constant(0)
  reduce.5100 = f32[] reduce(multiply.5091, constant.5095), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5096
  add.5551 = f32[] add(add.5550, reduce.5100)
  multiply.5101 = f32[1,1,1024,256]{3,2,1,0} multiply(parameter.37, parameter.37)
  constant.5105 = f32[] constant(0)
  reduce.5110 = f32[] reduce(multiply.5101, constant.5105), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5106
  add.5552 = f32[] add(add.5551, reduce.5110)
  multiply.5111 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.38, parameter.38)
  constant.5115 = f32[] constant(0)
  reduce.5120 = f32[] reduce(multiply.5111, constant.5115), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5116
  add.5553 = f32[] add(add.5552, reduce.5120)
  multiply.5121 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.39, parameter.39)
  constant.5125 = f32[] constant(0)
  reduce.5130 = f32[] reduce(multiply.5121, constant.5125), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5126
  add.5554 = f32[] add(add.5553, reduce.5130)
  multiply.5131 = f32[1,1,1024,256]{3,2,1,0} multiply(parameter.46, parameter.46)
  constant.5135 = f32[] constant(0)
  reduce.5140 = f32[] reduce(multiply.5131, constant.5135), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5136
  add.5555 = f32[] add(add.5554, reduce.5140)
  multiply.5141 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.47, parameter.47)
  constant.5145 = f32[] constant(0)
  reduce.5150 = f32[] reduce(multiply.5141, constant.5145), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5146
  add.5556 = f32[] add(add.5555, reduce.5150)
  multiply.5151 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.48, parameter.48)
  constant.5155 = f32[] constant(0)
  reduce.5160 = f32[] reduce(multiply.5151, constant.5155), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5156
  add.5557 = f32[] add(add.5556, reduce.5160)
  multiply.5161 = f32[1,1,1024,512]{3,2,1,0} multiply(parameter.55, parameter.55)
  constant.5165 = f32[] constant(0)
  reduce.5170 = f32[] reduce(multiply.5161, constant.5165), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5166
  add.5558 = f32[] add(add.5557, reduce.5170)
  multiply.5171 = f32[3,3,512,512]{3,2,1,0} multiply(parameter.56, parameter.56)
  constant.5175 = f32[] constant(0)
  reduce.5180 = f32[] reduce(multiply.5171, constant.5175), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5176
  add.5559 = f32[] add(add.5558, reduce.5180)
  multiply.5181 = f32[1,1,512,2048]{3,2,1,0} multiply(parameter.57, parameter.57)
  constant.5185 = f32[] constant(0)
  reduce.5190 = f32[] reduce(multiply.5181, constant.5185), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5186
  add.5560 = f32[] add(add.5559, reduce.5190)
  multiply.5191 = f32[1,1,1024,2048]{3,2,1,0} multiply(parameter.58, parameter.58)
  constant.5195 = f32[] constant(0)
  reduce.5200 = f32[] reduce(multiply.5191, constant.5195), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5196
  add.5561 = f32[] add(add.5560, reduce.5200)
  multiply.5201 = f32[1,1,2048,512]{3,2,1,0} multiply(parameter.67, parameter.67)
  constant.5205 = f32[] constant(0)
  reduce.5210 = f32[] reduce(multiply.5201, constant.5205), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5206
  add.5562 = f32[] add(add.5561, reduce.5210)
  multiply.5211 = f32[3,3,512,512]{3,2,1,0} multiply(parameter.68, parameter.68)
  constant.5215 = f32[] constant(0)
  reduce.5220 = f32[] reduce(multiply.5211, constant.5215), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5216
  add.5563 = f32[] add(add.5562, reduce.5220)
  multiply.5221 = f32[1,1,512,2048]{3,2,1,0} multiply(parameter.69, parameter.69)
  constant.5225 = f32[] constant(0)
  reduce.5230 = f32[] reduce(multiply.5221, constant.5225), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5226
  add.5564 = f32[] add(add.5563, reduce.5230)
  multiply.5231 = f32[1,1,2048,512]{3,2,1,0} multiply(parameter.76, parameter.76)
  constant.5235 = f32[] constant(0)
  reduce.5240 = f32[] reduce(multiply.5231, constant.5235), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5236
  add.5565 = f32[] add(add.5564, reduce.5240)
  multiply.5241 = f32[3,3,512,512]{3,2,1,0} multiply(parameter.77, parameter.77)
  constant.5245 = f32[] constant(0)
  reduce.5250 = f32[] reduce(multiply.5241, constant.5245), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5246
  add.5566 = f32[] add(add.5565, reduce.5250)
  multiply.5251 = f32[1,1,512,2048]{3,2,1,0} multiply(parameter.78, parameter.78)
  constant.5255 = f32[] constant(0)
  reduce.5260 = f32[] reduce(multiply.5251, constant.5255), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5256
  add.5567 = f32[] add(add.5566, reduce.5260)
  multiply.5261 = f32[1,1,256,64]{3,2,1,0} multiply(parameter.85, parameter.85)
  constant.5265 = f32[] constant(0)
  reduce.5270 = f32[] reduce(multiply.5261, constant.5265), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5266
  add.5568 = f32[] add(add.5567, reduce.5270)
  multiply.5271 = f32[3,3,64,64]{3,2,1,0} multiply(parameter.86, parameter.86)
  constant.5275 = f32[] constant(0)
  reduce.5280 = f32[] reduce(multiply.5271, constant.5275), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5276
  add.5569 = f32[] add(add.5568, reduce.5280)
  multiply.5281 = f32[1,1,64,256]{3,2,1,0} multiply(parameter.87, parameter.87)
  constant.5285 = f32[] constant(0)
  reduce.5290 = f32[] reduce(multiply.5281, constant.5285), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5286
  add.5570 = f32[] add(add.5569, reduce.5290)
  multiply.5291 = f32[1,1,256,128]{3,2,1,0} multiply(parameter.94, parameter.94)
  constant.5295 = f32[] constant(0)
  reduce.5300 = f32[] reduce(multiply.5291, constant.5295), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5296
  add.5571 = f32[] add(add.5570, reduce.5300)
  multiply.5301 = f32[3,3,128,128]{3,2,1,0} multiply(parameter.95, parameter.95)
  constant.5305 = f32[] constant(0)
  reduce.5310 = f32[] reduce(multiply.5301, constant.5305), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5306
  add.5572 = f32[] add(add.5571, reduce.5310)
  multiply.5311 = f32[1,1,128,512]{3,2,1,0} multiply(parameter.96, parameter.96)
  constant.5315 = f32[] constant(0)
  reduce.5320 = f32[] reduce(multiply.5311, constant.5315), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5316
  add.5573 = f32[] add(add.5572, reduce.5320)
  multiply.5321 = f32[1,1,256,512]{3,2,1,0} multiply(parameter.97, parameter.97)
  constant.5325 = f32[] constant(0)
  reduce.5330 = f32[] reduce(multiply.5321, constant.5325), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5326
  add.5574 = f32[] add(add.5573, reduce.5330)
  multiply.5331 = f32[1,1,512,128]{3,2,1,0} multiply(parameter.106, parameter.106)
  constant.5335 = f32[] constant(0)
  reduce.5340 = f32[] reduce(multiply.5331, constant.5335), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5336
  add.5575 = f32[] add(add.5574, reduce.5340)
  multiply.5341 = f32[3,3,128,128]{3,2,1,0} multiply(parameter.107, parameter.107)
  constant.5345 = f32[] constant(0)
  reduce.5350 = f32[] reduce(multiply.5341, constant.5345), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5346
  add.5576 = f32[] add(add.5575, reduce.5350)
  multiply.5351 = f32[1,1,128,512]{3,2,1,0} multiply(parameter.108, parameter.108)
  constant.5355 = f32[] constant(0)
  reduce.5360 = f32[] reduce(multiply.5351, constant.5355), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5356
  add.5577 = f32[] add(add.5576, reduce.5360)
  multiply.5361 = f32[1,1,512,128]{3,2,1,0} multiply(parameter.115, parameter.115)
  constant.5365 = f32[] constant(0)
  reduce.5370 = f32[] reduce(multiply.5361, constant.5365), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5366
  add.5578 = f32[] add(add.5577, reduce.5370)
  multiply.5371 = f32[3,3,128,128]{3,2,1,0} multiply(parameter.116, parameter.116)
  constant.5375 = f32[] constant(0)
  reduce.5380 = f32[] reduce(multiply.5371, constant.5375), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5376
  add.5579 = f32[] add(add.5578, reduce.5380)
  multiply.5381 = f32[1,1,128,512]{3,2,1,0} multiply(parameter.117, parameter.117)
  constant.5385 = f32[] constant(0)
  reduce.5390 = f32[] reduce(multiply.5381, constant.5385), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5386
  add.5580 = f32[] add(add.5579, reduce.5390)
  multiply.5391 = f32[1,1,512,128]{3,2,1,0} multiply(parameter.124, parameter.124)
  constant.5395 = f32[] constant(0)
  reduce.5400 = f32[] reduce(multiply.5391, constant.5395), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5396
  add.5581 = f32[] add(add.5580, reduce.5400)
  multiply.5401 = f32[3,3,128,128]{3,2,1,0} multiply(parameter.125, parameter.125)
  constant.5405 = f32[] constant(0)
  reduce.5410 = f32[] reduce(multiply.5401, constant.5405), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5406
  add.5582 = f32[] add(add.5581, reduce.5410)
  multiply.5411 = f32[1,1,128,512]{3,2,1,0} multiply(parameter.126, parameter.126)
  constant.5415 = f32[] constant(0)
  reduce.5420 = f32[] reduce(multiply.5411, constant.5415), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5416
  add.5583 = f32[] add(add.5582, reduce.5420)
  multiply.5421 = f32[1,1,512,256]{3,2,1,0} multiply(parameter.133, parameter.133)
  constant.5425 = f32[] constant(0)
  reduce.5430 = f32[] reduce(multiply.5421, constant.5425), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5426
  add.5584 = f32[] add(add.5583, reduce.5430)
  multiply.5431 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.134, parameter.134)
  constant.5435 = f32[] constant(0)
  reduce.5440 = f32[] reduce(multiply.5431, constant.5435), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5436
  add.5585 = f32[] add(add.5584, reduce.5440)
  multiply.5441 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.135, parameter.135)
  constant.5445 = f32[] constant(0)
  reduce.5450 = f32[] reduce(multiply.5441, constant.5445), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5446
  add.5586 = f32[] add(add.5585, reduce.5450)
  multiply.5451 = f32[1,1,512,1024]{3,2,1,0} multiply(parameter.136, parameter.136)
  constant.5455 = f32[] constant(0)
  reduce.5460 = f32[] reduce(multiply.5451, constant.5455), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5456
  add.5587 = f32[] add(add.5586, reduce.5460)
  multiply.5461 = f32[1,1,1024,256]{3,2,1,0} multiply(parameter.145, parameter.145)
  constant.5465 = f32[] constant(0)
  reduce.5470 = f32[] reduce(multiply.5461, constant.5465), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5466
  add.5588 = f32[] add(add.5587, reduce.5470)
  multiply.5471 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.146, parameter.146)
  constant.5475 = f32[] constant(0)
  reduce.5480 = f32[] reduce(multiply.5471, constant.5475), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5476
  add.5589 = f32[] add(add.5588, reduce.5480)
  multiply.5481 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.147, parameter.147)
  constant.5485 = f32[] constant(0)
  reduce.5490 = f32[] reduce(multiply.5481, constant.5485), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5486
  add.5590 = f32[] add(add.5589, reduce.5490)
  multiply.5491 = f32[1,1,1024,256]{3,2,1,0} multiply(parameter.154, parameter.154)
  constant.5495 = f32[] constant(0)
  reduce.5500 = f32[] reduce(multiply.5491, constant.5495), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5496
  add.5591 = f32[] add(add.5590, reduce.5500)
  multiply.5501 = f32[3,3,256,256]{3,2,1,0} multiply(parameter.155, parameter.155)
  constant.5505 = f32[] constant(0)
  reduce.5510 = f32[] reduce(multiply.5501, constant.5505), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5506
  add.5592 = f32[] add(add.5591, reduce.5510)
  multiply.5511 = f32[1,1,256,1024]{3,2,1,0} multiply(parameter.156, parameter.156)
  constant.5515 = f32[] constant(0)
  reduce.5520 = f32[] reduce(multiply.5511, constant.5515), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5516
  add.5593 = f32[] add(add.5592, reduce.5520)
  multiply.5521 = f32[2048,1000]{1,0} multiply(parameter.158, parameter.158)
  constant.5525 = f32[] constant(0)
  reduce.5530 = f32[] reduce(multiply.5521, constant.5525), dimensions={0,1}, to_apply=primitive_computation_add.5526
  add.5594 = f32[] add(add.5593, reduce.5530)
  multiply.5531 = f32[7,7,3,64]{3,2,1,0} multiply(parameter.161, parameter.161)
  constant.5535 = f32[] constant(0)
  reduce.5540 = f32[] reduce(multiply.5531, constant.5535), dimensions={0,1,2,3}, to_apply=primitive_computation_add.5536
  add.5595 = f32[] add(add.5594, reduce.5540)
  constant.5596 = f32[] constant(5e-05)
  multiply.5597 = f32[] multiply(add.5595, constant.5596)
  add.5598 = f32[] add(divide.5000, multiply.5597)
  parameter.489 = f32[64]{0} parameter(488)
  constant.718 = f32[] constant(0.9)
  broadcast.719 = f32[64]{0} broadcast(constant.718), dimensions={}
  multiply.720 = f32[64]{0} multiply(parameter.489, broadcast.719)
  constant.721 = f32[] constant(0.1)
  broadcast.722 = f32[64]{0} broadcast(constant.721), dimensions={}
  multiply.723 = f32[64]{0} multiply(divide.698, broadcast.722)
  add.724 = f32[64]{0} add(multiply.720, multiply.723)
  parameter.490 = f32[64]{0} parameter(489)
  constant.725 = f32[] constant(0.9)
  broadcast.726 = f32[64]{0} broadcast(constant.725), dimensions={}
  multiply.727 = f32[64]{0} multiply(parameter.490, broadcast.726)
  constant.728 = f32[] constant(0.1)
  broadcast.729 = f32[64]{0} broadcast(constant.728), dimensions={}
  multiply.730 = f32[64]{0} multiply(subtract.717, broadcast.729)
  add.731 = f32[64]{0} add(multiply.727, multiply.730)
  parameter.491 = f32[64]{0} parameter(490)
  constant.800 = f32[] constant(0.9)
  broadcast.801 = f32[64]{0} broadcast(constant.800), dimensions={}
  multiply.802 = f32[64]{0} multiply(parameter.491, broadcast.801)
  constant.803 = f32[] constant(0.1)
  broadcast.804 = f32[64]{0} broadcast(constant.803), dimensions={}
  multiply.805 = f32[64]{0} multiply(divide.780, broadcast.804)
  add.806 = f32[64]{0} add(multiply.802, multiply.805)
  parameter.492 = f32[64]{0} parameter(491)
  constant.807 = f32[] constant(0.9)
  broadcast.808 = f32[64]{0} broadcast(constant.807), dimensions={}
  multiply.809 = f32[64]{0} multiply(parameter.492, broadcast.808)
  constant.810 = f32[] constant(0.1)
  broadcast.811 = f32[64]{0} broadcast(constant.810), dimensions={}
  multiply.812 = f32[64]{0} multiply(subtract.799, broadcast.811)
  add.813 = f32[64]{0} add(multiply.809, multiply.812)
  parameter.493 = f32[256]{0} parameter(492)
  constant.882 = f32[] constant(0.9)
  broadcast.883 = f32[256]{0} broadcast(constant.882), dimensions={}
  multiply.884 = f32[256]{0} multiply(parameter.493, broadcast.883)
  constant.885 = f32[] constant(0.1)
  broadcast.886 = f32[256]{0} broadcast(constant.885), dimensions={}
  multiply.887 = f32[256]{0} multiply(divide.862, broadcast.886)
  add.888 = f32[256]{0} add(multiply.884, multiply.887)
  parameter.494 = f32[256]{0} parameter(493)
  constant.889 = f32[] constant(0.9)
  broadcast.890 = f32[256]{0} broadcast(constant.889), dimensions={}
  multiply.891 = f32[256]{0} multiply(parameter.494, broadcast.890)
  constant.892 = f32[] constant(0.1)
  broadcast.893 = f32[256]{0} broadcast(constant.892), dimensions={}
  multiply.894 = f32[256]{0} multiply(subtract.881, broadcast.893)
  add.895 = f32[256]{0} add(multiply.891, multiply.894)
  parameter.495 = f32[256]{0} parameter(494)
  constant.953 = f32[] constant(0.9)
  broadcast.954 = f32[256]{0} broadcast(constant.953), dimensions={}
  multiply.955 = f32[256]{0} multiply(parameter.495, broadcast.954)
  constant.956 = f32[] constant(0.1)
  broadcast.957 = f32[256]{0} broadcast(constant.956), dimensions={}
  multiply.958 = f32[256]{0} multiply(divide.933, broadcast.957)
  add.959 = f32[256]{0} add(multiply.955, multiply.958)
  parameter.496 = f32[256]{0} parameter(495)
  constant.960 = f32[] constant(0.9)
  broadcast.961 = f32[256]{0} broadcast(constant.960), dimensions={}
  multiply.962 = f32[256]{0} multiply(parameter.496, broadcast.961)
  constant.963 = f32[] constant(0.1)
  broadcast.964 = f32[256]{0} broadcast(constant.963), dimensions={}
  multiply.965 = f32[256]{0} multiply(subtract.952, broadcast.964)
  add.966 = f32[256]{0} add(multiply.962, multiply.965)
  parameter.497 = f32[64]{0} parameter(496)
  constant.1036 = f32[] constant(0.9)
  broadcast.1037 = f32[64]{0} broadcast(constant.1036), dimensions={}
  multiply.1038 = f32[64]{0} multiply(parameter.497, broadcast.1037)
  constant.1039 = f32[] constant(0.1)
  broadcast.1040 = f32[64]{0} broadcast(constant.1039), dimensions={}
  multiply.1041 = f32[64]{0} multiply(divide.1016, broadcast.1040)
  add.1042 = f32[64]{0} add(multiply.1038, multiply.1041)
  parameter.498 = f32[64]{0} parameter(497)
  constant.1043 = f32[] constant(0.9)
  broadcast.1044 = f32[64]{0} broadcast(constant.1043), dimensions={}
  multiply.1045 = f32[64]{0} multiply(parameter.498, broadcast.1044)
  constant.1046 = f32[] constant(0.1)
  broadcast.1047 = f32[64]{0} broadcast(constant.1046), dimensions={}
  multiply.1048 = f32[64]{0} multiply(subtract.1035, broadcast.1047)
  add.1049 = f32[64]{0} add(multiply.1045, multiply.1048)
  parameter.499 = f32[64]{0} parameter(498)
  constant.1118 = f32[] constant(0.9)
  broadcast.1119 = f32[64]{0} broadcast(constant.1118), dimensions={}
  multiply.1120 = f32[64]{0} multiply(parameter.499, broadcast.1119)
  constant.1121 = f32[] constant(0.1)
  broadcast.1122 = f32[64]{0} broadcast(constant.1121), dimensions={}
  multiply.1123 = f32[64]{0} multiply(divide.1098, broadcast.1122)
  add.1124 = f32[64]{0} add(multiply.1120, multiply.1123)
  parameter.500 = f32[64]{0} parameter(499)
  constant.1125 = f32[] constant(0.9)
  broadcast.1126 = f32[64]{0} broadcast(constant.1125), dimensions={}
  multiply.1127 = f32[64]{0} multiply(parameter.500, broadcast.1126)
  constant.1128 = f32[] constant(0.1)
  broadcast.1129 = f32[64]{0} broadcast(constant.1128), dimensions={}
  multiply.1130 = f32[64]{0} multiply(subtract.1117, broadcast.1129)
  add.1131 = f32[64]{0} add(multiply.1127, multiply.1130)
  parameter.501 = f32[256]{0} parameter(500)
  constant.1200 = f32[] constant(0.9)
  broadcast.1201 = f32[256]{0} broadcast(constant.1200), dimensions={}
  multiply.1202 = f32[256]{0} multiply(parameter.501, broadcast.1201)
  constant.1203 = f32[] constant(0.1)
  broadcast.1204 = f32[256]{0} broadcast(constant.1203), dimensions={}
  multiply.1205 = f32[256]{0} multiply(divide.1180, broadcast.1204)
  add.1206 = f32[256]{0} add(multiply.1202, multiply.1205)
  parameter.502 = f32[256]{0} parameter(501)
  constant.1207 = f32[] constant(0.9)
  broadcast.1208 = f32[256]{0} broadcast(constant.1207), dimensions={}
  multiply.1209 = f32[256]{0} multiply(parameter.502, broadcast.1208)
  constant.1210 = f32[] constant(0.1)
  broadcast.1211 = f32[256]{0} broadcast(constant.1210), dimensions={}
  multiply.1212 = f32[256]{0} multiply(subtract.1199, broadcast.1211)
  add.1213 = f32[256]{0} add(multiply.1209, multiply.1212)
  parameter.503 = f32[256]{0} parameter(502)
  constant.3401 = f32[] constant(0.9)
  broadcast.3402 = f32[256]{0} broadcast(constant.3401), dimensions={}
  multiply.3403 = f32[256]{0} multiply(parameter.503, broadcast.3402)
  constant.3404 = f32[] constant(0.1)
  broadcast.3405 = f32[256]{0} broadcast(constant.3404), dimensions={}
  multiply.3406 = f32[256]{0} multiply(divide.3381, broadcast.3405)
  add.3407 = f32[256]{0} add(multiply.3403, multiply.3406)
  parameter.504 = f32[256]{0} parameter(503)
  constant.3408 = f32[] constant(0.9)
  broadcast.3409 = f32[256]{0} broadcast(constant.3408), dimensions={}
  multiply.3410 = f32[256]{0} multiply(parameter.504, broadcast.3409)
  constant.3411 = f32[] constant(0.1)
  broadcast.3412 = f32[256]{0} broadcast(constant.3411), dimensions={}
  multiply.3413 = f32[256]{0} multiply(subtract.3400, broadcast.3412)
  add.3414 = f32[256]{0} add(multiply.3410, multiply.3413)
  parameter.505 = f32[256]{0} parameter(504)
  constant.3483 = f32[] constant(0.9)
  broadcast.3484 = f32[256]{0} broadcast(constant.3483), dimensions={}
  multiply.3485 = f32[256]{0} multiply(parameter.505, broadcast.3484)
  constant.3486 = f32[] constant(0.1)
  broadcast.3487 = f32[256]{0} broadcast(constant.3486), dimensions={}
  multiply.3488 = f32[256]{0} multiply(divide.3463, broadcast.3487)
  add.3489 = f32[256]{0} add(multiply.3485, multiply.3488)
  parameter.506 = f32[256]{0} parameter(505)
  constant.3490 = f32[] constant(0.9)
  broadcast.3491 = f32[256]{0} broadcast(constant.3490), dimensions={}
  multiply.3492 = f32[256]{0} multiply(parameter.506, broadcast.3491)
  constant.3493 = f32[] constant(0.1)
  broadcast.3494 = f32[256]{0} broadcast(constant.3493), dimensions={}
  multiply.3495 = f32[256]{0} multiply(subtract.3482, broadcast.3494)
  add.3496 = f32[256]{0} add(multiply.3492, multiply.3495)
  parameter.507 = f32[1024]{0} parameter(506)
  constant.3565 = f32[] constant(0.9)
  broadcast.3566 = f32[1024]{0} broadcast(constant.3565), dimensions={}
  multiply.3567 = f32[1024]{0} multiply(parameter.507, broadcast.3566)
  constant.3568 = f32[] constant(0.1)
  broadcast.3569 = f32[1024]{0} broadcast(constant.3568), dimensions={}
  multiply.3570 = f32[1024]{0} multiply(divide.3545, broadcast.3569)
  add.3571 = f32[1024]{0} add(multiply.3567, multiply.3570)
  parameter.508 = f32[1024]{0} parameter(507)
  constant.3572 = f32[] constant(0.9)
  broadcast.3573 = f32[1024]{0} broadcast(constant.3572), dimensions={}
  multiply.3574 = f32[1024]{0} multiply(parameter.508, broadcast.3573)
  constant.3575 = f32[] constant(0.1)
  broadcast.3576 = f32[1024]{0} broadcast(constant.3575), dimensions={}
  multiply.3577 = f32[1024]{0} multiply(subtract.3564, broadcast.3576)
  add.3578 = f32[1024]{0} add(multiply.3574, multiply.3577)
  parameter.509 = f32[256]{0} parameter(508)
  constant.3648 = f32[] constant(0.9)
  broadcast.3649 = f32[256]{0} broadcast(constant.3648), dimensions={}
  multiply.3650 = f32[256]{0} multiply(parameter.509, broadcast.3649)
  constant.3651 = f32[] constant(0.1)
  broadcast.3652 = f32[256]{0} broadcast(constant.3651), dimensions={}
  multiply.3653 = f32[256]{0} multiply(divide.3628, broadcast.3652)
  add.3654 = f32[256]{0} add(multiply.3650, multiply.3653)
  parameter.510 = f32[256]{0} parameter(509)
  constant.3655 = f32[] constant(0.9)
  broadcast.3656 = f32[256]{0} broadcast(constant.3655), dimensions={}
  multiply.3657 = f32[256]{0} multiply(parameter.510, broadcast.3656)
  constant.3658 = f32[] constant(0.1)
  broadcast.3659 = f32[256]{0} broadcast(constant.3658), dimensions={}
  multiply.3660 = f32[256]{0} multiply(subtract.3647, broadcast.3659)
  add.3661 = f32[256]{0} add(multiply.3657, multiply.3660)
  parameter.511 = f32[256]{0} parameter(510)
  constant.3730 = f32[] constant(0.9)
  broadcast.3731 = f32[256]{0} broadcast(constant.3730), dimensions={}
  multiply.3732 = f32[256]{0} multiply(parameter.511, broadcast.3731)
  constant.3733 = f32[] constant(0.1)
  broadcast.3734 = f32[256]{0} broadcast(constant.3733), dimensions={}
  multiply.3735 = f32[256]{0} multiply(divide.3710, broadcast.3734)
  add.3736 = f32[256]{0} add(multiply.3732, multiply.3735)
  parameter.512 = f32[256]{0} parameter(511)
  constant.3737 = f32[] constant(0.9)
  broadcast.3738 = f32[256]{0} broadcast(constant.3737), dimensions={}
  multiply.3739 = f32[256]{0} multiply(parameter.512, broadcast.3738)
  constant.3740 = f32[] constant(0.1)
  broadcast.3741 = f32[256]{0} broadcast(constant.3740), dimensions={}
  multiply.3742 = f32[256]{0} multiply(subtract.3729, broadcast.3741)
  add.3743 = f32[256]{0} add(multiply.3739, multiply.3742)
  parameter.513 = f32[1024]{0} parameter(512)
  constant.3812 = f32[] constant(0.9)
  broadcast.3813 = f32[1024]{0} broadcast(constant.3812), dimensions={}
  multiply.3814 = f32[1024]{0} multiply(parameter.513, broadcast.3813)
  constant.3815 = f32[] constant(0.1)
  broadcast.3816 = f32[1024]{0} broadcast(constant.3815), dimensions={}
  multiply.3817 = f32[1024]{0} multiply(divide.3792, broadcast.3816)
  add.3818 = f32[1024]{0} add(multiply.3814, multiply.3817)
  parameter.514 = f32[1024]{0} parameter(513)
  constant.3819 = f32[] constant(0.9)
  broadcast.3820 = f32[1024]{0} broadcast(constant.3819), dimensions={}
  multiply.3821 = f32[1024]{0} multiply(parameter.514, broadcast.3820)
  constant.3822 = f32[] constant(0.1)
  broadcast.3823 = f32[1024]{0} broadcast(constant.3822), dimensions={}
  multiply.3824 = f32[1024]{0} multiply(subtract.3811, broadcast.3823)
  add.3825 = f32[1024]{0} add(multiply.3821, multiply.3824)
  parameter.515 = f32[256]{0} parameter(514)
  constant.3895 = f32[] constant(0.9)
  broadcast.3896 = f32[256]{0} broadcast(constant.3895), dimensions={}
  multiply.3897 = f32[256]{0} multiply(parameter.515, broadcast.3896)
  constant.3898 = f32[] constant(0.1)
  broadcast.3899 = f32[256]{0} broadcast(constant.3898), dimensions={}
  multiply.3900 = f32[256]{0} multiply(divide.3875, broadcast.3899)
  add.3901 = f32[256]{0} add(multiply.3897, multiply.3900)
  parameter.516 = f32[256]{0} parameter(515)
  constant.3902 = f32[] constant(0.9)
  broadcast.3903 = f32[256]{0} broadcast(constant.3902), dimensions={}
  multiply.3904 = f32[256]{0} multiply(parameter.516, broadcast.3903)
  constant.3905 = f32[] constant(0.1)
  broadcast.3906 = f32[256]{0} broadcast(constant.3905), dimensions={}
  multiply.3907 = f32[256]{0} multiply(subtract.3894, broadcast.3906)
  add.3908 = f32[256]{0} add(multiply.3904, multiply.3907)
  parameter.517 = f32[256]{0} parameter(516)
  constant.3977 = f32[] constant(0.9)
  broadcast.3978 = f32[256]{0} broadcast(constant.3977), dimensions={}
  multiply.3979 = f32[256]{0} multiply(parameter.517, broadcast.3978)
  constant.3980 = f32[] constant(0.1)
  broadcast.3981 = f32[256]{0} broadcast(constant.3980), dimensions={}
  multiply.3982 = f32[256]{0} multiply(divide.3957, broadcast.3981)
  add.3983 = f32[256]{0} add(multiply.3979, multiply.3982)
  parameter.518 = f32[256]{0} parameter(517)
  constant.3984 = f32[] constant(0.9)
  broadcast.3985 = f32[256]{0} broadcast(constant.3984), dimensions={}
  multiply.3986 = f32[256]{0} multiply(parameter.518, broadcast.3985)
  constant.3987 = f32[] constant(0.1)
  broadcast.3988 = f32[256]{0} broadcast(constant.3987), dimensions={}
  multiply.3989 = f32[256]{0} multiply(subtract.3976, broadcast.3988)
  add.3990 = f32[256]{0} add(multiply.3986, multiply.3989)
  parameter.519 = f32[1024]{0} parameter(518)
  constant.4059 = f32[] constant(0.9)
  broadcast.4060 = f32[1024]{0} broadcast(constant.4059), dimensions={}
  multiply.4061 = f32[1024]{0} multiply(parameter.519, broadcast.4060)
  constant.4062 = f32[] constant(0.1)
  broadcast.4063 = f32[1024]{0} broadcast(constant.4062), dimensions={}
  multiply.4064 = f32[1024]{0} multiply(divide.4039, broadcast.4063)
  add.4065 = f32[1024]{0} add(multiply.4061, multiply.4064)
  parameter.520 = f32[1024]{0} parameter(519)
  constant.4066 = f32[] constant(0.9)
  broadcast.4067 = f32[1024]{0} broadcast(constant.4066), dimensions={}
  multiply.4068 = f32[1024]{0} multiply(parameter.520, broadcast.4067)
  constant.4069 = f32[] constant(0.1)
  broadcast.4070 = f32[1024]{0} broadcast(constant.4069), dimensions={}
  multiply.4071 = f32[1024]{0} multiply(subtract.4058, broadcast.4070)
  add.4072 = f32[1024]{0} add(multiply.4068, multiply.4071)
  parameter.521 = f32[512]{0} parameter(520)
  constant.4142 = f32[] constant(0.9)
  broadcast.4143 = f32[512]{0} broadcast(constant.4142), dimensions={}
  multiply.4144 = f32[512]{0} multiply(parameter.521, broadcast.4143)
  constant.4145 = f32[] constant(0.1)
  broadcast.4146 = f32[512]{0} broadcast(constant.4145), dimensions={}
  multiply.4147 = f32[512]{0} multiply(divide.4122, broadcast.4146)
  add.4148 = f32[512]{0} add(multiply.4144, multiply.4147)
  parameter.522 = f32[512]{0} parameter(521)
  constant.4149 = f32[] constant(0.9)
  broadcast.4150 = f32[512]{0} broadcast(constant.4149), dimensions={}
  multiply.4151 = f32[512]{0} multiply(parameter.522, broadcast.4150)
  constant.4152 = f32[] constant(0.1)
  broadcast.4153 = f32[512]{0} broadcast(constant.4152), dimensions={}
  multiply.4154 = f32[512]{0} multiply(subtract.4141, broadcast.4153)
  add.4155 = f32[512]{0} add(multiply.4151, multiply.4154)
  parameter.523 = f32[512]{0} parameter(522)
  constant.4224 = f32[] constant(0.9)
  broadcast.4225 = f32[512]{0} broadcast(constant.4224), dimensions={}
  multiply.4226 = f32[512]{0} multiply(parameter.523, broadcast.4225)
  constant.4227 = f32[] constant(0.1)
  broadcast.4228 = f32[512]{0} broadcast(constant.4227), dimensions={}
  multiply.4229 = f32[512]{0} multiply(divide.4204, broadcast.4228)
  add.4230 = f32[512]{0} add(multiply.4226, multiply.4229)
  parameter.524 = f32[512]{0} parameter(523)
  constant.4231 = f32[] constant(0.9)
  broadcast.4232 = f32[512]{0} broadcast(constant.4231), dimensions={}
  multiply.4233 = f32[512]{0} multiply(parameter.524, broadcast.4232)
  constant.4234 = f32[] constant(0.1)
  broadcast.4235 = f32[512]{0} broadcast(constant.4234), dimensions={}
  multiply.4236 = f32[512]{0} multiply(subtract.4223, broadcast.4235)
  add.4237 = f32[512]{0} add(multiply.4233, multiply.4236)
  parameter.525 = f32[2048]{0} parameter(524)
  constant.4306 = f32[] constant(0.9)
  broadcast.4307 = f32[2048]{0} broadcast(constant.4306), dimensions={}
  multiply.4308 = f32[2048]{0} multiply(parameter.525, broadcast.4307)
  constant.4309 = f32[] constant(0.1)
  broadcast.4310 = f32[2048]{0} broadcast(constant.4309), dimensions={}
  multiply.4311 = f32[2048]{0} multiply(divide.4286, broadcast.4310)
  add.4312 = f32[2048]{0} add(multiply.4308, multiply.4311)
  parameter.526 = f32[2048]{0} parameter(525)
  constant.4313 = f32[] constant(0.9)
  broadcast.4314 = f32[2048]{0} broadcast(constant.4313), dimensions={}
  multiply.4315 = f32[2048]{0} multiply(parameter.526, broadcast.4314)
  constant.4316 = f32[] constant(0.1)
  broadcast.4317 = f32[2048]{0} broadcast(constant.4316), dimensions={}
  multiply.4318 = f32[2048]{0} multiply(subtract.4305, broadcast.4317)
  add.4319 = f32[2048]{0} add(multiply.4315, multiply.4318)
  parameter.527 = f32[2048]{0} parameter(526)
  constant.4377 = f32[] constant(0.9)
  broadcast.4378 = f32[2048]{0} broadcast(constant.4377), dimensions={}
  multiply.4379 = f32[2048]{0} multiply(parameter.527, broadcast.4378)
  constant.4380 = f32[] constant(0.1)
  broadcast.4381 = f32[2048]{0} broadcast(constant.4380), dimensions={}
  multiply.4382 = f32[2048]{0} multiply(divide.4357, broadcast.4381)
  add.4383 = f32[2048]{0} add(multiply.4379, multiply.4382)
  parameter.528 = f32[2048]{0} parameter(527)
  constant.4384 = f32[] constant(0.9)
  broadcast.4385 = f32[2048]{0} broadcast(constant.4384), dimensions={}
  multiply.4386 = f32[2048]{0} multiply(parameter.528, broadcast.4385)
  constant.4387 = f32[] constant(0.1)
  broadcast.4388 = f32[2048]{0} broadcast(constant.4387), dimensions={}
  multiply.4389 = f32[2048]{0} multiply(subtract.4376, broadcast.4388)
  add.4390 = f32[2048]{0} add(multiply.4386, multiply.4389)
  parameter.529 = f32[512]{0} parameter(528)
  constant.4460 = f32[] constant(0.9)
  broadcast.4461 = f32[512]{0} broadcast(constant.4460), dimensions={}
  multiply.4462 = f32[512]{0} multiply(parameter.529, broadcast.4461)
  constant.4463 = f32[] constant(0.1)
  broadcast.4464 = f32[512]{0} broadcast(constant.4463), dimensions={}
  multiply.4465 = f32[512]{0} multiply(divide.4440, broadcast.4464)
  add.4466 = f32[512]{0} add(multiply.4462, multiply.4465)
  parameter.530 = f32[512]{0} parameter(529)
  constant.4467 = f32[] constant(0.9)
  broadcast.4468 = f32[512]{0} broadcast(constant.4467), dimensions={}
  multiply.4469 = f32[512]{0} multiply(parameter.530, broadcast.4468)
  constant.4470 = f32[] constant(0.1)
  broadcast.4471 = f32[512]{0} broadcast(constant.4470), dimensions={}
  multiply.4472 = f32[512]{0} multiply(subtract.4459, broadcast.4471)
  add.4473 = f32[512]{0} add(multiply.4469, multiply.4472)
  parameter.531 = f32[512]{0} parameter(530)
  constant.4542 = f32[] constant(0.9)
  broadcast.4543 = f32[512]{0} broadcast(constant.4542), dimensions={}
  multiply.4544 = f32[512]{0} multiply(parameter.531, broadcast.4543)
  constant.4545 = f32[] constant(0.1)
  broadcast.4546 = f32[512]{0} broadcast(constant.4545), dimensions={}
  multiply.4547 = f32[512]{0} multiply(divide.4522, broadcast.4546)
  add.4548 = f32[512]{0} add(multiply.4544, multiply.4547)
  parameter.532 = f32[512]{0} parameter(531)
  constant.4549 = f32[] constant(0.9)
  broadcast.4550 = f32[512]{0} broadcast(constant.4549), dimensions={}
  multiply.4551 = f32[512]{0} multiply(parameter.532, broadcast.4550)
  constant.4552 = f32[] constant(0.1)
  broadcast.4553 = f32[512]{0} broadcast(constant.4552), dimensions={}
  multiply.4554 = f32[512]{0} multiply(subtract.4541, broadcast.4553)
  add.4555 = f32[512]{0} add(multiply.4551, multiply.4554)
  parameter.533 = f32[2048]{0} parameter(532)
  constant.4624 = f32[] constant(0.9)
  broadcast.4625 = f32[2048]{0} broadcast(constant.4624), dimensions={}
  multiply.4626 = f32[2048]{0} multiply(parameter.533, broadcast.4625)
  constant.4627 = f32[] constant(0.1)
  broadcast.4628 = f32[2048]{0} broadcast(constant.4627), dimensions={}
  multiply.4629 = f32[2048]{0} multiply(divide.4604, broadcast.4628)
  add.4630 = f32[2048]{0} add(multiply.4626, multiply.4629)
  parameter.534 = f32[2048]{0} parameter(533)
  constant.4631 = f32[] constant(0.9)
  broadcast.4632 = f32[2048]{0} broadcast(constant.4631), dimensions={}
  multiply.4633 = f32[2048]{0} multiply(parameter.534, broadcast.4632)
  constant.4634 = f32[] constant(0.1)
  broadcast.4635 = f32[2048]{0} broadcast(constant.4634), dimensions={}
  multiply.4636 = f32[2048]{0} multiply(subtract.4623, broadcast.4635)
  add.4637 = f32[2048]{0} add(multiply.4633, multiply.4636)
  parameter.535 = f32[512]{0} parameter(534)
  constant.4707 = f32[] constant(0.9)
  broadcast.4708 = f32[512]{0} broadcast(constant.4707), dimensions={}
  multiply.4709 = f32[512]{0} multiply(parameter.535, broadcast.4708)
  constant.4710 = f32[] constant(0.1)
  broadcast.4711 = f32[512]{0} broadcast(constant.4710), dimensions={}
  multiply.4712 = f32[512]{0} multiply(divide.4687, broadcast.4711)
  add.4713 = f32[512]{0} add(multiply.4709, multiply.4712)
  parameter.536 = f32[512]{0} parameter(535)
  constant.4714 = f32[] constant(0.9)
  broadcast.4715 = f32[512]{0} broadcast(constant.4714), dimensions={}
  multiply.4716 = f32[512]{0} multiply(parameter.536, broadcast.4715)
  constant.4717 = f32[] constant(0.1)
  broadcast.4718 = f32[512]{0} broadcast(constant.4717), dimensions={}
  multiply.4719 = f32[512]{0} multiply(subtract.4706, broadcast.4718)
  add.4720 = f32[512]{0} add(multiply.4716, multiply.4719)
  parameter.537 = f32[512]{0} parameter(536)
  constant.4789 = f32[] constant(0.9)
  broadcast.4790 = f32[512]{0} broadcast(constant.4789), dimensions={}
  multiply.4791 = f32[512]{0} multiply(parameter.537, broadcast.4790)
  constant.4792 = f32[] constant(0.1)
  broadcast.4793 = f32[512]{0} broadcast(constant.4792), dimensions={}
  multiply.4794 = f32[512]{0} multiply(divide.4769, broadcast.4793)
  add.4795 = f32[512]{0} add(multiply.4791, multiply.4794)
  parameter.538 = f32[512]{0} parameter(537)
  constant.4796 = f32[] constant(0.9)
  broadcast.4797 = f32[512]{0} broadcast(constant.4796), dimensions={}
  multiply.4798 = f32[512]{0} multiply(parameter.538, broadcast.4797)
  constant.4799 = f32[] constant(0.1)
  broadcast.4800 = f32[512]{0} broadcast(constant.4799), dimensions={}
  multiply.4801 = f32[512]{0} multiply(subtract.4788, broadcast.4800)
  add.4802 = f32[512]{0} add(multiply.4798, multiply.4801)
  parameter.539 = f32[2048]{0} parameter(538)
  constant.4871 = f32[] constant(0.9)
  broadcast.4872 = f32[2048]{0} broadcast(constant.4871), dimensions={}
  multiply.4873 = f32[2048]{0} multiply(parameter.539, broadcast.4872)
  constant.4874 = f32[] constant(0.1)
  broadcast.4875 = f32[2048]{0} broadcast(constant.4874), dimensions={}
  multiply.4876 = f32[2048]{0} multiply(divide.4851, broadcast.4875)
  add.4877 = f32[2048]{0} add(multiply.4873, multiply.4876)
  parameter.540 = f32[2048]{0} parameter(539)
  constant.4878 = f32[] constant(0.9)
  broadcast.4879 = f32[2048]{0} broadcast(constant.4878), dimensions={}
  multiply.4880 = f32[2048]{0} multiply(parameter.540, broadcast.4879)
  constant.4881 = f32[] constant(0.1)
  broadcast.4882 = f32[2048]{0} broadcast(constant.4881), dimensions={}
  multiply.4883 = f32[2048]{0} multiply(subtract.4870, broadcast.4882)
  add.4884 = f32[2048]{0} add(multiply.4880, multiply.4883)
  parameter.541 = f32[64]{0} parameter(540)
  constant.1283 = f32[] constant(0.9)
  broadcast.1284 = f32[64]{0} broadcast(constant.1283), dimensions={}
  multiply.1285 = f32[64]{0} multiply(parameter.541, broadcast.1284)
  constant.1286 = f32[] constant(0.1)
  broadcast.1287 = f32[64]{0} broadcast(constant.1286), dimensions={}
  multiply.1288 = f32[64]{0} multiply(divide.1263, broadcast.1287)
  add.1289 = f32[64]{0} add(multiply.1285, multiply.1288)
  parameter.542 = f32[64]{0} parameter(541)
  constant.1290 = f32[] constant(0.9)
  broadcast.1291 = f32[64]{0} broadcast(constant.1290), dimensions={}
  multiply.1292 = f32[64]{0} multiply(parameter.542, broadcast.1291)
  constant.1293 = f32[] constant(0.1)
  broadcast.1294 = f32[64]{0} broadcast(constant.1293), dimensions={}
  multiply.1295 = f32[64]{0} multiply(subtract.1282, broadcast.1294)
  add.1296 = f32[64]{0} add(multiply.1292, multiply.1295)
  parameter.543 = f32[64]{0} parameter(542)
  constant.1365 = f32[] constant(0.9)
  broadcast.1366 = f32[64]{0} broadcast(constant.1365), dimensions={}
  multiply.1367 = f32[64]{0} multiply(parameter.543, broadcast.1366)
  constant.1368 = f32[] constant(0.1)
  broadcast.1369 = f32[64]{0} broadcast(constant.1368), dimensions={}
  multiply.1370 = f32[64]{0} multiply(divide.1345, broadcast.1369)
  add.1371 = f32[64]{0} add(multiply.1367, multiply.1370)
  parameter.544 = f32[64]{0} parameter(543)
  constant.1372 = f32[] constant(0.9)
  broadcast.1373 = f32[64]{0} broadcast(constant.1372), dimensions={}
  multiply.1374 = f32[64]{0} multiply(parameter.544, broadcast.1373)
  constant.1375 = f32[] constant(0.1)
  broadcast.1376 = f32[64]{0} broadcast(constant.1375), dimensions={}
  multiply.1377 = f32[64]{0} multiply(subtract.1364, broadcast.1376)
  add.1378 = f32[64]{0} add(multiply.1374, multiply.1377)
  parameter.545 = f32[256]{0} parameter(544)
  constant.1447 = f32[] constant(0.9)
  broadcast.1448 = f32[256]{0} broadcast(constant.1447), dimensions={}
  multiply.1449 = f32[256]{0} multiply(parameter.545, broadcast.1448)
  constant.1450 = f32[] constant(0.1)
  broadcast.1451 = f32[256]{0} broadcast(constant.1450), dimensions={}
  multiply.1452 = f32[256]{0} multiply(divide.1427, broadcast.1451)
  add.1453 = f32[256]{0} add(multiply.1449, multiply.1452)
  parameter.546 = f32[256]{0} parameter(545)
  constant.1454 = f32[] constant(0.9)
  broadcast.1455 = f32[256]{0} broadcast(constant.1454), dimensions={}
  multiply.1456 = f32[256]{0} multiply(parameter.546, broadcast.1455)
  constant.1457 = f32[] constant(0.1)
  broadcast.1458 = f32[256]{0} broadcast(constant.1457), dimensions={}
  multiply.1459 = f32[256]{0} multiply(subtract.1446, broadcast.1458)
  add.1460 = f32[256]{0} add(multiply.1456, multiply.1459)
  parameter.547 = f32[128]{0} parameter(546)
  constant.1530 = f32[] constant(0.9)
  broadcast.1531 = f32[128]{0} broadcast(constant.1530), dimensions={}
  multiply.1532 = f32[128]{0} multiply(parameter.547, broadcast.1531)
  constant.1533 = f32[] constant(0.1)
  broadcast.1534 = f32[128]{0} broadcast(constant.1533), dimensions={}
  multiply.1535 = f32[128]{0} multiply(divide.1510, broadcast.1534)
  add.1536 = f32[128]{0} add(multiply.1532, multiply.1535)
  parameter.548 = f32[128]{0} parameter(547)
  constant.1537 = f32[] constant(0.9)
  broadcast.1538 = f32[128]{0} broadcast(constant.1537), dimensions={}
  multiply.1539 = f32[128]{0} multiply(parameter.548, broadcast.1538)
  constant.1540 = f32[] constant(0.1)
  broadcast.1541 = f32[128]{0} broadcast(constant.1540), dimensions={}
  multiply.1542 = f32[128]{0} multiply(subtract.1529, broadcast.1541)
  add.1543 = f32[128]{0} add(multiply.1539, multiply.1542)
  parameter.549 = f32[128]{0} parameter(548)
  constant.1612 = f32[] constant(0.9)
  broadcast.1613 = f32[128]{0} broadcast(constant.1612), dimensions={}
  multiply.1614 = f32[128]{0} multiply(parameter.549, broadcast.1613)
  constant.1615 = f32[] constant(0.1)
  broadcast.1616 = f32[128]{0} broadcast(constant.1615), dimensions={}
  multiply.1617 = f32[128]{0} multiply(divide.1592, broadcast.1616)
  add.1618 = f32[128]{0} add(multiply.1614, multiply.1617)
  parameter.550 = f32[128]{0} parameter(549)
  constant.1619 = f32[] constant(0.9)
  broadcast.1620 = f32[128]{0} broadcast(constant.1619), dimensions={}
  multiply.1621 = f32[128]{0} multiply(parameter.550, broadcast.1620)
  constant.1622 = f32[] constant(0.1)
  broadcast.1623 = f32[128]{0} broadcast(constant.1622), dimensions={}
  multiply.1624 = f32[128]{0} multiply(subtract.1611, broadcast.1623)
  add.1625 = f32[128]{0} add(multiply.1621, multiply.1624)
  parameter.551 = f32[512]{0} parameter(550)
  constant.1694 = f32[] constant(0.9)
  broadcast.1695 = f32[512]{0} broadcast(constant.1694), dimensions={}
  multiply.1696 = f32[512]{0} multiply(parameter.551, broadcast.1695)
  constant.1697 = f32[] constant(0.1)
  broadcast.1698 = f32[512]{0} broadcast(constant.1697), dimensions={}
  multiply.1699 = f32[512]{0} multiply(divide.1674, broadcast.1698)
  add.1700 = f32[512]{0} add(multiply.1696, multiply.1699)
  parameter.552 = f32[512]{0} parameter(551)
  constant.1701 = f32[] constant(0.9)
  broadcast.1702 = f32[512]{0} broadcast(constant.1701), dimensions={}
  multiply.1703 = f32[512]{0} multiply(parameter.552, broadcast.1702)
  constant.1704 = f32[] constant(0.1)
  broadcast.1705 = f32[512]{0} broadcast(constant.1704), dimensions={}
  multiply.1706 = f32[512]{0} multiply(subtract.1693, broadcast.1705)
  add.1707 = f32[512]{0} add(multiply.1703, multiply.1706)
  parameter.553 = f32[512]{0} parameter(552)
  constant.1765 = f32[] constant(0.9)
  broadcast.1766 = f32[512]{0} broadcast(constant.1765), dimensions={}
  multiply.1767 = f32[512]{0} multiply(parameter.553, broadcast.1766)
  constant.1768 = f32[] constant(0.1)
  broadcast.1769 = f32[512]{0} broadcast(constant.1768), dimensions={}
  multiply.1770 = f32[512]{0} multiply(divide.1745, broadcast.1769)
  add.1771 = f32[512]{0} add(multiply.1767, multiply.1770)
  parameter.554 = f32[512]{0} parameter(553)
  constant.1772 = f32[] constant(0.9)
  broadcast.1773 = f32[512]{0} broadcast(constant.1772), dimensions={}
  multiply.1774 = f32[512]{0} multiply(parameter.554, broadcast.1773)
  constant.1775 = f32[] constant(0.1)
  broadcast.1776 = f32[512]{0} broadcast(constant.1775), dimensions={}
  multiply.1777 = f32[512]{0} multiply(subtract.1764, broadcast.1776)
  add.1778 = f32[512]{0} add(multiply.1774, multiply.1777)
  parameter.555 = f32[128]{0} parameter(554)
  constant.1848 = f32[] constant(0.9)
  broadcast.1849 = f32[128]{0} broadcast(constant.1848), dimensions={}
  multiply.1850 = f32[128]{0} multiply(parameter.555, broadcast.1849)
  constant.1851 = f32[] constant(0.1)
  broadcast.1852 = f32[128]{0} broadcast(constant.1851), dimensions={}
  multiply.1853 = f32[128]{0} multiply(divide.1828, broadcast.1852)
  add.1854 = f32[128]{0} add(multiply.1850, multiply.1853)
  parameter.556 = f32[128]{0} parameter(555)
  constant.1855 = f32[] constant(0.9)
  broadcast.1856 = f32[128]{0} broadcast(constant.1855), dimensions={}
  multiply.1857 = f32[128]{0} multiply(parameter.556, broadcast.1856)
  constant.1858 = f32[] constant(0.1)
  broadcast.1859 = f32[128]{0} broadcast(constant.1858), dimensions={}
  multiply.1860 = f32[128]{0} multiply(subtract.1847, broadcast.1859)
  add.1861 = f32[128]{0} add(multiply.1857, multiply.1860)
  parameter.557 = f32[128]{0} parameter(556)
  constant.1930 = f32[] constant(0.9)
  broadcast.1931 = f32[128]{0} broadcast(constant.1930), dimensions={}
  multiply.1932 = f32[128]{0} multiply(parameter.557, broadcast.1931)
  constant.1933 = f32[] constant(0.1)
  broadcast.1934 = f32[128]{0} broadcast(constant.1933), dimensions={}
  multiply.1935 = f32[128]{0} multiply(divide.1910, broadcast.1934)
  add.1936 = f32[128]{0} add(multiply.1932, multiply.1935)
  parameter.558 = f32[128]{0} parameter(557)
  constant.1937 = f32[] constant(0.9)
  broadcast.1938 = f32[128]{0} broadcast(constant.1937), dimensions={}
  multiply.1939 = f32[128]{0} multiply(parameter.558, broadcast.1938)
  constant.1940 = f32[] constant(0.1)
  broadcast.1941 = f32[128]{0} broadcast(constant.1940), dimensions={}
  multiply.1942 = f32[128]{0} multiply(subtract.1929, broadcast.1941)
  add.1943 = f32[128]{0} add(multiply.1939, multiply.1942)
  parameter.559 = f32[512]{0} parameter(558)
  constant.2012 = f32[] constant(0.9)
  broadcast.2013 = f32[512]{0} broadcast(constant.2012), dimensions={}
  multiply.2014 = f32[512]{0} multiply(parameter.559, broadcast.2013)
  constant.2015 = f32[] constant(0.1)
  broadcast.2016 = f32[512]{0} broadcast(constant.2015), dimensions={}
  multiply.2017 = f32[512]{0} multiply(divide.1992, broadcast.2016)
  add.2018 = f32[512]{0} add(multiply.2014, multiply.2017)
  parameter.560 = f32[512]{0} parameter(559)
  constant.2019 = f32[] constant(0.9)
  broadcast.2020 = f32[512]{0} broadcast(constant.2019), dimensions={}
  multiply.2021 = f32[512]{0} multiply(parameter.560, broadcast.2020)
  constant.2022 = f32[] constant(0.1)
  broadcast.2023 = f32[512]{0} broadcast(constant.2022), dimensions={}
  multiply.2024 = f32[512]{0} multiply(subtract.2011, broadcast.2023)
  add.2025 = f32[512]{0} add(multiply.2021, multiply.2024)
  parameter.561 = f32[128]{0} parameter(560)
  constant.2095 = f32[] constant(0.9)
  broadcast.2096 = f32[128]{0} broadcast(constant.2095), dimensions={}
  multiply.2097 = f32[128]{0} multiply(parameter.561, broadcast.2096)
  constant.2098 = f32[] constant(0.1)
  broadcast.2099 = f32[128]{0} broadcast(constant.2098), dimensions={}
  multiply.2100 = f32[128]{0} multiply(divide.2075, broadcast.2099)
  add.2101 = f32[128]{0} add(multiply.2097, multiply.2100)
  parameter.562 = f32[128]{0} parameter(561)
  constant.2102 = f32[] constant(0.9)
  broadcast.2103 = f32[128]{0} broadcast(constant.2102), dimensions={}
  multiply.2104 = f32[128]{0} multiply(parameter.562, broadcast.2103)
  constant.2105 = f32[] constant(0.1)
  broadcast.2106 = f32[128]{0} broadcast(constant.2105), dimensions={}
  multiply.2107 = f32[128]{0} multiply(subtract.2094, broadcast.2106)
  add.2108 = f32[128]{0} add(multiply.2104, multiply.2107)
  parameter.563 = f32[128]{0} parameter(562)
  constant.2177 = f32[] constant(0.9)
  broadcast.2178 = f32[128]{0} broadcast(constant.2177), dimensions={}
  multiply.2179 = f32[128]{0} multiply(parameter.563, broadcast.2178)
  constant.2180 = f32[] constant(0.1)
  broadcast.2181 = f32[128]{0} broadcast(constant.2180), dimensions={}
  multiply.2182 = f32[128]{0} multiply(divide.2157, broadcast.2181)
  add.2183 = f32[128]{0} add(multiply.2179, multiply.2182)
  parameter.564 = f32[128]{0} parameter(563)
  constant.2184 = f32[] constant(0.9)
  broadcast.2185 = f32[128]{0} broadcast(constant.2184), dimensions={}
  multiply.2186 = f32[128]{0} multiply(parameter.564, broadcast.2185)
  constant.2187 = f32[] constant(0.1)
  broadcast.2188 = f32[128]{0} broadcast(constant.2187), dimensions={}
  multiply.2189 = f32[128]{0} multiply(subtract.2176, broadcast.2188)
  add.2190 = f32[128]{0} add(multiply.2186, multiply.2189)
  parameter.565 = f32[512]{0} parameter(564)
  constant.2259 = f32[] constant(0.9)
  broadcast.2260 = f32[512]{0} broadcast(constant.2259), dimensions={}
  multiply.2261 = f32[512]{0} multiply(parameter.565, broadcast.2260)
  constant.2262 = f32[] constant(0.1)
  broadcast.2263 = f32[512]{0} broadcast(constant.2262), dimensions={}
  multiply.2264 = f32[512]{0} multiply(divide.2239, broadcast.2263)
  add.2265 = f32[512]{0} add(multiply.2261, multiply.2264)
  parameter.566 = f32[512]{0} parameter(565)
  constant.2266 = f32[] constant(0.9)
  broadcast.2267 = f32[512]{0} broadcast(constant.2266), dimensions={}
  multiply.2268 = f32[512]{0} multiply(parameter.566, broadcast.2267)
  constant.2269 = f32[] constant(0.1)
  broadcast.2270 = f32[512]{0} broadcast(constant.2269), dimensions={}
  multiply.2271 = f32[512]{0} multiply(subtract.2258, broadcast.2270)
  add.2272 = f32[512]{0} add(multiply.2268, multiply.2271)
  parameter.567 = f32[128]{0} parameter(566)
  constant.2342 = f32[] constant(0.9)
  broadcast.2343 = f32[128]{0} broadcast(constant.2342), dimensions={}
  multiply.2344 = f32[128]{0} multiply(parameter.567, broadcast.2343)
  constant.2345 = f32[] constant(0.1)
  broadcast.2346 = f32[128]{0} broadcast(constant.2345), dimensions={}
  multiply.2347 = f32[128]{0} multiply(divide.2322, broadcast.2346)
  add.2348 = f32[128]{0} add(multiply.2344, multiply.2347)
  parameter.568 = f32[128]{0} parameter(567)
  constant.2349 = f32[] constant(0.9)
  broadcast.2350 = f32[128]{0} broadcast(constant.2349), dimensions={}
  multiply.2351 = f32[128]{0} multiply(parameter.568, broadcast.2350)
  constant.2352 = f32[] constant(0.1)
  broadcast.2353 = f32[128]{0} broadcast(constant.2352), dimensions={}
  multiply.2354 = f32[128]{0} multiply(subtract.2341, broadcast.2353)
  add.2355 = f32[128]{0} add(multiply.2351, multiply.2354)
  parameter.569 = f32[128]{0} parameter(568)
  constant.2424 = f32[] constant(0.9)
  broadcast.2425 = f32[128]{0} broadcast(constant.2424), dimensions={}
  multiply.2426 = f32[128]{0} multiply(parameter.569, broadcast.2425)
  constant.2427 = f32[] constant(0.1)
  broadcast.2428 = f32[128]{0} broadcast(constant.2427), dimensions={}
  multiply.2429 = f32[128]{0} multiply(divide.2404, broadcast.2428)
  add.2430 = f32[128]{0} add(multiply.2426, multiply.2429)
  parameter.570 = f32[128]{0} parameter(569)
  constant.2431 = f32[] constant(0.9)
  broadcast.2432 = f32[128]{0} broadcast(constant.2431), dimensions={}
  multiply.2433 = f32[128]{0} multiply(parameter.570, broadcast.2432)
  constant.2434 = f32[] constant(0.1)
  broadcast.2435 = f32[128]{0} broadcast(constant.2434), dimensions={}
  multiply.2436 = f32[128]{0} multiply(subtract.2423, broadcast.2435)
  add.2437 = f32[128]{0} add(multiply.2433, multiply.2436)
  parameter.571 = f32[512]{0} parameter(570)
  constant.2506 = f32[] constant(0.9)
  broadcast.2507 = f32[512]{0} broadcast(constant.2506), dimensions={}
  multiply.2508 = f32[512]{0} multiply(parameter.571, broadcast.2507)
  constant.2509 = f32[] constant(0.1)
  broadcast.2510 = f32[512]{0} broadcast(constant.2509), dimensions={}
  multiply.2511 = f32[512]{0} multiply(divide.2486, broadcast.2510)
  add.2512 = f32[512]{0} add(multiply.2508, multiply.2511)
  parameter.572 = f32[512]{0} parameter(571)
  constant.2513 = f32[] constant(0.9)
  broadcast.2514 = f32[512]{0} broadcast(constant.2513), dimensions={}
  multiply.2515 = f32[512]{0} multiply(parameter.572, broadcast.2514)
  constant.2516 = f32[] constant(0.1)
  broadcast.2517 = f32[512]{0} broadcast(constant.2516), dimensions={}
  multiply.2518 = f32[512]{0} multiply(subtract.2505, broadcast.2517)
  add.2519 = f32[512]{0} add(multiply.2515, multiply.2518)
  parameter.573 = f32[256]{0} parameter(572)
  constant.2589 = f32[] constant(0.9)
  broadcast.2590 = f32[256]{0} broadcast(constant.2589), dimensions={}
  multiply.2591 = f32[256]{0} multiply(parameter.573, broadcast.2590)
  constant.2592 = f32[] constant(0.1)
  broadcast.2593 = f32[256]{0} broadcast(constant.2592), dimensions={}
  multiply.2594 = f32[256]{0} multiply(divide.2569, broadcast.2593)
  add.2595 = f32[256]{0} add(multiply.2591, multiply.2594)
  parameter.574 = f32[256]{0} parameter(573)
  constant.2596 = f32[] constant(0.9)
  broadcast.2597 = f32[256]{0} broadcast(constant.2596), dimensions={}
  multiply.2598 = f32[256]{0} multiply(parameter.574, broadcast.2597)
  constant.2599 = f32[] constant(0.1)
  broadcast.2600 = f32[256]{0} broadcast(constant.2599), dimensions={}
  multiply.2601 = f32[256]{0} multiply(subtract.2588, broadcast.2600)
  add.2602 = f32[256]{0} add(multiply.2598, multiply.2601)
  parameter.575 = f32[256]{0} parameter(574)
  constant.2671 = f32[] constant(0.9)
  broadcast.2672 = f32[256]{0} broadcast(constant.2671), dimensions={}
  multiply.2673 = f32[256]{0} multiply(parameter.575, broadcast.2672)
  constant.2674 = f32[] constant(0.1)
  broadcast.2675 = f32[256]{0} broadcast(constant.2674), dimensions={}
  multiply.2676 = f32[256]{0} multiply(divide.2651, broadcast.2675)
  add.2677 = f32[256]{0} add(multiply.2673, multiply.2676)
  parameter.576 = f32[256]{0} parameter(575)
  constant.2678 = f32[] constant(0.9)
  broadcast.2679 = f32[256]{0} broadcast(constant.2678), dimensions={}
  multiply.2680 = f32[256]{0} multiply(parameter.576, broadcast.2679)
  constant.2681 = f32[] constant(0.1)
  broadcast.2682 = f32[256]{0} broadcast(constant.2681), dimensions={}
  multiply.2683 = f32[256]{0} multiply(subtract.2670, broadcast.2682)
  add.2684 = f32[256]{0} add(multiply.2680, multiply.2683)
  parameter.577 = f32[1024]{0} parameter(576)
  constant.2753 = f32[] constant(0.9)
  broadcast.2754 = f32[1024]{0} broadcast(constant.2753), dimensions={}
  multiply.2755 = f32[1024]{0} multiply(parameter.577, broadcast.2754)
  constant.2756 = f32[] constant(0.1)
  broadcast.2757 = f32[1024]{0} broadcast(constant.2756), dimensions={}
  multiply.2758 = f32[1024]{0} multiply(divide.2733, broadcast.2757)
  add.2759 = f32[1024]{0} add(multiply.2755, multiply.2758)
  parameter.578 = f32[1024]{0} parameter(577)
  constant.2760 = f32[] constant(0.9)
  broadcast.2761 = f32[1024]{0} broadcast(constant.2760), dimensions={}
  multiply.2762 = f32[1024]{0} multiply(parameter.578, broadcast.2761)
  constant.2763 = f32[] constant(0.1)
  broadcast.2764 = f32[1024]{0} broadcast(constant.2763), dimensions={}
  multiply.2765 = f32[1024]{0} multiply(subtract.2752, broadcast.2764)
  add.2766 = f32[1024]{0} add(multiply.2762, multiply.2765)
  parameter.579 = f32[1024]{0} parameter(578)
  constant.2824 = f32[] constant(0.9)
  broadcast.2825 = f32[1024]{0} broadcast(constant.2824), dimensions={}
  multiply.2826 = f32[1024]{0} multiply(parameter.579, broadcast.2825)
  constant.2827 = f32[] constant(0.1)
  broadcast.2828 = f32[1024]{0} broadcast(constant.2827), dimensions={}
  multiply.2829 = f32[1024]{0} multiply(divide.2804, broadcast.2828)
  add.2830 = f32[1024]{0} add(multiply.2826, multiply.2829)
  parameter.580 = f32[1024]{0} parameter(579)
  constant.2831 = f32[] constant(0.9)
  broadcast.2832 = f32[1024]{0} broadcast(constant.2831), dimensions={}
  multiply.2833 = f32[1024]{0} multiply(parameter.580, broadcast.2832)
  constant.2834 = f32[] constant(0.1)
  broadcast.2835 = f32[1024]{0} broadcast(constant.2834), dimensions={}
  multiply.2836 = f32[1024]{0} multiply(subtract.2823, broadcast.2835)
  add.2837 = f32[1024]{0} add(multiply.2833, multiply.2836)
  parameter.581 = f32[256]{0} parameter(580)
  constant.2907 = f32[] constant(0.9)
  broadcast.2908 = f32[256]{0} broadcast(constant.2907), dimensions={}
  multiply.2909 = f32[256]{0} multiply(parameter.581, broadcast.2908)
  constant.2910 = f32[] constant(0.1)
  broadcast.2911 = f32[256]{0} broadcast(constant.2910), dimensions={}
  multiply.2912 = f32[256]{0} multiply(divide.2887, broadcast.2911)
  add.2913 = f32[256]{0} add(multiply.2909, multiply.2912)
  parameter.582 = f32[256]{0} parameter(581)
  constant.2914 = f32[] constant(0.9)
  broadcast.2915 = f32[256]{0} broadcast(constant.2914), dimensions={}
  multiply.2916 = f32[256]{0} multiply(parameter.582, broadcast.2915)
  constant.2917 = f32[] constant(0.1)
  broadcast.2918 = f32[256]{0} broadcast(constant.2917), dimensions={}
  multiply.2919 = f32[256]{0} multiply(subtract.2906, broadcast.2918)
  add.2920 = f32[256]{0} add(multiply.2916, multiply.2919)
  parameter.583 = f32[256]{0} parameter(582)
  constant.2989 = f32[] constant(0.9)
  broadcast.2990 = f32[256]{0} broadcast(constant.2989), dimensions={}
  multiply.2991 = f32[256]{0} multiply(parameter.583, broadcast.2990)
  constant.2992 = f32[] constant(0.1)
  broadcast.2993 = f32[256]{0} broadcast(constant.2992), dimensions={}
  multiply.2994 = f32[256]{0} multiply(divide.2969, broadcast.2993)
  add.2995 = f32[256]{0} add(multiply.2991, multiply.2994)
  parameter.584 = f32[256]{0} parameter(583)
  constant.2996 = f32[] constant(0.9)
  broadcast.2997 = f32[256]{0} broadcast(constant.2996), dimensions={}
  multiply.2998 = f32[256]{0} multiply(parameter.584, broadcast.2997)
  constant.2999 = f32[] constant(0.1)
  broadcast.3000 = f32[256]{0} broadcast(constant.2999), dimensions={}
  multiply.3001 = f32[256]{0} multiply(subtract.2988, broadcast.3000)
  add.3002 = f32[256]{0} add(multiply.2998, multiply.3001)
  parameter.585 = f32[1024]{0} parameter(584)
  constant.3071 = f32[] constant(0.9)
  broadcast.3072 = f32[1024]{0} broadcast(constant.3071), dimensions={}
  multiply.3073 = f32[1024]{0} multiply(parameter.585, broadcast.3072)
  constant.3074 = f32[] constant(0.1)
  broadcast.3075 = f32[1024]{0} broadcast(constant.3074), dimensions={}
  multiply.3076 = f32[1024]{0} multiply(divide.3051, broadcast.3075)
  add.3077 = f32[1024]{0} add(multiply.3073, multiply.3076)
  parameter.586 = f32[1024]{0} parameter(585)
  constant.3078 = f32[] constant(0.9)
  broadcast.3079 = f32[1024]{0} broadcast(constant.3078), dimensions={}
  multiply.3080 = f32[1024]{0} multiply(parameter.586, broadcast.3079)
  constant.3081 = f32[] constant(0.1)
  broadcast.3082 = f32[1024]{0} broadcast(constant.3081), dimensions={}
  multiply.3083 = f32[1024]{0} multiply(subtract.3070, broadcast.3082)
  add.3084 = f32[1024]{0} add(multiply.3080, multiply.3083)
  parameter.587 = f32[256]{0} parameter(586)
  constant.3154 = f32[] constant(0.9)
  broadcast.3155 = f32[256]{0} broadcast(constant.3154), dimensions={}
  multiply.3156 = f32[256]{0} multiply(parameter.587, broadcast.3155)
  constant.3157 = f32[] constant(0.1)
  broadcast.3158 = f32[256]{0} broadcast(constant.3157), dimensions={}
  multiply.3159 = f32[256]{0} multiply(divide.3134, broadcast.3158)
  add.3160 = f32[256]{0} add(multiply.3156, multiply.3159)
  parameter.588 = f32[256]{0} parameter(587)
  constant.3161 = f32[] constant(0.9)
  broadcast.3162 = f32[256]{0} broadcast(constant.3161), dimensions={}
  multiply.3163 = f32[256]{0} multiply(parameter.588, broadcast.3162)
  constant.3164 = f32[] constant(0.1)
  broadcast.3165 = f32[256]{0} broadcast(constant.3164), dimensions={}
  multiply.3166 = f32[256]{0} multiply(subtract.3153, broadcast.3165)
  add.3167 = f32[256]{0} add(multiply.3163, multiply.3166)
  parameter.589 = f32[256]{0} parameter(588)
  constant.3236 = f32[] constant(0.9)
  broadcast.3237 = f32[256]{0} broadcast(constant.3236), dimensions={}
  multiply.3238 = f32[256]{0} multiply(parameter.589, broadcast.3237)
  constant.3239 = f32[] constant(0.1)
  broadcast.3240 = f32[256]{0} broadcast(constant.3239), dimensions={}
  multiply.3241 = f32[256]{0} multiply(divide.3216, broadcast.3240)
  add.3242 = f32[256]{0} add(multiply.3238, multiply.3241)
  parameter.590 = f32[256]{0} parameter(589)
  constant.3243 = f32[] constant(0.9)
  broadcast.3244 = f32[256]{0} broadcast(constant.3243), dimensions={}
  multiply.3245 = f32[256]{0} multiply(parameter.590, broadcast.3244)
  constant.3246 = f32[] constant(0.1)
  broadcast.3247 = f32[256]{0} broadcast(constant.3246), dimensions={}
  multiply.3248 = f32[256]{0} multiply(subtract.3235, broadcast.3247)
  add.3249 = f32[256]{0} add(multiply.3245, multiply.3248)
  parameter.591 = f32[1024]{0} parameter(590)
  constant.3318 = f32[] constant(0.9)
  broadcast.3319 = f32[1024]{0} broadcast(constant.3318), dimensions={}
  multiply.3320 = f32[1024]{0} multiply(parameter.591, broadcast.3319)
  constant.3321 = f32[] constant(0.1)
  broadcast.3322 = f32[1024]{0} broadcast(constant.3321), dimensions={}
  multiply.3323 = f32[1024]{0} multiply(divide.3298, broadcast.3322)
  add.3324 = f32[1024]{0} add(multiply.3320, multiply.3323)
  parameter.592 = f32[1024]{0} parameter(591)
  constant.3325 = f32[] constant(0.9)
  broadcast.3326 = f32[1024]{0} broadcast(constant.3325), dimensions={}
  multiply.3327 = f32[1024]{0} multiply(parameter.592, broadcast.3326)
  constant.3328 = f32[] constant(0.1)
  broadcast.3329 = f32[1024]{0} broadcast(constant.3328), dimensions={}
  multiply.3330 = f32[1024]{0} multiply(subtract.3317, broadcast.3329)
  add.3331 = f32[1024]{0} add(multiply.3327, multiply.3330)
  parameter.593 = f32[64]{0} parameter(592)
  constant.630 = f32[] constant(0.9)
  broadcast.631 = f32[64]{0} broadcast(constant.630), dimensions={}
  multiply.632 = f32[64]{0} multiply(parameter.593, broadcast.631)
  constant.633 = f32[] constant(0.1)
  broadcast.634 = f32[64]{0} broadcast(constant.633), dimensions={}
  multiply.635 = f32[64]{0} multiply(divide.610, broadcast.634)
  add.636 = f32[64]{0} add(multiply.632, multiply.635)
  parameter.594 = f32[64]{0} parameter(593)
  constant.637 = f32[] constant(0.9)
  broadcast.638 = f32[64]{0} broadcast(constant.637), dimensions={}
  multiply.639 = f32[64]{0} multiply(parameter.594, broadcast.638)
  constant.640 = f32[] constant(0.1)
  broadcast.641 = f32[64]{0} broadcast(constant.640), dimensions={}
  multiply.642 = f32[64]{0} multiply(subtract.629, broadcast.641)
  add.643 = f32[64]{0} add(multiply.639, multiply.642)
  constant.763 = bf16[] constant(0)
  broadcast.764 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.763), dimensions={}
  compare.765 = pred[128,56,56,64]{3,2,1,0} compare(convert.756, broadcast.764), direction=GT
  constant.845 = bf16[] constant(0)
  broadcast.846 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.845), dimensions={}
  compare.847 = pred[128,56,56,64]{3,2,1,0} compare(convert.838, broadcast.846), direction=GT
  constant.999 = bf16[] constant(0)
  broadcast.1000 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.999), dimensions={}
  compare.1001 = pred[128,56,56,256]{3,2,1,0} compare(add.992, broadcast.1000), direction=GT
  constant.1246 = bf16[] constant(0)
  broadcast.1247 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1246), dimensions={}
  compare.1248 = pred[128,56,56,256]{3,2,1,0} compare(add.1239, broadcast.1247), direction=GT
  constant.1493 = bf16[] constant(0)
  broadcast.1494 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.1493), dimensions={}
  compare.1495 = pred[128,56,56,256]{3,2,1,0} compare(add.1486, broadcast.1494), direction=GT
  constant.1575 = bf16[] constant(0)
  broadcast.1576 = bf16[128,56,56,128]{3,2,1,0} broadcast(constant.1575), dimensions={}
  compare.1577 = pred[128,56,56,128]{3,2,1,0} compare(convert.1568, broadcast.1576), direction=GT
  constant.1657 = bf16[] constant(0)
  broadcast.1658 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1657), dimensions={}
  compare.1659 = pred[128,28,28,128]{3,2,1,0} compare(convert.1650, broadcast.1658), direction=GT
  constant.1811 = bf16[] constant(0)
  broadcast.1812 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.1811), dimensions={}
  compare.1813 = pred[128,28,28,512]{3,2,1,0} compare(add.1804, broadcast.1812), direction=GT
  constant.2058 = bf16[] constant(0)
  broadcast.2059 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2058), dimensions={}
  compare.2060 = pred[128,28,28,512]{3,2,1,0} compare(add.2051, broadcast.2059), direction=GT
  constant.2305 = bf16[] constant(0)
  broadcast.2306 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2305), dimensions={}
  compare.2307 = pred[128,28,28,512]{3,2,1,0} compare(add.2298, broadcast.2306), direction=GT
  constant.2552 = bf16[] constant(0)
  broadcast.2553 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.2552), dimensions={}
  compare.2554 = pred[128,28,28,512]{3,2,1,0} compare(add.2545, broadcast.2553), direction=GT
  constant.2634 = bf16[] constant(0)
  broadcast.2635 = bf16[128,28,28,256]{3,2,1,0} broadcast(constant.2634), dimensions={}
  compare.2636 = pred[128,28,28,256]{3,2,1,0} compare(convert.2627, broadcast.2635), direction=GT
  constant.2716 = bf16[] constant(0)
  broadcast.2717 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.2716), dimensions={}
  compare.2718 = pred[128,14,14,256]{3,2,1,0} compare(convert.2709, broadcast.2717), direction=GT
  constant.2870 = bf16[] constant(0)
  broadcast.2871 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.2870), dimensions={}
  compare.2872 = pred[128,14,14,1024]{3,2,1,0} compare(add.2863, broadcast.2871), direction=GT
  constant.3117 = bf16[] constant(0)
  broadcast.3118 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3117), dimensions={}
  compare.3119 = pred[128,14,14,1024]{3,2,1,0} compare(add.3110, broadcast.3118), direction=GT
  constant.3364 = bf16[] constant(0)
  broadcast.3365 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3364), dimensions={}
  compare.3366 = pred[128,14,14,1024]{3,2,1,0} compare(add.3357, broadcast.3365), direction=GT
  constant.3611 = bf16[] constant(0)
  broadcast.3612 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3611), dimensions={}
  compare.3613 = pred[128,14,14,1024]{3,2,1,0} compare(add.3604, broadcast.3612), direction=GT
  constant.3858 = bf16[] constant(0)
  broadcast.3859 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.3858), dimensions={}
  compare.3860 = pred[128,14,14,1024]{3,2,1,0} compare(add.3851, broadcast.3859), direction=GT
  constant.4105 = bf16[] constant(0)
  broadcast.4106 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.4105), dimensions={}
  compare.4107 = pred[128,14,14,1024]{3,2,1,0} compare(add.4098, broadcast.4106), direction=GT
  constant.4187 = bf16[] constant(0)
  broadcast.4188 = bf16[128,14,14,512]{3,2,1,0} broadcast(constant.4187), dimensions={}
  compare.4189 = pred[128,14,14,512]{3,2,1,0} compare(convert.4180, broadcast.4188), direction=GT
  constant.4269 = bf16[] constant(0)
  broadcast.4270 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4269), dimensions={}
  compare.4271 = pred[128,7,7,512]{3,2,1,0} compare(convert.4262, broadcast.4270), direction=GT
  constant.4423 = bf16[] constant(0)
  broadcast.4424 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4423), dimensions={}
  compare.4425 = pred[128,7,7,2048]{3,2,1,0} compare(add.4416, broadcast.4424), direction=GT
  constant.4670 = bf16[] constant(0)
  broadcast.4671 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4670), dimensions={}
  compare.4672 = pred[128,7,7,2048]{3,2,1,0} compare(add.4663, broadcast.4671), direction=GT
  constant.4917 = bf16[] constant(0)
  broadcast.4918 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.4917), dimensions={}
  compare.4919 = pred[128,7,7,2048]{3,2,1,0} compare(add.4910, broadcast.4918), direction=GT
  constant.5710 = f32[] constant(1)
  constant.5711 = f32[] constant(128)
  divide.5712 = f32[] divide(constant.5710, constant.5711)
  negate.5713 = f32[] negate(divide.5712)
  broadcast.5714 = f32[128,1000]{1,0} broadcast(negate.5713), dimensions={}
  multiply.5715 = f32[128,1000]{1,0} multiply(broadcast.5714, select.4990)
  constant.5716 = f32[] constant(0)
  reduce.5721 = f32[128]{0} reduce(multiply.5715, constant.5716), dimensions={1}, to_apply=primitive_computation_add.5717
  broadcast.5722 = f32[128]{0} broadcast(reduce.5721), dimensions={0}
  broadcast.5723 = f32[128,1]{1,0} broadcast(broadcast.5722), dimensions={0}
  negate.5724 = f32[128,1]{1,0} negate(broadcast.5723)
  divide.5725 = f32[128,1]{1,0} divide(negate.5724, broadcast.4973)
  constant.5726 = f32[] constant(0)
  reduce.5731 = f32[128]{0} reduce(divide.5725, constant.5726), dimensions={1}, to_apply=primitive_computation_add.5727
  broadcast.5732 = f32[128]{0} broadcast(reduce.5731), dimensions={0}
  broadcast.5733 = f32[128,1000]{1,0} broadcast(broadcast.5732), dimensions={0}
  multiply.5734 = f32[128,1000]{1,0} multiply(broadcast.5733, exponential.4966)
  add.5735 = f32[128,1000]{1,0} add(multiply.5715, multiply.5734)
  convert.5736 = bf16[128,1000]{1,0} convert(add.5735)
  dot.5757 = bf16[128,2048]{1,0} dot(convert.5736, convert.4934), lhs_contracting_dims={1}, rhs_contracting_dims={1}
  broadcast.5758 = bf16[128,2048]{1,0} broadcast(convert.4931), dimensions={}
  divide.5759 = bf16[128,2048]{1,0} divide(dot.5757, broadcast.5758)
  convert.5760 = f32[128,2048]{1,0} convert(divide.5759)
  broadcast.5761 = f32[128,7,7,2048]{3,2,1,0} broadcast(convert.5760), dimensions={0,3}
  convert.5762 = bf16[128,7,7,2048]{3,2,1,0} convert(broadcast.5761)
  constant.5763 = bf16[] constant(0)
  broadcast.5764 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.5763), dimensions={}
  select.5765 = bf16[128,7,7,2048]{3,2,1,0} select(compare.4919, convert.5762, broadcast.5764)
  constant.4752 = bf16[] constant(0)
  broadcast.4753 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4752), dimensions={}
  compare.4754 = pred[128,7,7,512]{3,2,1,0} compare(convert.4745, broadcast.4753), direction=GT
  constant.4834 = bf16[] constant(0)
  broadcast.4835 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4834), dimensions={}
  compare.4836 = pred[128,7,7,512]{3,2,1,0} compare(convert.4827, broadcast.4835), direction=GT
  convert.5766 = f32[128,7,7,2048]{3,2,1,0} convert(select.5765)
  multiply.5776 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.5766, subtract.4888)
  constant.5777 = f32[] constant(0)
  reduce.5782 = f32[2048]{0} reduce(multiply.5776, constant.5777), dimensions={0,1,2}, to_apply=primitive_computation_add.5778
  broadcast.5783 = f32[2048]{0} broadcast(reduce.5782), dimensions={0}
  broadcast.5784 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.5783), dimensions={3}
  multiply.5787 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.5784, reshape.4899)
  constant.5788 = f32[] constant(0)
  reduce.5793 = f32[2048]{0} reduce(multiply.5787, constant.5788), dimensions={0,1,2}, to_apply=primitive_computation_add.5789
  broadcast.5794 = f32[2048]{0} broadcast(reduce.5793), dimensions={0}
  constant.4896 = f32[] constant(-0.5)
  broadcast.4897 = f32[2048]{0} broadcast(constant.4896), dimensions={}
  constant.4893 = f32[] constant(-1.5)
  broadcast.4894 = f32[2048]{0} broadcast(constant.4893), dimensions={}
  power.4895 = f32[2048]{0} power(add.4891, broadcast.4894)
  multiply.4898 = f32[2048]{0} multiply(broadcast.4897, power.4895)
  multiply.5795 = f32[2048]{0} multiply(broadcast.5794, multiply.4898)
  broadcast.5798 = f32[2048]{0} broadcast(convert.4863), dimensions={}
  divide.5799 = f32[2048]{0} divide(multiply.5795, broadcast.5798)
  broadcast.5800 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.5799), dimensions={3}
  constant.4853 = f32[] constant(2)
  broadcast.4854 = f32[128,7,7,2048]{3,2,1,0} broadcast(constant.4853), dimensions={}
  multiply.4855 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.4854, convert.4841)
  multiply.5801 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.5800, multiply.4855)
  reshape.5802 = f32[2048]{0} reshape(multiply.4901)
  broadcast.5803 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.5802), dimensions={3}
  multiply.5804 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.5766, broadcast.5803)
  add.5805 = f32[128,7,7,2048]{3,2,1,0} add(multiply.5801, multiply.5804)
  negate.5796 = f32[2048]{0} negate(multiply.5795)
  constant.4867 = f32[] constant(2)
  broadcast.4868 = f32[2048]{0} broadcast(constant.4867), dimensions={}
  multiply.4869 = f32[2048]{0} multiply(broadcast.4868, divide.4851)
  multiply.5797 = f32[2048]{0} multiply(negate.5796, multiply.4869)
  constant.5806 = f32[] constant(0)
  reduce.5811 = f32[2048]{0} reduce(multiply.5804, constant.5806), dimensions={0,1,2}, to_apply=primitive_computation_add.5807
  broadcast.5812 = f32[2048]{0} broadcast(reduce.5811), dimensions={0}
  broadcast.5813 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.5812), dimensions={3}
  negate.5814 = f32[1,1,1,2048]{3,2,1,0} negate(broadcast.5813)
  reshape.5815 = f32[2048]{0} reshape(negate.5814)
  add.5816 = f32[2048]{0} add(multiply.5797, reshape.5815)
  broadcast.5817 = f32[2048]{0} broadcast(convert.4849), dimensions={}
  divide.5818 = f32[2048]{0} divide(add.5816, broadcast.5817)
  broadcast.5819 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.5818), dimensions={3}
  add.5820 = f32[128,7,7,2048]{3,2,1,0} add(add.5805, broadcast.5819)
  convert.5821 = bf16[128,7,7,2048]{3,2,1,0} convert(add.5820)
  reverse.5825 = bf16[1,1,512,2048]{3,2,1,0} reverse(convert.4839), dimensions={0,1}
  convolution.5826 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.5821, reverse.5825), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.5827 = bf16[] constant(0)
  broadcast.5828 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.5827), dimensions={}
  select.5829 = bf16[128,7,7,512]{3,2,1,0} select(compare.4836, convolution.5826, broadcast.5828)
  convert.5830 = f32[128,7,7,512]{3,2,1,0} convert(select.5829)
  multiply.5840 = f32[128,7,7,512]{3,2,1,0} multiply(convert.5830, subtract.4806)
  constant.5841 = f32[] constant(0)
  reduce.5846 = f32[512]{0} reduce(multiply.5840, constant.5841), dimensions={0,1,2}, to_apply=primitive_computation_add.5842
  broadcast.5847 = f32[512]{0} broadcast(reduce.5846), dimensions={0}
  broadcast.5848 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.5847), dimensions={3}
  multiply.5851 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.5848, reshape.4817)
  constant.5852 = f32[] constant(0)
  reduce.5857 = f32[512]{0} reduce(multiply.5851, constant.5852), dimensions={0,1,2}, to_apply=primitive_computation_add.5853
  broadcast.5858 = f32[512]{0} broadcast(reduce.5857), dimensions={0}
  constant.4814 = f32[] constant(-0.5)
  broadcast.4815 = f32[512]{0} broadcast(constant.4814), dimensions={}
  constant.4811 = f32[] constant(-1.5)
  broadcast.4812 = f32[512]{0} broadcast(constant.4811), dimensions={}
  power.4813 = f32[512]{0} power(add.4809, broadcast.4812)
  multiply.4816 = f32[512]{0} multiply(broadcast.4815, power.4813)
  multiply.5859 = f32[512]{0} multiply(broadcast.5858, multiply.4816)
  broadcast.5862 = f32[512]{0} broadcast(convert.4781), dimensions={}
  divide.5863 = f32[512]{0} divide(multiply.5859, broadcast.5862)
  broadcast.5864 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.5863), dimensions={3}
  constant.4771 = f32[] constant(2)
  broadcast.4772 = f32[128,7,7,512]{3,2,1,0} broadcast(constant.4771), dimensions={}
  multiply.4773 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.4772, convert.4759)
  multiply.5865 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.5864, multiply.4773)
  reshape.5866 = f32[512]{0} reshape(multiply.4819)
  broadcast.5867 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.5866), dimensions={3}
  multiply.5868 = f32[128,7,7,512]{3,2,1,0} multiply(convert.5830, broadcast.5867)
  add.5869 = f32[128,7,7,512]{3,2,1,0} add(multiply.5865, multiply.5868)
  negate.5860 = f32[512]{0} negate(multiply.5859)
  constant.4785 = f32[] constant(2)
  broadcast.4786 = f32[512]{0} broadcast(constant.4785), dimensions={}
  multiply.4787 = f32[512]{0} multiply(broadcast.4786, divide.4769)
  multiply.5861 = f32[512]{0} multiply(negate.5860, multiply.4787)
  constant.5870 = f32[] constant(0)
  reduce.5875 = f32[512]{0} reduce(multiply.5868, constant.5870), dimensions={0,1,2}, to_apply=primitive_computation_add.5871
  broadcast.5876 = f32[512]{0} broadcast(reduce.5875), dimensions={0}
  broadcast.5877 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.5876), dimensions={3}
  negate.5878 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.5877)
  reshape.5879 = f32[512]{0} reshape(negate.5878)
  add.5880 = f32[512]{0} add(multiply.5861, reshape.5879)
  broadcast.5881 = f32[512]{0} broadcast(convert.4767), dimensions={}
  divide.5882 = f32[512]{0} divide(add.5880, broadcast.5881)
  broadcast.5883 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.5882), dimensions={3}
  add.5884 = f32[128,7,7,512]{3,2,1,0} add(add.5869, broadcast.5883)
  convert.5885 = bf16[128,7,7,512]{3,2,1,0} convert(add.5884)
  reverse.5889 = bf16[3,3,512,512]{3,2,1,0} reverse(convert.4757), dimensions={0,1}
  convolution.5890 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.5885, reverse.5889), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.5891 = bf16[] constant(0)
  broadcast.5892 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.5891), dimensions={}
  select.5893 = bf16[128,7,7,512]{3,2,1,0} select(compare.4754, convolution.5890, broadcast.5892)
  convert.5894 = f32[128,7,7,512]{3,2,1,0} convert(select.5893)
  multiply.5904 = f32[128,7,7,512]{3,2,1,0} multiply(convert.5894, subtract.4724)
  constant.5905 = f32[] constant(0)
  reduce.5910 = f32[512]{0} reduce(multiply.5904, constant.5905), dimensions={0,1,2}, to_apply=primitive_computation_add.5906
  broadcast.5911 = f32[512]{0} broadcast(reduce.5910), dimensions={0}
  broadcast.5912 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.5911), dimensions={3}
  multiply.5915 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.5912, reshape.4735)
  constant.5916 = f32[] constant(0)
  reduce.5921 = f32[512]{0} reduce(multiply.5915, constant.5916), dimensions={0,1,2}, to_apply=primitive_computation_add.5917
  broadcast.5922 = f32[512]{0} broadcast(reduce.5921), dimensions={0}
  constant.4732 = f32[] constant(-0.5)
  broadcast.4733 = f32[512]{0} broadcast(constant.4732), dimensions={}
  constant.4729 = f32[] constant(-1.5)
  broadcast.4730 = f32[512]{0} broadcast(constant.4729), dimensions={}
  power.4731 = f32[512]{0} power(add.4727, broadcast.4730)
  multiply.4734 = f32[512]{0} multiply(broadcast.4733, power.4731)
  multiply.5923 = f32[512]{0} multiply(broadcast.5922, multiply.4734)
  broadcast.5926 = f32[512]{0} broadcast(convert.4699), dimensions={}
  divide.5927 = f32[512]{0} divide(multiply.5923, broadcast.5926)
  broadcast.5928 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.5927), dimensions={3}
  constant.4689 = f32[] constant(2)
  broadcast.4690 = f32[128,7,7,512]{3,2,1,0} broadcast(constant.4689), dimensions={}
  multiply.4691 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.4690, convert.4677)
  multiply.5929 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.5928, multiply.4691)
  reshape.5930 = f32[512]{0} reshape(multiply.4737)
  broadcast.5931 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.5930), dimensions={3}
  multiply.5932 = f32[128,7,7,512]{3,2,1,0} multiply(convert.5894, broadcast.5931)
  add.5933 = f32[128,7,7,512]{3,2,1,0} add(multiply.5929, multiply.5932)
  negate.5924 = f32[512]{0} negate(multiply.5923)
  constant.4703 = f32[] constant(2)
  broadcast.4704 = f32[512]{0} broadcast(constant.4703), dimensions={}
  multiply.4705 = f32[512]{0} multiply(broadcast.4704, divide.4687)
  multiply.5925 = f32[512]{0} multiply(negate.5924, multiply.4705)
  constant.5934 = f32[] constant(0)
  reduce.5939 = f32[512]{0} reduce(multiply.5932, constant.5934), dimensions={0,1,2}, to_apply=primitive_computation_add.5935
  broadcast.5940 = f32[512]{0} broadcast(reduce.5939), dimensions={0}
  broadcast.5941 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.5940), dimensions={3}
  negate.5942 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.5941)
  reshape.5943 = f32[512]{0} reshape(negate.5942)
  add.5944 = f32[512]{0} add(multiply.5925, reshape.5943)
  broadcast.5945 = f32[512]{0} broadcast(convert.4685), dimensions={}
  divide.5946 = f32[512]{0} divide(add.5944, broadcast.5945)
  broadcast.5947 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.5946), dimensions={3}
  add.5948 = f32[128,7,7,512]{3,2,1,0} add(add.5933, broadcast.5947)
  convert.5949 = bf16[128,7,7,512]{3,2,1,0} convert(add.5948)
  reverse.5953 = bf16[1,1,2048,512]{3,2,1,0} reverse(convert.4675), dimensions={0,1}
  convolution.5954 = bf16[128,7,7,2048]{3,2,1,0} convolution(convert.5949, reverse.5953), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.5955 = bf16[128,7,7,2048]{3,2,1,0} add(select.5765, convolution.5954)
  constant.5956 = bf16[] constant(0)
  broadcast.5957 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.5956), dimensions={}
  select.5958 = bf16[128,7,7,2048]{3,2,1,0} select(compare.4672, add.5955, broadcast.5957)
  constant.4505 = bf16[] constant(0)
  broadcast.4506 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4505), dimensions={}
  compare.4507 = pred[128,7,7,512]{3,2,1,0} compare(convert.4498, broadcast.4506), direction=GT
  constant.4587 = bf16[] constant(0)
  broadcast.4588 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.4587), dimensions={}
  compare.4589 = pred[128,7,7,512]{3,2,1,0} compare(convert.4580, broadcast.4588), direction=GT
  convert.5959 = f32[128,7,7,2048]{3,2,1,0} convert(select.5958)
  multiply.5969 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.5959, subtract.4641)
  constant.5970 = f32[] constant(0)
  reduce.5975 = f32[2048]{0} reduce(multiply.5969, constant.5970), dimensions={0,1,2}, to_apply=primitive_computation_add.5971
  broadcast.5976 = f32[2048]{0} broadcast(reduce.5975), dimensions={0}
  broadcast.5977 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.5976), dimensions={3}
  multiply.5980 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.5977, reshape.4652)
  constant.5981 = f32[] constant(0)
  reduce.5986 = f32[2048]{0} reduce(multiply.5980, constant.5981), dimensions={0,1,2}, to_apply=primitive_computation_add.5982
  broadcast.5987 = f32[2048]{0} broadcast(reduce.5986), dimensions={0}
  constant.4649 = f32[] constant(-0.5)
  broadcast.4650 = f32[2048]{0} broadcast(constant.4649), dimensions={}
  constant.4646 = f32[] constant(-1.5)
  broadcast.4647 = f32[2048]{0} broadcast(constant.4646), dimensions={}
  power.4648 = f32[2048]{0} power(add.4644, broadcast.4647)
  multiply.4651 = f32[2048]{0} multiply(broadcast.4650, power.4648)
  multiply.5988 = f32[2048]{0} multiply(broadcast.5987, multiply.4651)
  broadcast.5991 = f32[2048]{0} broadcast(convert.4616), dimensions={}
  divide.5992 = f32[2048]{0} divide(multiply.5988, broadcast.5991)
  broadcast.5993 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.5992), dimensions={3}
  constant.4606 = f32[] constant(2)
  broadcast.4607 = f32[128,7,7,2048]{3,2,1,0} broadcast(constant.4606), dimensions={}
  multiply.4608 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.4607, convert.4594)
  multiply.5994 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.5993, multiply.4608)
  reshape.5995 = f32[2048]{0} reshape(multiply.4654)
  broadcast.5996 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.5995), dimensions={3}
  multiply.5997 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.5959, broadcast.5996)
  add.5998 = f32[128,7,7,2048]{3,2,1,0} add(multiply.5994, multiply.5997)
  negate.5989 = f32[2048]{0} negate(multiply.5988)
  constant.4620 = f32[] constant(2)
  broadcast.4621 = f32[2048]{0} broadcast(constant.4620), dimensions={}
  multiply.4622 = f32[2048]{0} multiply(broadcast.4621, divide.4604)
  multiply.5990 = f32[2048]{0} multiply(negate.5989, multiply.4622)
  constant.5999 = f32[] constant(0)
  reduce.6004 = f32[2048]{0} reduce(multiply.5997, constant.5999), dimensions={0,1,2}, to_apply=primitive_computation_add.6000
  broadcast.6005 = f32[2048]{0} broadcast(reduce.6004), dimensions={0}
  broadcast.6006 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6005), dimensions={3}
  negate.6007 = f32[1,1,1,2048]{3,2,1,0} negate(broadcast.6006)
  reshape.6008 = f32[2048]{0} reshape(negate.6007)
  add.6009 = f32[2048]{0} add(multiply.5990, reshape.6008)
  broadcast.6010 = f32[2048]{0} broadcast(convert.4602), dimensions={}
  divide.6011 = f32[2048]{0} divide(add.6009, broadcast.6010)
  broadcast.6012 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6011), dimensions={3}
  add.6013 = f32[128,7,7,2048]{3,2,1,0} add(add.5998, broadcast.6012)
  convert.6014 = bf16[128,7,7,2048]{3,2,1,0} convert(add.6013)
  reverse.6018 = bf16[1,1,512,2048]{3,2,1,0} reverse(convert.4592), dimensions={0,1}
  convolution.6019 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.6014, reverse.6018), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.6020 = bf16[] constant(0)
  broadcast.6021 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.6020), dimensions={}
  select.6022 = bf16[128,7,7,512]{3,2,1,0} select(compare.4589, convolution.6019, broadcast.6021)
  convert.6023 = f32[128,7,7,512]{3,2,1,0} convert(select.6022)
  multiply.6033 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6023, subtract.4559)
  constant.6034 = f32[] constant(0)
  reduce.6039 = f32[512]{0} reduce(multiply.6033, constant.6034), dimensions={0,1,2}, to_apply=primitive_computation_add.6035
  broadcast.6040 = f32[512]{0} broadcast(reduce.6039), dimensions={0}
  broadcast.6041 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6040), dimensions={3}
  multiply.6044 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6041, reshape.4570)
  constant.6045 = f32[] constant(0)
  reduce.6050 = f32[512]{0} reduce(multiply.6044, constant.6045), dimensions={0,1,2}, to_apply=primitive_computation_add.6046
  broadcast.6051 = f32[512]{0} broadcast(reduce.6050), dimensions={0}
  constant.4567 = f32[] constant(-0.5)
  broadcast.4568 = f32[512]{0} broadcast(constant.4567), dimensions={}
  constant.4564 = f32[] constant(-1.5)
  broadcast.4565 = f32[512]{0} broadcast(constant.4564), dimensions={}
  power.4566 = f32[512]{0} power(add.4562, broadcast.4565)
  multiply.4569 = f32[512]{0} multiply(broadcast.4568, power.4566)
  multiply.6052 = f32[512]{0} multiply(broadcast.6051, multiply.4569)
  broadcast.6055 = f32[512]{0} broadcast(convert.4534), dimensions={}
  divide.6056 = f32[512]{0} divide(multiply.6052, broadcast.6055)
  broadcast.6057 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6056), dimensions={3}
  constant.4524 = f32[] constant(2)
  broadcast.4525 = f32[128,7,7,512]{3,2,1,0} broadcast(constant.4524), dimensions={}
  multiply.4526 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.4525, convert.4512)
  multiply.6058 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.6057, multiply.4526)
  reshape.6059 = f32[512]{0} reshape(multiply.4572)
  broadcast.6060 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.6059), dimensions={3}
  multiply.6061 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6023, broadcast.6060)
  add.6062 = f32[128,7,7,512]{3,2,1,0} add(multiply.6058, multiply.6061)
  negate.6053 = f32[512]{0} negate(multiply.6052)
  constant.4538 = f32[] constant(2)
  broadcast.4539 = f32[512]{0} broadcast(constant.4538), dimensions={}
  multiply.4540 = f32[512]{0} multiply(broadcast.4539, divide.4522)
  multiply.6054 = f32[512]{0} multiply(negate.6053, multiply.4540)
  constant.6063 = f32[] constant(0)
  reduce.6068 = f32[512]{0} reduce(multiply.6061, constant.6063), dimensions={0,1,2}, to_apply=primitive_computation_add.6064
  broadcast.6069 = f32[512]{0} broadcast(reduce.6068), dimensions={0}
  broadcast.6070 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6069), dimensions={3}
  negate.6071 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.6070)
  reshape.6072 = f32[512]{0} reshape(negate.6071)
  add.6073 = f32[512]{0} add(multiply.6054, reshape.6072)
  broadcast.6074 = f32[512]{0} broadcast(convert.4520), dimensions={}
  divide.6075 = f32[512]{0} divide(add.6073, broadcast.6074)
  broadcast.6076 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6075), dimensions={3}
  add.6077 = f32[128,7,7,512]{3,2,1,0} add(add.6062, broadcast.6076)
  convert.6078 = bf16[128,7,7,512]{3,2,1,0} convert(add.6077)
  reverse.6082 = bf16[3,3,512,512]{3,2,1,0} reverse(convert.4510), dimensions={0,1}
  convolution.6083 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.6078, reverse.6082), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.6084 = bf16[] constant(0)
  broadcast.6085 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.6084), dimensions={}
  select.6086 = bf16[128,7,7,512]{3,2,1,0} select(compare.4507, convolution.6083, broadcast.6085)
  convert.6087 = f32[128,7,7,512]{3,2,1,0} convert(select.6086)
  multiply.6097 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6087, subtract.4477)
  constant.6098 = f32[] constant(0)
  reduce.6103 = f32[512]{0} reduce(multiply.6097, constant.6098), dimensions={0,1,2}, to_apply=primitive_computation_add.6099
  broadcast.6104 = f32[512]{0} broadcast(reduce.6103), dimensions={0}
  broadcast.6105 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6104), dimensions={3}
  multiply.6108 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6105, reshape.4488)
  constant.6109 = f32[] constant(0)
  reduce.6114 = f32[512]{0} reduce(multiply.6108, constant.6109), dimensions={0,1,2}, to_apply=primitive_computation_add.6110
  broadcast.6115 = f32[512]{0} broadcast(reduce.6114), dimensions={0}
  constant.4485 = f32[] constant(-0.5)
  broadcast.4486 = f32[512]{0} broadcast(constant.4485), dimensions={}
  constant.4482 = f32[] constant(-1.5)
  broadcast.4483 = f32[512]{0} broadcast(constant.4482), dimensions={}
  power.4484 = f32[512]{0} power(add.4480, broadcast.4483)
  multiply.4487 = f32[512]{0} multiply(broadcast.4486, power.4484)
  multiply.6116 = f32[512]{0} multiply(broadcast.6115, multiply.4487)
  broadcast.6119 = f32[512]{0} broadcast(convert.4452), dimensions={}
  divide.6120 = f32[512]{0} divide(multiply.6116, broadcast.6119)
  broadcast.6121 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6120), dimensions={3}
  constant.4442 = f32[] constant(2)
  broadcast.4443 = f32[128,7,7,512]{3,2,1,0} broadcast(constant.4442), dimensions={}
  multiply.4444 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.4443, convert.4430)
  multiply.6122 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.6121, multiply.4444)
  reshape.6123 = f32[512]{0} reshape(multiply.4490)
  broadcast.6124 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.6123), dimensions={3}
  multiply.6125 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6087, broadcast.6124)
  add.6126 = f32[128,7,7,512]{3,2,1,0} add(multiply.6122, multiply.6125)
  negate.6117 = f32[512]{0} negate(multiply.6116)
  constant.4456 = f32[] constant(2)
  broadcast.4457 = f32[512]{0} broadcast(constant.4456), dimensions={}
  multiply.4458 = f32[512]{0} multiply(broadcast.4457, divide.4440)
  multiply.6118 = f32[512]{0} multiply(negate.6117, multiply.4458)
  constant.6127 = f32[] constant(0)
  reduce.6132 = f32[512]{0} reduce(multiply.6125, constant.6127), dimensions={0,1,2}, to_apply=primitive_computation_add.6128
  broadcast.6133 = f32[512]{0} broadcast(reduce.6132), dimensions={0}
  broadcast.6134 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6133), dimensions={3}
  negate.6135 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.6134)
  reshape.6136 = f32[512]{0} reshape(negate.6135)
  add.6137 = f32[512]{0} add(multiply.6118, reshape.6136)
  broadcast.6138 = f32[512]{0} broadcast(convert.4438), dimensions={}
  divide.6139 = f32[512]{0} divide(add.6137, broadcast.6138)
  broadcast.6140 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6139), dimensions={3}
  add.6141 = f32[128,7,7,512]{3,2,1,0} add(add.6126, broadcast.6140)
  convert.6142 = bf16[128,7,7,512]{3,2,1,0} convert(add.6141)
  reverse.6146 = bf16[1,1,2048,512]{3,2,1,0} reverse(convert.4428), dimensions={0,1}
  convolution.6147 = bf16[128,7,7,2048]{3,2,1,0} convolution(convert.6142, reverse.6146), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.6148 = bf16[128,7,7,2048]{3,2,1,0} add(select.5958, convolution.6147)
  constant.6149 = bf16[] constant(0)
  broadcast.6150 = bf16[128,7,7,2048]{3,2,1,0} broadcast(constant.6149), dimensions={}
  select.6151 = bf16[128,7,7,2048]{3,2,1,0} select(compare.4425, add.6148, broadcast.6150)
  convert.6152 = f32[128,7,7,2048]{3,2,1,0} convert(select.6151)
  multiply.6162 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6152, subtract.4323)
  constant.6163 = f32[] constant(0)
  reduce.6168 = f32[2048]{0} reduce(multiply.6162, constant.6163), dimensions={0,1,2}, to_apply=primitive_computation_add.6164
  broadcast.6169 = f32[2048]{0} broadcast(reduce.6168), dimensions={0}
  broadcast.6170 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6169), dimensions={3}
  multiply.6173 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6170, reshape.4334)
  constant.6174 = f32[] constant(0)
  reduce.6179 = f32[2048]{0} reduce(multiply.6173, constant.6174), dimensions={0,1,2}, to_apply=primitive_computation_add.6175
  broadcast.6180 = f32[2048]{0} broadcast(reduce.6179), dimensions={0}
  constant.4331 = f32[] constant(-0.5)
  broadcast.4332 = f32[2048]{0} broadcast(constant.4331), dimensions={}
  constant.4328 = f32[] constant(-1.5)
  broadcast.4329 = f32[2048]{0} broadcast(constant.4328), dimensions={}
  power.4330 = f32[2048]{0} power(add.4326, broadcast.4329)
  multiply.4333 = f32[2048]{0} multiply(broadcast.4332, power.4330)
  multiply.6181 = f32[2048]{0} multiply(broadcast.6180, multiply.4333)
  broadcast.6184 = f32[2048]{0} broadcast(convert.4298), dimensions={}
  divide.6185 = f32[2048]{0} divide(multiply.6181, broadcast.6184)
  broadcast.6186 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6185), dimensions={3}
  constant.4288 = f32[] constant(2)
  broadcast.4289 = f32[128,7,7,2048]{3,2,1,0} broadcast(constant.4288), dimensions={}
  multiply.4290 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.4289, convert.4276)
  multiply.6187 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.6186, multiply.4290)
  reshape.6188 = f32[2048]{0} reshape(multiply.4336)
  broadcast.6189 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.6188), dimensions={3}
  multiply.6190 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6152, broadcast.6189)
  add.6191 = f32[128,7,7,2048]{3,2,1,0} add(multiply.6187, multiply.6190)
  negate.6182 = f32[2048]{0} negate(multiply.6181)
  constant.4302 = f32[] constant(2)
  broadcast.4303 = f32[2048]{0} broadcast(constant.4302), dimensions={}
  multiply.4304 = f32[2048]{0} multiply(broadcast.4303, divide.4286)
  multiply.6183 = f32[2048]{0} multiply(negate.6182, multiply.4304)
  constant.6192 = f32[] constant(0)
  reduce.6197 = f32[2048]{0} reduce(multiply.6190, constant.6192), dimensions={0,1,2}, to_apply=primitive_computation_add.6193
  broadcast.6198 = f32[2048]{0} broadcast(reduce.6197), dimensions={0}
  broadcast.6199 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6198), dimensions={3}
  negate.6200 = f32[1,1,1,2048]{3,2,1,0} negate(broadcast.6199)
  reshape.6201 = f32[2048]{0} reshape(negate.6200)
  add.6202 = f32[2048]{0} add(multiply.6183, reshape.6201)
  broadcast.6203 = f32[2048]{0} broadcast(convert.4284), dimensions={}
  divide.6204 = f32[2048]{0} divide(add.6202, broadcast.6203)
  broadcast.6205 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6204), dimensions={3}
  add.6206 = f32[128,7,7,2048]{3,2,1,0} add(add.6191, broadcast.6205)
  convert.6207 = bf16[128,7,7,2048]{3,2,1,0} convert(add.6206)
  reverse.6211 = bf16[1,1,512,2048]{3,2,1,0} reverse(convert.4274), dimensions={0,1}
  convolution.6212 = bf16[128,7,7,512]{3,2,1,0} convolution(convert.6207, reverse.6211), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.6213 = bf16[] constant(0)
  broadcast.6214 = bf16[128,7,7,512]{3,2,1,0} broadcast(constant.6213), dimensions={}
  select.6215 = bf16[128,7,7,512]{3,2,1,0} select(compare.4271, convolution.6212, broadcast.6214)
  convert.6216 = f32[128,7,7,512]{3,2,1,0} convert(select.6215)
  multiply.6226 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6216, subtract.4241)
  constant.6227 = f32[] constant(0)
  reduce.6232 = f32[512]{0} reduce(multiply.6226, constant.6227), dimensions={0,1,2}, to_apply=primitive_computation_add.6228
  broadcast.6233 = f32[512]{0} broadcast(reduce.6232), dimensions={0}
  broadcast.6234 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6233), dimensions={3}
  multiply.6237 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6234, reshape.4252)
  constant.6238 = f32[] constant(0)
  reduce.6243 = f32[512]{0} reduce(multiply.6237, constant.6238), dimensions={0,1,2}, to_apply=primitive_computation_add.6239
  broadcast.6244 = f32[512]{0} broadcast(reduce.6243), dimensions={0}
  constant.4249 = f32[] constant(-0.5)
  broadcast.4250 = f32[512]{0} broadcast(constant.4249), dimensions={}
  constant.4246 = f32[] constant(-1.5)
  broadcast.4247 = f32[512]{0} broadcast(constant.4246), dimensions={}
  power.4248 = f32[512]{0} power(add.4244, broadcast.4247)
  multiply.4251 = f32[512]{0} multiply(broadcast.4250, power.4248)
  multiply.6245 = f32[512]{0} multiply(broadcast.6244, multiply.4251)
  broadcast.6248 = f32[512]{0} broadcast(convert.4216), dimensions={}
  divide.6249 = f32[512]{0} divide(multiply.6245, broadcast.6248)
  broadcast.6250 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6249), dimensions={3}
  constant.4206 = f32[] constant(2)
  broadcast.4207 = f32[128,7,7,512]{3,2,1,0} broadcast(constant.4206), dimensions={}
  multiply.4208 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.4207, convert.4194)
  multiply.6251 = f32[128,7,7,512]{3,2,1,0} multiply(broadcast.6250, multiply.4208)
  reshape.6252 = f32[512]{0} reshape(multiply.4254)
  broadcast.6253 = f32[128,7,7,512]{3,2,1,0} broadcast(reshape.6252), dimensions={3}
  multiply.6254 = f32[128,7,7,512]{3,2,1,0} multiply(convert.6216, broadcast.6253)
  add.6255 = f32[128,7,7,512]{3,2,1,0} add(multiply.6251, multiply.6254)
  negate.6246 = f32[512]{0} negate(multiply.6245)
  constant.4220 = f32[] constant(2)
  broadcast.4221 = f32[512]{0} broadcast(constant.4220), dimensions={}
  multiply.4222 = f32[512]{0} multiply(broadcast.4221, divide.4204)
  multiply.6247 = f32[512]{0} multiply(negate.6246, multiply.4222)
  constant.6256 = f32[] constant(0)
  reduce.6261 = f32[512]{0} reduce(multiply.6254, constant.6256), dimensions={0,1,2}, to_apply=primitive_computation_add.6257
  broadcast.6262 = f32[512]{0} broadcast(reduce.6261), dimensions={0}
  broadcast.6263 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6262), dimensions={3}
  negate.6264 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.6263)
  reshape.6265 = f32[512]{0} reshape(negate.6264)
  add.6266 = f32[512]{0} add(multiply.6247, reshape.6265)
  broadcast.6267 = f32[512]{0} broadcast(convert.4202), dimensions={}
  divide.6268 = f32[512]{0} divide(add.6266, broadcast.6267)
  broadcast.6269 = f32[128,7,7,512]{3,2,1,0} broadcast(divide.6268), dimensions={3}
  add.6270 = f32[128,7,7,512]{3,2,1,0} add(add.6255, broadcast.6269)
  convert.6271 = bf16[128,7,7,512]{3,2,1,0} convert(add.6270)
  reverse.6275 = bf16[3,3,512,512]{3,2,1,0} reverse(convert.4192), dimensions={0,1}
  convolution.6276 = bf16[128,14,14,512]{3,2,1,0} convolution(convert.6271, reverse.6275), window={size=3x3 pad=2_1x2_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  constant.6277 = bf16[] constant(0)
  broadcast.6278 = bf16[128,14,14,512]{3,2,1,0} broadcast(constant.6277), dimensions={}
  select.6279 = bf16[128,14,14,512]{3,2,1,0} select(compare.4189, convolution.6276, broadcast.6278)
  convert.6280 = f32[128,14,14,512]{3,2,1,0} convert(select.6279)
  multiply.6290 = f32[128,14,14,512]{3,2,1,0} multiply(convert.6280, subtract.4159)
  constant.6291 = f32[] constant(0)
  reduce.6296 = f32[512]{0} reduce(multiply.6290, constant.6291), dimensions={0,1,2}, to_apply=primitive_computation_add.6292
  broadcast.6297 = f32[512]{0} broadcast(reduce.6296), dimensions={0}
  broadcast.6298 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6297), dimensions={3}
  multiply.6301 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6298, reshape.4170)
  constant.6302 = f32[] constant(0)
  reduce.6307 = f32[512]{0} reduce(multiply.6301, constant.6302), dimensions={0,1,2}, to_apply=primitive_computation_add.6303
  broadcast.6308 = f32[512]{0} broadcast(reduce.6307), dimensions={0}
  constant.4167 = f32[] constant(-0.5)
  broadcast.4168 = f32[512]{0} broadcast(constant.4167), dimensions={}
  constant.4164 = f32[] constant(-1.5)
  broadcast.4165 = f32[512]{0} broadcast(constant.4164), dimensions={}
  power.4166 = f32[512]{0} power(add.4162, broadcast.4165)
  multiply.4169 = f32[512]{0} multiply(broadcast.4168, power.4166)
  multiply.6309 = f32[512]{0} multiply(broadcast.6308, multiply.4169)
  broadcast.6312 = f32[512]{0} broadcast(convert.4134), dimensions={}
  divide.6313 = f32[512]{0} divide(multiply.6309, broadcast.6312)
  broadcast.6314 = f32[128,14,14,512]{3,2,1,0} broadcast(divide.6313), dimensions={3}
  constant.4124 = f32[] constant(2)
  broadcast.4125 = f32[128,14,14,512]{3,2,1,0} broadcast(constant.4124), dimensions={}
  multiply.4126 = f32[128,14,14,512]{3,2,1,0} multiply(broadcast.4125, convert.4112)
  multiply.6315 = f32[128,14,14,512]{3,2,1,0} multiply(broadcast.6314, multiply.4126)
  reshape.6316 = f32[512]{0} reshape(multiply.4172)
  broadcast.6317 = f32[128,14,14,512]{3,2,1,0} broadcast(reshape.6316), dimensions={3}
  multiply.6318 = f32[128,14,14,512]{3,2,1,0} multiply(convert.6280, broadcast.6317)
  add.6319 = f32[128,14,14,512]{3,2,1,0} add(multiply.6315, multiply.6318)
  negate.6310 = f32[512]{0} negate(multiply.6309)
  constant.4138 = f32[] constant(2)
  broadcast.4139 = f32[512]{0} broadcast(constant.4138), dimensions={}
  multiply.4140 = f32[512]{0} multiply(broadcast.4139, divide.4122)
  multiply.6311 = f32[512]{0} multiply(negate.6310, multiply.4140)
  constant.6320 = f32[] constant(0)
  reduce.6325 = f32[512]{0} reduce(multiply.6318, constant.6320), dimensions={0,1,2}, to_apply=primitive_computation_add.6321
  broadcast.6326 = f32[512]{0} broadcast(reduce.6325), dimensions={0}
  broadcast.6327 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6326), dimensions={3}
  negate.6328 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.6327)
  reshape.6329 = f32[512]{0} reshape(negate.6328)
  add.6330 = f32[512]{0} add(multiply.6311, reshape.6329)
  broadcast.6331 = f32[512]{0} broadcast(convert.4120), dimensions={}
  divide.6332 = f32[512]{0} divide(add.6330, broadcast.6331)
  broadcast.6333 = f32[128,14,14,512]{3,2,1,0} broadcast(divide.6332), dimensions={3}
  add.6334 = f32[128,14,14,512]{3,2,1,0} add(add.6319, broadcast.6333)
  convert.6335 = bf16[128,14,14,512]{3,2,1,0} convert(add.6334)
  reverse.6339 = bf16[1,1,1024,512]{3,2,1,0} reverse(convert.4110), dimensions={0,1}
  convolution.6340 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.6335, reverse.6339), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.6341 = f32[128,7,7,2048]{3,2,1,0} convert(select.6151)
  multiply.6351 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6341, subtract.4394)
  constant.6352 = f32[] constant(0)
  reduce.6357 = f32[2048]{0} reduce(multiply.6351, constant.6352), dimensions={0,1,2}, to_apply=primitive_computation_add.6353
  broadcast.6358 = f32[2048]{0} broadcast(reduce.6357), dimensions={0}
  broadcast.6359 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6358), dimensions={3}
  multiply.6362 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6359, reshape.4405)
  constant.6363 = f32[] constant(0)
  reduce.6368 = f32[2048]{0} reduce(multiply.6362, constant.6363), dimensions={0,1,2}, to_apply=primitive_computation_add.6364
  broadcast.6369 = f32[2048]{0} broadcast(reduce.6368), dimensions={0}
  constant.4402 = f32[] constant(-0.5)
  broadcast.4403 = f32[2048]{0} broadcast(constant.4402), dimensions={}
  constant.4399 = f32[] constant(-1.5)
  broadcast.4400 = f32[2048]{0} broadcast(constant.4399), dimensions={}
  power.4401 = f32[2048]{0} power(add.4397, broadcast.4400)
  multiply.4404 = f32[2048]{0} multiply(broadcast.4403, power.4401)
  multiply.6370 = f32[2048]{0} multiply(broadcast.6369, multiply.4404)
  broadcast.6373 = f32[2048]{0} broadcast(convert.4369), dimensions={}
  divide.6374 = f32[2048]{0} divide(multiply.6370, broadcast.6373)
  broadcast.6375 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6374), dimensions={3}
  constant.4359 = f32[] constant(2)
  broadcast.4360 = f32[128,7,7,2048]{3,2,1,0} broadcast(constant.4359), dimensions={}
  multiply.4361 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.4360, convert.4347)
  multiply.6376 = f32[128,7,7,2048]{3,2,1,0} multiply(broadcast.6375, multiply.4361)
  reshape.6377 = f32[2048]{0} reshape(multiply.4407)
  broadcast.6378 = f32[128,7,7,2048]{3,2,1,0} broadcast(reshape.6377), dimensions={3}
  multiply.6379 = f32[128,7,7,2048]{3,2,1,0} multiply(convert.6341, broadcast.6378)
  add.6380 = f32[128,7,7,2048]{3,2,1,0} add(multiply.6376, multiply.6379)
  negate.6371 = f32[2048]{0} negate(multiply.6370)
  constant.4373 = f32[] constant(2)
  broadcast.4374 = f32[2048]{0} broadcast(constant.4373), dimensions={}
  multiply.4375 = f32[2048]{0} multiply(broadcast.4374, divide.4357)
  multiply.6372 = f32[2048]{0} multiply(negate.6371, multiply.4375)
  constant.6381 = f32[] constant(0)
  reduce.6386 = f32[2048]{0} reduce(multiply.6379, constant.6381), dimensions={0,1,2}, to_apply=primitive_computation_add.6382
  broadcast.6387 = f32[2048]{0} broadcast(reduce.6386), dimensions={0}
  broadcast.6388 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6387), dimensions={3}
  negate.6389 = f32[1,1,1,2048]{3,2,1,0} negate(broadcast.6388)
  reshape.6390 = f32[2048]{0} reshape(negate.6389)
  add.6391 = f32[2048]{0} add(multiply.6372, reshape.6390)
  broadcast.6392 = f32[2048]{0} broadcast(convert.4355), dimensions={}
  divide.6393 = f32[2048]{0} divide(add.6391, broadcast.6392)
  broadcast.6394 = f32[128,7,7,2048]{3,2,1,0} broadcast(divide.6393), dimensions={3}
  add.6395 = f32[128,7,7,2048]{3,2,1,0} add(add.6380, broadcast.6394)
  convert.6396 = bf16[128,7,7,2048]{3,2,1,0} convert(add.6395)
  reverse.6400 = bf16[1,1,1024,2048]{3,2,1,0} reverse(convert.4345), dimensions={0,1}
  convolution.6401 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.6396, reverse.6400), window={size=1x1 pad=0_1x0_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  add.6402 = bf16[128,14,14,1024]{3,2,1,0} add(convolution.6340, convolution.6401)
  constant.6403 = bf16[] constant(0)
  broadcast.6404 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.6403), dimensions={}
  select.6405 = bf16[128,14,14,1024]{3,2,1,0} select(compare.4107, add.6402, broadcast.6404)
  constant.3940 = bf16[] constant(0)
  broadcast.3941 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3940), dimensions={}
  compare.3942 = pred[128,14,14,256]{3,2,1,0} compare(convert.3933, broadcast.3941), direction=GT
  constant.4022 = bf16[] constant(0)
  broadcast.4023 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.4022), dimensions={}
  compare.4024 = pred[128,14,14,256]{3,2,1,0} compare(convert.4015, broadcast.4023), direction=GT
  convert.6406 = f32[128,14,14,1024]{3,2,1,0} convert(select.6405)
  multiply.6416 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.6406, subtract.4076)
  constant.6417 = f32[] constant(0)
  reduce.6422 = f32[1024]{0} reduce(multiply.6416, constant.6417), dimensions={0,1,2}, to_apply=primitive_computation_add.6418
  broadcast.6423 = f32[1024]{0} broadcast(reduce.6422), dimensions={0}
  broadcast.6424 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6423), dimensions={3}
  multiply.6427 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.6424, reshape.4087)
  constant.6428 = f32[] constant(0)
  reduce.6433 = f32[1024]{0} reduce(multiply.6427, constant.6428), dimensions={0,1,2}, to_apply=primitive_computation_add.6429
  broadcast.6434 = f32[1024]{0} broadcast(reduce.6433), dimensions={0}
  constant.4084 = f32[] constant(-0.5)
  broadcast.4085 = f32[1024]{0} broadcast(constant.4084), dimensions={}
  constant.4081 = f32[] constant(-1.5)
  broadcast.4082 = f32[1024]{0} broadcast(constant.4081), dimensions={}
  power.4083 = f32[1024]{0} power(add.4079, broadcast.4082)
  multiply.4086 = f32[1024]{0} multiply(broadcast.4085, power.4083)
  multiply.6435 = f32[1024]{0} multiply(broadcast.6434, multiply.4086)
  broadcast.6438 = f32[1024]{0} broadcast(convert.4051), dimensions={}
  divide.6439 = f32[1024]{0} divide(multiply.6435, broadcast.6438)
  broadcast.6440 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.6439), dimensions={3}
  constant.4041 = f32[] constant(2)
  broadcast.4042 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.4041), dimensions={}
  multiply.4043 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.4042, convert.4029)
  multiply.6441 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.6440, multiply.4043)
  reshape.6442 = f32[1024]{0} reshape(multiply.4089)
  broadcast.6443 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.6442), dimensions={3}
  multiply.6444 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.6406, broadcast.6443)
  add.6445 = f32[128,14,14,1024]{3,2,1,0} add(multiply.6441, multiply.6444)
  negate.6436 = f32[1024]{0} negate(multiply.6435)
  constant.4055 = f32[] constant(2)
  broadcast.4056 = f32[1024]{0} broadcast(constant.4055), dimensions={}
  multiply.4057 = f32[1024]{0} multiply(broadcast.4056, divide.4039)
  multiply.6437 = f32[1024]{0} multiply(negate.6436, multiply.4057)
  constant.6446 = f32[] constant(0)
  reduce.6451 = f32[1024]{0} reduce(multiply.6444, constant.6446), dimensions={0,1,2}, to_apply=primitive_computation_add.6447
  broadcast.6452 = f32[1024]{0} broadcast(reduce.6451), dimensions={0}
  broadcast.6453 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6452), dimensions={3}
  negate.6454 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.6453)
  reshape.6455 = f32[1024]{0} reshape(negate.6454)
  add.6456 = f32[1024]{0} add(multiply.6437, reshape.6455)
  broadcast.6457 = f32[1024]{0} broadcast(convert.4037), dimensions={}
  divide.6458 = f32[1024]{0} divide(add.6456, broadcast.6457)
  broadcast.6459 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.6458), dimensions={3}
  add.6460 = f32[128,14,14,1024]{3,2,1,0} add(add.6445, broadcast.6459)
  convert.6461 = bf16[128,14,14,1024]{3,2,1,0} convert(add.6460)
  reverse.6465 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.4027), dimensions={0,1}
  convolution.6466 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.6461, reverse.6465), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.6467 = bf16[] constant(0)
  broadcast.6468 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.6467), dimensions={}
  select.6469 = bf16[128,14,14,256]{3,2,1,0} select(compare.4024, convolution.6466, broadcast.6468)
  convert.6470 = f32[128,14,14,256]{3,2,1,0} convert(select.6469)
  multiply.6480 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6470, subtract.3994)
  constant.6481 = f32[] constant(0)
  reduce.6486 = f32[256]{0} reduce(multiply.6480, constant.6481), dimensions={0,1,2}, to_apply=primitive_computation_add.6482
  broadcast.6487 = f32[256]{0} broadcast(reduce.6486), dimensions={0}
  broadcast.6488 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6487), dimensions={3}
  multiply.6491 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6488, reshape.4005)
  constant.6492 = f32[] constant(0)
  reduce.6497 = f32[256]{0} reduce(multiply.6491, constant.6492), dimensions={0,1,2}, to_apply=primitive_computation_add.6493
  broadcast.6498 = f32[256]{0} broadcast(reduce.6497), dimensions={0}
  constant.4002 = f32[] constant(-0.5)
  broadcast.4003 = f32[256]{0} broadcast(constant.4002), dimensions={}
  constant.3999 = f32[] constant(-1.5)
  broadcast.4000 = f32[256]{0} broadcast(constant.3999), dimensions={}
  power.4001 = f32[256]{0} power(add.3997, broadcast.4000)
  multiply.4004 = f32[256]{0} multiply(broadcast.4003, power.4001)
  multiply.6499 = f32[256]{0} multiply(broadcast.6498, multiply.4004)
  broadcast.6502 = f32[256]{0} broadcast(convert.3969), dimensions={}
  divide.6503 = f32[256]{0} divide(multiply.6499, broadcast.6502)
  broadcast.6504 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6503), dimensions={3}
  constant.3959 = f32[] constant(2)
  broadcast.3960 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3959), dimensions={}
  multiply.3961 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3960, convert.3947)
  multiply.6505 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.6504, multiply.3961)
  reshape.6506 = f32[256]{0} reshape(multiply.4007)
  broadcast.6507 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.6506), dimensions={3}
  multiply.6508 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6470, broadcast.6507)
  add.6509 = f32[128,14,14,256]{3,2,1,0} add(multiply.6505, multiply.6508)
  negate.6500 = f32[256]{0} negate(multiply.6499)
  constant.3973 = f32[] constant(2)
  broadcast.3974 = f32[256]{0} broadcast(constant.3973), dimensions={}
  multiply.3975 = f32[256]{0} multiply(broadcast.3974, divide.3957)
  multiply.6501 = f32[256]{0} multiply(negate.6500, multiply.3975)
  constant.6510 = f32[] constant(0)
  reduce.6515 = f32[256]{0} reduce(multiply.6508, constant.6510), dimensions={0,1,2}, to_apply=primitive_computation_add.6511
  broadcast.6516 = f32[256]{0} broadcast(reduce.6515), dimensions={0}
  broadcast.6517 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6516), dimensions={3}
  negate.6518 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.6517)
  reshape.6519 = f32[256]{0} reshape(negate.6518)
  add.6520 = f32[256]{0} add(multiply.6501, reshape.6519)
  broadcast.6521 = f32[256]{0} broadcast(convert.3955), dimensions={}
  divide.6522 = f32[256]{0} divide(add.6520, broadcast.6521)
  broadcast.6523 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6522), dimensions={3}
  add.6524 = f32[128,14,14,256]{3,2,1,0} add(add.6509, broadcast.6523)
  convert.6525 = bf16[128,14,14,256]{3,2,1,0} convert(add.6524)
  reverse.6529 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.3945), dimensions={0,1}
  convolution.6530 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.6525, reverse.6529), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.6531 = bf16[] constant(0)
  broadcast.6532 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.6531), dimensions={}
  select.6533 = bf16[128,14,14,256]{3,2,1,0} select(compare.3942, convolution.6530, broadcast.6532)
  convert.6534 = f32[128,14,14,256]{3,2,1,0} convert(select.6533)
  multiply.6544 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6534, subtract.3912)
  constant.6545 = f32[] constant(0)
  reduce.6550 = f32[256]{0} reduce(multiply.6544, constant.6545), dimensions={0,1,2}, to_apply=primitive_computation_add.6546
  broadcast.6551 = f32[256]{0} broadcast(reduce.6550), dimensions={0}
  broadcast.6552 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6551), dimensions={3}
  multiply.6555 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6552, reshape.3923)
  constant.6556 = f32[] constant(0)
  reduce.6561 = f32[256]{0} reduce(multiply.6555, constant.6556), dimensions={0,1,2}, to_apply=primitive_computation_add.6557
  broadcast.6562 = f32[256]{0} broadcast(reduce.6561), dimensions={0}
  constant.3920 = f32[] constant(-0.5)
  broadcast.3921 = f32[256]{0} broadcast(constant.3920), dimensions={}
  constant.3917 = f32[] constant(-1.5)
  broadcast.3918 = f32[256]{0} broadcast(constant.3917), dimensions={}
  power.3919 = f32[256]{0} power(add.3915, broadcast.3918)
  multiply.3922 = f32[256]{0} multiply(broadcast.3921, power.3919)
  multiply.6563 = f32[256]{0} multiply(broadcast.6562, multiply.3922)
  broadcast.6566 = f32[256]{0} broadcast(convert.3887), dimensions={}
  divide.6567 = f32[256]{0} divide(multiply.6563, broadcast.6566)
  broadcast.6568 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6567), dimensions={3}
  constant.3877 = f32[] constant(2)
  broadcast.3878 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3877), dimensions={}
  multiply.3879 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3878, convert.3865)
  multiply.6569 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.6568, multiply.3879)
  reshape.6570 = f32[256]{0} reshape(multiply.3925)
  broadcast.6571 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.6570), dimensions={3}
  multiply.6572 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6534, broadcast.6571)
  add.6573 = f32[128,14,14,256]{3,2,1,0} add(multiply.6569, multiply.6572)
  negate.6564 = f32[256]{0} negate(multiply.6563)
  constant.3891 = f32[] constant(2)
  broadcast.3892 = f32[256]{0} broadcast(constant.3891), dimensions={}
  multiply.3893 = f32[256]{0} multiply(broadcast.3892, divide.3875)
  multiply.6565 = f32[256]{0} multiply(negate.6564, multiply.3893)
  constant.6574 = f32[] constant(0)
  reduce.6579 = f32[256]{0} reduce(multiply.6572, constant.6574), dimensions={0,1,2}, to_apply=primitive_computation_add.6575
  broadcast.6580 = f32[256]{0} broadcast(reduce.6579), dimensions={0}
  broadcast.6581 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6580), dimensions={3}
  negate.6582 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.6581)
  reshape.6583 = f32[256]{0} reshape(negate.6582)
  add.6584 = f32[256]{0} add(multiply.6565, reshape.6583)
  broadcast.6585 = f32[256]{0} broadcast(convert.3873), dimensions={}
  divide.6586 = f32[256]{0} divide(add.6584, broadcast.6585)
  broadcast.6587 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6586), dimensions={3}
  add.6588 = f32[128,14,14,256]{3,2,1,0} add(add.6573, broadcast.6587)
  convert.6589 = bf16[128,14,14,256]{3,2,1,0} convert(add.6588)
  reverse.6593 = bf16[1,1,1024,256]{3,2,1,0} reverse(convert.3863), dimensions={0,1}
  convolution.6594 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.6589, reverse.6593), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.6595 = bf16[128,14,14,1024]{3,2,1,0} add(select.6405, convolution.6594)
  constant.6596 = bf16[] constant(0)
  broadcast.6597 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.6596), dimensions={}
  select.6598 = bf16[128,14,14,1024]{3,2,1,0} select(compare.3860, add.6595, broadcast.6597)
  constant.3693 = bf16[] constant(0)
  broadcast.3694 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3693), dimensions={}
  compare.3695 = pred[128,14,14,256]{3,2,1,0} compare(convert.3686, broadcast.3694), direction=GT
  constant.3775 = bf16[] constant(0)
  broadcast.3776 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3775), dimensions={}
  compare.3777 = pred[128,14,14,256]{3,2,1,0} compare(convert.3768, broadcast.3776), direction=GT
  convert.6599 = f32[128,14,14,1024]{3,2,1,0} convert(select.6598)
  multiply.6609 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.6599, subtract.3829)
  constant.6610 = f32[] constant(0)
  reduce.6615 = f32[1024]{0} reduce(multiply.6609, constant.6610), dimensions={0,1,2}, to_apply=primitive_computation_add.6611
  broadcast.6616 = f32[1024]{0} broadcast(reduce.6615), dimensions={0}
  broadcast.6617 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6616), dimensions={3}
  multiply.6620 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.6617, reshape.3840)
  constant.6621 = f32[] constant(0)
  reduce.6626 = f32[1024]{0} reduce(multiply.6620, constant.6621), dimensions={0,1,2}, to_apply=primitive_computation_add.6622
  broadcast.6627 = f32[1024]{0} broadcast(reduce.6626), dimensions={0}
  constant.3837 = f32[] constant(-0.5)
  broadcast.3838 = f32[1024]{0} broadcast(constant.3837), dimensions={}
  constant.3834 = f32[] constant(-1.5)
  broadcast.3835 = f32[1024]{0} broadcast(constant.3834), dimensions={}
  power.3836 = f32[1024]{0} power(add.3832, broadcast.3835)
  multiply.3839 = f32[1024]{0} multiply(broadcast.3838, power.3836)
  multiply.6628 = f32[1024]{0} multiply(broadcast.6627, multiply.3839)
  broadcast.6631 = f32[1024]{0} broadcast(convert.3804), dimensions={}
  divide.6632 = f32[1024]{0} divide(multiply.6628, broadcast.6631)
  broadcast.6633 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.6632), dimensions={3}
  constant.3794 = f32[] constant(2)
  broadcast.3795 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.3794), dimensions={}
  multiply.3796 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.3795, convert.3782)
  multiply.6634 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.6633, multiply.3796)
  reshape.6635 = f32[1024]{0} reshape(multiply.3842)
  broadcast.6636 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.6635), dimensions={3}
  multiply.6637 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.6599, broadcast.6636)
  add.6638 = f32[128,14,14,1024]{3,2,1,0} add(multiply.6634, multiply.6637)
  negate.6629 = f32[1024]{0} negate(multiply.6628)
  constant.3808 = f32[] constant(2)
  broadcast.3809 = f32[1024]{0} broadcast(constant.3808), dimensions={}
  multiply.3810 = f32[1024]{0} multiply(broadcast.3809, divide.3792)
  multiply.6630 = f32[1024]{0} multiply(negate.6629, multiply.3810)
  constant.6639 = f32[] constant(0)
  reduce.6644 = f32[1024]{0} reduce(multiply.6637, constant.6639), dimensions={0,1,2}, to_apply=primitive_computation_add.6640
  broadcast.6645 = f32[1024]{0} broadcast(reduce.6644), dimensions={0}
  broadcast.6646 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6645), dimensions={3}
  negate.6647 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.6646)
  reshape.6648 = f32[1024]{0} reshape(negate.6647)
  add.6649 = f32[1024]{0} add(multiply.6630, reshape.6648)
  broadcast.6650 = f32[1024]{0} broadcast(convert.3790), dimensions={}
  divide.6651 = f32[1024]{0} divide(add.6649, broadcast.6650)
  broadcast.6652 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.6651), dimensions={3}
  add.6653 = f32[128,14,14,1024]{3,2,1,0} add(add.6638, broadcast.6652)
  convert.6654 = bf16[128,14,14,1024]{3,2,1,0} convert(add.6653)
  reverse.6658 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.3780), dimensions={0,1}
  convolution.6659 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.6654, reverse.6658), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.6660 = bf16[] constant(0)
  broadcast.6661 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.6660), dimensions={}
  select.6662 = bf16[128,14,14,256]{3,2,1,0} select(compare.3777, convolution.6659, broadcast.6661)
  convert.6663 = f32[128,14,14,256]{3,2,1,0} convert(select.6662)
  multiply.6673 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6663, subtract.3747)
  constant.6674 = f32[] constant(0)
  reduce.6679 = f32[256]{0} reduce(multiply.6673, constant.6674), dimensions={0,1,2}, to_apply=primitive_computation_add.6675
  broadcast.6680 = f32[256]{0} broadcast(reduce.6679), dimensions={0}
  broadcast.6681 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6680), dimensions={3}
  multiply.6684 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6681, reshape.3758)
  constant.6685 = f32[] constant(0)
  reduce.6690 = f32[256]{0} reduce(multiply.6684, constant.6685), dimensions={0,1,2}, to_apply=primitive_computation_add.6686
  broadcast.6691 = f32[256]{0} broadcast(reduce.6690), dimensions={0}
  constant.3755 = f32[] constant(-0.5)
  broadcast.3756 = f32[256]{0} broadcast(constant.3755), dimensions={}
  constant.3752 = f32[] constant(-1.5)
  broadcast.3753 = f32[256]{0} broadcast(constant.3752), dimensions={}
  power.3754 = f32[256]{0} power(add.3750, broadcast.3753)
  multiply.3757 = f32[256]{0} multiply(broadcast.3756, power.3754)
  multiply.6692 = f32[256]{0} multiply(broadcast.6691, multiply.3757)
  broadcast.6695 = f32[256]{0} broadcast(convert.3722), dimensions={}
  divide.6696 = f32[256]{0} divide(multiply.6692, broadcast.6695)
  broadcast.6697 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6696), dimensions={3}
  constant.3712 = f32[] constant(2)
  broadcast.3713 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3712), dimensions={}
  multiply.3714 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3713, convert.3700)
  multiply.6698 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.6697, multiply.3714)
  reshape.6699 = f32[256]{0} reshape(multiply.3760)
  broadcast.6700 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.6699), dimensions={3}
  multiply.6701 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6663, broadcast.6700)
  add.6702 = f32[128,14,14,256]{3,2,1,0} add(multiply.6698, multiply.6701)
  negate.6693 = f32[256]{0} negate(multiply.6692)
  constant.3726 = f32[] constant(2)
  broadcast.3727 = f32[256]{0} broadcast(constant.3726), dimensions={}
  multiply.3728 = f32[256]{0} multiply(broadcast.3727, divide.3710)
  multiply.6694 = f32[256]{0} multiply(negate.6693, multiply.3728)
  constant.6703 = f32[] constant(0)
  reduce.6708 = f32[256]{0} reduce(multiply.6701, constant.6703), dimensions={0,1,2}, to_apply=primitive_computation_add.6704
  broadcast.6709 = f32[256]{0} broadcast(reduce.6708), dimensions={0}
  broadcast.6710 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6709), dimensions={3}
  negate.6711 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.6710)
  reshape.6712 = f32[256]{0} reshape(negate.6711)
  add.6713 = f32[256]{0} add(multiply.6694, reshape.6712)
  broadcast.6714 = f32[256]{0} broadcast(convert.3708), dimensions={}
  divide.6715 = f32[256]{0} divide(add.6713, broadcast.6714)
  broadcast.6716 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6715), dimensions={3}
  add.6717 = f32[128,14,14,256]{3,2,1,0} add(add.6702, broadcast.6716)
  convert.6718 = bf16[128,14,14,256]{3,2,1,0} convert(add.6717)
  reverse.6722 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.3698), dimensions={0,1}
  convolution.6723 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.6718, reverse.6722), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.6724 = bf16[] constant(0)
  broadcast.6725 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.6724), dimensions={}
  select.6726 = bf16[128,14,14,256]{3,2,1,0} select(compare.3695, convolution.6723, broadcast.6725)
  convert.6727 = f32[128,14,14,256]{3,2,1,0} convert(select.6726)
  multiply.6737 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6727, subtract.3665)
  constant.6738 = f32[] constant(0)
  reduce.6743 = f32[256]{0} reduce(multiply.6737, constant.6738), dimensions={0,1,2}, to_apply=primitive_computation_add.6739
  broadcast.6744 = f32[256]{0} broadcast(reduce.6743), dimensions={0}
  broadcast.6745 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6744), dimensions={3}
  multiply.6748 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6745, reshape.3676)
  constant.6749 = f32[] constant(0)
  reduce.6754 = f32[256]{0} reduce(multiply.6748, constant.6749), dimensions={0,1,2}, to_apply=primitive_computation_add.6750
  broadcast.6755 = f32[256]{0} broadcast(reduce.6754), dimensions={0}
  constant.3673 = f32[] constant(-0.5)
  broadcast.3674 = f32[256]{0} broadcast(constant.3673), dimensions={}
  constant.3670 = f32[] constant(-1.5)
  broadcast.3671 = f32[256]{0} broadcast(constant.3670), dimensions={}
  power.3672 = f32[256]{0} power(add.3668, broadcast.3671)
  multiply.3675 = f32[256]{0} multiply(broadcast.3674, power.3672)
  multiply.6756 = f32[256]{0} multiply(broadcast.6755, multiply.3675)
  broadcast.6759 = f32[256]{0} broadcast(convert.3640), dimensions={}
  divide.6760 = f32[256]{0} divide(multiply.6756, broadcast.6759)
  broadcast.6761 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6760), dimensions={3}
  constant.3630 = f32[] constant(2)
  broadcast.3631 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3630), dimensions={}
  multiply.3632 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3631, convert.3618)
  multiply.6762 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.6761, multiply.3632)
  reshape.6763 = f32[256]{0} reshape(multiply.3678)
  broadcast.6764 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.6763), dimensions={3}
  multiply.6765 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6727, broadcast.6764)
  add.6766 = f32[128,14,14,256]{3,2,1,0} add(multiply.6762, multiply.6765)
  negate.6757 = f32[256]{0} negate(multiply.6756)
  constant.3644 = f32[] constant(2)
  broadcast.3645 = f32[256]{0} broadcast(constant.3644), dimensions={}
  multiply.3646 = f32[256]{0} multiply(broadcast.3645, divide.3628)
  multiply.6758 = f32[256]{0} multiply(negate.6757, multiply.3646)
  constant.6767 = f32[] constant(0)
  reduce.6772 = f32[256]{0} reduce(multiply.6765, constant.6767), dimensions={0,1,2}, to_apply=primitive_computation_add.6768
  broadcast.6773 = f32[256]{0} broadcast(reduce.6772), dimensions={0}
  broadcast.6774 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6773), dimensions={3}
  negate.6775 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.6774)
  reshape.6776 = f32[256]{0} reshape(negate.6775)
  add.6777 = f32[256]{0} add(multiply.6758, reshape.6776)
  broadcast.6778 = f32[256]{0} broadcast(convert.3626), dimensions={}
  divide.6779 = f32[256]{0} divide(add.6777, broadcast.6778)
  broadcast.6780 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6779), dimensions={3}
  add.6781 = f32[128,14,14,256]{3,2,1,0} add(add.6766, broadcast.6780)
  convert.6782 = bf16[128,14,14,256]{3,2,1,0} convert(add.6781)
  reverse.6786 = bf16[1,1,1024,256]{3,2,1,0} reverse(convert.3616), dimensions={0,1}
  convolution.6787 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.6782, reverse.6786), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.6788 = bf16[128,14,14,1024]{3,2,1,0} add(select.6598, convolution.6787)
  constant.6789 = bf16[] constant(0)
  broadcast.6790 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.6789), dimensions={}
  select.6791 = bf16[128,14,14,1024]{3,2,1,0} select(compare.3613, add.6788, broadcast.6790)
  constant.3446 = bf16[] constant(0)
  broadcast.3447 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3446), dimensions={}
  compare.3448 = pred[128,14,14,256]{3,2,1,0} compare(convert.3439, broadcast.3447), direction=GT
  constant.3528 = bf16[] constant(0)
  broadcast.3529 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3528), dimensions={}
  compare.3530 = pred[128,14,14,256]{3,2,1,0} compare(convert.3521, broadcast.3529), direction=GT
  convert.6792 = f32[128,14,14,1024]{3,2,1,0} convert(select.6791)
  multiply.6802 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.6792, subtract.3582)
  constant.6803 = f32[] constant(0)
  reduce.6808 = f32[1024]{0} reduce(multiply.6802, constant.6803), dimensions={0,1,2}, to_apply=primitive_computation_add.6804
  broadcast.6809 = f32[1024]{0} broadcast(reduce.6808), dimensions={0}
  broadcast.6810 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6809), dimensions={3}
  multiply.6813 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.6810, reshape.3593)
  constant.6814 = f32[] constant(0)
  reduce.6819 = f32[1024]{0} reduce(multiply.6813, constant.6814), dimensions={0,1,2}, to_apply=primitive_computation_add.6815
  broadcast.6820 = f32[1024]{0} broadcast(reduce.6819), dimensions={0}
  constant.3590 = f32[] constant(-0.5)
  broadcast.3591 = f32[1024]{0} broadcast(constant.3590), dimensions={}
  constant.3587 = f32[] constant(-1.5)
  broadcast.3588 = f32[1024]{0} broadcast(constant.3587), dimensions={}
  power.3589 = f32[1024]{0} power(add.3585, broadcast.3588)
  multiply.3592 = f32[1024]{0} multiply(broadcast.3591, power.3589)
  multiply.6821 = f32[1024]{0} multiply(broadcast.6820, multiply.3592)
  broadcast.6824 = f32[1024]{0} broadcast(convert.3557), dimensions={}
  divide.6825 = f32[1024]{0} divide(multiply.6821, broadcast.6824)
  broadcast.6826 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.6825), dimensions={3}
  constant.3547 = f32[] constant(2)
  broadcast.3548 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.3547), dimensions={}
  multiply.3549 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.3548, convert.3535)
  multiply.6827 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.6826, multiply.3549)
  reshape.6828 = f32[1024]{0} reshape(multiply.3595)
  broadcast.6829 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.6828), dimensions={3}
  multiply.6830 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.6792, broadcast.6829)
  add.6831 = f32[128,14,14,1024]{3,2,1,0} add(multiply.6827, multiply.6830)
  negate.6822 = f32[1024]{0} negate(multiply.6821)
  constant.3561 = f32[] constant(2)
  broadcast.3562 = f32[1024]{0} broadcast(constant.3561), dimensions={}
  multiply.3563 = f32[1024]{0} multiply(broadcast.3562, divide.3545)
  multiply.6823 = f32[1024]{0} multiply(negate.6822, multiply.3563)
  constant.6832 = f32[] constant(0)
  reduce.6837 = f32[1024]{0} reduce(multiply.6830, constant.6832), dimensions={0,1,2}, to_apply=primitive_computation_add.6833
  broadcast.6838 = f32[1024]{0} broadcast(reduce.6837), dimensions={0}
  broadcast.6839 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6838), dimensions={3}
  negate.6840 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.6839)
  reshape.6841 = f32[1024]{0} reshape(negate.6840)
  add.6842 = f32[1024]{0} add(multiply.6823, reshape.6841)
  broadcast.6843 = f32[1024]{0} broadcast(convert.3543), dimensions={}
  divide.6844 = f32[1024]{0} divide(add.6842, broadcast.6843)
  broadcast.6845 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.6844), dimensions={3}
  add.6846 = f32[128,14,14,1024]{3,2,1,0} add(add.6831, broadcast.6845)
  convert.6847 = bf16[128,14,14,1024]{3,2,1,0} convert(add.6846)
  reverse.6851 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.3533), dimensions={0,1}
  convolution.6852 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.6847, reverse.6851), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.6853 = bf16[] constant(0)
  broadcast.6854 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.6853), dimensions={}
  select.6855 = bf16[128,14,14,256]{3,2,1,0} select(compare.3530, convolution.6852, broadcast.6854)
  convert.6856 = f32[128,14,14,256]{3,2,1,0} convert(select.6855)
  multiply.6866 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6856, subtract.3500)
  constant.6867 = f32[] constant(0)
  reduce.6872 = f32[256]{0} reduce(multiply.6866, constant.6867), dimensions={0,1,2}, to_apply=primitive_computation_add.6868
  broadcast.6873 = f32[256]{0} broadcast(reduce.6872), dimensions={0}
  broadcast.6874 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6873), dimensions={3}
  multiply.6877 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6874, reshape.3511)
  constant.6878 = f32[] constant(0)
  reduce.6883 = f32[256]{0} reduce(multiply.6877, constant.6878), dimensions={0,1,2}, to_apply=primitive_computation_add.6879
  broadcast.6884 = f32[256]{0} broadcast(reduce.6883), dimensions={0}
  constant.3508 = f32[] constant(-0.5)
  broadcast.3509 = f32[256]{0} broadcast(constant.3508), dimensions={}
  constant.3505 = f32[] constant(-1.5)
  broadcast.3506 = f32[256]{0} broadcast(constant.3505), dimensions={}
  power.3507 = f32[256]{0} power(add.3503, broadcast.3506)
  multiply.3510 = f32[256]{0} multiply(broadcast.3509, power.3507)
  multiply.6885 = f32[256]{0} multiply(broadcast.6884, multiply.3510)
  broadcast.6888 = f32[256]{0} broadcast(convert.3475), dimensions={}
  divide.6889 = f32[256]{0} divide(multiply.6885, broadcast.6888)
  broadcast.6890 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6889), dimensions={3}
  constant.3465 = f32[] constant(2)
  broadcast.3466 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3465), dimensions={}
  multiply.3467 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3466, convert.3453)
  multiply.6891 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.6890, multiply.3467)
  reshape.6892 = f32[256]{0} reshape(multiply.3513)
  broadcast.6893 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.6892), dimensions={3}
  multiply.6894 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6856, broadcast.6893)
  add.6895 = f32[128,14,14,256]{3,2,1,0} add(multiply.6891, multiply.6894)
  negate.6886 = f32[256]{0} negate(multiply.6885)
  constant.3479 = f32[] constant(2)
  broadcast.3480 = f32[256]{0} broadcast(constant.3479), dimensions={}
  multiply.3481 = f32[256]{0} multiply(broadcast.3480, divide.3463)
  multiply.6887 = f32[256]{0} multiply(negate.6886, multiply.3481)
  constant.6896 = f32[] constant(0)
  reduce.6901 = f32[256]{0} reduce(multiply.6894, constant.6896), dimensions={0,1,2}, to_apply=primitive_computation_add.6897
  broadcast.6902 = f32[256]{0} broadcast(reduce.6901), dimensions={0}
  broadcast.6903 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6902), dimensions={3}
  negate.6904 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.6903)
  reshape.6905 = f32[256]{0} reshape(negate.6904)
  add.6906 = f32[256]{0} add(multiply.6887, reshape.6905)
  broadcast.6907 = f32[256]{0} broadcast(convert.3461), dimensions={}
  divide.6908 = f32[256]{0} divide(add.6906, broadcast.6907)
  broadcast.6909 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6908), dimensions={3}
  add.6910 = f32[128,14,14,256]{3,2,1,0} add(add.6895, broadcast.6909)
  convert.6911 = bf16[128,14,14,256]{3,2,1,0} convert(add.6910)
  reverse.6915 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.3451), dimensions={0,1}
  convolution.6916 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.6911, reverse.6915), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.6917 = bf16[] constant(0)
  broadcast.6918 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.6917), dimensions={}
  select.6919 = bf16[128,14,14,256]{3,2,1,0} select(compare.3448, convolution.6916, broadcast.6918)
  convert.6920 = f32[128,14,14,256]{3,2,1,0} convert(select.6919)
  multiply.6930 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6920, subtract.3418)
  constant.6931 = f32[] constant(0)
  reduce.6936 = f32[256]{0} reduce(multiply.6930, constant.6931), dimensions={0,1,2}, to_apply=primitive_computation_add.6932
  broadcast.6937 = f32[256]{0} broadcast(reduce.6936), dimensions={0}
  broadcast.6938 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6937), dimensions={3}
  multiply.6941 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6938, reshape.3429)
  constant.6942 = f32[] constant(0)
  reduce.6947 = f32[256]{0} reduce(multiply.6941, constant.6942), dimensions={0,1,2}, to_apply=primitive_computation_add.6943
  broadcast.6948 = f32[256]{0} broadcast(reduce.6947), dimensions={0}
  constant.3426 = f32[] constant(-0.5)
  broadcast.3427 = f32[256]{0} broadcast(constant.3426), dimensions={}
  constant.3423 = f32[] constant(-1.5)
  broadcast.3424 = f32[256]{0} broadcast(constant.3423), dimensions={}
  power.3425 = f32[256]{0} power(add.3421, broadcast.3424)
  multiply.3428 = f32[256]{0} multiply(broadcast.3427, power.3425)
  multiply.6949 = f32[256]{0} multiply(broadcast.6948, multiply.3428)
  broadcast.6952 = f32[256]{0} broadcast(convert.3393), dimensions={}
  divide.6953 = f32[256]{0} divide(multiply.6949, broadcast.6952)
  broadcast.6954 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6953), dimensions={3}
  constant.3383 = f32[] constant(2)
  broadcast.3384 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3383), dimensions={}
  multiply.3385 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3384, convert.3371)
  multiply.6955 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.6954, multiply.3385)
  reshape.6956 = f32[256]{0} reshape(multiply.3431)
  broadcast.6957 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.6956), dimensions={3}
  multiply.6958 = f32[128,14,14,256]{3,2,1,0} multiply(convert.6920, broadcast.6957)
  add.6959 = f32[128,14,14,256]{3,2,1,0} add(multiply.6955, multiply.6958)
  negate.6950 = f32[256]{0} negate(multiply.6949)
  constant.3397 = f32[] constant(2)
  broadcast.3398 = f32[256]{0} broadcast(constant.3397), dimensions={}
  multiply.3399 = f32[256]{0} multiply(broadcast.3398, divide.3381)
  multiply.6951 = f32[256]{0} multiply(negate.6950, multiply.3399)
  constant.6960 = f32[] constant(0)
  reduce.6965 = f32[256]{0} reduce(multiply.6958, constant.6960), dimensions={0,1,2}, to_apply=primitive_computation_add.6961
  broadcast.6966 = f32[256]{0} broadcast(reduce.6965), dimensions={0}
  broadcast.6967 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6966), dimensions={3}
  negate.6968 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.6967)
  reshape.6969 = f32[256]{0} reshape(negate.6968)
  add.6970 = f32[256]{0} add(multiply.6951, reshape.6969)
  broadcast.6971 = f32[256]{0} broadcast(convert.3379), dimensions={}
  divide.6972 = f32[256]{0} divide(add.6970, broadcast.6971)
  broadcast.6973 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.6972), dimensions={3}
  add.6974 = f32[128,14,14,256]{3,2,1,0} add(add.6959, broadcast.6973)
  convert.6975 = bf16[128,14,14,256]{3,2,1,0} convert(add.6974)
  reverse.6979 = bf16[1,1,1024,256]{3,2,1,0} reverse(convert.3369), dimensions={0,1}
  convolution.6980 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.6975, reverse.6979), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.6981 = bf16[128,14,14,1024]{3,2,1,0} add(select.6791, convolution.6980)
  constant.6982 = bf16[] constant(0)
  broadcast.6983 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.6982), dimensions={}
  select.6984 = bf16[128,14,14,1024]{3,2,1,0} select(compare.3366, add.6981, broadcast.6983)
  constant.3199 = bf16[] constant(0)
  broadcast.3200 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3199), dimensions={}
  compare.3201 = pred[128,14,14,256]{3,2,1,0} compare(convert.3192, broadcast.3200), direction=GT
  constant.3281 = bf16[] constant(0)
  broadcast.3282 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3281), dimensions={}
  compare.3283 = pred[128,14,14,256]{3,2,1,0} compare(convert.3274, broadcast.3282), direction=GT
  convert.6985 = f32[128,14,14,1024]{3,2,1,0} convert(select.6984)
  multiply.6995 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.6985, subtract.3335)
  constant.6996 = f32[] constant(0)
  reduce.7001 = f32[1024]{0} reduce(multiply.6995, constant.6996), dimensions={0,1,2}, to_apply=primitive_computation_add.6997
  broadcast.7002 = f32[1024]{0} broadcast(reduce.7001), dimensions={0}
  broadcast.7003 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7002), dimensions={3}
  multiply.7006 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7003, reshape.3346)
  constant.7007 = f32[] constant(0)
  reduce.7012 = f32[1024]{0} reduce(multiply.7006, constant.7007), dimensions={0,1,2}, to_apply=primitive_computation_add.7008
  broadcast.7013 = f32[1024]{0} broadcast(reduce.7012), dimensions={0}
  constant.3343 = f32[] constant(-0.5)
  broadcast.3344 = f32[1024]{0} broadcast(constant.3343), dimensions={}
  constant.3340 = f32[] constant(-1.5)
  broadcast.3341 = f32[1024]{0} broadcast(constant.3340), dimensions={}
  power.3342 = f32[1024]{0} power(add.3338, broadcast.3341)
  multiply.3345 = f32[1024]{0} multiply(broadcast.3344, power.3342)
  multiply.7014 = f32[1024]{0} multiply(broadcast.7013, multiply.3345)
  broadcast.7017 = f32[1024]{0} broadcast(convert.3310), dimensions={}
  divide.7018 = f32[1024]{0} divide(multiply.7014, broadcast.7017)
  broadcast.7019 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7018), dimensions={3}
  constant.3300 = f32[] constant(2)
  broadcast.3301 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.3300), dimensions={}
  multiply.3302 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.3301, convert.3288)
  multiply.7020 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.7019, multiply.3302)
  reshape.7021 = f32[1024]{0} reshape(multiply.3348)
  broadcast.7022 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.7021), dimensions={3}
  multiply.7023 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.6985, broadcast.7022)
  add.7024 = f32[128,14,14,1024]{3,2,1,0} add(multiply.7020, multiply.7023)
  negate.7015 = f32[1024]{0} negate(multiply.7014)
  constant.3314 = f32[] constant(2)
  broadcast.3315 = f32[1024]{0} broadcast(constant.3314), dimensions={}
  multiply.3316 = f32[1024]{0} multiply(broadcast.3315, divide.3298)
  multiply.7016 = f32[1024]{0} multiply(negate.7015, multiply.3316)
  constant.7025 = f32[] constant(0)
  reduce.7030 = f32[1024]{0} reduce(multiply.7023, constant.7025), dimensions={0,1,2}, to_apply=primitive_computation_add.7026
  broadcast.7031 = f32[1024]{0} broadcast(reduce.7030), dimensions={0}
  broadcast.7032 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7031), dimensions={3}
  negate.7033 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.7032)
  reshape.7034 = f32[1024]{0} reshape(negate.7033)
  add.7035 = f32[1024]{0} add(multiply.7016, reshape.7034)
  broadcast.7036 = f32[1024]{0} broadcast(convert.3296), dimensions={}
  divide.7037 = f32[1024]{0} divide(add.7035, broadcast.7036)
  broadcast.7038 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7037), dimensions={3}
  add.7039 = f32[128,14,14,1024]{3,2,1,0} add(add.7024, broadcast.7038)
  convert.7040 = bf16[128,14,14,1024]{3,2,1,0} convert(add.7039)
  reverse.7044 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.3286), dimensions={0,1}
  convolution.7045 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7040, reverse.7044), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.7046 = bf16[] constant(0)
  broadcast.7047 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7046), dimensions={}
  select.7048 = bf16[128,14,14,256]{3,2,1,0} select(compare.3283, convolution.7045, broadcast.7047)
  convert.7049 = f32[128,14,14,256]{3,2,1,0} convert(select.7048)
  multiply.7059 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7049, subtract.3253)
  constant.7060 = f32[] constant(0)
  reduce.7065 = f32[256]{0} reduce(multiply.7059, constant.7060), dimensions={0,1,2}, to_apply=primitive_computation_add.7061
  broadcast.7066 = f32[256]{0} broadcast(reduce.7065), dimensions={0}
  broadcast.7067 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7066), dimensions={3}
  multiply.7070 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7067, reshape.3264)
  constant.7071 = f32[] constant(0)
  reduce.7076 = f32[256]{0} reduce(multiply.7070, constant.7071), dimensions={0,1,2}, to_apply=primitive_computation_add.7072
  broadcast.7077 = f32[256]{0} broadcast(reduce.7076), dimensions={0}
  constant.3261 = f32[] constant(-0.5)
  broadcast.3262 = f32[256]{0} broadcast(constant.3261), dimensions={}
  constant.3258 = f32[] constant(-1.5)
  broadcast.3259 = f32[256]{0} broadcast(constant.3258), dimensions={}
  power.3260 = f32[256]{0} power(add.3256, broadcast.3259)
  multiply.3263 = f32[256]{0} multiply(broadcast.3262, power.3260)
  multiply.7078 = f32[256]{0} multiply(broadcast.7077, multiply.3263)
  broadcast.7081 = f32[256]{0} broadcast(convert.3228), dimensions={}
  divide.7082 = f32[256]{0} divide(multiply.7078, broadcast.7081)
  broadcast.7083 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7082), dimensions={3}
  constant.3218 = f32[] constant(2)
  broadcast.3219 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3218), dimensions={}
  multiply.3220 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3219, convert.3206)
  multiply.7084 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7083, multiply.3220)
  reshape.7085 = f32[256]{0} reshape(multiply.3266)
  broadcast.7086 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7085), dimensions={3}
  multiply.7087 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7049, broadcast.7086)
  add.7088 = f32[128,14,14,256]{3,2,1,0} add(multiply.7084, multiply.7087)
  negate.7079 = f32[256]{0} negate(multiply.7078)
  constant.3232 = f32[] constant(2)
  broadcast.3233 = f32[256]{0} broadcast(constant.3232), dimensions={}
  multiply.3234 = f32[256]{0} multiply(broadcast.3233, divide.3216)
  multiply.7080 = f32[256]{0} multiply(negate.7079, multiply.3234)
  constant.7089 = f32[] constant(0)
  reduce.7094 = f32[256]{0} reduce(multiply.7087, constant.7089), dimensions={0,1,2}, to_apply=primitive_computation_add.7090
  broadcast.7095 = f32[256]{0} broadcast(reduce.7094), dimensions={0}
  broadcast.7096 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7095), dimensions={3}
  negate.7097 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7096)
  reshape.7098 = f32[256]{0} reshape(negate.7097)
  add.7099 = f32[256]{0} add(multiply.7080, reshape.7098)
  broadcast.7100 = f32[256]{0} broadcast(convert.3214), dimensions={}
  divide.7101 = f32[256]{0} divide(add.7099, broadcast.7100)
  broadcast.7102 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7101), dimensions={3}
  add.7103 = f32[128,14,14,256]{3,2,1,0} add(add.7088, broadcast.7102)
  convert.7104 = bf16[128,14,14,256]{3,2,1,0} convert(add.7103)
  reverse.7108 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.3204), dimensions={0,1}
  convolution.7109 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7104, reverse.7108), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.7110 = bf16[] constant(0)
  broadcast.7111 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7110), dimensions={}
  select.7112 = bf16[128,14,14,256]{3,2,1,0} select(compare.3201, convolution.7109, broadcast.7111)
  convert.7113 = f32[128,14,14,256]{3,2,1,0} convert(select.7112)
  multiply.7123 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7113, subtract.3171)
  constant.7124 = f32[] constant(0)
  reduce.7129 = f32[256]{0} reduce(multiply.7123, constant.7124), dimensions={0,1,2}, to_apply=primitive_computation_add.7125
  broadcast.7130 = f32[256]{0} broadcast(reduce.7129), dimensions={0}
  broadcast.7131 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7130), dimensions={3}
  multiply.7134 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7131, reshape.3182)
  constant.7135 = f32[] constant(0)
  reduce.7140 = f32[256]{0} reduce(multiply.7134, constant.7135), dimensions={0,1,2}, to_apply=primitive_computation_add.7136
  broadcast.7141 = f32[256]{0} broadcast(reduce.7140), dimensions={0}
  constant.3179 = f32[] constant(-0.5)
  broadcast.3180 = f32[256]{0} broadcast(constant.3179), dimensions={}
  constant.3176 = f32[] constant(-1.5)
  broadcast.3177 = f32[256]{0} broadcast(constant.3176), dimensions={}
  power.3178 = f32[256]{0} power(add.3174, broadcast.3177)
  multiply.3181 = f32[256]{0} multiply(broadcast.3180, power.3178)
  multiply.7142 = f32[256]{0} multiply(broadcast.7141, multiply.3181)
  broadcast.7145 = f32[256]{0} broadcast(convert.3146), dimensions={}
  divide.7146 = f32[256]{0} divide(multiply.7142, broadcast.7145)
  broadcast.7147 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7146), dimensions={3}
  constant.3136 = f32[] constant(2)
  broadcast.3137 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.3136), dimensions={}
  multiply.3138 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.3137, convert.3124)
  multiply.7148 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7147, multiply.3138)
  reshape.7149 = f32[256]{0} reshape(multiply.3184)
  broadcast.7150 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7149), dimensions={3}
  multiply.7151 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7113, broadcast.7150)
  add.7152 = f32[128,14,14,256]{3,2,1,0} add(multiply.7148, multiply.7151)
  negate.7143 = f32[256]{0} negate(multiply.7142)
  constant.3150 = f32[] constant(2)
  broadcast.3151 = f32[256]{0} broadcast(constant.3150), dimensions={}
  multiply.3152 = f32[256]{0} multiply(broadcast.3151, divide.3134)
  multiply.7144 = f32[256]{0} multiply(negate.7143, multiply.3152)
  constant.7153 = f32[] constant(0)
  reduce.7158 = f32[256]{0} reduce(multiply.7151, constant.7153), dimensions={0,1,2}, to_apply=primitive_computation_add.7154
  broadcast.7159 = f32[256]{0} broadcast(reduce.7158), dimensions={0}
  broadcast.7160 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7159), dimensions={3}
  negate.7161 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7160)
  reshape.7162 = f32[256]{0} reshape(negate.7161)
  add.7163 = f32[256]{0} add(multiply.7144, reshape.7162)
  broadcast.7164 = f32[256]{0} broadcast(convert.3132), dimensions={}
  divide.7165 = f32[256]{0} divide(add.7163, broadcast.7164)
  broadcast.7166 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7165), dimensions={3}
  add.7167 = f32[128,14,14,256]{3,2,1,0} add(add.7152, broadcast.7166)
  convert.7168 = bf16[128,14,14,256]{3,2,1,0} convert(add.7167)
  reverse.7172 = bf16[1,1,1024,256]{3,2,1,0} reverse(convert.3122), dimensions={0,1}
  convolution.7173 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.7168, reverse.7172), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.7174 = bf16[128,14,14,1024]{3,2,1,0} add(select.6984, convolution.7173)
  constant.7175 = bf16[] constant(0)
  broadcast.7176 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.7175), dimensions={}
  select.7177 = bf16[128,14,14,1024]{3,2,1,0} select(compare.3119, add.7174, broadcast.7176)
  constant.2952 = bf16[] constant(0)
  broadcast.2953 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.2952), dimensions={}
  compare.2954 = pred[128,14,14,256]{3,2,1,0} compare(convert.2945, broadcast.2953), direction=GT
  constant.3034 = bf16[] constant(0)
  broadcast.3035 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.3034), dimensions={}
  compare.3036 = pred[128,14,14,256]{3,2,1,0} compare(convert.3027, broadcast.3035), direction=GT
  convert.7178 = f32[128,14,14,1024]{3,2,1,0} convert(select.7177)
  multiply.7188 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7178, subtract.3088)
  constant.7189 = f32[] constant(0)
  reduce.7194 = f32[1024]{0} reduce(multiply.7188, constant.7189), dimensions={0,1,2}, to_apply=primitive_computation_add.7190
  broadcast.7195 = f32[1024]{0} broadcast(reduce.7194), dimensions={0}
  broadcast.7196 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7195), dimensions={3}
  multiply.7199 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7196, reshape.3099)
  constant.7200 = f32[] constant(0)
  reduce.7205 = f32[1024]{0} reduce(multiply.7199, constant.7200), dimensions={0,1,2}, to_apply=primitive_computation_add.7201
  broadcast.7206 = f32[1024]{0} broadcast(reduce.7205), dimensions={0}
  constant.3096 = f32[] constant(-0.5)
  broadcast.3097 = f32[1024]{0} broadcast(constant.3096), dimensions={}
  constant.3093 = f32[] constant(-1.5)
  broadcast.3094 = f32[1024]{0} broadcast(constant.3093), dimensions={}
  power.3095 = f32[1024]{0} power(add.3091, broadcast.3094)
  multiply.3098 = f32[1024]{0} multiply(broadcast.3097, power.3095)
  multiply.7207 = f32[1024]{0} multiply(broadcast.7206, multiply.3098)
  broadcast.7210 = f32[1024]{0} broadcast(convert.3063), dimensions={}
  divide.7211 = f32[1024]{0} divide(multiply.7207, broadcast.7210)
  broadcast.7212 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7211), dimensions={3}
  constant.3053 = f32[] constant(2)
  broadcast.3054 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.3053), dimensions={}
  multiply.3055 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.3054, convert.3041)
  multiply.7213 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.7212, multiply.3055)
  reshape.7214 = f32[1024]{0} reshape(multiply.3101)
  broadcast.7215 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.7214), dimensions={3}
  multiply.7216 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7178, broadcast.7215)
  add.7217 = f32[128,14,14,1024]{3,2,1,0} add(multiply.7213, multiply.7216)
  negate.7208 = f32[1024]{0} negate(multiply.7207)
  constant.3067 = f32[] constant(2)
  broadcast.3068 = f32[1024]{0} broadcast(constant.3067), dimensions={}
  multiply.3069 = f32[1024]{0} multiply(broadcast.3068, divide.3051)
  multiply.7209 = f32[1024]{0} multiply(negate.7208, multiply.3069)
  constant.7218 = f32[] constant(0)
  reduce.7223 = f32[1024]{0} reduce(multiply.7216, constant.7218), dimensions={0,1,2}, to_apply=primitive_computation_add.7219
  broadcast.7224 = f32[1024]{0} broadcast(reduce.7223), dimensions={0}
  broadcast.7225 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7224), dimensions={3}
  negate.7226 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.7225)
  reshape.7227 = f32[1024]{0} reshape(negate.7226)
  add.7228 = f32[1024]{0} add(multiply.7209, reshape.7227)
  broadcast.7229 = f32[1024]{0} broadcast(convert.3049), dimensions={}
  divide.7230 = f32[1024]{0} divide(add.7228, broadcast.7229)
  broadcast.7231 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7230), dimensions={3}
  add.7232 = f32[128,14,14,1024]{3,2,1,0} add(add.7217, broadcast.7231)
  convert.7233 = bf16[128,14,14,1024]{3,2,1,0} convert(add.7232)
  reverse.7237 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.3039), dimensions={0,1}
  convolution.7238 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7233, reverse.7237), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.7239 = bf16[] constant(0)
  broadcast.7240 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7239), dimensions={}
  select.7241 = bf16[128,14,14,256]{3,2,1,0} select(compare.3036, convolution.7238, broadcast.7240)
  convert.7242 = f32[128,14,14,256]{3,2,1,0} convert(select.7241)
  multiply.7252 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7242, subtract.3006)
  constant.7253 = f32[] constant(0)
  reduce.7258 = f32[256]{0} reduce(multiply.7252, constant.7253), dimensions={0,1,2}, to_apply=primitive_computation_add.7254
  broadcast.7259 = f32[256]{0} broadcast(reduce.7258), dimensions={0}
  broadcast.7260 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7259), dimensions={3}
  multiply.7263 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7260, reshape.3017)
  constant.7264 = f32[] constant(0)
  reduce.7269 = f32[256]{0} reduce(multiply.7263, constant.7264), dimensions={0,1,2}, to_apply=primitive_computation_add.7265
  broadcast.7270 = f32[256]{0} broadcast(reduce.7269), dimensions={0}
  constant.3014 = f32[] constant(-0.5)
  broadcast.3015 = f32[256]{0} broadcast(constant.3014), dimensions={}
  constant.3011 = f32[] constant(-1.5)
  broadcast.3012 = f32[256]{0} broadcast(constant.3011), dimensions={}
  power.3013 = f32[256]{0} power(add.3009, broadcast.3012)
  multiply.3016 = f32[256]{0} multiply(broadcast.3015, power.3013)
  multiply.7271 = f32[256]{0} multiply(broadcast.7270, multiply.3016)
  broadcast.7274 = f32[256]{0} broadcast(convert.2981), dimensions={}
  divide.7275 = f32[256]{0} divide(multiply.7271, broadcast.7274)
  broadcast.7276 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7275), dimensions={3}
  constant.2971 = f32[] constant(2)
  broadcast.2972 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.2971), dimensions={}
  multiply.2973 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.2972, convert.2959)
  multiply.7277 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7276, multiply.2973)
  reshape.7278 = f32[256]{0} reshape(multiply.3019)
  broadcast.7279 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7278), dimensions={3}
  multiply.7280 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7242, broadcast.7279)
  add.7281 = f32[128,14,14,256]{3,2,1,0} add(multiply.7277, multiply.7280)
  negate.7272 = f32[256]{0} negate(multiply.7271)
  constant.2985 = f32[] constant(2)
  broadcast.2986 = f32[256]{0} broadcast(constant.2985), dimensions={}
  multiply.2987 = f32[256]{0} multiply(broadcast.2986, divide.2969)
  multiply.7273 = f32[256]{0} multiply(negate.7272, multiply.2987)
  constant.7282 = f32[] constant(0)
  reduce.7287 = f32[256]{0} reduce(multiply.7280, constant.7282), dimensions={0,1,2}, to_apply=primitive_computation_add.7283
  broadcast.7288 = f32[256]{0} broadcast(reduce.7287), dimensions={0}
  broadcast.7289 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7288), dimensions={3}
  negate.7290 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7289)
  reshape.7291 = f32[256]{0} reshape(negate.7290)
  add.7292 = f32[256]{0} add(multiply.7273, reshape.7291)
  broadcast.7293 = f32[256]{0} broadcast(convert.2967), dimensions={}
  divide.7294 = f32[256]{0} divide(add.7292, broadcast.7293)
  broadcast.7295 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7294), dimensions={3}
  add.7296 = f32[128,14,14,256]{3,2,1,0} add(add.7281, broadcast.7295)
  convert.7297 = bf16[128,14,14,256]{3,2,1,0} convert(add.7296)
  reverse.7301 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.2957), dimensions={0,1}
  convolution.7302 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7297, reverse.7301), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.7303 = bf16[] constant(0)
  broadcast.7304 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7303), dimensions={}
  select.7305 = bf16[128,14,14,256]{3,2,1,0} select(compare.2954, convolution.7302, broadcast.7304)
  convert.7306 = f32[128,14,14,256]{3,2,1,0} convert(select.7305)
  multiply.7316 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7306, subtract.2924)
  constant.7317 = f32[] constant(0)
  reduce.7322 = f32[256]{0} reduce(multiply.7316, constant.7317), dimensions={0,1,2}, to_apply=primitive_computation_add.7318
  broadcast.7323 = f32[256]{0} broadcast(reduce.7322), dimensions={0}
  broadcast.7324 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7323), dimensions={3}
  multiply.7327 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7324, reshape.2935)
  constant.7328 = f32[] constant(0)
  reduce.7333 = f32[256]{0} reduce(multiply.7327, constant.7328), dimensions={0,1,2}, to_apply=primitive_computation_add.7329
  broadcast.7334 = f32[256]{0} broadcast(reduce.7333), dimensions={0}
  constant.2932 = f32[] constant(-0.5)
  broadcast.2933 = f32[256]{0} broadcast(constant.2932), dimensions={}
  constant.2929 = f32[] constant(-1.5)
  broadcast.2930 = f32[256]{0} broadcast(constant.2929), dimensions={}
  power.2931 = f32[256]{0} power(add.2927, broadcast.2930)
  multiply.2934 = f32[256]{0} multiply(broadcast.2933, power.2931)
  multiply.7335 = f32[256]{0} multiply(broadcast.7334, multiply.2934)
  broadcast.7338 = f32[256]{0} broadcast(convert.2899), dimensions={}
  divide.7339 = f32[256]{0} divide(multiply.7335, broadcast.7338)
  broadcast.7340 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7339), dimensions={3}
  constant.2889 = f32[] constant(2)
  broadcast.2890 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.2889), dimensions={}
  multiply.2891 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.2890, convert.2877)
  multiply.7341 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7340, multiply.2891)
  reshape.7342 = f32[256]{0} reshape(multiply.2937)
  broadcast.7343 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7342), dimensions={3}
  multiply.7344 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7306, broadcast.7343)
  add.7345 = f32[128,14,14,256]{3,2,1,0} add(multiply.7341, multiply.7344)
  negate.7336 = f32[256]{0} negate(multiply.7335)
  constant.2903 = f32[] constant(2)
  broadcast.2904 = f32[256]{0} broadcast(constant.2903), dimensions={}
  multiply.2905 = f32[256]{0} multiply(broadcast.2904, divide.2887)
  multiply.7337 = f32[256]{0} multiply(negate.7336, multiply.2905)
  constant.7346 = f32[] constant(0)
  reduce.7351 = f32[256]{0} reduce(multiply.7344, constant.7346), dimensions={0,1,2}, to_apply=primitive_computation_add.7347
  broadcast.7352 = f32[256]{0} broadcast(reduce.7351), dimensions={0}
  broadcast.7353 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7352), dimensions={3}
  negate.7354 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7353)
  reshape.7355 = f32[256]{0} reshape(negate.7354)
  add.7356 = f32[256]{0} add(multiply.7337, reshape.7355)
  broadcast.7357 = f32[256]{0} broadcast(convert.2885), dimensions={}
  divide.7358 = f32[256]{0} divide(add.7356, broadcast.7357)
  broadcast.7359 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7358), dimensions={3}
  add.7360 = f32[128,14,14,256]{3,2,1,0} add(add.7345, broadcast.7359)
  convert.7361 = bf16[128,14,14,256]{3,2,1,0} convert(add.7360)
  reverse.7365 = bf16[1,1,1024,256]{3,2,1,0} reverse(convert.2875), dimensions={0,1}
  convolution.7366 = bf16[128,14,14,1024]{3,2,1,0} convolution(convert.7361, reverse.7365), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.7367 = bf16[128,14,14,1024]{3,2,1,0} add(select.7177, convolution.7366)
  constant.7368 = bf16[] constant(0)
  broadcast.7369 = bf16[128,14,14,1024]{3,2,1,0} broadcast(constant.7368), dimensions={}
  select.7370 = bf16[128,14,14,1024]{3,2,1,0} select(compare.2872, add.7367, broadcast.7369)
  convert.7371 = f32[128,14,14,1024]{3,2,1,0} convert(select.7370)
  multiply.7381 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7371, subtract.2770)
  constant.7382 = f32[] constant(0)
  reduce.7387 = f32[1024]{0} reduce(multiply.7381, constant.7382), dimensions={0,1,2}, to_apply=primitive_computation_add.7383
  broadcast.7388 = f32[1024]{0} broadcast(reduce.7387), dimensions={0}
  broadcast.7389 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7388), dimensions={3}
  multiply.7392 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7389, reshape.2781)
  constant.7393 = f32[] constant(0)
  reduce.7398 = f32[1024]{0} reduce(multiply.7392, constant.7393), dimensions={0,1,2}, to_apply=primitive_computation_add.7394
  broadcast.7399 = f32[1024]{0} broadcast(reduce.7398), dimensions={0}
  constant.2778 = f32[] constant(-0.5)
  broadcast.2779 = f32[1024]{0} broadcast(constant.2778), dimensions={}
  constant.2775 = f32[] constant(-1.5)
  broadcast.2776 = f32[1024]{0} broadcast(constant.2775), dimensions={}
  power.2777 = f32[1024]{0} power(add.2773, broadcast.2776)
  multiply.2780 = f32[1024]{0} multiply(broadcast.2779, power.2777)
  multiply.7400 = f32[1024]{0} multiply(broadcast.7399, multiply.2780)
  broadcast.7403 = f32[1024]{0} broadcast(convert.2745), dimensions={}
  divide.7404 = f32[1024]{0} divide(multiply.7400, broadcast.7403)
  broadcast.7405 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7404), dimensions={3}
  constant.2735 = f32[] constant(2)
  broadcast.2736 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.2735), dimensions={}
  multiply.2737 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.2736, convert.2723)
  multiply.7406 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.7405, multiply.2737)
  reshape.7407 = f32[1024]{0} reshape(multiply.2783)
  broadcast.7408 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.7407), dimensions={3}
  multiply.7409 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7371, broadcast.7408)
  add.7410 = f32[128,14,14,1024]{3,2,1,0} add(multiply.7406, multiply.7409)
  negate.7401 = f32[1024]{0} negate(multiply.7400)
  constant.2749 = f32[] constant(2)
  broadcast.2750 = f32[1024]{0} broadcast(constant.2749), dimensions={}
  multiply.2751 = f32[1024]{0} multiply(broadcast.2750, divide.2733)
  multiply.7402 = f32[1024]{0} multiply(negate.7401, multiply.2751)
  constant.7411 = f32[] constant(0)
  reduce.7416 = f32[1024]{0} reduce(multiply.7409, constant.7411), dimensions={0,1,2}, to_apply=primitive_computation_add.7412
  broadcast.7417 = f32[1024]{0} broadcast(reduce.7416), dimensions={0}
  broadcast.7418 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7417), dimensions={3}
  negate.7419 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.7418)
  reshape.7420 = f32[1024]{0} reshape(negate.7419)
  add.7421 = f32[1024]{0} add(multiply.7402, reshape.7420)
  broadcast.7422 = f32[1024]{0} broadcast(convert.2731), dimensions={}
  divide.7423 = f32[1024]{0} divide(add.7421, broadcast.7422)
  broadcast.7424 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7423), dimensions={3}
  add.7425 = f32[128,14,14,1024]{3,2,1,0} add(add.7410, broadcast.7424)
  convert.7426 = bf16[128,14,14,1024]{3,2,1,0} convert(add.7425)
  reverse.7430 = bf16[1,1,256,1024]{3,2,1,0} reverse(convert.2721), dimensions={0,1}
  convolution.7431 = bf16[128,14,14,256]{3,2,1,0} convolution(convert.7426, reverse.7430), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.7432 = bf16[] constant(0)
  broadcast.7433 = bf16[128,14,14,256]{3,2,1,0} broadcast(constant.7432), dimensions={}
  select.7434 = bf16[128,14,14,256]{3,2,1,0} select(compare.2718, convolution.7431, broadcast.7433)
  convert.7435 = f32[128,14,14,256]{3,2,1,0} convert(select.7434)
  multiply.7445 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7435, subtract.2688)
  constant.7446 = f32[] constant(0)
  reduce.7451 = f32[256]{0} reduce(multiply.7445, constant.7446), dimensions={0,1,2}, to_apply=primitive_computation_add.7447
  broadcast.7452 = f32[256]{0} broadcast(reduce.7451), dimensions={0}
  broadcast.7453 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7452), dimensions={3}
  multiply.7456 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7453, reshape.2699)
  constant.7457 = f32[] constant(0)
  reduce.7462 = f32[256]{0} reduce(multiply.7456, constant.7457), dimensions={0,1,2}, to_apply=primitive_computation_add.7458
  broadcast.7463 = f32[256]{0} broadcast(reduce.7462), dimensions={0}
  constant.2696 = f32[] constant(-0.5)
  broadcast.2697 = f32[256]{0} broadcast(constant.2696), dimensions={}
  constant.2693 = f32[] constant(-1.5)
  broadcast.2694 = f32[256]{0} broadcast(constant.2693), dimensions={}
  power.2695 = f32[256]{0} power(add.2691, broadcast.2694)
  multiply.2698 = f32[256]{0} multiply(broadcast.2697, power.2695)
  multiply.7464 = f32[256]{0} multiply(broadcast.7463, multiply.2698)
  broadcast.7467 = f32[256]{0} broadcast(convert.2663), dimensions={}
  divide.7468 = f32[256]{0} divide(multiply.7464, broadcast.7467)
  broadcast.7469 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7468), dimensions={3}
  constant.2653 = f32[] constant(2)
  broadcast.2654 = f32[128,14,14,256]{3,2,1,0} broadcast(constant.2653), dimensions={}
  multiply.2655 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.2654, convert.2641)
  multiply.7470 = f32[128,14,14,256]{3,2,1,0} multiply(broadcast.7469, multiply.2655)
  reshape.7471 = f32[256]{0} reshape(multiply.2701)
  broadcast.7472 = f32[128,14,14,256]{3,2,1,0} broadcast(reshape.7471), dimensions={3}
  multiply.7473 = f32[128,14,14,256]{3,2,1,0} multiply(convert.7435, broadcast.7472)
  add.7474 = f32[128,14,14,256]{3,2,1,0} add(multiply.7470, multiply.7473)
  negate.7465 = f32[256]{0} negate(multiply.7464)
  constant.2667 = f32[] constant(2)
  broadcast.2668 = f32[256]{0} broadcast(constant.2667), dimensions={}
  multiply.2669 = f32[256]{0} multiply(broadcast.2668, divide.2651)
  multiply.7466 = f32[256]{0} multiply(negate.7465, multiply.2669)
  constant.7475 = f32[] constant(0)
  reduce.7480 = f32[256]{0} reduce(multiply.7473, constant.7475), dimensions={0,1,2}, to_apply=primitive_computation_add.7476
  broadcast.7481 = f32[256]{0} broadcast(reduce.7480), dimensions={0}
  broadcast.7482 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7481), dimensions={3}
  negate.7483 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7482)
  reshape.7484 = f32[256]{0} reshape(negate.7483)
  add.7485 = f32[256]{0} add(multiply.7466, reshape.7484)
  broadcast.7486 = f32[256]{0} broadcast(convert.2649), dimensions={}
  divide.7487 = f32[256]{0} divide(add.7485, broadcast.7486)
  broadcast.7488 = f32[128,14,14,256]{3,2,1,0} broadcast(divide.7487), dimensions={3}
  add.7489 = f32[128,14,14,256]{3,2,1,0} add(add.7474, broadcast.7488)
  convert.7490 = bf16[128,14,14,256]{3,2,1,0} convert(add.7489)
  reverse.7494 = bf16[3,3,256,256]{3,2,1,0} reverse(convert.2639), dimensions={0,1}
  convolution.7495 = bf16[128,28,28,256]{3,2,1,0} convolution(convert.7490, reverse.7494), window={size=3x3 pad=2_1x2_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  constant.7496 = bf16[] constant(0)
  broadcast.7497 = bf16[128,28,28,256]{3,2,1,0} broadcast(constant.7496), dimensions={}
  select.7498 = bf16[128,28,28,256]{3,2,1,0} select(compare.2636, convolution.7495, broadcast.7497)
  convert.7499 = f32[128,28,28,256]{3,2,1,0} convert(select.7498)
  multiply.7509 = f32[128,28,28,256]{3,2,1,0} multiply(convert.7499, subtract.2606)
  constant.7510 = f32[] constant(0)
  reduce.7515 = f32[256]{0} reduce(multiply.7509, constant.7510), dimensions={0,1,2}, to_apply=primitive_computation_add.7511
  broadcast.7516 = f32[256]{0} broadcast(reduce.7515), dimensions={0}
  broadcast.7517 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7516), dimensions={3}
  multiply.7520 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7517, reshape.2617)
  constant.7521 = f32[] constant(0)
  reduce.7526 = f32[256]{0} reduce(multiply.7520, constant.7521), dimensions={0,1,2}, to_apply=primitive_computation_add.7522
  broadcast.7527 = f32[256]{0} broadcast(reduce.7526), dimensions={0}
  constant.2614 = f32[] constant(-0.5)
  broadcast.2615 = f32[256]{0} broadcast(constant.2614), dimensions={}
  constant.2611 = f32[] constant(-1.5)
  broadcast.2612 = f32[256]{0} broadcast(constant.2611), dimensions={}
  power.2613 = f32[256]{0} power(add.2609, broadcast.2612)
  multiply.2616 = f32[256]{0} multiply(broadcast.2615, power.2613)
  multiply.7528 = f32[256]{0} multiply(broadcast.7527, multiply.2616)
  broadcast.7531 = f32[256]{0} broadcast(convert.2581), dimensions={}
  divide.7532 = f32[256]{0} divide(multiply.7528, broadcast.7531)
  broadcast.7533 = f32[128,28,28,256]{3,2,1,0} broadcast(divide.7532), dimensions={3}
  constant.2571 = f32[] constant(2)
  broadcast.2572 = f32[128,28,28,256]{3,2,1,0} broadcast(constant.2571), dimensions={}
  multiply.2573 = f32[128,28,28,256]{3,2,1,0} multiply(broadcast.2572, convert.2559)
  multiply.7534 = f32[128,28,28,256]{3,2,1,0} multiply(broadcast.7533, multiply.2573)
  reshape.7535 = f32[256]{0} reshape(multiply.2619)
  broadcast.7536 = f32[128,28,28,256]{3,2,1,0} broadcast(reshape.7535), dimensions={3}
  multiply.7537 = f32[128,28,28,256]{3,2,1,0} multiply(convert.7499, broadcast.7536)
  add.7538 = f32[128,28,28,256]{3,2,1,0} add(multiply.7534, multiply.7537)
  negate.7529 = f32[256]{0} negate(multiply.7528)
  constant.2585 = f32[] constant(2)
  broadcast.2586 = f32[256]{0} broadcast(constant.2585), dimensions={}
  multiply.2587 = f32[256]{0} multiply(broadcast.2586, divide.2569)
  multiply.7530 = f32[256]{0} multiply(negate.7529, multiply.2587)
  constant.7539 = f32[] constant(0)
  reduce.7544 = f32[256]{0} reduce(multiply.7537, constant.7539), dimensions={0,1,2}, to_apply=primitive_computation_add.7540
  broadcast.7545 = f32[256]{0} broadcast(reduce.7544), dimensions={0}
  broadcast.7546 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7545), dimensions={3}
  negate.7547 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.7546)
  reshape.7548 = f32[256]{0} reshape(negate.7547)
  add.7549 = f32[256]{0} add(multiply.7530, reshape.7548)
  broadcast.7550 = f32[256]{0} broadcast(convert.2567), dimensions={}
  divide.7551 = f32[256]{0} divide(add.7549, broadcast.7550)
  broadcast.7552 = f32[128,28,28,256]{3,2,1,0} broadcast(divide.7551), dimensions={3}
  add.7553 = f32[128,28,28,256]{3,2,1,0} add(add.7538, broadcast.7552)
  convert.7554 = bf16[128,28,28,256]{3,2,1,0} convert(add.7553)
  reverse.7558 = bf16[1,1,512,256]{3,2,1,0} reverse(convert.2557), dimensions={0,1}
  convolution.7559 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.7554, reverse.7558), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.7560 = f32[128,14,14,1024]{3,2,1,0} convert(select.7370)
  multiply.7570 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7560, subtract.2841)
  constant.7571 = f32[] constant(0)
  reduce.7576 = f32[1024]{0} reduce(multiply.7570, constant.7571), dimensions={0,1,2}, to_apply=primitive_computation_add.7572
  broadcast.7577 = f32[1024]{0} broadcast(reduce.7576), dimensions={0}
  broadcast.7578 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7577), dimensions={3}
  multiply.7581 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7578, reshape.2852)
  constant.7582 = f32[] constant(0)
  reduce.7587 = f32[1024]{0} reduce(multiply.7581, constant.7582), dimensions={0,1,2}, to_apply=primitive_computation_add.7583
  broadcast.7588 = f32[1024]{0} broadcast(reduce.7587), dimensions={0}
  constant.2849 = f32[] constant(-0.5)
  broadcast.2850 = f32[1024]{0} broadcast(constant.2849), dimensions={}
  constant.2846 = f32[] constant(-1.5)
  broadcast.2847 = f32[1024]{0} broadcast(constant.2846), dimensions={}
  power.2848 = f32[1024]{0} power(add.2844, broadcast.2847)
  multiply.2851 = f32[1024]{0} multiply(broadcast.2850, power.2848)
  multiply.7589 = f32[1024]{0} multiply(broadcast.7588, multiply.2851)
  broadcast.7592 = f32[1024]{0} broadcast(convert.2816), dimensions={}
  divide.7593 = f32[1024]{0} divide(multiply.7589, broadcast.7592)
  broadcast.7594 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7593), dimensions={3}
  constant.2806 = f32[] constant(2)
  broadcast.2807 = f32[128,14,14,1024]{3,2,1,0} broadcast(constant.2806), dimensions={}
  multiply.2808 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.2807, convert.2794)
  multiply.7595 = f32[128,14,14,1024]{3,2,1,0} multiply(broadcast.7594, multiply.2808)
  reshape.7596 = f32[1024]{0} reshape(multiply.2854)
  broadcast.7597 = f32[128,14,14,1024]{3,2,1,0} broadcast(reshape.7596), dimensions={3}
  multiply.7598 = f32[128,14,14,1024]{3,2,1,0} multiply(convert.7560, broadcast.7597)
  add.7599 = f32[128,14,14,1024]{3,2,1,0} add(multiply.7595, multiply.7598)
  negate.7590 = f32[1024]{0} negate(multiply.7589)
  constant.2820 = f32[] constant(2)
  broadcast.2821 = f32[1024]{0} broadcast(constant.2820), dimensions={}
  multiply.2822 = f32[1024]{0} multiply(broadcast.2821, divide.2804)
  multiply.7591 = f32[1024]{0} multiply(negate.7590, multiply.2822)
  constant.7600 = f32[] constant(0)
  reduce.7605 = f32[1024]{0} reduce(multiply.7598, constant.7600), dimensions={0,1,2}, to_apply=primitive_computation_add.7601
  broadcast.7606 = f32[1024]{0} broadcast(reduce.7605), dimensions={0}
  broadcast.7607 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7606), dimensions={3}
  negate.7608 = f32[1,1,1,1024]{3,2,1,0} negate(broadcast.7607)
  reshape.7609 = f32[1024]{0} reshape(negate.7608)
  add.7610 = f32[1024]{0} add(multiply.7591, reshape.7609)
  broadcast.7611 = f32[1024]{0} broadcast(convert.2802), dimensions={}
  divide.7612 = f32[1024]{0} divide(add.7610, broadcast.7611)
  broadcast.7613 = f32[128,14,14,1024]{3,2,1,0} broadcast(divide.7612), dimensions={3}
  add.7614 = f32[128,14,14,1024]{3,2,1,0} add(add.7599, broadcast.7613)
  convert.7615 = bf16[128,14,14,1024]{3,2,1,0} convert(add.7614)
  reverse.7619 = bf16[1,1,512,1024]{3,2,1,0} reverse(convert.2792), dimensions={0,1}
  convolution.7620 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.7615, reverse.7619), window={size=1x1 pad=0_1x0_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  add.7621 = bf16[128,28,28,512]{3,2,1,0} add(convolution.7559, convolution.7620)
  constant.7622 = bf16[] constant(0)
  broadcast.7623 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.7622), dimensions={}
  select.7624 = bf16[128,28,28,512]{3,2,1,0} select(compare.2554, add.7621, broadcast.7623)
  constant.2387 = bf16[] constant(0)
  broadcast.2388 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2387), dimensions={}
  compare.2389 = pred[128,28,28,128]{3,2,1,0} compare(convert.2380, broadcast.2388), direction=GT
  constant.2469 = bf16[] constant(0)
  broadcast.2470 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2469), dimensions={}
  compare.2471 = pred[128,28,28,128]{3,2,1,0} compare(convert.2462, broadcast.2470), direction=GT
  convert.7625 = f32[128,28,28,512]{3,2,1,0} convert(select.7624)
  multiply.7635 = f32[128,28,28,512]{3,2,1,0} multiply(convert.7625, subtract.2523)
  constant.7636 = f32[] constant(0)
  reduce.7641 = f32[512]{0} reduce(multiply.7635, constant.7636), dimensions={0,1,2}, to_apply=primitive_computation_add.7637
  broadcast.7642 = f32[512]{0} broadcast(reduce.7641), dimensions={0}
  broadcast.7643 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.7642), dimensions={3}
  multiply.7646 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.7643, reshape.2534)
  constant.7647 = f32[] constant(0)
  reduce.7652 = f32[512]{0} reduce(multiply.7646, constant.7647), dimensions={0,1,2}, to_apply=primitive_computation_add.7648
  broadcast.7653 = f32[512]{0} broadcast(reduce.7652), dimensions={0}
  constant.2531 = f32[] constant(-0.5)
  broadcast.2532 = f32[512]{0} broadcast(constant.2531), dimensions={}
  constant.2528 = f32[] constant(-1.5)
  broadcast.2529 = f32[512]{0} broadcast(constant.2528), dimensions={}
  power.2530 = f32[512]{0} power(add.2526, broadcast.2529)
  multiply.2533 = f32[512]{0} multiply(broadcast.2532, power.2530)
  multiply.7654 = f32[512]{0} multiply(broadcast.7653, multiply.2533)
  broadcast.7657 = f32[512]{0} broadcast(convert.2498), dimensions={}
  divide.7658 = f32[512]{0} divide(multiply.7654, broadcast.7657)
  broadcast.7659 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.7658), dimensions={3}
  constant.2488 = f32[] constant(2)
  broadcast.2489 = f32[128,28,28,512]{3,2,1,0} broadcast(constant.2488), dimensions={}
  multiply.2490 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.2489, convert.2476)
  multiply.7660 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.7659, multiply.2490)
  reshape.7661 = f32[512]{0} reshape(multiply.2536)
  broadcast.7662 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.7661), dimensions={3}
  multiply.7663 = f32[128,28,28,512]{3,2,1,0} multiply(convert.7625, broadcast.7662)
  add.7664 = f32[128,28,28,512]{3,2,1,0} add(multiply.7660, multiply.7663)
  negate.7655 = f32[512]{0} negate(multiply.7654)
  constant.2502 = f32[] constant(2)
  broadcast.2503 = f32[512]{0} broadcast(constant.2502), dimensions={}
  multiply.2504 = f32[512]{0} multiply(broadcast.2503, divide.2486)
  multiply.7656 = f32[512]{0} multiply(negate.7655, multiply.2504)
  constant.7665 = f32[] constant(0)
  reduce.7670 = f32[512]{0} reduce(multiply.7663, constant.7665), dimensions={0,1,2}, to_apply=primitive_computation_add.7666
  broadcast.7671 = f32[512]{0} broadcast(reduce.7670), dimensions={0}
  broadcast.7672 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.7671), dimensions={3}
  negate.7673 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.7672)
  reshape.7674 = f32[512]{0} reshape(negate.7673)
  add.7675 = f32[512]{0} add(multiply.7656, reshape.7674)
  broadcast.7676 = f32[512]{0} broadcast(convert.2484), dimensions={}
  divide.7677 = f32[512]{0} divide(add.7675, broadcast.7676)
  broadcast.7678 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.7677), dimensions={3}
  add.7679 = f32[128,28,28,512]{3,2,1,0} add(add.7664, broadcast.7678)
  convert.7680 = bf16[128,28,28,512]{3,2,1,0} convert(add.7679)
  reverse.7684 = bf16[1,1,128,512]{3,2,1,0} reverse(convert.2474), dimensions={0,1}
  convolution.7685 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.7680, reverse.7684), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.7686 = bf16[] constant(0)
  broadcast.7687 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.7686), dimensions={}
  select.7688 = bf16[128,28,28,128]{3,2,1,0} select(compare.2471, convolution.7685, broadcast.7687)
  convert.7689 = f32[128,28,28,128]{3,2,1,0} convert(select.7688)
  multiply.7699 = f32[128,28,28,128]{3,2,1,0} multiply(convert.7689, subtract.2441)
  constant.7700 = f32[] constant(0)
  reduce.7705 = f32[128]{0} reduce(multiply.7699, constant.7700), dimensions={0,1,2}, to_apply=primitive_computation_add.7701
  broadcast.7706 = f32[128]{0} broadcast(reduce.7705), dimensions={0}
  broadcast.7707 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7706), dimensions={3}
  multiply.7710 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.7707, reshape.2452)
  constant.7711 = f32[] constant(0)
  reduce.7716 = f32[128]{0} reduce(multiply.7710, constant.7711), dimensions={0,1,2}, to_apply=primitive_computation_add.7712
  broadcast.7717 = f32[128]{0} broadcast(reduce.7716), dimensions={0}
  constant.2449 = f32[] constant(-0.5)
  broadcast.2450 = f32[128]{0} broadcast(constant.2449), dimensions={}
  constant.2446 = f32[] constant(-1.5)
  broadcast.2447 = f32[128]{0} broadcast(constant.2446), dimensions={}
  power.2448 = f32[128]{0} power(add.2444, broadcast.2447)
  multiply.2451 = f32[128]{0} multiply(broadcast.2450, power.2448)
  multiply.7718 = f32[128]{0} multiply(broadcast.7717, multiply.2451)
  broadcast.7721 = f32[128]{0} broadcast(convert.2416), dimensions={}
  divide.7722 = f32[128]{0} divide(multiply.7718, broadcast.7721)
  broadcast.7723 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.7722), dimensions={3}
  constant.2406 = f32[] constant(2)
  broadcast.2407 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.2406), dimensions={}
  multiply.2408 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.2407, convert.2394)
  multiply.7724 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.7723, multiply.2408)
  reshape.7725 = f32[128]{0} reshape(multiply.2454)
  broadcast.7726 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.7725), dimensions={3}
  multiply.7727 = f32[128,28,28,128]{3,2,1,0} multiply(convert.7689, broadcast.7726)
  add.7728 = f32[128,28,28,128]{3,2,1,0} add(multiply.7724, multiply.7727)
  negate.7719 = f32[128]{0} negate(multiply.7718)
  constant.2420 = f32[] constant(2)
  broadcast.2421 = f32[128]{0} broadcast(constant.2420), dimensions={}
  multiply.2422 = f32[128]{0} multiply(broadcast.2421, divide.2404)
  multiply.7720 = f32[128]{0} multiply(negate.7719, multiply.2422)
  constant.7729 = f32[] constant(0)
  reduce.7734 = f32[128]{0} reduce(multiply.7727, constant.7729), dimensions={0,1,2}, to_apply=primitive_computation_add.7730
  broadcast.7735 = f32[128]{0} broadcast(reduce.7734), dimensions={0}
  broadcast.7736 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7735), dimensions={3}
  negate.7737 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.7736)
  reshape.7738 = f32[128]{0} reshape(negate.7737)
  add.7739 = f32[128]{0} add(multiply.7720, reshape.7738)
  broadcast.7740 = f32[128]{0} broadcast(convert.2402), dimensions={}
  divide.7741 = f32[128]{0} divide(add.7739, broadcast.7740)
  broadcast.7742 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.7741), dimensions={3}
  add.7743 = f32[128,28,28,128]{3,2,1,0} add(add.7728, broadcast.7742)
  convert.7744 = bf16[128,28,28,128]{3,2,1,0} convert(add.7743)
  reverse.7748 = bf16[3,3,128,128]{3,2,1,0} reverse(convert.2392), dimensions={0,1}
  convolution.7749 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.7744, reverse.7748), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.7750 = bf16[] constant(0)
  broadcast.7751 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.7750), dimensions={}
  select.7752 = bf16[128,28,28,128]{3,2,1,0} select(compare.2389, convolution.7749, broadcast.7751)
  convert.7753 = f32[128,28,28,128]{3,2,1,0} convert(select.7752)
  multiply.7763 = f32[128,28,28,128]{3,2,1,0} multiply(convert.7753, subtract.2359)
  constant.7764 = f32[] constant(0)
  reduce.7769 = f32[128]{0} reduce(multiply.7763, constant.7764), dimensions={0,1,2}, to_apply=primitive_computation_add.7765
  broadcast.7770 = f32[128]{0} broadcast(reduce.7769), dimensions={0}
  broadcast.7771 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7770), dimensions={3}
  multiply.7774 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.7771, reshape.2370)
  constant.7775 = f32[] constant(0)
  reduce.7780 = f32[128]{0} reduce(multiply.7774, constant.7775), dimensions={0,1,2}, to_apply=primitive_computation_add.7776
  broadcast.7781 = f32[128]{0} broadcast(reduce.7780), dimensions={0}
  constant.2367 = f32[] constant(-0.5)
  broadcast.2368 = f32[128]{0} broadcast(constant.2367), dimensions={}
  constant.2364 = f32[] constant(-1.5)
  broadcast.2365 = f32[128]{0} broadcast(constant.2364), dimensions={}
  power.2366 = f32[128]{0} power(add.2362, broadcast.2365)
  multiply.2369 = f32[128]{0} multiply(broadcast.2368, power.2366)
  multiply.7782 = f32[128]{0} multiply(broadcast.7781, multiply.2369)
  broadcast.7785 = f32[128]{0} broadcast(convert.2334), dimensions={}
  divide.7786 = f32[128]{0} divide(multiply.7782, broadcast.7785)
  broadcast.7787 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.7786), dimensions={3}
  constant.2324 = f32[] constant(2)
  broadcast.2325 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.2324), dimensions={}
  multiply.2326 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.2325, convert.2312)
  multiply.7788 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.7787, multiply.2326)
  reshape.7789 = f32[128]{0} reshape(multiply.2372)
  broadcast.7790 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.7789), dimensions={3}
  multiply.7791 = f32[128,28,28,128]{3,2,1,0} multiply(convert.7753, broadcast.7790)
  add.7792 = f32[128,28,28,128]{3,2,1,0} add(multiply.7788, multiply.7791)
  negate.7783 = f32[128]{0} negate(multiply.7782)
  constant.2338 = f32[] constant(2)
  broadcast.2339 = f32[128]{0} broadcast(constant.2338), dimensions={}
  multiply.2340 = f32[128]{0} multiply(broadcast.2339, divide.2322)
  multiply.7784 = f32[128]{0} multiply(negate.7783, multiply.2340)
  constant.7793 = f32[] constant(0)
  reduce.7798 = f32[128]{0} reduce(multiply.7791, constant.7793), dimensions={0,1,2}, to_apply=primitive_computation_add.7794
  broadcast.7799 = f32[128]{0} broadcast(reduce.7798), dimensions={0}
  broadcast.7800 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7799), dimensions={3}
  negate.7801 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.7800)
  reshape.7802 = f32[128]{0} reshape(negate.7801)
  add.7803 = f32[128]{0} add(multiply.7784, reshape.7802)
  broadcast.7804 = f32[128]{0} broadcast(convert.2320), dimensions={}
  divide.7805 = f32[128]{0} divide(add.7803, broadcast.7804)
  broadcast.7806 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.7805), dimensions={3}
  add.7807 = f32[128,28,28,128]{3,2,1,0} add(add.7792, broadcast.7806)
  convert.7808 = bf16[128,28,28,128]{3,2,1,0} convert(add.7807)
  reverse.7812 = bf16[1,1,512,128]{3,2,1,0} reverse(convert.2310), dimensions={0,1}
  convolution.7813 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.7808, reverse.7812), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.7814 = bf16[128,28,28,512]{3,2,1,0} add(select.7624, convolution.7813)
  constant.7815 = bf16[] constant(0)
  broadcast.7816 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.7815), dimensions={}
  select.7817 = bf16[128,28,28,512]{3,2,1,0} select(compare.2307, add.7814, broadcast.7816)
  constant.2140 = bf16[] constant(0)
  broadcast.2141 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2140), dimensions={}
  compare.2142 = pred[128,28,28,128]{3,2,1,0} compare(convert.2133, broadcast.2141), direction=GT
  constant.2222 = bf16[] constant(0)
  broadcast.2223 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.2222), dimensions={}
  compare.2224 = pred[128,28,28,128]{3,2,1,0} compare(convert.2215, broadcast.2223), direction=GT
  convert.7818 = f32[128,28,28,512]{3,2,1,0} convert(select.7817)
  multiply.7828 = f32[128,28,28,512]{3,2,1,0} multiply(convert.7818, subtract.2276)
  constant.7829 = f32[] constant(0)
  reduce.7834 = f32[512]{0} reduce(multiply.7828, constant.7829), dimensions={0,1,2}, to_apply=primitive_computation_add.7830
  broadcast.7835 = f32[512]{0} broadcast(reduce.7834), dimensions={0}
  broadcast.7836 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.7835), dimensions={3}
  multiply.7839 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.7836, reshape.2287)
  constant.7840 = f32[] constant(0)
  reduce.7845 = f32[512]{0} reduce(multiply.7839, constant.7840), dimensions={0,1,2}, to_apply=primitive_computation_add.7841
  broadcast.7846 = f32[512]{0} broadcast(reduce.7845), dimensions={0}
  constant.2284 = f32[] constant(-0.5)
  broadcast.2285 = f32[512]{0} broadcast(constant.2284), dimensions={}
  constant.2281 = f32[] constant(-1.5)
  broadcast.2282 = f32[512]{0} broadcast(constant.2281), dimensions={}
  power.2283 = f32[512]{0} power(add.2279, broadcast.2282)
  multiply.2286 = f32[512]{0} multiply(broadcast.2285, power.2283)
  multiply.7847 = f32[512]{0} multiply(broadcast.7846, multiply.2286)
  broadcast.7850 = f32[512]{0} broadcast(convert.2251), dimensions={}
  divide.7851 = f32[512]{0} divide(multiply.7847, broadcast.7850)
  broadcast.7852 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.7851), dimensions={3}
  constant.2241 = f32[] constant(2)
  broadcast.2242 = f32[128,28,28,512]{3,2,1,0} broadcast(constant.2241), dimensions={}
  multiply.2243 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.2242, convert.2229)
  multiply.7853 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.7852, multiply.2243)
  reshape.7854 = f32[512]{0} reshape(multiply.2289)
  broadcast.7855 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.7854), dimensions={3}
  multiply.7856 = f32[128,28,28,512]{3,2,1,0} multiply(convert.7818, broadcast.7855)
  add.7857 = f32[128,28,28,512]{3,2,1,0} add(multiply.7853, multiply.7856)
  negate.7848 = f32[512]{0} negate(multiply.7847)
  constant.2255 = f32[] constant(2)
  broadcast.2256 = f32[512]{0} broadcast(constant.2255), dimensions={}
  multiply.2257 = f32[512]{0} multiply(broadcast.2256, divide.2239)
  multiply.7849 = f32[512]{0} multiply(negate.7848, multiply.2257)
  constant.7858 = f32[] constant(0)
  reduce.7863 = f32[512]{0} reduce(multiply.7856, constant.7858), dimensions={0,1,2}, to_apply=primitive_computation_add.7859
  broadcast.7864 = f32[512]{0} broadcast(reduce.7863), dimensions={0}
  broadcast.7865 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.7864), dimensions={3}
  negate.7866 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.7865)
  reshape.7867 = f32[512]{0} reshape(negate.7866)
  add.7868 = f32[512]{0} add(multiply.7849, reshape.7867)
  broadcast.7869 = f32[512]{0} broadcast(convert.2237), dimensions={}
  divide.7870 = f32[512]{0} divide(add.7868, broadcast.7869)
  broadcast.7871 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.7870), dimensions={3}
  add.7872 = f32[128,28,28,512]{3,2,1,0} add(add.7857, broadcast.7871)
  convert.7873 = bf16[128,28,28,512]{3,2,1,0} convert(add.7872)
  reverse.7877 = bf16[1,1,128,512]{3,2,1,0} reverse(convert.2227), dimensions={0,1}
  convolution.7878 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.7873, reverse.7877), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.7879 = bf16[] constant(0)
  broadcast.7880 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.7879), dimensions={}
  select.7881 = bf16[128,28,28,128]{3,2,1,0} select(compare.2224, convolution.7878, broadcast.7880)
  convert.7882 = f32[128,28,28,128]{3,2,1,0} convert(select.7881)
  multiply.7892 = f32[128,28,28,128]{3,2,1,0} multiply(convert.7882, subtract.2194)
  constant.7893 = f32[] constant(0)
  reduce.7898 = f32[128]{0} reduce(multiply.7892, constant.7893), dimensions={0,1,2}, to_apply=primitive_computation_add.7894
  broadcast.7899 = f32[128]{0} broadcast(reduce.7898), dimensions={0}
  broadcast.7900 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7899), dimensions={3}
  multiply.7903 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.7900, reshape.2205)
  constant.7904 = f32[] constant(0)
  reduce.7909 = f32[128]{0} reduce(multiply.7903, constant.7904), dimensions={0,1,2}, to_apply=primitive_computation_add.7905
  broadcast.7910 = f32[128]{0} broadcast(reduce.7909), dimensions={0}
  constant.2202 = f32[] constant(-0.5)
  broadcast.2203 = f32[128]{0} broadcast(constant.2202), dimensions={}
  constant.2199 = f32[] constant(-1.5)
  broadcast.2200 = f32[128]{0} broadcast(constant.2199), dimensions={}
  power.2201 = f32[128]{0} power(add.2197, broadcast.2200)
  multiply.2204 = f32[128]{0} multiply(broadcast.2203, power.2201)
  multiply.7911 = f32[128]{0} multiply(broadcast.7910, multiply.2204)
  broadcast.7914 = f32[128]{0} broadcast(convert.2169), dimensions={}
  divide.7915 = f32[128]{0} divide(multiply.7911, broadcast.7914)
  broadcast.7916 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.7915), dimensions={3}
  constant.2159 = f32[] constant(2)
  broadcast.2160 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.2159), dimensions={}
  multiply.2161 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.2160, convert.2147)
  multiply.7917 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.7916, multiply.2161)
  reshape.7918 = f32[128]{0} reshape(multiply.2207)
  broadcast.7919 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.7918), dimensions={3}
  multiply.7920 = f32[128,28,28,128]{3,2,1,0} multiply(convert.7882, broadcast.7919)
  add.7921 = f32[128,28,28,128]{3,2,1,0} add(multiply.7917, multiply.7920)
  negate.7912 = f32[128]{0} negate(multiply.7911)
  constant.2173 = f32[] constant(2)
  broadcast.2174 = f32[128]{0} broadcast(constant.2173), dimensions={}
  multiply.2175 = f32[128]{0} multiply(broadcast.2174, divide.2157)
  multiply.7913 = f32[128]{0} multiply(negate.7912, multiply.2175)
  constant.7922 = f32[] constant(0)
  reduce.7927 = f32[128]{0} reduce(multiply.7920, constant.7922), dimensions={0,1,2}, to_apply=primitive_computation_add.7923
  broadcast.7928 = f32[128]{0} broadcast(reduce.7927), dimensions={0}
  broadcast.7929 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7928), dimensions={3}
  negate.7930 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.7929)
  reshape.7931 = f32[128]{0} reshape(negate.7930)
  add.7932 = f32[128]{0} add(multiply.7913, reshape.7931)
  broadcast.7933 = f32[128]{0} broadcast(convert.2155), dimensions={}
  divide.7934 = f32[128]{0} divide(add.7932, broadcast.7933)
  broadcast.7935 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.7934), dimensions={3}
  add.7936 = f32[128,28,28,128]{3,2,1,0} add(add.7921, broadcast.7935)
  convert.7937 = bf16[128,28,28,128]{3,2,1,0} convert(add.7936)
  reverse.7941 = bf16[3,3,128,128]{3,2,1,0} reverse(convert.2145), dimensions={0,1}
  convolution.7942 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.7937, reverse.7941), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.7943 = bf16[] constant(0)
  broadcast.7944 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.7943), dimensions={}
  select.7945 = bf16[128,28,28,128]{3,2,1,0} select(compare.2142, convolution.7942, broadcast.7944)
  convert.7946 = f32[128,28,28,128]{3,2,1,0} convert(select.7945)
  multiply.7956 = f32[128,28,28,128]{3,2,1,0} multiply(convert.7946, subtract.2112)
  constant.7957 = f32[] constant(0)
  reduce.7962 = f32[128]{0} reduce(multiply.7956, constant.7957), dimensions={0,1,2}, to_apply=primitive_computation_add.7958
  broadcast.7963 = f32[128]{0} broadcast(reduce.7962), dimensions={0}
  broadcast.7964 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7963), dimensions={3}
  multiply.7967 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.7964, reshape.2123)
  constant.7968 = f32[] constant(0)
  reduce.7973 = f32[128]{0} reduce(multiply.7967, constant.7968), dimensions={0,1,2}, to_apply=primitive_computation_add.7969
  broadcast.7974 = f32[128]{0} broadcast(reduce.7973), dimensions={0}
  constant.2120 = f32[] constant(-0.5)
  broadcast.2121 = f32[128]{0} broadcast(constant.2120), dimensions={}
  constant.2117 = f32[] constant(-1.5)
  broadcast.2118 = f32[128]{0} broadcast(constant.2117), dimensions={}
  power.2119 = f32[128]{0} power(add.2115, broadcast.2118)
  multiply.2122 = f32[128]{0} multiply(broadcast.2121, power.2119)
  multiply.7975 = f32[128]{0} multiply(broadcast.7974, multiply.2122)
  broadcast.7978 = f32[128]{0} broadcast(convert.2087), dimensions={}
  divide.7979 = f32[128]{0} divide(multiply.7975, broadcast.7978)
  broadcast.7980 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.7979), dimensions={3}
  constant.2077 = f32[] constant(2)
  broadcast.2078 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.2077), dimensions={}
  multiply.2079 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.2078, convert.2065)
  multiply.7981 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.7980, multiply.2079)
  reshape.7982 = f32[128]{0} reshape(multiply.2125)
  broadcast.7983 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.7982), dimensions={3}
  multiply.7984 = f32[128,28,28,128]{3,2,1,0} multiply(convert.7946, broadcast.7983)
  add.7985 = f32[128,28,28,128]{3,2,1,0} add(multiply.7981, multiply.7984)
  negate.7976 = f32[128]{0} negate(multiply.7975)
  constant.2091 = f32[] constant(2)
  broadcast.2092 = f32[128]{0} broadcast(constant.2091), dimensions={}
  multiply.2093 = f32[128]{0} multiply(broadcast.2092, divide.2075)
  multiply.7977 = f32[128]{0} multiply(negate.7976, multiply.2093)
  constant.7986 = f32[] constant(0)
  reduce.7991 = f32[128]{0} reduce(multiply.7984, constant.7986), dimensions={0,1,2}, to_apply=primitive_computation_add.7987
  broadcast.7992 = f32[128]{0} broadcast(reduce.7991), dimensions={0}
  broadcast.7993 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7992), dimensions={3}
  negate.7994 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.7993)
  reshape.7995 = f32[128]{0} reshape(negate.7994)
  add.7996 = f32[128]{0} add(multiply.7977, reshape.7995)
  broadcast.7997 = f32[128]{0} broadcast(convert.2073), dimensions={}
  divide.7998 = f32[128]{0} divide(add.7996, broadcast.7997)
  broadcast.7999 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.7998), dimensions={3}
  add.8000 = f32[128,28,28,128]{3,2,1,0} add(add.7985, broadcast.7999)
  convert.8001 = bf16[128,28,28,128]{3,2,1,0} convert(add.8000)
  reverse.8005 = bf16[1,1,512,128]{3,2,1,0} reverse(convert.2063), dimensions={0,1}
  convolution.8006 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.8001, reverse.8005), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.8007 = bf16[128,28,28,512]{3,2,1,0} add(select.7817, convolution.8006)
  constant.8008 = bf16[] constant(0)
  broadcast.8009 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.8008), dimensions={}
  select.8010 = bf16[128,28,28,512]{3,2,1,0} select(compare.2060, add.8007, broadcast.8009)
  constant.1893 = bf16[] constant(0)
  broadcast.1894 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1893), dimensions={}
  compare.1895 = pred[128,28,28,128]{3,2,1,0} compare(convert.1886, broadcast.1894), direction=GT
  constant.1975 = bf16[] constant(0)
  broadcast.1976 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.1975), dimensions={}
  compare.1977 = pred[128,28,28,128]{3,2,1,0} compare(convert.1968, broadcast.1976), direction=GT
  convert.8011 = f32[128,28,28,512]{3,2,1,0} convert(select.8010)
  multiply.8021 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8011, subtract.2029)
  constant.8022 = f32[] constant(0)
  reduce.8027 = f32[512]{0} reduce(multiply.8021, constant.8022), dimensions={0,1,2}, to_apply=primitive_computation_add.8023
  broadcast.8028 = f32[512]{0} broadcast(reduce.8027), dimensions={0}
  broadcast.8029 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8028), dimensions={3}
  multiply.8032 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8029, reshape.2040)
  constant.8033 = f32[] constant(0)
  reduce.8038 = f32[512]{0} reduce(multiply.8032, constant.8033), dimensions={0,1,2}, to_apply=primitive_computation_add.8034
  broadcast.8039 = f32[512]{0} broadcast(reduce.8038), dimensions={0}
  constant.2037 = f32[] constant(-0.5)
  broadcast.2038 = f32[512]{0} broadcast(constant.2037), dimensions={}
  constant.2034 = f32[] constant(-1.5)
  broadcast.2035 = f32[512]{0} broadcast(constant.2034), dimensions={}
  power.2036 = f32[512]{0} power(add.2032, broadcast.2035)
  multiply.2039 = f32[512]{0} multiply(broadcast.2038, power.2036)
  multiply.8040 = f32[512]{0} multiply(broadcast.8039, multiply.2039)
  broadcast.8043 = f32[512]{0} broadcast(convert.2004), dimensions={}
  divide.8044 = f32[512]{0} divide(multiply.8040, broadcast.8043)
  broadcast.8045 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8044), dimensions={3}
  constant.1994 = f32[] constant(2)
  broadcast.1995 = f32[128,28,28,512]{3,2,1,0} broadcast(constant.1994), dimensions={}
  multiply.1996 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.1995, convert.1982)
  multiply.8046 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.8045, multiply.1996)
  reshape.8047 = f32[512]{0} reshape(multiply.2042)
  broadcast.8048 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.8047), dimensions={3}
  multiply.8049 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8011, broadcast.8048)
  add.8050 = f32[128,28,28,512]{3,2,1,0} add(multiply.8046, multiply.8049)
  negate.8041 = f32[512]{0} negate(multiply.8040)
  constant.2008 = f32[] constant(2)
  broadcast.2009 = f32[512]{0} broadcast(constant.2008), dimensions={}
  multiply.2010 = f32[512]{0} multiply(broadcast.2009, divide.1992)
  multiply.8042 = f32[512]{0} multiply(negate.8041, multiply.2010)
  constant.8051 = f32[] constant(0)
  reduce.8056 = f32[512]{0} reduce(multiply.8049, constant.8051), dimensions={0,1,2}, to_apply=primitive_computation_add.8052
  broadcast.8057 = f32[512]{0} broadcast(reduce.8056), dimensions={0}
  broadcast.8058 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8057), dimensions={3}
  negate.8059 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.8058)
  reshape.8060 = f32[512]{0} reshape(negate.8059)
  add.8061 = f32[512]{0} add(multiply.8042, reshape.8060)
  broadcast.8062 = f32[512]{0} broadcast(convert.1990), dimensions={}
  divide.8063 = f32[512]{0} divide(add.8061, broadcast.8062)
  broadcast.8064 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8063), dimensions={3}
  add.8065 = f32[128,28,28,512]{3,2,1,0} add(add.8050, broadcast.8064)
  convert.8066 = bf16[128,28,28,512]{3,2,1,0} convert(add.8065)
  reverse.8070 = bf16[1,1,128,512]{3,2,1,0} reverse(convert.1980), dimensions={0,1}
  convolution.8071 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.8066, reverse.8070), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.8072 = bf16[] constant(0)
  broadcast.8073 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.8072), dimensions={}
  select.8074 = bf16[128,28,28,128]{3,2,1,0} select(compare.1977, convolution.8071, broadcast.8073)
  convert.8075 = f32[128,28,28,128]{3,2,1,0} convert(select.8074)
  multiply.8085 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8075, subtract.1947)
  constant.8086 = f32[] constant(0)
  reduce.8091 = f32[128]{0} reduce(multiply.8085, constant.8086), dimensions={0,1,2}, to_apply=primitive_computation_add.8087
  broadcast.8092 = f32[128]{0} broadcast(reduce.8091), dimensions={0}
  broadcast.8093 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8092), dimensions={3}
  multiply.8096 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8093, reshape.1958)
  constant.8097 = f32[] constant(0)
  reduce.8102 = f32[128]{0} reduce(multiply.8096, constant.8097), dimensions={0,1,2}, to_apply=primitive_computation_add.8098
  broadcast.8103 = f32[128]{0} broadcast(reduce.8102), dimensions={0}
  constant.1955 = f32[] constant(-0.5)
  broadcast.1956 = f32[128]{0} broadcast(constant.1955), dimensions={}
  constant.1952 = f32[] constant(-1.5)
  broadcast.1953 = f32[128]{0} broadcast(constant.1952), dimensions={}
  power.1954 = f32[128]{0} power(add.1950, broadcast.1953)
  multiply.1957 = f32[128]{0} multiply(broadcast.1956, power.1954)
  multiply.8104 = f32[128]{0} multiply(broadcast.8103, multiply.1957)
  broadcast.8107 = f32[128]{0} broadcast(convert.1922), dimensions={}
  divide.8108 = f32[128]{0} divide(multiply.8104, broadcast.8107)
  broadcast.8109 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8108), dimensions={3}
  constant.1912 = f32[] constant(2)
  broadcast.1913 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.1912), dimensions={}
  multiply.1914 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.1913, convert.1900)
  multiply.8110 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.8109, multiply.1914)
  reshape.8111 = f32[128]{0} reshape(multiply.1960)
  broadcast.8112 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.8111), dimensions={3}
  multiply.8113 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8075, broadcast.8112)
  add.8114 = f32[128,28,28,128]{3,2,1,0} add(multiply.8110, multiply.8113)
  negate.8105 = f32[128]{0} negate(multiply.8104)
  constant.1926 = f32[] constant(2)
  broadcast.1927 = f32[128]{0} broadcast(constant.1926), dimensions={}
  multiply.1928 = f32[128]{0} multiply(broadcast.1927, divide.1910)
  multiply.8106 = f32[128]{0} multiply(negate.8105, multiply.1928)
  constant.8115 = f32[] constant(0)
  reduce.8120 = f32[128]{0} reduce(multiply.8113, constant.8115), dimensions={0,1,2}, to_apply=primitive_computation_add.8116
  broadcast.8121 = f32[128]{0} broadcast(reduce.8120), dimensions={0}
  broadcast.8122 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8121), dimensions={3}
  negate.8123 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8122)
  reshape.8124 = f32[128]{0} reshape(negate.8123)
  add.8125 = f32[128]{0} add(multiply.8106, reshape.8124)
  broadcast.8126 = f32[128]{0} broadcast(convert.1908), dimensions={}
  divide.8127 = f32[128]{0} divide(add.8125, broadcast.8126)
  broadcast.8128 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8127), dimensions={3}
  add.8129 = f32[128,28,28,128]{3,2,1,0} add(add.8114, broadcast.8128)
  convert.8130 = bf16[128,28,28,128]{3,2,1,0} convert(add.8129)
  reverse.8134 = bf16[3,3,128,128]{3,2,1,0} reverse(convert.1898), dimensions={0,1}
  convolution.8135 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.8130, reverse.8134), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.8136 = bf16[] constant(0)
  broadcast.8137 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.8136), dimensions={}
  select.8138 = bf16[128,28,28,128]{3,2,1,0} select(compare.1895, convolution.8135, broadcast.8137)
  convert.8139 = f32[128,28,28,128]{3,2,1,0} convert(select.8138)
  multiply.8149 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8139, subtract.1865)
  constant.8150 = f32[] constant(0)
  reduce.8155 = f32[128]{0} reduce(multiply.8149, constant.8150), dimensions={0,1,2}, to_apply=primitive_computation_add.8151
  broadcast.8156 = f32[128]{0} broadcast(reduce.8155), dimensions={0}
  broadcast.8157 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8156), dimensions={3}
  multiply.8160 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8157, reshape.1876)
  constant.8161 = f32[] constant(0)
  reduce.8166 = f32[128]{0} reduce(multiply.8160, constant.8161), dimensions={0,1,2}, to_apply=primitive_computation_add.8162
  broadcast.8167 = f32[128]{0} broadcast(reduce.8166), dimensions={0}
  constant.1873 = f32[] constant(-0.5)
  broadcast.1874 = f32[128]{0} broadcast(constant.1873), dimensions={}
  constant.1870 = f32[] constant(-1.5)
  broadcast.1871 = f32[128]{0} broadcast(constant.1870), dimensions={}
  power.1872 = f32[128]{0} power(add.1868, broadcast.1871)
  multiply.1875 = f32[128]{0} multiply(broadcast.1874, power.1872)
  multiply.8168 = f32[128]{0} multiply(broadcast.8167, multiply.1875)
  broadcast.8171 = f32[128]{0} broadcast(convert.1840), dimensions={}
  divide.8172 = f32[128]{0} divide(multiply.8168, broadcast.8171)
  broadcast.8173 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8172), dimensions={3}
  constant.1830 = f32[] constant(2)
  broadcast.1831 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.1830), dimensions={}
  multiply.1832 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.1831, convert.1818)
  multiply.8174 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.8173, multiply.1832)
  reshape.8175 = f32[128]{0} reshape(multiply.1878)
  broadcast.8176 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.8175), dimensions={3}
  multiply.8177 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8139, broadcast.8176)
  add.8178 = f32[128,28,28,128]{3,2,1,0} add(multiply.8174, multiply.8177)
  negate.8169 = f32[128]{0} negate(multiply.8168)
  constant.1844 = f32[] constant(2)
  broadcast.1845 = f32[128]{0} broadcast(constant.1844), dimensions={}
  multiply.1846 = f32[128]{0} multiply(broadcast.1845, divide.1828)
  multiply.8170 = f32[128]{0} multiply(negate.8169, multiply.1846)
  constant.8179 = f32[] constant(0)
  reduce.8184 = f32[128]{0} reduce(multiply.8177, constant.8179), dimensions={0,1,2}, to_apply=primitive_computation_add.8180
  broadcast.8185 = f32[128]{0} broadcast(reduce.8184), dimensions={0}
  broadcast.8186 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8185), dimensions={3}
  negate.8187 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8186)
  reshape.8188 = f32[128]{0} reshape(negate.8187)
  add.8189 = f32[128]{0} add(multiply.8170, reshape.8188)
  broadcast.8190 = f32[128]{0} broadcast(convert.1826), dimensions={}
  divide.8191 = f32[128]{0} divide(add.8189, broadcast.8190)
  broadcast.8192 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8191), dimensions={3}
  add.8193 = f32[128,28,28,128]{3,2,1,0} add(add.8178, broadcast.8192)
  convert.8194 = bf16[128,28,28,128]{3,2,1,0} convert(add.8193)
  reverse.8198 = bf16[1,1,512,128]{3,2,1,0} reverse(convert.1816), dimensions={0,1}
  convolution.8199 = bf16[128,28,28,512]{3,2,1,0} convolution(convert.8194, reverse.8198), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.8200 = bf16[128,28,28,512]{3,2,1,0} add(select.8010, convolution.8199)
  constant.8201 = bf16[] constant(0)
  broadcast.8202 = bf16[128,28,28,512]{3,2,1,0} broadcast(constant.8201), dimensions={}
  select.8203 = bf16[128,28,28,512]{3,2,1,0} select(compare.1813, add.8200, broadcast.8202)
  convert.8204 = f32[128,28,28,512]{3,2,1,0} convert(select.8203)
  multiply.8214 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8204, subtract.1711)
  constant.8215 = f32[] constant(0)
  reduce.8220 = f32[512]{0} reduce(multiply.8214, constant.8215), dimensions={0,1,2}, to_apply=primitive_computation_add.8216
  broadcast.8221 = f32[512]{0} broadcast(reduce.8220), dimensions={0}
  broadcast.8222 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8221), dimensions={3}
  multiply.8225 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8222, reshape.1722)
  constant.8226 = f32[] constant(0)
  reduce.8231 = f32[512]{0} reduce(multiply.8225, constant.8226), dimensions={0,1,2}, to_apply=primitive_computation_add.8227
  broadcast.8232 = f32[512]{0} broadcast(reduce.8231), dimensions={0}
  constant.1719 = f32[] constant(-0.5)
  broadcast.1720 = f32[512]{0} broadcast(constant.1719), dimensions={}
  constant.1716 = f32[] constant(-1.5)
  broadcast.1717 = f32[512]{0} broadcast(constant.1716), dimensions={}
  power.1718 = f32[512]{0} power(add.1714, broadcast.1717)
  multiply.1721 = f32[512]{0} multiply(broadcast.1720, power.1718)
  multiply.8233 = f32[512]{0} multiply(broadcast.8232, multiply.1721)
  broadcast.8236 = f32[512]{0} broadcast(convert.1686), dimensions={}
  divide.8237 = f32[512]{0} divide(multiply.8233, broadcast.8236)
  broadcast.8238 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8237), dimensions={3}
  constant.1676 = f32[] constant(2)
  broadcast.1677 = f32[128,28,28,512]{3,2,1,0} broadcast(constant.1676), dimensions={}
  multiply.1678 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.1677, convert.1664)
  multiply.8239 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.8238, multiply.1678)
  reshape.8240 = f32[512]{0} reshape(multiply.1724)
  broadcast.8241 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.8240), dimensions={3}
  multiply.8242 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8204, broadcast.8241)
  add.8243 = f32[128,28,28,512]{3,2,1,0} add(multiply.8239, multiply.8242)
  negate.8234 = f32[512]{0} negate(multiply.8233)
  constant.1690 = f32[] constant(2)
  broadcast.1691 = f32[512]{0} broadcast(constant.1690), dimensions={}
  multiply.1692 = f32[512]{0} multiply(broadcast.1691, divide.1674)
  multiply.8235 = f32[512]{0} multiply(negate.8234, multiply.1692)
  constant.8244 = f32[] constant(0)
  reduce.8249 = f32[512]{0} reduce(multiply.8242, constant.8244), dimensions={0,1,2}, to_apply=primitive_computation_add.8245
  broadcast.8250 = f32[512]{0} broadcast(reduce.8249), dimensions={0}
  broadcast.8251 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8250), dimensions={3}
  negate.8252 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.8251)
  reshape.8253 = f32[512]{0} reshape(negate.8252)
  add.8254 = f32[512]{0} add(multiply.8235, reshape.8253)
  broadcast.8255 = f32[512]{0} broadcast(convert.1672), dimensions={}
  divide.8256 = f32[512]{0} divide(add.8254, broadcast.8255)
  broadcast.8257 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8256), dimensions={3}
  add.8258 = f32[128,28,28,512]{3,2,1,0} add(add.8243, broadcast.8257)
  convert.8259 = bf16[128,28,28,512]{3,2,1,0} convert(add.8258)
  reverse.8263 = bf16[1,1,128,512]{3,2,1,0} reverse(convert.1662), dimensions={0,1}
  convolution.8264 = bf16[128,28,28,128]{3,2,1,0} convolution(convert.8259, reverse.8263), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.8265 = bf16[] constant(0)
  broadcast.8266 = bf16[128,28,28,128]{3,2,1,0} broadcast(constant.8265), dimensions={}
  select.8267 = bf16[128,28,28,128]{3,2,1,0} select(compare.1659, convolution.8264, broadcast.8266)
  convert.8268 = f32[128,28,28,128]{3,2,1,0} convert(select.8267)
  multiply.8278 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8268, subtract.1629)
  constant.8279 = f32[] constant(0)
  reduce.8284 = f32[128]{0} reduce(multiply.8278, constant.8279), dimensions={0,1,2}, to_apply=primitive_computation_add.8280
  broadcast.8285 = f32[128]{0} broadcast(reduce.8284), dimensions={0}
  broadcast.8286 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8285), dimensions={3}
  multiply.8289 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8286, reshape.1640)
  constant.8290 = f32[] constant(0)
  reduce.8295 = f32[128]{0} reduce(multiply.8289, constant.8290), dimensions={0,1,2}, to_apply=primitive_computation_add.8291
  broadcast.8296 = f32[128]{0} broadcast(reduce.8295), dimensions={0}
  constant.1637 = f32[] constant(-0.5)
  broadcast.1638 = f32[128]{0} broadcast(constant.1637), dimensions={}
  constant.1634 = f32[] constant(-1.5)
  broadcast.1635 = f32[128]{0} broadcast(constant.1634), dimensions={}
  power.1636 = f32[128]{0} power(add.1632, broadcast.1635)
  multiply.1639 = f32[128]{0} multiply(broadcast.1638, power.1636)
  multiply.8297 = f32[128]{0} multiply(broadcast.8296, multiply.1639)
  broadcast.8300 = f32[128]{0} broadcast(convert.1604), dimensions={}
  divide.8301 = f32[128]{0} divide(multiply.8297, broadcast.8300)
  broadcast.8302 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8301), dimensions={3}
  constant.1594 = f32[] constant(2)
  broadcast.1595 = f32[128,28,28,128]{3,2,1,0} broadcast(constant.1594), dimensions={}
  multiply.1596 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.1595, convert.1582)
  multiply.8303 = f32[128,28,28,128]{3,2,1,0} multiply(broadcast.8302, multiply.1596)
  reshape.8304 = f32[128]{0} reshape(multiply.1642)
  broadcast.8305 = f32[128,28,28,128]{3,2,1,0} broadcast(reshape.8304), dimensions={3}
  multiply.8306 = f32[128,28,28,128]{3,2,1,0} multiply(convert.8268, broadcast.8305)
  add.8307 = f32[128,28,28,128]{3,2,1,0} add(multiply.8303, multiply.8306)
  negate.8298 = f32[128]{0} negate(multiply.8297)
  constant.1608 = f32[] constant(2)
  broadcast.1609 = f32[128]{0} broadcast(constant.1608), dimensions={}
  multiply.1610 = f32[128]{0} multiply(broadcast.1609, divide.1592)
  multiply.8299 = f32[128]{0} multiply(negate.8298, multiply.1610)
  constant.8308 = f32[] constant(0)
  reduce.8313 = f32[128]{0} reduce(multiply.8306, constant.8308), dimensions={0,1,2}, to_apply=primitive_computation_add.8309
  broadcast.8314 = f32[128]{0} broadcast(reduce.8313), dimensions={0}
  broadcast.8315 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8314), dimensions={3}
  negate.8316 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8315)
  reshape.8317 = f32[128]{0} reshape(negate.8316)
  add.8318 = f32[128]{0} add(multiply.8299, reshape.8317)
  broadcast.8319 = f32[128]{0} broadcast(convert.1590), dimensions={}
  divide.8320 = f32[128]{0} divide(add.8318, broadcast.8319)
  broadcast.8321 = f32[128,28,28,128]{3,2,1,0} broadcast(divide.8320), dimensions={3}
  add.8322 = f32[128,28,28,128]{3,2,1,0} add(add.8307, broadcast.8321)
  convert.8323 = bf16[128,28,28,128]{3,2,1,0} convert(add.8322)
  reverse.8327 = bf16[3,3,128,128]{3,2,1,0} reverse(convert.1580), dimensions={0,1}
  convolution.8328 = bf16[128,56,56,128]{3,2,1,0} convolution(convert.8323, reverse.8327), window={size=3x3 pad=2_1x2_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  constant.8329 = bf16[] constant(0)
  broadcast.8330 = bf16[128,56,56,128]{3,2,1,0} broadcast(constant.8329), dimensions={}
  select.8331 = bf16[128,56,56,128]{3,2,1,0} select(compare.1577, convolution.8328, broadcast.8330)
  convert.8332 = f32[128,56,56,128]{3,2,1,0} convert(select.8331)
  multiply.8342 = f32[128,56,56,128]{3,2,1,0} multiply(convert.8332, subtract.1547)
  constant.8343 = f32[] constant(0)
  reduce.8348 = f32[128]{0} reduce(multiply.8342, constant.8343), dimensions={0,1,2}, to_apply=primitive_computation_add.8344
  broadcast.8349 = f32[128]{0} broadcast(reduce.8348), dimensions={0}
  broadcast.8350 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8349), dimensions={3}
  multiply.8353 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8350, reshape.1558)
  constant.8354 = f32[] constant(0)
  reduce.8359 = f32[128]{0} reduce(multiply.8353, constant.8354), dimensions={0,1,2}, to_apply=primitive_computation_add.8355
  broadcast.8360 = f32[128]{0} broadcast(reduce.8359), dimensions={0}
  constant.1555 = f32[] constant(-0.5)
  broadcast.1556 = f32[128]{0} broadcast(constant.1555), dimensions={}
  constant.1552 = f32[] constant(-1.5)
  broadcast.1553 = f32[128]{0} broadcast(constant.1552), dimensions={}
  power.1554 = f32[128]{0} power(add.1550, broadcast.1553)
  multiply.1557 = f32[128]{0} multiply(broadcast.1556, power.1554)
  multiply.8361 = f32[128]{0} multiply(broadcast.8360, multiply.1557)
  broadcast.8364 = f32[128]{0} broadcast(convert.1522), dimensions={}
  divide.8365 = f32[128]{0} divide(multiply.8361, broadcast.8364)
  broadcast.8366 = f32[128,56,56,128]{3,2,1,0} broadcast(divide.8365), dimensions={3}
  constant.1512 = f32[] constant(2)
  broadcast.1513 = f32[128,56,56,128]{3,2,1,0} broadcast(constant.1512), dimensions={}
  multiply.1514 = f32[128,56,56,128]{3,2,1,0} multiply(broadcast.1513, convert.1500)
  multiply.8367 = f32[128,56,56,128]{3,2,1,0} multiply(broadcast.8366, multiply.1514)
  reshape.8368 = f32[128]{0} reshape(multiply.1560)
  broadcast.8369 = f32[128,56,56,128]{3,2,1,0} broadcast(reshape.8368), dimensions={3}
  multiply.8370 = f32[128,56,56,128]{3,2,1,0} multiply(convert.8332, broadcast.8369)
  add.8371 = f32[128,56,56,128]{3,2,1,0} add(multiply.8367, multiply.8370)
  negate.8362 = f32[128]{0} negate(multiply.8361)
  constant.1526 = f32[] constant(2)
  broadcast.1527 = f32[128]{0} broadcast(constant.1526), dimensions={}
  multiply.1528 = f32[128]{0} multiply(broadcast.1527, divide.1510)
  multiply.8363 = f32[128]{0} multiply(negate.8362, multiply.1528)
  constant.8372 = f32[] constant(0)
  reduce.8377 = f32[128]{0} reduce(multiply.8370, constant.8372), dimensions={0,1,2}, to_apply=primitive_computation_add.8373
  broadcast.8378 = f32[128]{0} broadcast(reduce.8377), dimensions={0}
  broadcast.8379 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8378), dimensions={3}
  negate.8380 = f32[1,1,1,128]{3,2,1,0} negate(broadcast.8379)
  reshape.8381 = f32[128]{0} reshape(negate.8380)
  add.8382 = f32[128]{0} add(multiply.8363, reshape.8381)
  broadcast.8383 = f32[128]{0} broadcast(convert.1508), dimensions={}
  divide.8384 = f32[128]{0} divide(add.8382, broadcast.8383)
  broadcast.8385 = f32[128,56,56,128]{3,2,1,0} broadcast(divide.8384), dimensions={3}
  add.8386 = f32[128,56,56,128]{3,2,1,0} add(add.8371, broadcast.8385)
  convert.8387 = bf16[128,56,56,128]{3,2,1,0} convert(add.8386)
  reverse.8391 = bf16[1,1,256,128]{3,2,1,0} reverse(convert.1498), dimensions={0,1}
  convolution.8392 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.8387, reverse.8391), window={size=1x1}, dim_labels=b01f_01oi->b01f
  convert.8393 = f32[128,28,28,512]{3,2,1,0} convert(select.8203)
  multiply.8403 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8393, subtract.1782)
  constant.8404 = f32[] constant(0)
  reduce.8409 = f32[512]{0} reduce(multiply.8403, constant.8404), dimensions={0,1,2}, to_apply=primitive_computation_add.8405
  broadcast.8410 = f32[512]{0} broadcast(reduce.8409), dimensions={0}
  broadcast.8411 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8410), dimensions={3}
  multiply.8414 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8411, reshape.1793)
  constant.8415 = f32[] constant(0)
  reduce.8420 = f32[512]{0} reduce(multiply.8414, constant.8415), dimensions={0,1,2}, to_apply=primitive_computation_add.8416
  broadcast.8421 = f32[512]{0} broadcast(reduce.8420), dimensions={0}
  constant.1790 = f32[] constant(-0.5)
  broadcast.1791 = f32[512]{0} broadcast(constant.1790), dimensions={}
  constant.1787 = f32[] constant(-1.5)
  broadcast.1788 = f32[512]{0} broadcast(constant.1787), dimensions={}
  power.1789 = f32[512]{0} power(add.1785, broadcast.1788)
  multiply.1792 = f32[512]{0} multiply(broadcast.1791, power.1789)
  multiply.8422 = f32[512]{0} multiply(broadcast.8421, multiply.1792)
  broadcast.8425 = f32[512]{0} broadcast(convert.1757), dimensions={}
  divide.8426 = f32[512]{0} divide(multiply.8422, broadcast.8425)
  broadcast.8427 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8426), dimensions={3}
  constant.1747 = f32[] constant(2)
  broadcast.1748 = f32[128,28,28,512]{3,2,1,0} broadcast(constant.1747), dimensions={}
  multiply.1749 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.1748, convert.1735)
  multiply.8428 = f32[128,28,28,512]{3,2,1,0} multiply(broadcast.8427, multiply.1749)
  reshape.8429 = f32[512]{0} reshape(multiply.1795)
  broadcast.8430 = f32[128,28,28,512]{3,2,1,0} broadcast(reshape.8429), dimensions={3}
  multiply.8431 = f32[128,28,28,512]{3,2,1,0} multiply(convert.8393, broadcast.8430)
  add.8432 = f32[128,28,28,512]{3,2,1,0} add(multiply.8428, multiply.8431)
  negate.8423 = f32[512]{0} negate(multiply.8422)
  constant.1761 = f32[] constant(2)
  broadcast.1762 = f32[512]{0} broadcast(constant.1761), dimensions={}
  multiply.1763 = f32[512]{0} multiply(broadcast.1762, divide.1745)
  multiply.8424 = f32[512]{0} multiply(negate.8423, multiply.1763)
  constant.8433 = f32[] constant(0)
  reduce.8438 = f32[512]{0} reduce(multiply.8431, constant.8433), dimensions={0,1,2}, to_apply=primitive_computation_add.8434
  broadcast.8439 = f32[512]{0} broadcast(reduce.8438), dimensions={0}
  broadcast.8440 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8439), dimensions={3}
  negate.8441 = f32[1,1,1,512]{3,2,1,0} negate(broadcast.8440)
  reshape.8442 = f32[512]{0} reshape(negate.8441)
  add.8443 = f32[512]{0} add(multiply.8424, reshape.8442)
  broadcast.8444 = f32[512]{0} broadcast(convert.1743), dimensions={}
  divide.8445 = f32[512]{0} divide(add.8443, broadcast.8444)
  broadcast.8446 = f32[128,28,28,512]{3,2,1,0} broadcast(divide.8445), dimensions={3}
  add.8447 = f32[128,28,28,512]{3,2,1,0} add(add.8432, broadcast.8446)
  convert.8448 = bf16[128,28,28,512]{3,2,1,0} convert(add.8447)
  reverse.8452 = bf16[1,1,256,512]{3,2,1,0} reverse(convert.1733), dimensions={0,1}
  convolution.8453 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.8448, reverse.8452), window={size=1x1 pad=0_1x0_1 lhs_dilate=2x2}, dim_labels=b01f_01oi->b01f
  add.8454 = bf16[128,56,56,256]{3,2,1,0} add(convolution.8392, convolution.8453)
  constant.8455 = bf16[] constant(0)
  broadcast.8456 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.8455), dimensions={}
  select.8457 = bf16[128,56,56,256]{3,2,1,0} select(compare.1495, add.8454, broadcast.8456)
  constant.1328 = bf16[] constant(0)
  broadcast.1329 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1328), dimensions={}
  compare.1330 = pred[128,56,56,64]{3,2,1,0} compare(convert.1321, broadcast.1329), direction=GT
  constant.1410 = bf16[] constant(0)
  broadcast.1411 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1410), dimensions={}
  compare.1412 = pred[128,56,56,64]{3,2,1,0} compare(convert.1403, broadcast.1411), direction=GT
  convert.8458 = f32[128,56,56,256]{3,2,1,0} convert(select.8457)
  multiply.8468 = f32[128,56,56,256]{3,2,1,0} multiply(convert.8458, subtract.1464)
  constant.8469 = f32[] constant(0)
  reduce.8474 = f32[256]{0} reduce(multiply.8468, constant.8469), dimensions={0,1,2}, to_apply=primitive_computation_add.8470
  broadcast.8475 = f32[256]{0} broadcast(reduce.8474), dimensions={0}
  broadcast.8476 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8475), dimensions={3}
  multiply.8479 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.8476, reshape.1475)
  constant.8480 = f32[] constant(0)
  reduce.8485 = f32[256]{0} reduce(multiply.8479, constant.8480), dimensions={0,1,2}, to_apply=primitive_computation_add.8481
  broadcast.8486 = f32[256]{0} broadcast(reduce.8485), dimensions={0}
  constant.1472 = f32[] constant(-0.5)
  broadcast.1473 = f32[256]{0} broadcast(constant.1472), dimensions={}
  constant.1469 = f32[] constant(-1.5)
  broadcast.1470 = f32[256]{0} broadcast(constant.1469), dimensions={}
  power.1471 = f32[256]{0} power(add.1467, broadcast.1470)
  multiply.1474 = f32[256]{0} multiply(broadcast.1473, power.1471)
  multiply.8487 = f32[256]{0} multiply(broadcast.8486, multiply.1474)
  broadcast.8490 = f32[256]{0} broadcast(convert.1439), dimensions={}
  divide.8491 = f32[256]{0} divide(multiply.8487, broadcast.8490)
  broadcast.8492 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.8491), dimensions={3}
  constant.1429 = f32[] constant(2)
  broadcast.1430 = f32[128,56,56,256]{3,2,1,0} broadcast(constant.1429), dimensions={}
  multiply.1431 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.1430, convert.1417)
  multiply.8493 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.8492, multiply.1431)
  reshape.8494 = f32[256]{0} reshape(multiply.1477)
  broadcast.8495 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.8494), dimensions={3}
  multiply.8496 = f32[128,56,56,256]{3,2,1,0} multiply(convert.8458, broadcast.8495)
  add.8497 = f32[128,56,56,256]{3,2,1,0} add(multiply.8493, multiply.8496)
  negate.8488 = f32[256]{0} negate(multiply.8487)
  constant.1443 = f32[] constant(2)
  broadcast.1444 = f32[256]{0} broadcast(constant.1443), dimensions={}
  multiply.1445 = f32[256]{0} multiply(broadcast.1444, divide.1427)
  multiply.8489 = f32[256]{0} multiply(negate.8488, multiply.1445)
  constant.8498 = f32[] constant(0)
  reduce.8503 = f32[256]{0} reduce(multiply.8496, constant.8498), dimensions={0,1,2}, to_apply=primitive_computation_add.8499
  broadcast.8504 = f32[256]{0} broadcast(reduce.8503), dimensions={0}
  broadcast.8505 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8504), dimensions={3}
  negate.8506 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.8505)
  reshape.8507 = f32[256]{0} reshape(negate.8506)
  add.8508 = f32[256]{0} add(multiply.8489, reshape.8507)
  broadcast.8509 = f32[256]{0} broadcast(convert.1425), dimensions={}
  divide.8510 = f32[256]{0} divide(add.8508, broadcast.8509)
  broadcast.8511 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.8510), dimensions={3}
  add.8512 = f32[128,56,56,256]{3,2,1,0} add(add.8497, broadcast.8511)
  convert.8513 = bf16[128,56,56,256]{3,2,1,0} convert(add.8512)
  reverse.8517 = bf16[1,1,64,256]{3,2,1,0} reverse(convert.1415), dimensions={0,1}
  convolution.8518 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.8513, reverse.8517), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.8519 = bf16[] constant(0)
  broadcast.8520 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.8519), dimensions={}
  select.8521 = bf16[128,56,56,64]{3,2,1,0} select(compare.1412, convolution.8518, broadcast.8520)
  convert.8522 = f32[128,56,56,64]{3,2,1,0} convert(select.8521)
  multiply.8532 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8522, subtract.1382)
  constant.8533 = f32[] constant(0)
  reduce.8538 = f32[64]{0} reduce(multiply.8532, constant.8533), dimensions={0,1,2}, to_apply=primitive_computation_add.8534
  broadcast.8539 = f32[64]{0} broadcast(reduce.8538), dimensions={0}
  broadcast.8540 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8539), dimensions={3}
  multiply.8543 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8540, reshape.1393)
  constant.8544 = f32[] constant(0)
  reduce.8549 = f32[64]{0} reduce(multiply.8543, constant.8544), dimensions={0,1,2}, to_apply=primitive_computation_add.8545
  broadcast.8550 = f32[64]{0} broadcast(reduce.8549), dimensions={0}
  constant.1390 = f32[] constant(-0.5)
  broadcast.1391 = f32[64]{0} broadcast(constant.1390), dimensions={}
  constant.1387 = f32[] constant(-1.5)
  broadcast.1388 = f32[64]{0} broadcast(constant.1387), dimensions={}
  power.1389 = f32[64]{0} power(add.1385, broadcast.1388)
  multiply.1392 = f32[64]{0} multiply(broadcast.1391, power.1389)
  multiply.8551 = f32[64]{0} multiply(broadcast.8550, multiply.1392)
  broadcast.8554 = f32[64]{0} broadcast(convert.1357), dimensions={}
  divide.8555 = f32[64]{0} divide(multiply.8551, broadcast.8554)
  broadcast.8556 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.8555), dimensions={3}
  constant.1347 = f32[] constant(2)
  broadcast.1348 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.1347), dimensions={}
  multiply.1349 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.1348, convert.1335)
  multiply.8557 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.8556, multiply.1349)
  reshape.8558 = f32[64]{0} reshape(multiply.1395)
  broadcast.8559 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.8558), dimensions={3}
  multiply.8560 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8522, broadcast.8559)
  add.8561 = f32[128,56,56,64]{3,2,1,0} add(multiply.8557, multiply.8560)
  negate.8552 = f32[64]{0} negate(multiply.8551)
  constant.1361 = f32[] constant(2)
  broadcast.1362 = f32[64]{0} broadcast(constant.1361), dimensions={}
  multiply.1363 = f32[64]{0} multiply(broadcast.1362, divide.1345)
  multiply.8553 = f32[64]{0} multiply(negate.8552, multiply.1363)
  constant.8562 = f32[] constant(0)
  reduce.8567 = f32[64]{0} reduce(multiply.8560, constant.8562), dimensions={0,1,2}, to_apply=primitive_computation_add.8563
  broadcast.8568 = f32[64]{0} broadcast(reduce.8567), dimensions={0}
  broadcast.8569 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8568), dimensions={3}
  negate.8570 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.8569)
  reshape.8571 = f32[64]{0} reshape(negate.8570)
  add.8572 = f32[64]{0} add(multiply.8553, reshape.8571)
  broadcast.8573 = f32[64]{0} broadcast(convert.1343), dimensions={}
  divide.8574 = f32[64]{0} divide(add.8572, broadcast.8573)
  broadcast.8575 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.8574), dimensions={3}
  add.8576 = f32[128,56,56,64]{3,2,1,0} add(add.8561, broadcast.8575)
  convert.8577 = bf16[128,56,56,64]{3,2,1,0} convert(add.8576)
  reverse.8581 = bf16[3,3,64,64]{3,2,1,0} reverse(convert.1333), dimensions={0,1}
  convolution.8582 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.8577, reverse.8581), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.8583 = bf16[] constant(0)
  broadcast.8584 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.8583), dimensions={}
  select.8585 = bf16[128,56,56,64]{3,2,1,0} select(compare.1330, convolution.8582, broadcast.8584)
  convert.8586 = f32[128,56,56,64]{3,2,1,0} convert(select.8585)
  multiply.8596 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8586, subtract.1300)
  constant.8597 = f32[] constant(0)
  reduce.8602 = f32[64]{0} reduce(multiply.8596, constant.8597), dimensions={0,1,2}, to_apply=primitive_computation_add.8598
  broadcast.8603 = f32[64]{0} broadcast(reduce.8602), dimensions={0}
  broadcast.8604 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8603), dimensions={3}
  multiply.8607 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8604, reshape.1311)
  constant.8608 = f32[] constant(0)
  reduce.8613 = f32[64]{0} reduce(multiply.8607, constant.8608), dimensions={0,1,2}, to_apply=primitive_computation_add.8609
  broadcast.8614 = f32[64]{0} broadcast(reduce.8613), dimensions={0}
  constant.1308 = f32[] constant(-0.5)
  broadcast.1309 = f32[64]{0} broadcast(constant.1308), dimensions={}
  constant.1305 = f32[] constant(-1.5)
  broadcast.1306 = f32[64]{0} broadcast(constant.1305), dimensions={}
  power.1307 = f32[64]{0} power(add.1303, broadcast.1306)
  multiply.1310 = f32[64]{0} multiply(broadcast.1309, power.1307)
  multiply.8615 = f32[64]{0} multiply(broadcast.8614, multiply.1310)
  broadcast.8618 = f32[64]{0} broadcast(convert.1275), dimensions={}
  divide.8619 = f32[64]{0} divide(multiply.8615, broadcast.8618)
  broadcast.8620 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.8619), dimensions={3}
  constant.1265 = f32[] constant(2)
  broadcast.1266 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.1265), dimensions={}
  multiply.1267 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.1266, convert.1253)
  multiply.8621 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.8620, multiply.1267)
  reshape.8622 = f32[64]{0} reshape(multiply.1313)
  broadcast.8623 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.8622), dimensions={3}
  multiply.8624 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8586, broadcast.8623)
  add.8625 = f32[128,56,56,64]{3,2,1,0} add(multiply.8621, multiply.8624)
  negate.8616 = f32[64]{0} negate(multiply.8615)
  constant.1279 = f32[] constant(2)
  broadcast.1280 = f32[64]{0} broadcast(constant.1279), dimensions={}
  multiply.1281 = f32[64]{0} multiply(broadcast.1280, divide.1263)
  multiply.8617 = f32[64]{0} multiply(negate.8616, multiply.1281)
  constant.8626 = f32[] constant(0)
  reduce.8631 = f32[64]{0} reduce(multiply.8624, constant.8626), dimensions={0,1,2}, to_apply=primitive_computation_add.8627
  broadcast.8632 = f32[64]{0} broadcast(reduce.8631), dimensions={0}
  broadcast.8633 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8632), dimensions={3}
  negate.8634 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.8633)
  reshape.8635 = f32[64]{0} reshape(negate.8634)
  add.8636 = f32[64]{0} add(multiply.8617, reshape.8635)
  broadcast.8637 = f32[64]{0} broadcast(convert.1261), dimensions={}
  divide.8638 = f32[64]{0} divide(add.8636, broadcast.8637)
  broadcast.8639 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.8638), dimensions={3}
  add.8640 = f32[128,56,56,64]{3,2,1,0} add(add.8625, broadcast.8639)
  convert.8641 = bf16[128,56,56,64]{3,2,1,0} convert(add.8640)
  reverse.8645 = bf16[1,1,256,64]{3,2,1,0} reverse(convert.1251), dimensions={0,1}
  convolution.8646 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.8641, reverse.8645), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.8647 = bf16[128,56,56,256]{3,2,1,0} add(select.8457, convolution.8646)
  constant.8648 = bf16[] constant(0)
  broadcast.8649 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.8648), dimensions={}
  select.8650 = bf16[128,56,56,256]{3,2,1,0} select(compare.1248, add.8647, broadcast.8649)
  constant.1081 = bf16[] constant(0)
  broadcast.1082 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1081), dimensions={}
  compare.1083 = pred[128,56,56,64]{3,2,1,0} compare(convert.1074, broadcast.1082), direction=GT
  constant.1163 = bf16[] constant(0)
  broadcast.1164 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.1163), dimensions={}
  compare.1165 = pred[128,56,56,64]{3,2,1,0} compare(convert.1156, broadcast.1164), direction=GT
  convert.8651 = f32[128,56,56,256]{3,2,1,0} convert(select.8650)
  multiply.8661 = f32[128,56,56,256]{3,2,1,0} multiply(convert.8651, subtract.1217)
  constant.8662 = f32[] constant(0)
  reduce.8667 = f32[256]{0} reduce(multiply.8661, constant.8662), dimensions={0,1,2}, to_apply=primitive_computation_add.8663
  broadcast.8668 = f32[256]{0} broadcast(reduce.8667), dimensions={0}
  broadcast.8669 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8668), dimensions={3}
  multiply.8672 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.8669, reshape.1228)
  constant.8673 = f32[] constant(0)
  reduce.8678 = f32[256]{0} reduce(multiply.8672, constant.8673), dimensions={0,1,2}, to_apply=primitive_computation_add.8674
  broadcast.8679 = f32[256]{0} broadcast(reduce.8678), dimensions={0}
  constant.1225 = f32[] constant(-0.5)
  broadcast.1226 = f32[256]{0} broadcast(constant.1225), dimensions={}
  constant.1222 = f32[] constant(-1.5)
  broadcast.1223 = f32[256]{0} broadcast(constant.1222), dimensions={}
  power.1224 = f32[256]{0} power(add.1220, broadcast.1223)
  multiply.1227 = f32[256]{0} multiply(broadcast.1226, power.1224)
  multiply.8680 = f32[256]{0} multiply(broadcast.8679, multiply.1227)
  broadcast.8683 = f32[256]{0} broadcast(convert.1192), dimensions={}
  divide.8684 = f32[256]{0} divide(multiply.8680, broadcast.8683)
  broadcast.8685 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.8684), dimensions={3}
  constant.1182 = f32[] constant(2)
  broadcast.1183 = f32[128,56,56,256]{3,2,1,0} broadcast(constant.1182), dimensions={}
  multiply.1184 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.1183, convert.1170)
  multiply.8686 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.8685, multiply.1184)
  reshape.8687 = f32[256]{0} reshape(multiply.1230)
  broadcast.8688 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.8687), dimensions={3}
  multiply.8689 = f32[128,56,56,256]{3,2,1,0} multiply(convert.8651, broadcast.8688)
  add.8690 = f32[128,56,56,256]{3,2,1,0} add(multiply.8686, multiply.8689)
  negate.8681 = f32[256]{0} negate(multiply.8680)
  constant.1196 = f32[] constant(2)
  broadcast.1197 = f32[256]{0} broadcast(constant.1196), dimensions={}
  multiply.1198 = f32[256]{0} multiply(broadcast.1197, divide.1180)
  multiply.8682 = f32[256]{0} multiply(negate.8681, multiply.1198)
  constant.8691 = f32[] constant(0)
  reduce.8696 = f32[256]{0} reduce(multiply.8689, constant.8691), dimensions={0,1,2}, to_apply=primitive_computation_add.8692
  broadcast.8697 = f32[256]{0} broadcast(reduce.8696), dimensions={0}
  broadcast.8698 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8697), dimensions={3}
  negate.8699 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.8698)
  reshape.8700 = f32[256]{0} reshape(negate.8699)
  add.8701 = f32[256]{0} add(multiply.8682, reshape.8700)
  broadcast.8702 = f32[256]{0} broadcast(convert.1178), dimensions={}
  divide.8703 = f32[256]{0} divide(add.8701, broadcast.8702)
  broadcast.8704 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.8703), dimensions={3}
  add.8705 = f32[128,56,56,256]{3,2,1,0} add(add.8690, broadcast.8704)
  convert.8706 = bf16[128,56,56,256]{3,2,1,0} convert(add.8705)
  reverse.8710 = bf16[1,1,64,256]{3,2,1,0} reverse(convert.1168), dimensions={0,1}
  convolution.8711 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.8706, reverse.8710), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.8712 = bf16[] constant(0)
  broadcast.8713 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.8712), dimensions={}
  select.8714 = bf16[128,56,56,64]{3,2,1,0} select(compare.1165, convolution.8711, broadcast.8713)
  convert.8715 = f32[128,56,56,64]{3,2,1,0} convert(select.8714)
  multiply.8725 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8715, subtract.1135)
  constant.8726 = f32[] constant(0)
  reduce.8731 = f32[64]{0} reduce(multiply.8725, constant.8726), dimensions={0,1,2}, to_apply=primitive_computation_add.8727
  broadcast.8732 = f32[64]{0} broadcast(reduce.8731), dimensions={0}
  broadcast.8733 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8732), dimensions={3}
  multiply.8736 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8733, reshape.1146)
  constant.8737 = f32[] constant(0)
  reduce.8742 = f32[64]{0} reduce(multiply.8736, constant.8737), dimensions={0,1,2}, to_apply=primitive_computation_add.8738
  broadcast.8743 = f32[64]{0} broadcast(reduce.8742), dimensions={0}
  constant.1143 = f32[] constant(-0.5)
  broadcast.1144 = f32[64]{0} broadcast(constant.1143), dimensions={}
  constant.1140 = f32[] constant(-1.5)
  broadcast.1141 = f32[64]{0} broadcast(constant.1140), dimensions={}
  power.1142 = f32[64]{0} power(add.1138, broadcast.1141)
  multiply.1145 = f32[64]{0} multiply(broadcast.1144, power.1142)
  multiply.8744 = f32[64]{0} multiply(broadcast.8743, multiply.1145)
  broadcast.8747 = f32[64]{0} broadcast(convert.1110), dimensions={}
  divide.8748 = f32[64]{0} divide(multiply.8744, broadcast.8747)
  broadcast.8749 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.8748), dimensions={3}
  constant.1100 = f32[] constant(2)
  broadcast.1101 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.1100), dimensions={}
  multiply.1102 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.1101, convert.1088)
  multiply.8750 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.8749, multiply.1102)
  reshape.8751 = f32[64]{0} reshape(multiply.1148)
  broadcast.8752 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.8751), dimensions={3}
  multiply.8753 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8715, broadcast.8752)
  add.8754 = f32[128,56,56,64]{3,2,1,0} add(multiply.8750, multiply.8753)
  negate.8745 = f32[64]{0} negate(multiply.8744)
  constant.1114 = f32[] constant(2)
  broadcast.1115 = f32[64]{0} broadcast(constant.1114), dimensions={}
  multiply.1116 = f32[64]{0} multiply(broadcast.1115, divide.1098)
  multiply.8746 = f32[64]{0} multiply(negate.8745, multiply.1116)
  constant.8755 = f32[] constant(0)
  reduce.8760 = f32[64]{0} reduce(multiply.8753, constant.8755), dimensions={0,1,2}, to_apply=primitive_computation_add.8756
  broadcast.8761 = f32[64]{0} broadcast(reduce.8760), dimensions={0}
  broadcast.8762 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8761), dimensions={3}
  negate.8763 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.8762)
  reshape.8764 = f32[64]{0} reshape(negate.8763)
  add.8765 = f32[64]{0} add(multiply.8746, reshape.8764)
  broadcast.8766 = f32[64]{0} broadcast(convert.1096), dimensions={}
  divide.8767 = f32[64]{0} divide(add.8765, broadcast.8766)
  broadcast.8768 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.8767), dimensions={3}
  add.8769 = f32[128,56,56,64]{3,2,1,0} add(add.8754, broadcast.8768)
  convert.8770 = bf16[128,56,56,64]{3,2,1,0} convert(add.8769)
  reverse.8774 = bf16[3,3,64,64]{3,2,1,0} reverse(convert.1086), dimensions={0,1}
  convolution.8775 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.8770, reverse.8774), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.8776 = bf16[] constant(0)
  broadcast.8777 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.8776), dimensions={}
  select.8778 = bf16[128,56,56,64]{3,2,1,0} select(compare.1083, convolution.8775, broadcast.8777)
  convert.8779 = f32[128,56,56,64]{3,2,1,0} convert(select.8778)
  multiply.8789 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8779, subtract.1053)
  constant.8790 = f32[] constant(0)
  reduce.8795 = f32[64]{0} reduce(multiply.8789, constant.8790), dimensions={0,1,2}, to_apply=primitive_computation_add.8791
  broadcast.8796 = f32[64]{0} broadcast(reduce.8795), dimensions={0}
  broadcast.8797 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8796), dimensions={3}
  multiply.8800 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8797, reshape.1064)
  constant.8801 = f32[] constant(0)
  reduce.8806 = f32[64]{0} reduce(multiply.8800, constant.8801), dimensions={0,1,2}, to_apply=primitive_computation_add.8802
  broadcast.8807 = f32[64]{0} broadcast(reduce.8806), dimensions={0}
  constant.1061 = f32[] constant(-0.5)
  broadcast.1062 = f32[64]{0} broadcast(constant.1061), dimensions={}
  constant.1058 = f32[] constant(-1.5)
  broadcast.1059 = f32[64]{0} broadcast(constant.1058), dimensions={}
  power.1060 = f32[64]{0} power(add.1056, broadcast.1059)
  multiply.1063 = f32[64]{0} multiply(broadcast.1062, power.1060)
  multiply.8808 = f32[64]{0} multiply(broadcast.8807, multiply.1063)
  broadcast.8811 = f32[64]{0} broadcast(convert.1028), dimensions={}
  divide.8812 = f32[64]{0} divide(multiply.8808, broadcast.8811)
  broadcast.8813 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.8812), dimensions={3}
  constant.1018 = f32[] constant(2)
  broadcast.1019 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.1018), dimensions={}
  multiply.1020 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.1019, convert.1006)
  multiply.8814 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.8813, multiply.1020)
  reshape.8815 = f32[64]{0} reshape(multiply.1066)
  broadcast.8816 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.8815), dimensions={3}
  multiply.8817 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8779, broadcast.8816)
  add.8818 = f32[128,56,56,64]{3,2,1,0} add(multiply.8814, multiply.8817)
  negate.8809 = f32[64]{0} negate(multiply.8808)
  constant.1032 = f32[] constant(2)
  broadcast.1033 = f32[64]{0} broadcast(constant.1032), dimensions={}
  multiply.1034 = f32[64]{0} multiply(broadcast.1033, divide.1016)
  multiply.8810 = f32[64]{0} multiply(negate.8809, multiply.1034)
  constant.8819 = f32[] constant(0)
  reduce.8824 = f32[64]{0} reduce(multiply.8817, constant.8819), dimensions={0,1,2}, to_apply=primitive_computation_add.8820
  broadcast.8825 = f32[64]{0} broadcast(reduce.8824), dimensions={0}
  broadcast.8826 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8825), dimensions={3}
  negate.8827 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.8826)
  reshape.8828 = f32[64]{0} reshape(negate.8827)
  add.8829 = f32[64]{0} add(multiply.8810, reshape.8828)
  broadcast.8830 = f32[64]{0} broadcast(convert.1014), dimensions={}
  divide.8831 = f32[64]{0} divide(add.8829, broadcast.8830)
  broadcast.8832 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.8831), dimensions={3}
  add.8833 = f32[128,56,56,64]{3,2,1,0} add(add.8818, broadcast.8832)
  convert.8834 = bf16[128,56,56,64]{3,2,1,0} convert(add.8833)
  reverse.8838 = bf16[1,1,256,64]{3,2,1,0} reverse(convert.1004), dimensions={0,1}
  convolution.8839 = bf16[128,56,56,256]{3,2,1,0} convolution(convert.8834, reverse.8838), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.8840 = bf16[128,56,56,256]{3,2,1,0} add(select.8650, convolution.8839)
  constant.8841 = bf16[] constant(0)
  broadcast.8842 = bf16[128,56,56,256]{3,2,1,0} broadcast(constant.8841), dimensions={}
  select.8843 = bf16[128,56,56,256]{3,2,1,0} select(compare.1001, add.8840, broadcast.8842)
  convert.8844 = f32[128,56,56,256]{3,2,1,0} convert(select.8843)
  multiply.8854 = f32[128,56,56,256]{3,2,1,0} multiply(convert.8844, subtract.899)
  constant.8855 = f32[] constant(0)
  reduce.8860 = f32[256]{0} reduce(multiply.8854, constant.8855), dimensions={0,1,2}, to_apply=primitive_computation_add.8856
  broadcast.8861 = f32[256]{0} broadcast(reduce.8860), dimensions={0}
  broadcast.8862 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8861), dimensions={3}
  multiply.8865 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.8862, reshape.910)
  constant.8866 = f32[] constant(0)
  reduce.8871 = f32[256]{0} reduce(multiply.8865, constant.8866), dimensions={0,1,2}, to_apply=primitive_computation_add.8867
  broadcast.8872 = f32[256]{0} broadcast(reduce.8871), dimensions={0}
  constant.907 = f32[] constant(-0.5)
  broadcast.908 = f32[256]{0} broadcast(constant.907), dimensions={}
  constant.904 = f32[] constant(-1.5)
  broadcast.905 = f32[256]{0} broadcast(constant.904), dimensions={}
  power.906 = f32[256]{0} power(add.902, broadcast.905)
  multiply.909 = f32[256]{0} multiply(broadcast.908, power.906)
  multiply.8873 = f32[256]{0} multiply(broadcast.8872, multiply.909)
  broadcast.8876 = f32[256]{0} broadcast(convert.874), dimensions={}
  divide.8877 = f32[256]{0} divide(multiply.8873, broadcast.8876)
  broadcast.8878 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.8877), dimensions={3}
  constant.864 = f32[] constant(2)
  broadcast.865 = f32[128,56,56,256]{3,2,1,0} broadcast(constant.864), dimensions={}
  multiply.866 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.865, convert.852)
  multiply.8879 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.8878, multiply.866)
  reshape.8880 = f32[256]{0} reshape(multiply.912)
  broadcast.8881 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.8880), dimensions={3}
  multiply.8882 = f32[128,56,56,256]{3,2,1,0} multiply(convert.8844, broadcast.8881)
  add.8883 = f32[128,56,56,256]{3,2,1,0} add(multiply.8879, multiply.8882)
  negate.8874 = f32[256]{0} negate(multiply.8873)
  constant.878 = f32[] constant(2)
  broadcast.879 = f32[256]{0} broadcast(constant.878), dimensions={}
  multiply.880 = f32[256]{0} multiply(broadcast.879, divide.862)
  multiply.8875 = f32[256]{0} multiply(negate.8874, multiply.880)
  constant.8884 = f32[] constant(0)
  reduce.8889 = f32[256]{0} reduce(multiply.8882, constant.8884), dimensions={0,1,2}, to_apply=primitive_computation_add.8885
  broadcast.8890 = f32[256]{0} broadcast(reduce.8889), dimensions={0}
  broadcast.8891 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8890), dimensions={3}
  negate.8892 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.8891)
  reshape.8893 = f32[256]{0} reshape(negate.8892)
  add.8894 = f32[256]{0} add(multiply.8875, reshape.8893)
  broadcast.8895 = f32[256]{0} broadcast(convert.860), dimensions={}
  divide.8896 = f32[256]{0} divide(add.8894, broadcast.8895)
  broadcast.8897 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.8896), dimensions={3}
  add.8898 = f32[128,56,56,256]{3,2,1,0} add(add.8883, broadcast.8897)
  convert.8899 = bf16[128,56,56,256]{3,2,1,0} convert(add.8898)
  reverse.8903 = bf16[1,1,64,256]{3,2,1,0} reverse(convert.850), dimensions={0,1}
  convolution.8904 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.8899, reverse.8903), window={size=1x1}, dim_labels=b01f_01oi->b01f
  constant.8905 = bf16[] constant(0)
  broadcast.8906 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.8905), dimensions={}
  select.8907 = bf16[128,56,56,64]{3,2,1,0} select(compare.847, convolution.8904, broadcast.8906)
  convert.8908 = f32[128,56,56,64]{3,2,1,0} convert(select.8907)
  multiply.8918 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8908, subtract.817)
  constant.8919 = f32[] constant(0)
  reduce.8924 = f32[64]{0} reduce(multiply.8918, constant.8919), dimensions={0,1,2}, to_apply=primitive_computation_add.8920
  broadcast.8925 = f32[64]{0} broadcast(reduce.8924), dimensions={0}
  broadcast.8926 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8925), dimensions={3}
  multiply.8929 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8926, reshape.828)
  constant.8930 = f32[] constant(0)
  reduce.8935 = f32[64]{0} reduce(multiply.8929, constant.8930), dimensions={0,1,2}, to_apply=primitive_computation_add.8931
  broadcast.8936 = f32[64]{0} broadcast(reduce.8935), dimensions={0}
  constant.825 = f32[] constant(-0.5)
  broadcast.826 = f32[64]{0} broadcast(constant.825), dimensions={}
  constant.822 = f32[] constant(-1.5)
  broadcast.823 = f32[64]{0} broadcast(constant.822), dimensions={}
  power.824 = f32[64]{0} power(add.820, broadcast.823)
  multiply.827 = f32[64]{0} multiply(broadcast.826, power.824)
  multiply.8937 = f32[64]{0} multiply(broadcast.8936, multiply.827)
  broadcast.8940 = f32[64]{0} broadcast(convert.792), dimensions={}
  divide.8941 = f32[64]{0} divide(multiply.8937, broadcast.8940)
  broadcast.8942 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.8941), dimensions={3}
  constant.782 = f32[] constant(2)
  broadcast.783 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.782), dimensions={}
  multiply.784 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.783, convert.770)
  multiply.8943 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.8942, multiply.784)
  reshape.8944 = f32[64]{0} reshape(multiply.830)
  broadcast.8945 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.8944), dimensions={3}
  multiply.8946 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8908, broadcast.8945)
  add.8947 = f32[128,56,56,64]{3,2,1,0} add(multiply.8943, multiply.8946)
  negate.8938 = f32[64]{0} negate(multiply.8937)
  constant.796 = f32[] constant(2)
  broadcast.797 = f32[64]{0} broadcast(constant.796), dimensions={}
  multiply.798 = f32[64]{0} multiply(broadcast.797, divide.780)
  multiply.8939 = f32[64]{0} multiply(negate.8938, multiply.798)
  constant.8948 = f32[] constant(0)
  reduce.8953 = f32[64]{0} reduce(multiply.8946, constant.8948), dimensions={0,1,2}, to_apply=primitive_computation_add.8949
  broadcast.8954 = f32[64]{0} broadcast(reduce.8953), dimensions={0}
  broadcast.8955 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8954), dimensions={3}
  negate.8956 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.8955)
  reshape.8957 = f32[64]{0} reshape(negate.8956)
  add.8958 = f32[64]{0} add(multiply.8939, reshape.8957)
  broadcast.8959 = f32[64]{0} broadcast(convert.778), dimensions={}
  divide.8960 = f32[64]{0} divide(add.8958, broadcast.8959)
  broadcast.8961 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.8960), dimensions={3}
  add.8962 = f32[128,56,56,64]{3,2,1,0} add(add.8947, broadcast.8961)
  convert.8963 = bf16[128,56,56,64]{3,2,1,0} convert(add.8962)
  reverse.8967 = bf16[3,3,64,64]{3,2,1,0} reverse(convert.768), dimensions={0,1}
  convolution.8968 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.8963, reverse.8967), window={size=3x3 pad=1_1x1_1}, dim_labels=b01f_01oi->b01f
  constant.8969 = bf16[] constant(0)
  broadcast.8970 = bf16[128,56,56,64]{3,2,1,0} broadcast(constant.8969), dimensions={}
  select.8971 = bf16[128,56,56,64]{3,2,1,0} select(compare.765, convolution.8968, broadcast.8970)
  convert.8972 = f32[128,56,56,64]{3,2,1,0} convert(select.8971)
  constant.8973 = f32[] constant(0)
  reduce.8978 = f32[64]{0} reduce(convert.8972, constant.8973), dimensions={0,1,2}, to_apply=primitive_computation_add.8974
  broadcast.8979 = f32[64]{0} broadcast(reduce.8978), dimensions={0}
  broadcast.8980 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8979), dimensions={3}
  reshape.8981 = f32[64]{0} reshape(broadcast.8980)
  multiply.8982 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8972, subtract.735)
  constant.8983 = f32[] constant(0)
  reduce.8988 = f32[64]{0} reduce(multiply.8982, constant.8983), dimensions={0,1,2}, to_apply=primitive_computation_add.8984
  broadcast.8989 = f32[64]{0} broadcast(reduce.8988), dimensions={0}
  broadcast.8990 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8989), dimensions={3}
  multiply.8991 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8990, broadcast.747)
  reshape.8992 = f32[64]{0} reshape(multiply.8991)
  constant.8909 = f32[] constant(0)
  reduce.8914 = f32[64]{0} reduce(convert.8908, constant.8909), dimensions={0,1,2}, to_apply=primitive_computation_add.8910
  broadcast.8915 = f32[64]{0} broadcast(reduce.8914), dimensions={0}
  broadcast.8916 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8915), dimensions={3}
  reshape.8917 = f32[64]{0} reshape(broadcast.8916)
  multiply.8927 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8926, broadcast.829)
  reshape.8928 = f32[64]{0} reshape(multiply.8927)
  constant.8845 = f32[] constant(0)
  reduce.8850 = f32[256]{0} reduce(convert.8844, constant.8845), dimensions={0,1,2}, to_apply=primitive_computation_add.8846
  broadcast.8851 = f32[256]{0} broadcast(reduce.8850), dimensions={0}
  broadcast.8852 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8851), dimensions={3}
  reshape.8853 = f32[256]{0} reshape(broadcast.8852)
  multiply.8863 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.8862, broadcast.911)
  reshape.8864 = f32[256]{0} reshape(multiply.8863)
  constant.5599 = f32[] constant(1)
  constant.5600 = f32[] constant(5e-05)
  multiply.5601 = f32[] multiply(constant.5599, constant.5600)
  broadcast.5708 = f32[1,1,64,64]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5002 = f32[] constant(2)
  broadcast.5003 = f32[1,1,64,64]{3,2,1,0} broadcast(constant.5002), dimensions={}
  multiply.5004 = f32[1,1,64,64]{3,2,1,0} multiply(broadcast.5003, parameter.7)
  multiply.5709 = f32[1,1,64,64]{3,2,1,0} multiply(broadcast.5708, multiply.5004)
  multiply.8993 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8990, reshape.746)
  constant.8994 = f32[] constant(0)
  reduce.8999 = f32[64]{0} reduce(multiply.8993, constant.8994), dimensions={0,1,2}, to_apply=primitive_computation_add.8995
  broadcast.9000 = f32[64]{0} broadcast(reduce.8999), dimensions={0}
  constant.743 = f32[] constant(-0.5)
  broadcast.744 = f32[64]{0} broadcast(constant.743), dimensions={}
  constant.740 = f32[] constant(-1.5)
  broadcast.741 = f32[64]{0} broadcast(constant.740), dimensions={}
  power.742 = f32[64]{0} power(add.738, broadcast.741)
  multiply.745 = f32[64]{0} multiply(broadcast.744, power.742)
  multiply.9001 = f32[64]{0} multiply(broadcast.9000, multiply.745)
  broadcast.9004 = f32[64]{0} broadcast(convert.710), dimensions={}
  divide.9005 = f32[64]{0} divide(multiply.9001, broadcast.9004)
  broadcast.9006 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9005), dimensions={3}
  constant.700 = f32[] constant(2)
  broadcast.701 = f32[128,56,56,64]{3,2,1,0} broadcast(constant.700), dimensions={}
  multiply.702 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.701, convert.688)
  multiply.9007 = f32[128,56,56,64]{3,2,1,0} multiply(broadcast.9006, multiply.702)
  reshape.9008 = f32[64]{0} reshape(multiply.748)
  broadcast.9009 = f32[128,56,56,64]{3,2,1,0} broadcast(reshape.9008), dimensions={3}
  multiply.9010 = f32[128,56,56,64]{3,2,1,0} multiply(convert.8972, broadcast.9009)
  add.9011 = f32[128,56,56,64]{3,2,1,0} add(multiply.9007, multiply.9010)
  negate.9002 = f32[64]{0} negate(multiply.9001)
  constant.714 = f32[] constant(2)
  broadcast.715 = f32[64]{0} broadcast(constant.714), dimensions={}
  multiply.716 = f32[64]{0} multiply(broadcast.715, divide.698)
  multiply.9003 = f32[64]{0} multiply(negate.9002, multiply.716)
  constant.9012 = f32[] constant(0)
  reduce.9017 = f32[64]{0} reduce(multiply.9010, constant.9012), dimensions={0,1,2}, to_apply=primitive_computation_add.9013
  broadcast.9018 = f32[64]{0} broadcast(reduce.9017), dimensions={0}
  broadcast.9019 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9018), dimensions={3}
  negate.9020 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.9019)
  reshape.9021 = f32[64]{0} reshape(negate.9020)
  add.9022 = f32[64]{0} add(multiply.9003, reshape.9021)
  broadcast.9023 = f32[64]{0} broadcast(convert.696), dimensions={}
  divide.9024 = f32[64]{0} divide(add.9022, broadcast.9023)
  broadcast.9025 = f32[128,56,56,64]{3,2,1,0} broadcast(divide.9024), dimensions={3}
  add.9026 = f32[128,56,56,64]{3,2,1,0} add(add.9011, broadcast.9025)
  convert.9027 = bf16[128,56,56,64]{3,2,1,0} convert(add.9026)
  convolution.9028 = bf16[1,1,64,64]{3,2,1,0} convolution(reduce-window.685, convert.9027), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.9029 = f32[1,1,64,64]{3,2,1,0} convert(convolution.9028)
  add.9030 = f32[1,1,64,64]{3,2,1,0} add(multiply.5709, convert.9029)
  broadcast.5706 = f32[3,3,64,64]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5012 = f32[] constant(2)
  broadcast.5013 = f32[3,3,64,64]{3,2,1,0} broadcast(constant.5012), dimensions={}
  multiply.5014 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.5013, parameter.8)
  multiply.5707 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.5706, multiply.5014)
  convolution.8964 = bf16[3,3,64,64]{3,2,1,0} convolution(get-tuple-element.762, convert.8963), window={size=56x56 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.8965 = f32[3,3,64,64]{3,2,1,0} convert(convolution.8964)
  add.8966 = f32[3,3,64,64]{3,2,1,0} add(multiply.5707, convert.8965)
  broadcast.5704 = f32[1,1,64,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5022 = f32[] constant(2)
  broadcast.5023 = f32[1,1,64,256]{3,2,1,0} broadcast(constant.5022), dimensions={}
  multiply.5024 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5023, parameter.9)
  multiply.5705 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5704, multiply.5024)
  convolution.8900 = bf16[1,1,64,256]{3,2,1,0} convolution(get-tuple-element.844, convert.8899), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.8901 = f32[1,1,64,256]{3,2,1,0} convert(convolution.8900)
  add.8902 = f32[1,1,64,256]{3,2,1,0} add(multiply.5705, convert.8901)
  broadcast.5702 = f32[1,1,64,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5032 = f32[] constant(2)
  broadcast.5033 = f32[1,1,64,256]{3,2,1,0} broadcast(constant.5032), dimensions={}
  multiply.5034 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5033, parameter.10)
  multiply.5703 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5702, multiply.5034)
  convert.9033 = f32[128,56,56,256]{3,2,1,0} convert(select.8843)
  multiply.9043 = f32[128,56,56,256]{3,2,1,0} multiply(convert.9033, subtract.970)
  constant.9044 = f32[] constant(0)
  reduce.9049 = f32[256]{0} reduce(multiply.9043, constant.9044), dimensions={0,1,2}, to_apply=primitive_computation_add.9045
  broadcast.9050 = f32[256]{0} broadcast(reduce.9049), dimensions={0}
  broadcast.9051 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9050), dimensions={3}
  multiply.9054 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.9051, reshape.981)
  constant.9055 = f32[] constant(0)
  reduce.9060 = f32[256]{0} reduce(multiply.9054, constant.9055), dimensions={0,1,2}, to_apply=primitive_computation_add.9056
  broadcast.9061 = f32[256]{0} broadcast(reduce.9060), dimensions={0}
  constant.978 = f32[] constant(-0.5)
  broadcast.979 = f32[256]{0} broadcast(constant.978), dimensions={}
  constant.975 = f32[] constant(-1.5)
  broadcast.976 = f32[256]{0} broadcast(constant.975), dimensions={}
  power.977 = f32[256]{0} power(add.973, broadcast.976)
  multiply.980 = f32[256]{0} multiply(broadcast.979, power.977)
  multiply.9062 = f32[256]{0} multiply(broadcast.9061, multiply.980)
  broadcast.9065 = f32[256]{0} broadcast(convert.945), dimensions={}
  divide.9066 = f32[256]{0} divide(multiply.9062, broadcast.9065)
  broadcast.9067 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.9066), dimensions={3}
  constant.935 = f32[] constant(2)
  broadcast.936 = f32[128,56,56,256]{3,2,1,0} broadcast(constant.935), dimensions={}
  multiply.937 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.936, convert.923)
  multiply.9068 = f32[128,56,56,256]{3,2,1,0} multiply(broadcast.9067, multiply.937)
  reshape.9069 = f32[256]{0} reshape(multiply.983)
  broadcast.9070 = f32[128,56,56,256]{3,2,1,0} broadcast(reshape.9069), dimensions={3}
  multiply.9071 = f32[128,56,56,256]{3,2,1,0} multiply(convert.9033, broadcast.9070)
  add.9072 = f32[128,56,56,256]{3,2,1,0} add(multiply.9068, multiply.9071)
  negate.9063 = f32[256]{0} negate(multiply.9062)
  constant.949 = f32[] constant(2)
  broadcast.950 = f32[256]{0} broadcast(constant.949), dimensions={}
  multiply.951 = f32[256]{0} multiply(broadcast.950, divide.933)
  multiply.9064 = f32[256]{0} multiply(negate.9063, multiply.951)
  constant.9073 = f32[] constant(0)
  reduce.9078 = f32[256]{0} reduce(multiply.9071, constant.9073), dimensions={0,1,2}, to_apply=primitive_computation_add.9074
  broadcast.9079 = f32[256]{0} broadcast(reduce.9078), dimensions={0}
  broadcast.9080 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9079), dimensions={3}
  negate.9081 = f32[1,1,1,256]{3,2,1,0} negate(broadcast.9080)
  reshape.9082 = f32[256]{0} reshape(negate.9081)
  add.9083 = f32[256]{0} add(multiply.9064, reshape.9082)
  broadcast.9084 = f32[256]{0} broadcast(convert.931), dimensions={}
  divide.9085 = f32[256]{0} divide(add.9083, broadcast.9084)
  broadcast.9086 = f32[128,56,56,256]{3,2,1,0} broadcast(divide.9085), dimensions={3}
  add.9087 = f32[128,56,56,256]{3,2,1,0} add(add.9072, broadcast.9086)
  convert.9088 = bf16[128,56,56,256]{3,2,1,0} convert(add.9087)
  convolution.9089 = bf16[1,1,64,256]{3,2,1,0} convolution(reduce-window.685, convert.9088), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.9090 = f32[1,1,64,256]{3,2,1,0} convert(convolution.9089)
  add.9091 = f32[1,1,64,256]{3,2,1,0} add(multiply.5703, convert.9090)
  constant.9034 = f32[] constant(0)
  reduce.9039 = f32[256]{0} reduce(convert.9033, constant.9034), dimensions={0,1,2}, to_apply=primitive_computation_add.9035
  broadcast.9040 = f32[256]{0} broadcast(reduce.9039), dimensions={0}
  broadcast.9041 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.9040), dimensions={3}
  reshape.9042 = f32[256]{0} reshape(broadcast.9041)
  multiply.9052 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.9051, broadcast.982)
  reshape.9053 = f32[256]{0} reshape(multiply.9052)
  constant.8780 = f32[] constant(0)
  reduce.8785 = f32[64]{0} reduce(convert.8779, constant.8780), dimensions={0,1,2}, to_apply=primitive_computation_add.8781
  broadcast.8786 = f32[64]{0} broadcast(reduce.8785), dimensions={0}
  broadcast.8787 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8786), dimensions={3}
  reshape.8788 = f32[64]{0} reshape(broadcast.8787)
  multiply.8798 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8797, broadcast.1065)
  reshape.8799 = f32[64]{0} reshape(multiply.8798)
  constant.8716 = f32[] constant(0)
  reduce.8721 = f32[64]{0} reduce(convert.8715, constant.8716), dimensions={0,1,2}, to_apply=primitive_computation_add.8717
  broadcast.8722 = f32[64]{0} broadcast(reduce.8721), dimensions={0}
  broadcast.8723 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8722), dimensions={3}
  reshape.8724 = f32[64]{0} reshape(broadcast.8723)
  multiply.8734 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8733, broadcast.1147)
  reshape.8735 = f32[64]{0} reshape(multiply.8734)
  constant.8652 = f32[] constant(0)
  reduce.8657 = f32[256]{0} reduce(convert.8651, constant.8652), dimensions={0,1,2}, to_apply=primitive_computation_add.8653
  broadcast.8658 = f32[256]{0} broadcast(reduce.8657), dimensions={0}
  broadcast.8659 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8658), dimensions={3}
  reshape.8660 = f32[256]{0} reshape(broadcast.8659)
  multiply.8670 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.8669, broadcast.1229)
  reshape.8671 = f32[256]{0} reshape(multiply.8670)
  broadcast.5700 = f32[1,1,256,64]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5042 = f32[] constant(2)
  broadcast.5043 = f32[1,1,256,64]{3,2,1,0} broadcast(constant.5042), dimensions={}
  multiply.5044 = f32[1,1,256,64]{3,2,1,0} multiply(broadcast.5043, parameter.19)
  multiply.5701 = f32[1,1,256,64]{3,2,1,0} multiply(broadcast.5700, multiply.5044)
  convolution.8835 = bf16[1,1,256,64]{3,2,1,0} convolution(get-tuple-element.998, convert.8834), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.8836 = f32[1,1,256,64]{3,2,1,0} convert(convolution.8835)
  add.8837 = f32[1,1,256,64]{3,2,1,0} add(multiply.5701, convert.8836)
  broadcast.5698 = f32[3,3,64,64]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5052 = f32[] constant(2)
  broadcast.5053 = f32[3,3,64,64]{3,2,1,0} broadcast(constant.5052), dimensions={}
  multiply.5054 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.5053, parameter.20)
  multiply.5699 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.5698, multiply.5054)
  convolution.8771 = bf16[3,3,64,64]{3,2,1,0} convolution(get-tuple-element.1080, convert.8770), window={size=56x56 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.8772 = f32[3,3,64,64]{3,2,1,0} convert(convolution.8771)
  add.8773 = f32[3,3,64,64]{3,2,1,0} add(multiply.5699, convert.8772)
  broadcast.5696 = f32[1,1,64,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5062 = f32[] constant(2)
  broadcast.5063 = f32[1,1,64,256]{3,2,1,0} broadcast(constant.5062), dimensions={}
  multiply.5064 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5063, parameter.21)
  multiply.5697 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5696, multiply.5064)
  convolution.8707 = bf16[1,1,64,256]{3,2,1,0} convolution(get-tuple-element.1162, convert.8706), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.8708 = f32[1,1,64,256]{3,2,1,0} convert(convolution.8707)
  add.8709 = f32[1,1,64,256]{3,2,1,0} add(multiply.5697, convert.8708)
  constant.6921 = f32[] constant(0)
  reduce.6926 = f32[256]{0} reduce(convert.6920, constant.6921), dimensions={0,1,2}, to_apply=primitive_computation_add.6922
  broadcast.6927 = f32[256]{0} broadcast(reduce.6926), dimensions={0}
  broadcast.6928 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6927), dimensions={3}
  reshape.6929 = f32[256]{0} reshape(broadcast.6928)
  multiply.6939 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6938, broadcast.3430)
  reshape.6940 = f32[256]{0} reshape(multiply.6939)
  constant.6857 = f32[] constant(0)
  reduce.6862 = f32[256]{0} reduce(convert.6856, constant.6857), dimensions={0,1,2}, to_apply=primitive_computation_add.6858
  broadcast.6863 = f32[256]{0} broadcast(reduce.6862), dimensions={0}
  broadcast.6864 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6863), dimensions={3}
  reshape.6865 = f32[256]{0} reshape(broadcast.6864)
  multiply.6875 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6874, broadcast.3512)
  reshape.6876 = f32[256]{0} reshape(multiply.6875)
  constant.6793 = f32[] constant(0)
  reduce.6798 = f32[1024]{0} reduce(convert.6792, constant.6793), dimensions={0,1,2}, to_apply=primitive_computation_add.6794
  broadcast.6799 = f32[1024]{0} broadcast(reduce.6798), dimensions={0}
  broadcast.6800 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6799), dimensions={3}
  reshape.6801 = f32[1024]{0} reshape(broadcast.6800)
  multiply.6811 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.6810, broadcast.3594)
  reshape.6812 = f32[1024]{0} reshape(multiply.6811)
  broadcast.5694 = f32[1,1,1024,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5072 = f32[] constant(2)
  broadcast.5073 = f32[1,1,1024,256]{3,2,1,0} broadcast(constant.5072), dimensions={}
  multiply.5074 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5073, parameter.28)
  multiply.5695 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5694, multiply.5074)
  convolution.6976 = bf16[1,1,1024,256]{3,2,1,0} convolution(get-tuple-element.3363, convert.6975), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.6977 = f32[1,1,1024,256]{3,2,1,0} convert(convolution.6976)
  add.6978 = f32[1,1,1024,256]{3,2,1,0} add(multiply.5695, convert.6977)
  broadcast.5692 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5082 = f32[] constant(2)
  broadcast.5083 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5082), dimensions={}
  multiply.5084 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5083, parameter.29)
  multiply.5693 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5692, multiply.5084)
  convolution.6912 = bf16[3,3,256,256]{3,2,1,0} convolution(get-tuple-element.3445, convert.6911), window={size=14x14 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.6913 = f32[3,3,256,256]{3,2,1,0} convert(convolution.6912)
  add.6914 = f32[3,3,256,256]{3,2,1,0} add(multiply.5693, convert.6913)
  broadcast.5690 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5092 = f32[] constant(2)
  broadcast.5093 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5092), dimensions={}
  multiply.5094 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5093, parameter.30)
  multiply.5691 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5690, multiply.5094)
  convolution.6848 = bf16[1,1,256,1024]{3,2,1,0} convolution(get-tuple-element.3527, convert.6847), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.6849 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.6848)
  add.6850 = f32[1,1,256,1024]{3,2,1,0} add(multiply.5691, convert.6849)
  constant.6728 = f32[] constant(0)
  reduce.6733 = f32[256]{0} reduce(convert.6727, constant.6728), dimensions={0,1,2}, to_apply=primitive_computation_add.6729
  broadcast.6734 = f32[256]{0} broadcast(reduce.6733), dimensions={0}
  broadcast.6735 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6734), dimensions={3}
  reshape.6736 = f32[256]{0} reshape(broadcast.6735)
  multiply.6746 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6745, broadcast.3677)
  reshape.6747 = f32[256]{0} reshape(multiply.6746)
  constant.6664 = f32[] constant(0)
  reduce.6669 = f32[256]{0} reduce(convert.6663, constant.6664), dimensions={0,1,2}, to_apply=primitive_computation_add.6665
  broadcast.6670 = f32[256]{0} broadcast(reduce.6669), dimensions={0}
  broadcast.6671 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6670), dimensions={3}
  reshape.6672 = f32[256]{0} reshape(broadcast.6671)
  multiply.6682 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6681, broadcast.3759)
  reshape.6683 = f32[256]{0} reshape(multiply.6682)
  constant.6600 = f32[] constant(0)
  reduce.6605 = f32[1024]{0} reduce(convert.6599, constant.6600), dimensions={0,1,2}, to_apply=primitive_computation_add.6601
  broadcast.6606 = f32[1024]{0} broadcast(reduce.6605), dimensions={0}
  broadcast.6607 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6606), dimensions={3}
  reshape.6608 = f32[1024]{0} reshape(broadcast.6607)
  multiply.6618 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.6617, broadcast.3841)
  reshape.6619 = f32[1024]{0} reshape(multiply.6618)
  broadcast.5688 = f32[1,1,1024,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5102 = f32[] constant(2)
  broadcast.5103 = f32[1,1,1024,256]{3,2,1,0} broadcast(constant.5102), dimensions={}
  multiply.5104 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5103, parameter.37)
  multiply.5689 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5688, multiply.5104)
  convolution.6783 = bf16[1,1,1024,256]{3,2,1,0} convolution(get-tuple-element.3610, convert.6782), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.6784 = f32[1,1,1024,256]{3,2,1,0} convert(convolution.6783)
  add.6785 = f32[1,1,1024,256]{3,2,1,0} add(multiply.5689, convert.6784)
  broadcast.5686 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5112 = f32[] constant(2)
  broadcast.5113 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5112), dimensions={}
  multiply.5114 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5113, parameter.38)
  multiply.5687 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5686, multiply.5114)
  convolution.6719 = bf16[3,3,256,256]{3,2,1,0} convolution(get-tuple-element.3692, convert.6718), window={size=14x14 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.6720 = f32[3,3,256,256]{3,2,1,0} convert(convolution.6719)
  add.6721 = f32[3,3,256,256]{3,2,1,0} add(multiply.5687, convert.6720)
  broadcast.5684 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5122 = f32[] constant(2)
  broadcast.5123 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5122), dimensions={}
  multiply.5124 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5123, parameter.39)
  multiply.5685 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5684, multiply.5124)
  convolution.6655 = bf16[1,1,256,1024]{3,2,1,0} convolution(get-tuple-element.3774, convert.6654), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.6656 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.6655)
  add.6657 = f32[1,1,256,1024]{3,2,1,0} add(multiply.5685, convert.6656)
  constant.6535 = f32[] constant(0)
  reduce.6540 = f32[256]{0} reduce(convert.6534, constant.6535), dimensions={0,1,2}, to_apply=primitive_computation_add.6536
  broadcast.6541 = f32[256]{0} broadcast(reduce.6540), dimensions={0}
  broadcast.6542 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6541), dimensions={3}
  reshape.6543 = f32[256]{0} reshape(broadcast.6542)
  multiply.6553 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6552, broadcast.3924)
  reshape.6554 = f32[256]{0} reshape(multiply.6553)
  constant.6471 = f32[] constant(0)
  reduce.6476 = f32[256]{0} reduce(convert.6470, constant.6471), dimensions={0,1,2}, to_apply=primitive_computation_add.6472
  broadcast.6477 = f32[256]{0} broadcast(reduce.6476), dimensions={0}
  broadcast.6478 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.6477), dimensions={3}
  reshape.6479 = f32[256]{0} reshape(broadcast.6478)
  multiply.6489 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.6488, broadcast.4006)
  reshape.6490 = f32[256]{0} reshape(multiply.6489)
  constant.6407 = f32[] constant(0)
  reduce.6412 = f32[1024]{0} reduce(convert.6406, constant.6407), dimensions={0,1,2}, to_apply=primitive_computation_add.6408
  broadcast.6413 = f32[1024]{0} broadcast(reduce.6412), dimensions={0}
  broadcast.6414 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6413), dimensions={3}
  reshape.6415 = f32[1024]{0} reshape(broadcast.6414)
  multiply.6425 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.6424, broadcast.4088)
  reshape.6426 = f32[1024]{0} reshape(multiply.6425)
  broadcast.5682 = f32[1,1,1024,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5132 = f32[] constant(2)
  broadcast.5133 = f32[1,1,1024,256]{3,2,1,0} broadcast(constant.5132), dimensions={}
  multiply.5134 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5133, parameter.46)
  multiply.5683 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5682, multiply.5134)
  convolution.6590 = bf16[1,1,1024,256]{3,2,1,0} convolution(get-tuple-element.3857, convert.6589), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.6591 = f32[1,1,1024,256]{3,2,1,0} convert(convolution.6590)
  add.6592 = f32[1,1,1024,256]{3,2,1,0} add(multiply.5683, convert.6591)
  broadcast.5680 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5142 = f32[] constant(2)
  broadcast.5143 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5142), dimensions={}
  multiply.5144 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5143, parameter.47)
  multiply.5681 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5680, multiply.5144)
  convolution.6526 = bf16[3,3,256,256]{3,2,1,0} convolution(get-tuple-element.3939, convert.6525), window={size=14x14 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.6527 = f32[3,3,256,256]{3,2,1,0} convert(convolution.6526)
  add.6528 = f32[3,3,256,256]{3,2,1,0} add(multiply.5681, convert.6527)
  broadcast.5678 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5152 = f32[] constant(2)
  broadcast.5153 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5152), dimensions={}
  multiply.5154 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5153, parameter.48)
  multiply.5679 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5678, multiply.5154)
  convolution.6462 = bf16[1,1,256,1024]{3,2,1,0} convolution(get-tuple-element.4021, convert.6461), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.6463 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.6462)
  add.6464 = f32[1,1,256,1024]{3,2,1,0} add(multiply.5679, convert.6463)
  constant.6281 = f32[] constant(0)
  reduce.6286 = f32[512]{0} reduce(convert.6280, constant.6281), dimensions={0,1,2}, to_apply=primitive_computation_add.6282
  broadcast.6287 = f32[512]{0} broadcast(reduce.6286), dimensions={0}
  broadcast.6288 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6287), dimensions={3}
  reshape.6289 = f32[512]{0} reshape(broadcast.6288)
  multiply.6299 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6298, broadcast.4171)
  reshape.6300 = f32[512]{0} reshape(multiply.6299)
  constant.6217 = f32[] constant(0)
  reduce.6222 = f32[512]{0} reduce(convert.6216, constant.6217), dimensions={0,1,2}, to_apply=primitive_computation_add.6218
  broadcast.6223 = f32[512]{0} broadcast(reduce.6222), dimensions={0}
  broadcast.6224 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6223), dimensions={3}
  reshape.6225 = f32[512]{0} reshape(broadcast.6224)
  multiply.6235 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6234, broadcast.4253)
  reshape.6236 = f32[512]{0} reshape(multiply.6235)
  constant.6153 = f32[] constant(0)
  reduce.6158 = f32[2048]{0} reduce(convert.6152, constant.6153), dimensions={0,1,2}, to_apply=primitive_computation_add.6154
  broadcast.6159 = f32[2048]{0} broadcast(reduce.6158), dimensions={0}
  broadcast.6160 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6159), dimensions={3}
  reshape.6161 = f32[2048]{0} reshape(broadcast.6160)
  multiply.6171 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6170, broadcast.4335)
  reshape.6172 = f32[2048]{0} reshape(multiply.6171)
  broadcast.5676 = f32[1,1,1024,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5162 = f32[] constant(2)
  broadcast.5163 = f32[1,1,1024,512]{3,2,1,0} broadcast(constant.5162), dimensions={}
  multiply.5164 = f32[1,1,1024,512]{3,2,1,0} multiply(broadcast.5163, parameter.55)
  multiply.5677 = f32[1,1,1024,512]{3,2,1,0} multiply(broadcast.5676, multiply.5164)
  convolution.6336 = bf16[1,1,1024,512]{3,2,1,0} convolution(get-tuple-element.4104, convert.6335), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.6337 = f32[1,1,1024,512]{3,2,1,0} convert(convolution.6336)
  add.6338 = f32[1,1,1024,512]{3,2,1,0} add(multiply.5677, convert.6337)
  broadcast.5674 = f32[3,3,512,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5172 = f32[] constant(2)
  broadcast.5173 = f32[3,3,512,512]{3,2,1,0} broadcast(constant.5172), dimensions={}
  multiply.5174 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.5173, parameter.56)
  multiply.5675 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.5674, multiply.5174)
  convolution.6272 = bf16[3,3,512,512]{3,2,1,0} convolution(get-tuple-element.4186, convert.6271), window={size=7x7 pad=0_1x0_1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.6273 = f32[3,3,512,512]{3,2,1,0} convert(convolution.6272)
  add.6274 = f32[3,3,512,512]{3,2,1,0} add(multiply.5675, convert.6273)
  broadcast.5672 = f32[1,1,512,2048]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5182 = f32[] constant(2)
  broadcast.5183 = f32[1,1,512,2048]{3,2,1,0} broadcast(constant.5182), dimensions={}
  multiply.5184 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.5183, parameter.57)
  multiply.5673 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.5672, multiply.5184)
  convolution.6208 = bf16[1,1,512,2048]{3,2,1,0} convolution(get-tuple-element.4268, convert.6207), window={size=7x7}, dim_labels=f01b_i01o->01bf
  convert.6209 = f32[1,1,512,2048]{3,2,1,0} convert(convolution.6208)
  add.6210 = f32[1,1,512,2048]{3,2,1,0} add(multiply.5673, convert.6209)
  broadcast.5670 = f32[1,1,1024,2048]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5192 = f32[] constant(2)
  broadcast.5193 = f32[1,1,1024,2048]{3,2,1,0} broadcast(constant.5192), dimensions={}
  multiply.5194 = f32[1,1,1024,2048]{3,2,1,0} multiply(broadcast.5193, parameter.58)
  multiply.5671 = f32[1,1,1024,2048]{3,2,1,0} multiply(broadcast.5670, multiply.5194)
  convolution.6397 = bf16[1,1,1024,2048]{3,2,1,0} convolution(get-tuple-element.4104, convert.6396), window={size=7x7 pad=0_-1x0_-1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.6398 = f32[1,1,1024,2048]{3,2,1,0} convert(convolution.6397)
  add.6399 = f32[1,1,1024,2048]{3,2,1,0} add(multiply.5671, convert.6398)
  constant.6342 = f32[] constant(0)
  reduce.6347 = f32[2048]{0} reduce(convert.6341, constant.6342), dimensions={0,1,2}, to_apply=primitive_computation_add.6343
  broadcast.6348 = f32[2048]{0} broadcast(reduce.6347), dimensions={0}
  broadcast.6349 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.6348), dimensions={3}
  reshape.6350 = f32[2048]{0} reshape(broadcast.6349)
  multiply.6360 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.6359, broadcast.4406)
  reshape.6361 = f32[2048]{0} reshape(multiply.6360)
  constant.6088 = f32[] constant(0)
  reduce.6093 = f32[512]{0} reduce(convert.6087, constant.6088), dimensions={0,1,2}, to_apply=primitive_computation_add.6089
  broadcast.6094 = f32[512]{0} broadcast(reduce.6093), dimensions={0}
  broadcast.6095 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6094), dimensions={3}
  reshape.6096 = f32[512]{0} reshape(broadcast.6095)
  multiply.6106 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6105, broadcast.4489)
  reshape.6107 = f32[512]{0} reshape(multiply.6106)
  constant.6024 = f32[] constant(0)
  reduce.6029 = f32[512]{0} reduce(convert.6023, constant.6024), dimensions={0,1,2}, to_apply=primitive_computation_add.6025
  broadcast.6030 = f32[512]{0} broadcast(reduce.6029), dimensions={0}
  broadcast.6031 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.6030), dimensions={3}
  reshape.6032 = f32[512]{0} reshape(broadcast.6031)
  multiply.6042 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.6041, broadcast.4571)
  reshape.6043 = f32[512]{0} reshape(multiply.6042)
  constant.5960 = f32[] constant(0)
  reduce.5965 = f32[2048]{0} reduce(convert.5959, constant.5960), dimensions={0,1,2}, to_apply=primitive_computation_add.5961
  broadcast.5966 = f32[2048]{0} broadcast(reduce.5965), dimensions={0}
  broadcast.5967 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.5966), dimensions={3}
  reshape.5968 = f32[2048]{0} reshape(broadcast.5967)
  multiply.5978 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.5977, broadcast.4653)
  reshape.5979 = f32[2048]{0} reshape(multiply.5978)
  broadcast.5668 = f32[1,1,2048,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5202 = f32[] constant(2)
  broadcast.5203 = f32[1,1,2048,512]{3,2,1,0} broadcast(constant.5202), dimensions={}
  multiply.5204 = f32[1,1,2048,512]{3,2,1,0} multiply(broadcast.5203, parameter.67)
  multiply.5669 = f32[1,1,2048,512]{3,2,1,0} multiply(broadcast.5668, multiply.5204)
  convolution.6143 = bf16[1,1,2048,512]{3,2,1,0} convolution(get-tuple-element.4422, convert.6142), window={size=7x7}, dim_labels=f01b_i01o->01bf
  convert.6144 = f32[1,1,2048,512]{3,2,1,0} convert(convolution.6143)
  add.6145 = f32[1,1,2048,512]{3,2,1,0} add(multiply.5669, convert.6144)
  broadcast.5666 = f32[3,3,512,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5212 = f32[] constant(2)
  broadcast.5213 = f32[3,3,512,512]{3,2,1,0} broadcast(constant.5212), dimensions={}
  multiply.5214 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.5213, parameter.68)
  multiply.5667 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.5666, multiply.5214)
  convolution.6079 = bf16[3,3,512,512]{3,2,1,0} convolution(get-tuple-element.4504, convert.6078), window={size=7x7 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.6080 = f32[3,3,512,512]{3,2,1,0} convert(convolution.6079)
  add.6081 = f32[3,3,512,512]{3,2,1,0} add(multiply.5667, convert.6080)
  broadcast.5664 = f32[1,1,512,2048]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5222 = f32[] constant(2)
  broadcast.5223 = f32[1,1,512,2048]{3,2,1,0} broadcast(constant.5222), dimensions={}
  multiply.5224 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.5223, parameter.69)
  multiply.5665 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.5664, multiply.5224)
  convolution.6015 = bf16[1,1,512,2048]{3,2,1,0} convolution(get-tuple-element.4586, convert.6014), window={size=7x7}, dim_labels=f01b_i01o->01bf
  convert.6016 = f32[1,1,512,2048]{3,2,1,0} convert(convolution.6015)
  add.6017 = f32[1,1,512,2048]{3,2,1,0} add(multiply.5665, convert.6016)
  constant.5895 = f32[] constant(0)
  reduce.5900 = f32[512]{0} reduce(convert.5894, constant.5895), dimensions={0,1,2}, to_apply=primitive_computation_add.5896
  broadcast.5901 = f32[512]{0} broadcast(reduce.5900), dimensions={0}
  broadcast.5902 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.5901), dimensions={3}
  reshape.5903 = f32[512]{0} reshape(broadcast.5902)
  multiply.5913 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.5912, broadcast.4736)
  reshape.5914 = f32[512]{0} reshape(multiply.5913)
  constant.5831 = f32[] constant(0)
  reduce.5836 = f32[512]{0} reduce(convert.5830, constant.5831), dimensions={0,1,2}, to_apply=primitive_computation_add.5832
  broadcast.5837 = f32[512]{0} broadcast(reduce.5836), dimensions={0}
  broadcast.5838 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.5837), dimensions={3}
  reshape.5839 = f32[512]{0} reshape(broadcast.5838)
  multiply.5849 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.5848, broadcast.4818)
  reshape.5850 = f32[512]{0} reshape(multiply.5849)
  constant.5767 = f32[] constant(0)
  reduce.5772 = f32[2048]{0} reduce(convert.5766, constant.5767), dimensions={0,1,2}, to_apply=primitive_computation_add.5768
  broadcast.5773 = f32[2048]{0} broadcast(reduce.5772), dimensions={0}
  broadcast.5774 = f32[1,1,1,2048]{3,2,1,0} broadcast(broadcast.5773), dimensions={3}
  reshape.5775 = f32[2048]{0} reshape(broadcast.5774)
  multiply.5785 = f32[1,1,1,2048]{3,2,1,0} multiply(broadcast.5784, broadcast.4900)
  reshape.5786 = f32[2048]{0} reshape(multiply.5785)
  broadcast.5662 = f32[1,1,2048,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5232 = f32[] constant(2)
  broadcast.5233 = f32[1,1,2048,512]{3,2,1,0} broadcast(constant.5232), dimensions={}
  multiply.5234 = f32[1,1,2048,512]{3,2,1,0} multiply(broadcast.5233, parameter.76)
  multiply.5663 = f32[1,1,2048,512]{3,2,1,0} multiply(broadcast.5662, multiply.5234)
  convolution.5950 = bf16[1,1,2048,512]{3,2,1,0} convolution(get-tuple-element.4669, convert.5949), window={size=7x7}, dim_labels=f01b_i01o->01bf
  convert.5951 = f32[1,1,2048,512]{3,2,1,0} convert(convolution.5950)
  add.5952 = f32[1,1,2048,512]{3,2,1,0} add(multiply.5663, convert.5951)
  broadcast.5660 = f32[3,3,512,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5242 = f32[] constant(2)
  broadcast.5243 = f32[3,3,512,512]{3,2,1,0} broadcast(constant.5242), dimensions={}
  multiply.5244 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.5243, parameter.77)
  multiply.5661 = f32[3,3,512,512]{3,2,1,0} multiply(broadcast.5660, multiply.5244)
  convolution.5886 = bf16[3,3,512,512]{3,2,1,0} convolution(get-tuple-element.4751, convert.5885), window={size=7x7 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.5887 = f32[3,3,512,512]{3,2,1,0} convert(convolution.5886)
  add.5888 = f32[3,3,512,512]{3,2,1,0} add(multiply.5661, convert.5887)
  broadcast.5658 = f32[1,1,512,2048]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5252 = f32[] constant(2)
  broadcast.5253 = f32[1,1,512,2048]{3,2,1,0} broadcast(constant.5252), dimensions={}
  multiply.5254 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.5253, parameter.78)
  multiply.5659 = f32[1,1,512,2048]{3,2,1,0} multiply(broadcast.5658, multiply.5254)
  convolution.5822 = bf16[1,1,512,2048]{3,2,1,0} convolution(get-tuple-element.4833, convert.5821), window={size=7x7}, dim_labels=f01b_i01o->01bf
  convert.5823 = f32[1,1,512,2048]{3,2,1,0} convert(convolution.5822)
  add.5824 = f32[1,1,512,2048]{3,2,1,0} add(multiply.5659, convert.5823)
  constant.8587 = f32[] constant(0)
  reduce.8592 = f32[64]{0} reduce(convert.8586, constant.8587), dimensions={0,1,2}, to_apply=primitive_computation_add.8588
  broadcast.8593 = f32[64]{0} broadcast(reduce.8592), dimensions={0}
  broadcast.8594 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8593), dimensions={3}
  reshape.8595 = f32[64]{0} reshape(broadcast.8594)
  multiply.8605 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8604, broadcast.1312)
  reshape.8606 = f32[64]{0} reshape(multiply.8605)
  constant.8523 = f32[] constant(0)
  reduce.8528 = f32[64]{0} reduce(convert.8522, constant.8523), dimensions={0,1,2}, to_apply=primitive_computation_add.8524
  broadcast.8529 = f32[64]{0} broadcast(reduce.8528), dimensions={0}
  broadcast.8530 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.8529), dimensions={3}
  reshape.8531 = f32[64]{0} reshape(broadcast.8530)
  multiply.8541 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.8540, broadcast.1394)
  reshape.8542 = f32[64]{0} reshape(multiply.8541)
  constant.8459 = f32[] constant(0)
  reduce.8464 = f32[256]{0} reduce(convert.8458, constant.8459), dimensions={0,1,2}, to_apply=primitive_computation_add.8460
  broadcast.8465 = f32[256]{0} broadcast(reduce.8464), dimensions={0}
  broadcast.8466 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.8465), dimensions={3}
  reshape.8467 = f32[256]{0} reshape(broadcast.8466)
  multiply.8477 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.8476, broadcast.1476)
  reshape.8478 = f32[256]{0} reshape(multiply.8477)
  broadcast.5656 = f32[1,1,256,64]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5262 = f32[] constant(2)
  broadcast.5263 = f32[1,1,256,64]{3,2,1,0} broadcast(constant.5262), dimensions={}
  multiply.5264 = f32[1,1,256,64]{3,2,1,0} multiply(broadcast.5263, parameter.85)
  multiply.5657 = f32[1,1,256,64]{3,2,1,0} multiply(broadcast.5656, multiply.5264)
  convolution.8642 = bf16[1,1,256,64]{3,2,1,0} convolution(get-tuple-element.1245, convert.8641), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.8643 = f32[1,1,256,64]{3,2,1,0} convert(convolution.8642)
  add.8644 = f32[1,1,256,64]{3,2,1,0} add(multiply.5657, convert.8643)
  broadcast.5654 = f32[3,3,64,64]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5272 = f32[] constant(2)
  broadcast.5273 = f32[3,3,64,64]{3,2,1,0} broadcast(constant.5272), dimensions={}
  multiply.5274 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.5273, parameter.86)
  multiply.5655 = f32[3,3,64,64]{3,2,1,0} multiply(broadcast.5654, multiply.5274)
  convolution.8578 = bf16[3,3,64,64]{3,2,1,0} convolution(get-tuple-element.1327, convert.8577), window={size=56x56 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.8579 = f32[3,3,64,64]{3,2,1,0} convert(convolution.8578)
  add.8580 = f32[3,3,64,64]{3,2,1,0} add(multiply.5655, convert.8579)
  broadcast.5652 = f32[1,1,64,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5282 = f32[] constant(2)
  broadcast.5283 = f32[1,1,64,256]{3,2,1,0} broadcast(constant.5282), dimensions={}
  multiply.5284 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5283, parameter.87)
  multiply.5653 = f32[1,1,64,256]{3,2,1,0} multiply(broadcast.5652, multiply.5284)
  convolution.8514 = bf16[1,1,64,256]{3,2,1,0} convolution(get-tuple-element.1409, convert.8513), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.8515 = f32[1,1,64,256]{3,2,1,0} convert(convolution.8514)
  add.8516 = f32[1,1,64,256]{3,2,1,0} add(multiply.5653, convert.8515)
  constant.8333 = f32[] constant(0)
  reduce.8338 = f32[128]{0} reduce(convert.8332, constant.8333), dimensions={0,1,2}, to_apply=primitive_computation_add.8334
  broadcast.8339 = f32[128]{0} broadcast(reduce.8338), dimensions={0}
  broadcast.8340 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8339), dimensions={3}
  reshape.8341 = f32[128]{0} reshape(broadcast.8340)
  multiply.8351 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8350, broadcast.1559)
  reshape.8352 = f32[128]{0} reshape(multiply.8351)
  constant.8269 = f32[] constant(0)
  reduce.8274 = f32[128]{0} reduce(convert.8268, constant.8269), dimensions={0,1,2}, to_apply=primitive_computation_add.8270
  broadcast.8275 = f32[128]{0} broadcast(reduce.8274), dimensions={0}
  broadcast.8276 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8275), dimensions={3}
  reshape.8277 = f32[128]{0} reshape(broadcast.8276)
  multiply.8287 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8286, broadcast.1641)
  reshape.8288 = f32[128]{0} reshape(multiply.8287)
  constant.8205 = f32[] constant(0)
  reduce.8210 = f32[512]{0} reduce(convert.8204, constant.8205), dimensions={0,1,2}, to_apply=primitive_computation_add.8206
  broadcast.8211 = f32[512]{0} broadcast(reduce.8210), dimensions={0}
  broadcast.8212 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8211), dimensions={3}
  reshape.8213 = f32[512]{0} reshape(broadcast.8212)
  multiply.8223 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8222, broadcast.1723)
  reshape.8224 = f32[512]{0} reshape(multiply.8223)
  broadcast.5650 = f32[1,1,256,128]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5292 = f32[] constant(2)
  broadcast.5293 = f32[1,1,256,128]{3,2,1,0} broadcast(constant.5292), dimensions={}
  multiply.5294 = f32[1,1,256,128]{3,2,1,0} multiply(broadcast.5293, parameter.94)
  multiply.5651 = f32[1,1,256,128]{3,2,1,0} multiply(broadcast.5650, multiply.5294)
  convolution.8388 = bf16[1,1,256,128]{3,2,1,0} convolution(get-tuple-element.1492, convert.8387), window={size=56x56}, dim_labels=f01b_i01o->01bf
  convert.8389 = f32[1,1,256,128]{3,2,1,0} convert(convolution.8388)
  add.8390 = f32[1,1,256,128]{3,2,1,0} add(multiply.5651, convert.8389)
  broadcast.5648 = f32[3,3,128,128]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5302 = f32[] constant(2)
  broadcast.5303 = f32[3,3,128,128]{3,2,1,0} broadcast(constant.5302), dimensions={}
  multiply.5304 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5303, parameter.95)
  multiply.5649 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5648, multiply.5304)
  convolution.8324 = bf16[3,3,128,128]{3,2,1,0} convolution(get-tuple-element.1574, convert.8323), window={size=28x28 pad=0_1x0_1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.8325 = f32[3,3,128,128]{3,2,1,0} convert(convolution.8324)
  add.8326 = f32[3,3,128,128]{3,2,1,0} add(multiply.5649, convert.8325)
  broadcast.5646 = f32[1,1,128,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5312 = f32[] constant(2)
  broadcast.5313 = f32[1,1,128,512]{3,2,1,0} broadcast(constant.5312), dimensions={}
  multiply.5314 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5313, parameter.96)
  multiply.5647 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5646, multiply.5314)
  convolution.8260 = bf16[1,1,128,512]{3,2,1,0} convolution(get-tuple-element.1656, convert.8259), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8261 = f32[1,1,128,512]{3,2,1,0} convert(convolution.8260)
  add.8262 = f32[1,1,128,512]{3,2,1,0} add(multiply.5647, convert.8261)
  broadcast.5644 = f32[1,1,256,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5322 = f32[] constant(2)
  broadcast.5323 = f32[1,1,256,512]{3,2,1,0} broadcast(constant.5322), dimensions={}
  multiply.5324 = f32[1,1,256,512]{3,2,1,0} multiply(broadcast.5323, parameter.97)
  multiply.5645 = f32[1,1,256,512]{3,2,1,0} multiply(broadcast.5644, multiply.5324)
  convolution.8449 = bf16[1,1,256,512]{3,2,1,0} convolution(get-tuple-element.1492, convert.8448), window={size=28x28 pad=0_-1x0_-1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.8450 = f32[1,1,256,512]{3,2,1,0} convert(convolution.8449)
  add.8451 = f32[1,1,256,512]{3,2,1,0} add(multiply.5645, convert.8450)
  constant.8394 = f32[] constant(0)
  reduce.8399 = f32[512]{0} reduce(convert.8393, constant.8394), dimensions={0,1,2}, to_apply=primitive_computation_add.8395
  broadcast.8400 = f32[512]{0} broadcast(reduce.8399), dimensions={0}
  broadcast.8401 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8400), dimensions={3}
  reshape.8402 = f32[512]{0} reshape(broadcast.8401)
  multiply.8412 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8411, broadcast.1794)
  reshape.8413 = f32[512]{0} reshape(multiply.8412)
  constant.8140 = f32[] constant(0)
  reduce.8145 = f32[128]{0} reduce(convert.8139, constant.8140), dimensions={0,1,2}, to_apply=primitive_computation_add.8141
  broadcast.8146 = f32[128]{0} broadcast(reduce.8145), dimensions={0}
  broadcast.8147 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8146), dimensions={3}
  reshape.8148 = f32[128]{0} reshape(broadcast.8147)
  multiply.8158 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8157, broadcast.1877)
  reshape.8159 = f32[128]{0} reshape(multiply.8158)
  constant.8076 = f32[] constant(0)
  reduce.8081 = f32[128]{0} reduce(convert.8075, constant.8076), dimensions={0,1,2}, to_apply=primitive_computation_add.8077
  broadcast.8082 = f32[128]{0} broadcast(reduce.8081), dimensions={0}
  broadcast.8083 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.8082), dimensions={3}
  reshape.8084 = f32[128]{0} reshape(broadcast.8083)
  multiply.8094 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.8093, broadcast.1959)
  reshape.8095 = f32[128]{0} reshape(multiply.8094)
  constant.8012 = f32[] constant(0)
  reduce.8017 = f32[512]{0} reduce(convert.8011, constant.8012), dimensions={0,1,2}, to_apply=primitive_computation_add.8013
  broadcast.8018 = f32[512]{0} broadcast(reduce.8017), dimensions={0}
  broadcast.8019 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.8018), dimensions={3}
  reshape.8020 = f32[512]{0} reshape(broadcast.8019)
  multiply.8030 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.8029, broadcast.2041)
  reshape.8031 = f32[512]{0} reshape(multiply.8030)
  broadcast.5642 = f32[1,1,512,128]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5332 = f32[] constant(2)
  broadcast.5333 = f32[1,1,512,128]{3,2,1,0} broadcast(constant.5332), dimensions={}
  multiply.5334 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.5333, parameter.106)
  multiply.5643 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.5642, multiply.5334)
  convolution.8195 = bf16[1,1,512,128]{3,2,1,0} convolution(get-tuple-element.1810, convert.8194), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8196 = f32[1,1,512,128]{3,2,1,0} convert(convolution.8195)
  add.8197 = f32[1,1,512,128]{3,2,1,0} add(multiply.5643, convert.8196)
  broadcast.5640 = f32[3,3,128,128]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5342 = f32[] constant(2)
  broadcast.5343 = f32[3,3,128,128]{3,2,1,0} broadcast(constant.5342), dimensions={}
  multiply.5344 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5343, parameter.107)
  multiply.5641 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5640, multiply.5344)
  convolution.8131 = bf16[3,3,128,128]{3,2,1,0} convolution(get-tuple-element.1892, convert.8130), window={size=28x28 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.8132 = f32[3,3,128,128]{3,2,1,0} convert(convolution.8131)
  add.8133 = f32[3,3,128,128]{3,2,1,0} add(multiply.5641, convert.8132)
  broadcast.5638 = f32[1,1,128,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5352 = f32[] constant(2)
  broadcast.5353 = f32[1,1,128,512]{3,2,1,0} broadcast(constant.5352), dimensions={}
  multiply.5354 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5353, parameter.108)
  multiply.5639 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5638, multiply.5354)
  convolution.8067 = bf16[1,1,128,512]{3,2,1,0} convolution(get-tuple-element.1974, convert.8066), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8068 = f32[1,1,128,512]{3,2,1,0} convert(convolution.8067)
  add.8069 = f32[1,1,128,512]{3,2,1,0} add(multiply.5639, convert.8068)
  constant.7947 = f32[] constant(0)
  reduce.7952 = f32[128]{0} reduce(convert.7946, constant.7947), dimensions={0,1,2}, to_apply=primitive_computation_add.7948
  broadcast.7953 = f32[128]{0} broadcast(reduce.7952), dimensions={0}
  broadcast.7954 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7953), dimensions={3}
  reshape.7955 = f32[128]{0} reshape(broadcast.7954)
  multiply.7965 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.7964, broadcast.2124)
  reshape.7966 = f32[128]{0} reshape(multiply.7965)
  constant.7883 = f32[] constant(0)
  reduce.7888 = f32[128]{0} reduce(convert.7882, constant.7883), dimensions={0,1,2}, to_apply=primitive_computation_add.7884
  broadcast.7889 = f32[128]{0} broadcast(reduce.7888), dimensions={0}
  broadcast.7890 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7889), dimensions={3}
  reshape.7891 = f32[128]{0} reshape(broadcast.7890)
  multiply.7901 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.7900, broadcast.2206)
  reshape.7902 = f32[128]{0} reshape(multiply.7901)
  constant.7819 = f32[] constant(0)
  reduce.7824 = f32[512]{0} reduce(convert.7818, constant.7819), dimensions={0,1,2}, to_apply=primitive_computation_add.7820
  broadcast.7825 = f32[512]{0} broadcast(reduce.7824), dimensions={0}
  broadcast.7826 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.7825), dimensions={3}
  reshape.7827 = f32[512]{0} reshape(broadcast.7826)
  multiply.7837 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.7836, broadcast.2288)
  reshape.7838 = f32[512]{0} reshape(multiply.7837)
  broadcast.5636 = f32[1,1,512,128]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5362 = f32[] constant(2)
  broadcast.5363 = f32[1,1,512,128]{3,2,1,0} broadcast(constant.5362), dimensions={}
  multiply.5364 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.5363, parameter.115)
  multiply.5637 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.5636, multiply.5364)
  convolution.8002 = bf16[1,1,512,128]{3,2,1,0} convolution(get-tuple-element.2057, convert.8001), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.8003 = f32[1,1,512,128]{3,2,1,0} convert(convolution.8002)
  add.8004 = f32[1,1,512,128]{3,2,1,0} add(multiply.5637, convert.8003)
  broadcast.5634 = f32[3,3,128,128]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5372 = f32[] constant(2)
  broadcast.5373 = f32[3,3,128,128]{3,2,1,0} broadcast(constant.5372), dimensions={}
  multiply.5374 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5373, parameter.116)
  multiply.5635 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5634, multiply.5374)
  convolution.7938 = bf16[3,3,128,128]{3,2,1,0} convolution(get-tuple-element.2139, convert.7937), window={size=28x28 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.7939 = f32[3,3,128,128]{3,2,1,0} convert(convolution.7938)
  add.7940 = f32[3,3,128,128]{3,2,1,0} add(multiply.5635, convert.7939)
  broadcast.5632 = f32[1,1,128,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5382 = f32[] constant(2)
  broadcast.5383 = f32[1,1,128,512]{3,2,1,0} broadcast(constant.5382), dimensions={}
  multiply.5384 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5383, parameter.117)
  multiply.5633 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5632, multiply.5384)
  convolution.7874 = bf16[1,1,128,512]{3,2,1,0} convolution(get-tuple-element.2221, convert.7873), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.7875 = f32[1,1,128,512]{3,2,1,0} convert(convolution.7874)
  add.7876 = f32[1,1,128,512]{3,2,1,0} add(multiply.5633, convert.7875)
  constant.7754 = f32[] constant(0)
  reduce.7759 = f32[128]{0} reduce(convert.7753, constant.7754), dimensions={0,1,2}, to_apply=primitive_computation_add.7755
  broadcast.7760 = f32[128]{0} broadcast(reduce.7759), dimensions={0}
  broadcast.7761 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7760), dimensions={3}
  reshape.7762 = f32[128]{0} reshape(broadcast.7761)
  multiply.7772 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.7771, broadcast.2371)
  reshape.7773 = f32[128]{0} reshape(multiply.7772)
  constant.7690 = f32[] constant(0)
  reduce.7695 = f32[128]{0} reduce(convert.7689, constant.7690), dimensions={0,1,2}, to_apply=primitive_computation_add.7691
  broadcast.7696 = f32[128]{0} broadcast(reduce.7695), dimensions={0}
  broadcast.7697 = f32[1,1,1,128]{3,2,1,0} broadcast(broadcast.7696), dimensions={3}
  reshape.7698 = f32[128]{0} reshape(broadcast.7697)
  multiply.7708 = f32[1,1,1,128]{3,2,1,0} multiply(broadcast.7707, broadcast.2453)
  reshape.7709 = f32[128]{0} reshape(multiply.7708)
  constant.7626 = f32[] constant(0)
  reduce.7631 = f32[512]{0} reduce(convert.7625, constant.7626), dimensions={0,1,2}, to_apply=primitive_computation_add.7627
  broadcast.7632 = f32[512]{0} broadcast(reduce.7631), dimensions={0}
  broadcast.7633 = f32[1,1,1,512]{3,2,1,0} broadcast(broadcast.7632), dimensions={3}
  reshape.7634 = f32[512]{0} reshape(broadcast.7633)
  multiply.7644 = f32[1,1,1,512]{3,2,1,0} multiply(broadcast.7643, broadcast.2535)
  reshape.7645 = f32[512]{0} reshape(multiply.7644)
  broadcast.5630 = f32[1,1,512,128]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5392 = f32[] constant(2)
  broadcast.5393 = f32[1,1,512,128]{3,2,1,0} broadcast(constant.5392), dimensions={}
  multiply.5394 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.5393, parameter.124)
  multiply.5631 = f32[1,1,512,128]{3,2,1,0} multiply(broadcast.5630, multiply.5394)
  convolution.7809 = bf16[1,1,512,128]{3,2,1,0} convolution(get-tuple-element.2304, convert.7808), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.7810 = f32[1,1,512,128]{3,2,1,0} convert(convolution.7809)
  add.7811 = f32[1,1,512,128]{3,2,1,0} add(multiply.5631, convert.7810)
  broadcast.5628 = f32[3,3,128,128]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5402 = f32[] constant(2)
  broadcast.5403 = f32[3,3,128,128]{3,2,1,0} broadcast(constant.5402), dimensions={}
  multiply.5404 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5403, parameter.125)
  multiply.5629 = f32[3,3,128,128]{3,2,1,0} multiply(broadcast.5628, multiply.5404)
  convolution.7745 = bf16[3,3,128,128]{3,2,1,0} convolution(get-tuple-element.2386, convert.7744), window={size=28x28 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.7746 = f32[3,3,128,128]{3,2,1,0} convert(convolution.7745)
  add.7747 = f32[3,3,128,128]{3,2,1,0} add(multiply.5629, convert.7746)
  broadcast.5626 = f32[1,1,128,512]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5412 = f32[] constant(2)
  broadcast.5413 = f32[1,1,128,512]{3,2,1,0} broadcast(constant.5412), dimensions={}
  multiply.5414 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5413, parameter.126)
  multiply.5627 = f32[1,1,128,512]{3,2,1,0} multiply(broadcast.5626, multiply.5414)
  convolution.7681 = bf16[1,1,128,512]{3,2,1,0} convolution(get-tuple-element.2468, convert.7680), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.7682 = f32[1,1,128,512]{3,2,1,0} convert(convolution.7681)
  add.7683 = f32[1,1,128,512]{3,2,1,0} add(multiply.5627, convert.7682)
  constant.7500 = f32[] constant(0)
  reduce.7505 = f32[256]{0} reduce(convert.7499, constant.7500), dimensions={0,1,2}, to_apply=primitive_computation_add.7501
  broadcast.7506 = f32[256]{0} broadcast(reduce.7505), dimensions={0}
  broadcast.7507 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7506), dimensions={3}
  reshape.7508 = f32[256]{0} reshape(broadcast.7507)
  multiply.7518 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7517, broadcast.2618)
  reshape.7519 = f32[256]{0} reshape(multiply.7518)
  constant.7436 = f32[] constant(0)
  reduce.7441 = f32[256]{0} reduce(convert.7435, constant.7436), dimensions={0,1,2}, to_apply=primitive_computation_add.7437
  broadcast.7442 = f32[256]{0} broadcast(reduce.7441), dimensions={0}
  broadcast.7443 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7442), dimensions={3}
  reshape.7444 = f32[256]{0} reshape(broadcast.7443)
  multiply.7454 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7453, broadcast.2700)
  reshape.7455 = f32[256]{0} reshape(multiply.7454)
  constant.7372 = f32[] constant(0)
  reduce.7377 = f32[1024]{0} reduce(convert.7371, constant.7372), dimensions={0,1,2}, to_apply=primitive_computation_add.7373
  broadcast.7378 = f32[1024]{0} broadcast(reduce.7377), dimensions={0}
  broadcast.7379 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7378), dimensions={3}
  reshape.7380 = f32[1024]{0} reshape(broadcast.7379)
  multiply.7390 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7389, broadcast.2782)
  reshape.7391 = f32[1024]{0} reshape(multiply.7390)
  broadcast.5624 = f32[1,1,512,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5422 = f32[] constant(2)
  broadcast.5423 = f32[1,1,512,256]{3,2,1,0} broadcast(constant.5422), dimensions={}
  multiply.5424 = f32[1,1,512,256]{3,2,1,0} multiply(broadcast.5423, parameter.133)
  multiply.5625 = f32[1,1,512,256]{3,2,1,0} multiply(broadcast.5624, multiply.5424)
  convolution.7555 = bf16[1,1,512,256]{3,2,1,0} convolution(get-tuple-element.2551, convert.7554), window={size=28x28}, dim_labels=f01b_i01o->01bf
  convert.7556 = f32[1,1,512,256]{3,2,1,0} convert(convolution.7555)
  add.7557 = f32[1,1,512,256]{3,2,1,0} add(multiply.5625, convert.7556)
  broadcast.5622 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5432 = f32[] constant(2)
  broadcast.5433 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5432), dimensions={}
  multiply.5434 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5433, parameter.134)
  multiply.5623 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5622, multiply.5434)
  convolution.7491 = bf16[3,3,256,256]{3,2,1,0} convolution(get-tuple-element.2633, convert.7490), window={size=14x14 pad=0_1x0_1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.7492 = f32[3,3,256,256]{3,2,1,0} convert(convolution.7491)
  add.7493 = f32[3,3,256,256]{3,2,1,0} add(multiply.5623, convert.7492)
  broadcast.5620 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5442 = f32[] constant(2)
  broadcast.5443 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5442), dimensions={}
  multiply.5444 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5443, parameter.135)
  multiply.5621 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5620, multiply.5444)
  convolution.7427 = bf16[1,1,256,1024]{3,2,1,0} convolution(get-tuple-element.2715, convert.7426), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7428 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.7427)
  add.7429 = f32[1,1,256,1024]{3,2,1,0} add(multiply.5621, convert.7428)
  broadcast.5618 = f32[1,1,512,1024]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5452 = f32[] constant(2)
  broadcast.5453 = f32[1,1,512,1024]{3,2,1,0} broadcast(constant.5452), dimensions={}
  multiply.5454 = f32[1,1,512,1024]{3,2,1,0} multiply(broadcast.5453, parameter.136)
  multiply.5619 = f32[1,1,512,1024]{3,2,1,0} multiply(broadcast.5618, multiply.5454)
  convolution.7616 = bf16[1,1,512,1024]{3,2,1,0} convolution(get-tuple-element.2551, convert.7615), window={size=14x14 pad=0_-1x0_-1 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.7617 = f32[1,1,512,1024]{3,2,1,0} convert(convolution.7616)
  add.7618 = f32[1,1,512,1024]{3,2,1,0} add(multiply.5619, convert.7617)
  constant.7561 = f32[] constant(0)
  reduce.7566 = f32[1024]{0} reduce(convert.7560, constant.7561), dimensions={0,1,2}, to_apply=primitive_computation_add.7562
  broadcast.7567 = f32[1024]{0} broadcast(reduce.7566), dimensions={0}
  broadcast.7568 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7567), dimensions={3}
  reshape.7569 = f32[1024]{0} reshape(broadcast.7568)
  multiply.7579 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7578, broadcast.2853)
  reshape.7580 = f32[1024]{0} reshape(multiply.7579)
  constant.7307 = f32[] constant(0)
  reduce.7312 = f32[256]{0} reduce(convert.7306, constant.7307), dimensions={0,1,2}, to_apply=primitive_computation_add.7308
  broadcast.7313 = f32[256]{0} broadcast(reduce.7312), dimensions={0}
  broadcast.7314 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7313), dimensions={3}
  reshape.7315 = f32[256]{0} reshape(broadcast.7314)
  multiply.7325 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7324, broadcast.2936)
  reshape.7326 = f32[256]{0} reshape(multiply.7325)
  constant.7243 = f32[] constant(0)
  reduce.7248 = f32[256]{0} reduce(convert.7242, constant.7243), dimensions={0,1,2}, to_apply=primitive_computation_add.7244
  broadcast.7249 = f32[256]{0} broadcast(reduce.7248), dimensions={0}
  broadcast.7250 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7249), dimensions={3}
  reshape.7251 = f32[256]{0} reshape(broadcast.7250)
  multiply.7261 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7260, broadcast.3018)
  reshape.7262 = f32[256]{0} reshape(multiply.7261)
  constant.7179 = f32[] constant(0)
  reduce.7184 = f32[1024]{0} reduce(convert.7178, constant.7179), dimensions={0,1,2}, to_apply=primitive_computation_add.7180
  broadcast.7185 = f32[1024]{0} broadcast(reduce.7184), dimensions={0}
  broadcast.7186 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.7185), dimensions={3}
  reshape.7187 = f32[1024]{0} reshape(broadcast.7186)
  multiply.7197 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7196, broadcast.3100)
  reshape.7198 = f32[1024]{0} reshape(multiply.7197)
  broadcast.5616 = f32[1,1,1024,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5462 = f32[] constant(2)
  broadcast.5463 = f32[1,1,1024,256]{3,2,1,0} broadcast(constant.5462), dimensions={}
  multiply.5464 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5463, parameter.145)
  multiply.5617 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5616, multiply.5464)
  convolution.7362 = bf16[1,1,1024,256]{3,2,1,0} convolution(get-tuple-element.2869, convert.7361), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7363 = f32[1,1,1024,256]{3,2,1,0} convert(convolution.7362)
  add.7364 = f32[1,1,1024,256]{3,2,1,0} add(multiply.5617, convert.7363)
  broadcast.5614 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5472 = f32[] constant(2)
  broadcast.5473 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5472), dimensions={}
  multiply.5474 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5473, parameter.146)
  multiply.5615 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5614, multiply.5474)
  convolution.7298 = bf16[3,3,256,256]{3,2,1,0} convolution(get-tuple-element.2951, convert.7297), window={size=14x14 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.7299 = f32[3,3,256,256]{3,2,1,0} convert(convolution.7298)
  add.7300 = f32[3,3,256,256]{3,2,1,0} add(multiply.5615, convert.7299)
  broadcast.5612 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5482 = f32[] constant(2)
  broadcast.5483 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5482), dimensions={}
  multiply.5484 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5483, parameter.147)
  multiply.5613 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5612, multiply.5484)
  convolution.7234 = bf16[1,1,256,1024]{3,2,1,0} convolution(get-tuple-element.3033, convert.7233), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7235 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.7234)
  add.7236 = f32[1,1,256,1024]{3,2,1,0} add(multiply.5613, convert.7235)
  constant.7114 = f32[] constant(0)
  reduce.7119 = f32[256]{0} reduce(convert.7113, constant.7114), dimensions={0,1,2}, to_apply=primitive_computation_add.7115
  broadcast.7120 = f32[256]{0} broadcast(reduce.7119), dimensions={0}
  broadcast.7121 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7120), dimensions={3}
  reshape.7122 = f32[256]{0} reshape(broadcast.7121)
  multiply.7132 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7131, broadcast.3183)
  reshape.7133 = f32[256]{0} reshape(multiply.7132)
  constant.7050 = f32[] constant(0)
  reduce.7055 = f32[256]{0} reduce(convert.7049, constant.7050), dimensions={0,1,2}, to_apply=primitive_computation_add.7051
  broadcast.7056 = f32[256]{0} broadcast(reduce.7055), dimensions={0}
  broadcast.7057 = f32[1,1,1,256]{3,2,1,0} broadcast(broadcast.7056), dimensions={3}
  reshape.7058 = f32[256]{0} reshape(broadcast.7057)
  multiply.7068 = f32[1,1,1,256]{3,2,1,0} multiply(broadcast.7067, broadcast.3265)
  reshape.7069 = f32[256]{0} reshape(multiply.7068)
  constant.6986 = f32[] constant(0)
  reduce.6991 = f32[1024]{0} reduce(convert.6985, constant.6986), dimensions={0,1,2}, to_apply=primitive_computation_add.6987
  broadcast.6992 = f32[1024]{0} broadcast(reduce.6991), dimensions={0}
  broadcast.6993 = f32[1,1,1,1024]{3,2,1,0} broadcast(broadcast.6992), dimensions={3}
  reshape.6994 = f32[1024]{0} reshape(broadcast.6993)
  multiply.7004 = f32[1,1,1,1024]{3,2,1,0} multiply(broadcast.7003, broadcast.3347)
  reshape.7005 = f32[1024]{0} reshape(multiply.7004)
  broadcast.5610 = f32[1,1,1024,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5492 = f32[] constant(2)
  broadcast.5493 = f32[1,1,1024,256]{3,2,1,0} broadcast(constant.5492), dimensions={}
  multiply.5494 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5493, parameter.154)
  multiply.5611 = f32[1,1,1024,256]{3,2,1,0} multiply(broadcast.5610, multiply.5494)
  convolution.7169 = bf16[1,1,1024,256]{3,2,1,0} convolution(get-tuple-element.3116, convert.7168), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7170 = f32[1,1,1024,256]{3,2,1,0} convert(convolution.7169)
  add.7171 = f32[1,1,1024,256]{3,2,1,0} add(multiply.5611, convert.7170)
  broadcast.5608 = f32[3,3,256,256]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5502 = f32[] constant(2)
  broadcast.5503 = f32[3,3,256,256]{3,2,1,0} broadcast(constant.5502), dimensions={}
  multiply.5504 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5503, parameter.155)
  multiply.5609 = f32[3,3,256,256]{3,2,1,0} multiply(broadcast.5608, multiply.5504)
  convolution.7105 = bf16[3,3,256,256]{3,2,1,0} convolution(get-tuple-element.3198, convert.7104), window={size=14x14 pad=1_1x1_1}, dim_labels=f01b_i01o->01bf
  convert.7106 = f32[3,3,256,256]{3,2,1,0} convert(convolution.7105)
  add.7107 = f32[3,3,256,256]{3,2,1,0} add(multiply.5609, convert.7106)
  broadcast.5606 = f32[1,1,256,1024]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5512 = f32[] constant(2)
  broadcast.5513 = f32[1,1,256,1024]{3,2,1,0} broadcast(constant.5512), dimensions={}
  multiply.5514 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5513, parameter.156)
  multiply.5607 = f32[1,1,256,1024]{3,2,1,0} multiply(broadcast.5606, multiply.5514)
  convolution.7041 = bf16[1,1,256,1024]{3,2,1,0} convolution(get-tuple-element.3280, convert.7040), window={size=14x14}, dim_labels=f01b_i01o->01bf
  convert.7042 = f32[1,1,256,1024]{3,2,1,0} convert(convolution.7041)
  add.7043 = f32[1,1,256,1024]{3,2,1,0} add(multiply.5607, convert.7042)
  constant.5737 = bf16[] constant(0)
  reduce.5742 = bf16[1000]{0} reduce(convert.5736, constant.5737), dimensions={0}, to_apply=primitive_computation_add__1.5738
  broadcast.5743 = bf16[1000]{0} broadcast(reduce.5742), dimensions={0}
  broadcast.5744 = bf16[1,1000]{1,0} broadcast(broadcast.5743), dimensions={1}
  constant.5745 = bf16[] constant(0)
  reduce.5750 = bf16[1000]{0} reduce(broadcast.5744, constant.5745), dimensions={0}, to_apply=primitive_computation_add__1.5746
  broadcast.5751 = bf16[1000]{0} broadcast(reduce.5750), dimensions={0}
  convert.5752 = f32[1000]{0} convert(broadcast.5751)
  broadcast.5604 = f32[2048,1000]{1,0} broadcast(multiply.5601), dimensions={}
  constant.5522 = f32[] constant(2)
  broadcast.5523 = f32[2048,1000]{1,0} broadcast(constant.5522), dimensions={}
  multiply.5524 = f32[2048,1000]{1,0} multiply(broadcast.5523, parameter.158)
  multiply.5605 = f32[2048,1000]{1,0} multiply(broadcast.5604, multiply.5524)
  dot.5753 = bf16[1000,2048]{1,0} dot(convert.5736, divide.4933), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  transpose.5754 = bf16[2048,1000]{0,1} transpose(dot.5753), dimensions={1,0}
  convert.5755 = f32[2048,1000]{0,1} convert(transpose.5754)
  add.5756 = f32[2048,1000]{1,0} add(multiply.5605, convert.5755)
  constant.675 = bf16[] constant(0)
  broadcast.676 = bf16[128,112,112,64]{3,2,1,0} broadcast(constant.675), dimensions={}
  compare.677 = pred[128,112,112,64]{3,2,1,0} compare(convert.668, broadcast.676), direction=GT
  reverse.9031 = bf16[1,1,64,64]{3,2,1,0} reverse(convert.686), dimensions={0,1}
  convolution.9032 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.9027, reverse.9031), window={size=1x1}, dim_labels=b01f_01oi->b01f
  reverse.9092 = bf16[1,1,64,256]{3,2,1,0} reverse(convert.921), dimensions={0,1}
  convolution.9093 = bf16[128,56,56,64]{3,2,1,0} convolution(convert.9088, reverse.9092), window={size=1x1}, dim_labels=b01f_01oi->b01f
  add.9094 = bf16[128,56,56,64]{3,2,1,0} add(convolution.9032, convolution.9093)
  constant.9095 = bf16[] constant(0)
  select-and-scatter.9104 = bf16[128,112,112,64]{3,2,1,0} select-and-scatter(get-tuple-element.674, add.9094, constant.9095), window={size=1x3x3x1 stride=1x2x2x1 pad=0_0x0_1x0_1x0_0}, select=primitive_computation_ge.9096, scatter=primitive_computation_add__1.9100
  constant.9105 = bf16[] constant(0)
  broadcast.9106 = bf16[128,112,112,64]{3,2,1,0} broadcast(constant.9105), dimensions={}
  select.9107 = bf16[128,112,112,64]{3,2,1,0} select(compare.677, select-and-scatter.9104, broadcast.9106)
  convert.9108 = f32[128,112,112,64]{3,2,1,0} convert(select.9107)
  constant.9109 = f32[] constant(0)
  reduce.9114 = f32[64]{0} reduce(convert.9108, constant.9109), dimensions={0,1,2}, to_apply=primitive_computation_add.9110
  broadcast.9115 = f32[64]{0} broadcast(reduce.9114), dimensions={0}
  broadcast.9116 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9115), dimensions={3}
  reshape.9117 = f32[64]{0} reshape(broadcast.9116)
  multiply.9118 = f32[128,112,112,64]{3,2,1,0} multiply(convert.9108, subtract.647)
  constant.9119 = f32[] constant(0)
  reduce.9124 = f32[64]{0} reduce(multiply.9118, constant.9119), dimensions={0,1,2}, to_apply=primitive_computation_add.9120
  broadcast.9125 = f32[64]{0} broadcast(reduce.9124), dimensions={0}
  broadcast.9126 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9125), dimensions={3}
  multiply.9127 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9126, broadcast.659)
  reshape.9128 = f32[64]{0} reshape(multiply.9127)
  broadcast.5602 = f32[7,7,3,64]{3,2,1,0} broadcast(multiply.5601), dimensions={}
  constant.5532 = f32[] constant(2)
  broadcast.5533 = f32[7,7,3,64]{3,2,1,0} broadcast(constant.5532), dimensions={}
  multiply.5534 = f32[7,7,3,64]{3,2,1,0} multiply(broadcast.5533, parameter.161)
  multiply.5603 = f32[7,7,3,64]{3,2,1,0} multiply(broadcast.5602, multiply.5534)
  multiply.9129 = f32[1,1,1,64]{3,2,1,0} multiply(broadcast.9126, reshape.658)
  constant.9130 = f32[] constant(0)
  reduce.9135 = f32[64]{0} reduce(multiply.9129, constant.9130), dimensions={0,1,2}, to_apply=primitive_computation_add.9131
  broadcast.9136 = f32[64]{0} broadcast(reduce.9135), dimensions={0}
  constant.655 = f32[] constant(-0.5)
  broadcast.656 = f32[64]{0} broadcast(constant.655), dimensions={}
  constant.652 = f32[] constant(-1.5)
  broadcast.653 = f32[64]{0} broadcast(constant.652), dimensions={}
  power.654 = f32[64]{0} power(add.650, broadcast.653)
  multiply.657 = f32[64]{0} multiply(broadcast.656, power.654)
  multiply.9137 = f32[64]{0} multiply(broadcast.9136, multiply.657)
  broadcast.9140 = f32[64]{0} broadcast(convert.622), dimensions={}
  divide.9141 = f32[64]{0} divide(multiply.9137, broadcast.9140)
  broadcast.9142 = f32[128,112,112,64]{3,2,1,0} broadcast(divide.9141), dimensions={3}
  constant.612 = f32[] constant(2)
  broadcast.613 = f32[128,112,112,64]{3,2,1,0} broadcast(constant.612), dimensions={}
  multiply.614 = f32[128,112,112,64]{3,2,1,0} multiply(broadcast.613, convert.600)
  multiply.9143 = f32[128,112,112,64]{3,2,1,0} multiply(broadcast.9142, multiply.614)
  reshape.9144 = f32[64]{0} reshape(multiply.660)
  broadcast.9145 = f32[128,112,112,64]{3,2,1,0} broadcast(reshape.9144), dimensions={3}
  multiply.9146 = f32[128,112,112,64]{3,2,1,0} multiply(convert.9108, broadcast.9145)
  add.9147 = f32[128,112,112,64]{3,2,1,0} add(multiply.9143, multiply.9146)
  negate.9138 = f32[64]{0} negate(multiply.9137)
  constant.626 = f32[] constant(2)
  broadcast.627 = f32[64]{0} broadcast(constant.626), dimensions={}
  multiply.628 = f32[64]{0} multiply(broadcast.627, divide.610)
  multiply.9139 = f32[64]{0} multiply(negate.9138, multiply.628)
  constant.9148 = f32[] constant(0)
  reduce.9153 = f32[64]{0} reduce(multiply.9146, constant.9148), dimensions={0,1,2}, to_apply=primitive_computation_add.9149
  broadcast.9154 = f32[64]{0} broadcast(reduce.9153), dimensions={0}
  broadcast.9155 = f32[1,1,1,64]{3,2,1,0} broadcast(broadcast.9154), dimensions={3}
  negate.9156 = f32[1,1,1,64]{3,2,1,0} negate(broadcast.9155)
  reshape.9157 = f32[64]{0} reshape(negate.9156)
  add.9158 = f32[64]{0} add(multiply.9139, reshape.9157)
  broadcast.9159 = f32[64]{0} broadcast(convert.608), dimensions={}
  divide.9160 = f32[64]{0} divide(add.9158, broadcast.9159)
  broadcast.9161 = f32[128,112,112,64]{3,2,1,0} broadcast(divide.9160), dimensions={3}
  add.9162 = f32[128,112,112,64]{3,2,1,0} add(add.9147, broadcast.9161)
  convert.9163 = bf16[128,112,112,64]{3,2,1,0} convert(add.9162)
  convolution.9164 = bf16[7,7,3,64]{3,2,1,0} convolution(convert.597, convert.9163), window={size=112x112 pad=3_2x3_2 rhs_dilate=2x2}, dim_labels=f01b_i01o->01bf
  convert.9165 = f32[7,7,3,64]{3,2,1,0} convert(convolution.9164)
  add.9166 = f32[7,7,3,64]{3,2,1,0} add(multiply.5603, convert.9165)
  ROOT tuple.9167 = (f32[], f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[2048]{0}, f32[2048]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[64]{0}, f32[64]{0}, f32[128,1000]{1,0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[1,1,64,64]{3,2,1,0}, f32[3,3,64,64]{3,2,1,0}, f32[1,1,64,256]{3,2,1,0}, f32[1,1,64,256]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[1,1,256,64]{3,2,1,0}, f32[3,3,64,64]{3,2,1,0}, f32[1,1,64,256]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,1024,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,1024,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,1024,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[1,1,1024,512]{3,2,1,0}, f32[3,3,512,512]{3,2,1,0}, f32[1,1,512,2048]{3,2,1,0}, f32[1,1,1024,2048]{3,2,1,0}, f32[2048]{0}, f32[2048]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[1,1,2048,512]{3,2,1,0}, f32[3,3,512,512]{3,2,1,0}, f32[1,1,512,2048]{3,2,1,0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[512]{0}, f32[2048]{0}, f32[2048]{0}, f32[1,1,2048,512]{3,2,1,0}, f32[3,3,512,512]{3,2,1,0}, f32[1,1,512,2048]{3,2,1,0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[64]{0}, f32[256]{0}, f32[256]{0}, f32[1,1,256,64]{3,2,1,0}, f32[3,3,64,64]{3,2,1,0}, f32[1,1,64,256]{3,2,1,0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[1,1,256,128]{3,2,1,0}, f32[3,3,128,128]{3,2,1,0}, f32[1,1,128,512]{3,2,1,0}, f32[1,1,256,512]{3,2,1,0}, f32[512]{0}, f32[512]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[1,1,512,128]{3,2,1,0}, f32[3,3,128,128]{3,2,1,0}, f32[1,1,128,512]{3,2,1,0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[1,1,512,128]{3,2,1,0}, f32[3,3,128,128]{3,2,1,0}, f32[1,1,128,512]{3,2,1,0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[128]{0}, f32[512]{0}, f32[512]{0}, f32[1,1,512,128]{3,2,1,0}, f32[3,3,128,128]{3,2,1,0}, f32[1,1,128,512]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,512,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[1,1,512,1024]{3,2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,1024,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[256]{0}, f32[1024]{0}, f32[1024]{0}, f32[1,1,1024,256]{3,2,1,0}, f32[3,3,256,256]{3,2,1,0}, f32[1,1,256,1024]{3,2,1,0}, f32[1000]{0}, f32[2048,1000]{1,0}, f32[64]{0}, f32[64]{0}, f32[7,7,3,64]{3,2,1,0}) tuple(add.5598, add.724, add.731, add.806, add.813, add.888, add.895, add.959, add.966, add.1042, add.1049, add.1124, add.1131, add.1206, add.1213, add.3407, add.3414, add.3489, add.3496, add.3571, add.3578, add.3654, add.3661, add.3736, add.3743, add.3818, add.3825, add.3901, add.3908, add.3983, add.3990, add.4065, add.4072, add.4148, add.4155, add.4230, add.4237, add.4312, add.4319, add.4383, add.4390, add.4466, add.4473, add.4548, add.4555, add.4630, add.4637, add.4713, add.4720, add.4795, add.4802, add.4877, add.4884, add.1289, add.1296, add.1371, add.1378, add.1453, add.1460, add.1536, add.1543, add.1618, add.1625, add.1700, add.1707, add.1771, add.1778, add.1854, add.1861, add.1936, add.1943, add.2018, add.2025, add.2101, add.2108, add.2183, add.2190, add.2265, add.2272, add.2348, add.2355, add.2430, add.2437, add.2512, add.2519, add.2595, add.2602, add.2677, add.2684, add.2759, add.2766, add.2830, add.2837, add.2913, add.2920, add.2995, add.3002, add.3077, add.3084, add.3160, add.3167, add.3242, add.3249, add.3324, add.3331, add.636, add.643, subtract.4977, reshape.8981, reshape.8992, reshape.8917, reshape.8928, reshape.8853, reshape.8864, add.9030, add.8966, add.8902, add.9091, reshape.9042, reshape.9053, reshape.8788, reshape.8799, reshape.8724, reshape.8735, reshape.8660, reshape.8671, add.8837, add.8773, add.8709, reshape.6929, reshape.6940, reshape.6865, reshape.6876, reshape.6801, reshape.6812, add.6978, add.6914, add.6850, reshape.6736, reshape.6747, reshape.6672, reshape.6683, reshape.6608, reshape.6619, add.6785, add.6721, add.6657, reshape.6543, reshape.6554, reshape.6479, reshape.6490, reshape.6415, reshape.6426, add.6592, add.6528, add.6464, reshape.6289, reshape.6300, reshape.6225, reshape.6236, reshape.6161, reshape.6172, add.6338, add.6274, add.6210, add.6399, reshape.6350, reshape.6361, reshape.6096, reshape.6107, reshape.6032, reshape.6043, reshape.5968, reshape.5979, add.6145, add.6081, add.6017, reshape.5903, reshape.5914, reshape.5839, reshape.5850, reshape.5775, reshape.5786, add.5952, add.5888, add.5824, reshape.8595, reshape.8606, reshape.8531, reshape.8542, reshape.8467, reshape.8478, add.8644, add.8580, add.8516, reshape.8341, reshape.8352, reshape.8277, reshape.8288, reshape.8213, reshape.8224, add.8390, add.8326, add.8262, add.8451, reshape.8402, reshape.8413, reshape.8148, reshape.8159, reshape.8084, reshape.8095, reshape.8020, reshape.8031, add.8197, add.8133, add.8069, reshape.7955, reshape.7966, reshape.7891, reshape.7902, reshape.7827, reshape.7838, add.8004, add.7940, add.7876, reshape.7762, reshape.7773, reshape.7698, reshape.7709, reshape.7634, reshape.7645, add.7811, add.7747, add.7683, reshape.7508, reshape.7519, reshape.7444, reshape.7455, reshape.7380, reshape.7391, add.7557, add.7493, add.7429, add.7618, reshape.7569, reshape.7580, reshape.7315, reshape.7326, reshape.7251, reshape.7262, reshape.7187, reshape.7198, add.7364, add.7300, add.7236, reshape.7122, reshape.7133, reshape.7058, reshape.7069, reshape.6994, reshape.7005, add.7171, add.7107, add.7043, convert.5752, add.5756, reshape.9117, reshape.9128, add.9166)
}


